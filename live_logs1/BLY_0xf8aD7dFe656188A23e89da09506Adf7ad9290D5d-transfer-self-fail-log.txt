This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 01:00:43,238 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 01:00:43,239 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 01:00:43,253 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 01:00:43,253 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 01:00:43,254 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 01:00:43,255 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 01:00:43,256 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 01:00:43,258 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 01:00:43,259 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 01:00:43,259 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 01:00:43,260 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 01:00:43,260 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 01:00:43,261 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 01:00:43,262 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 01:00:43,263 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 01:00:43,264 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 01:00:43,265 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 01:00:43,266 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 01:00:43,268 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 01:00:43,269 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 01:00:43,270 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 01:00:43,271 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 01:00:43,271 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 01:00:43,271 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 01:00:43,272 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 01:00:43,272 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 01:00:43,273 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 01:00:43,273 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 01:00:43,273 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 01:00:43,274 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 01:00:43,274 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 01:00:43,275 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 01:00:43,275 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 01:00:43,276 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 01:00:43,276 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 01:00:43,277 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 01:00:43,277 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 01:00:43,277 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 01:00:43,278 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 01:00:43,278 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 01:00:43,278 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 01:00:43,286 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 01:00:43,286 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 01:00:43,287 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 01:00:43,287 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 01:00:43,288 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 01:00:43,288 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 01:00:43,288 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 01:00:43,288 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 01:00:43,288 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 01:00:43,288 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 01:00:43,288 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 01:00:43,288 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 01:00:43,288 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 01:00:43,288 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 01:00:43,289 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 01:00:43,289 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 01:00:43,289 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 01:00:43,289 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 01:00:43,289 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 01:00:43,289 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 01:00:43,289 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 01:00:43,289 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 01:00:43,289 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 01:00:43,289 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 01:00:43,290 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 01:00:43,290 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 01:00:43,313 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 01:00:43,324 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 01:00:43,327 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 01:00:43,328 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 01:00:43,329 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 01:00:43,329 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self-fail.bpl
[2020-11-25 01:00:43,330 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self-fail.bpl'
[2020-11-25 01:00:43,466 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 01:00:43,467 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 01:00:43,467 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 01:00:43,467 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 01:00:43,467 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 01:00:43,484 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:00:43" (1/1) ...
[2020-11-25 01:00:43,486 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:00:43" (1/1) ...
[2020-11-25 01:00:43,534 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:00:43" (1/1) ...
[2020-11-25 01:00:43,535 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:00:43" (1/1) ...
[2020-11-25 01:00:43,574 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:00:43" (1/1) ...
[2020-11-25 01:00:43,600 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:00:43" (1/1) ...
[2020-11-25 01:00:43,617 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:00:43" (1/1) ...
[2020-11-25 01:00:43,639 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 01:00:43,640 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 01:00:43,640 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 01:00:43,642 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 01:00:43,646 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:00:43" (1/1) ...
[2020-11-25 01:00:43,674 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(BLY.transfer(to, value), msg.sender == to && value > _balances_HxERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][msg.sender] >= 0 &&  _balances_HxERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BLY.transfer)))
[2020-11-25 01:00:43,680 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(BLY.transfer(to, value), msg.sender == to && value > _balances_HxERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][msg.sender] >= 0 &&  _balances_HxERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BLY.transfer)))
[2020-11-25 01:00:43,688 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(BLY.transfer(to, value), msg.sender == to && value > _balances_HxERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][msg.sender] >= 0 &&  _balances_HxERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BLY.transfer)))
[2020-11-25 01:00:43,698 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s1288 && value_s1288>_balances_HxERC20[this][msg.sender] ) && value_s1288>=0 ) && value_s1288<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_HxERC20[this][to_s1288]>=0 ) && _balances_HxERC20[this][to_s1288]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_HxERC20[this][msg.sender]>=0 ) && _balances_HxERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>],IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]],BinaryExpression[COMPGT,IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 01:00:43,705 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(BLY.transfer(to, value), msg.sender == to && value > _balances_HxERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][msg.sender] >= 0 &&  _balances_HxERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BLY.transfer)))
[2020-11-25 01:00:43,705 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_BLY0) ==> ( <>AP(fail_transfer_BLY0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 01:00:43,729 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:00:43 PropertyContainer
[2020-11-25 01:00:43,729 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 01:00:43,730 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 01:00:43,730 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 01:00:43,730 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 01:00:43,731 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:00:43" (1/2) ...
[2020-11-25 01:00:43,731 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 01:00:43,731 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 01:00:43,760 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:00:43" (2/2) ...
[2020-11-25 01:00:43,760 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 01:00:43,760 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 01:00:43,761 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 01:00:43,761 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 01:00:43,761 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:00:43" (1/2) ...
[2020-11-25 01:00:43,816 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 01:00:43,816 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 01:00:43,816 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY.LockInfo_ctor__success
[2020-11-25 01:00:43,816 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath_NoBaseCtor__success
[2020-11-25 01:00:43,817 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath
[2020-11-25 01:00:43,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath
[2020-11-25 01:00:43,817 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_HxSafeMath__success
[2020-11-25 01:00:43,817 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_HxSafeMath__success
[2020-11-25 01:00:43,817 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_HxSafeMath__success
[2020-11-25 01:00:43,817 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_HxSafeMath__success
[2020-11-25 01:00:43,817 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_HxSafeMath__success
[2020-11-25 01:00:43,817 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 01:00:43,817 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 01:00:43,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 01:00:43,818 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 01:00:43,818 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 01:00:43,818 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 01:00:43,818 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable_NoBaseCtor__success
[2020-11-25 01:00:43,819 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable
[2020-11-25 01:00:43,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable
[2020-11-25 01:00:43,819 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable
[2020-11-25 01:00:43,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable
[2020-11-25 01:00:43,819 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable
[2020-11-25 01:00:43,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable
[2020-11-25 01:00:43,819 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable
[2020-11-25 01:00:43,819 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable
[2020-11-25 01:00:43,819 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable
[2020-11-25 01:00:43,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable
[2020-11-25 01:00:43,820 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable
[2020-11-25 01:00:43,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable
[2020-11-25 01:00:43,820 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 01:00:43,820 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 01:00:43,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 01:00:43,820 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 01:00:43,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 01:00:43,820 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 01:00:43,820 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 01:00:43,821 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole
[2020-11-25 01:00:43,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole
[2020-11-25 01:00:43,821 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 01:00:43,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 01:00:43,821 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 01:00:43,821 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 01:00:43,821 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 01:00:43,821 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 01:00:43,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 01:00:43,821 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 01:00:43,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 01:00:43,822 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 01:00:43,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 01:00:43,822 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 01:00:43,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 01:00:43,822 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 01:00:43,822 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 01:00:43,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 01:00:43,822 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 01:00:43,822 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 01:00:43,822 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 01:00:43,823 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 01:00:43,823 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 01:00:43,823 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 01:00:43,823 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20_NoBaseCtor__success
[2020-11-25 01:00:43,823 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20
[2020-11-25 01:00:43,823 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20
[2020-11-25 01:00:43,823 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20
[2020-11-25 01:00:43,823 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20
[2020-11-25 01:00:43,823 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20
[2020-11-25 01:00:43,823 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20
[2020-11-25 01:00:43,824 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20
[2020-11-25 01:00:43,824 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20
[2020-11-25 01:00:43,824 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20
[2020-11-25 01:00:43,824 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20
[2020-11-25 01:00:43,824 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20
[2020-11-25 01:00:43,824 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20
[2020-11-25 01:00:43,824 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20
[2020-11-25 01:00:43,824 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20
[2020-11-25 01:00:43,824 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20
[2020-11-25 01:00:43,824 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20
[2020-11-25 01:00:43,825 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20
[2020-11-25 01:00:43,825 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20
[2020-11-25 01:00:43,825 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_HxERC20__success
[2020-11-25 01:00:43,825 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_HxERC20__success
[2020-11-25 01:00:43,825 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_HxERC20__success
[2020-11-25 01:00:43,825 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_HxERC20__success
[2020-11-25 01:00:43,825 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 01:00:43,825 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 01:00:43,825 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 01:00:43,825 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 01:00:43,826 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 01:00:43,826 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 01:00:43,826 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 01:00:43,826 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 01:00:43,826 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 01:00:43,826 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 01:00:43,826 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 01:00:43,826 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 01:00:43,826 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 01:00:43,826 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 01:00:43,826 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 01:00:43,827 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 01:00:43,827 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY_NoBaseCtor__success
[2020-11-25 01:00:43,827 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY
[2020-11-25 01:00:43,827 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY
[2020-11-25 01:00:43,827 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY
[2020-11-25 01:00:43,827 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY
[2020-11-25 01:00:43,827 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY
[2020-11-25 01:00:43,827 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY
[2020-11-25 01:00:43,827 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY
[2020-11-25 01:00:43,827 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY
[2020-11-25 01:00:43,828 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY
[2020-11-25 01:00:43,828 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY
[2020-11-25 01:00:43,828 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY
[2020-11-25 01:00:43,828 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY
[2020-11-25 01:00:43,828 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY
[2020-11-25 01:00:43,828 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY
[2020-11-25 01:00:43,828 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY
[2020-11-25 01:00:43,828 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY
[2020-11-25 01:00:43,828 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY
[2020-11-25 01:00:43,828 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY
[2020-11-25 01:00:43,828 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY
[2020-11-25 01:00:43,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY
[2020-11-25 01:00:43,829 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_BLY__success
[2020-11-25 01:00:43,829 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_BLY__success
[2020-11-25 01:00:43,829 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_BLY__success
[2020-11-25 01:00:43,829 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_BLY__success
[2020-11-25 01:00:43,829 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BLY__success
[2020-11-25 01:00:43,829 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY
[2020-11-25 01:00:43,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY
[2020-11-25 01:00:43,829 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY
[2020-11-25 01:00:43,829 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY
[2020-11-25 01:00:43,830 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY
[2020-11-25 01:00:43,830 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY
[2020-11-25 01:00:43,830 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 01:00:43,830 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 01:00:43,830 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 01:00:43,830 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 01:00:43,830 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__success
[2020-11-25 01:00:43,830 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 01:00:43,830 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 01:00:43,831 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 01:00:43,831 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__success
[2020-11-25 01:00:43,831 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxSafeMath
[2020-11-25 01:00:43,831 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxSafeMath
[2020-11-25 01:00:43,831 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 01:00:43,831 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 01:00:43,831 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxOwnable
[2020-11-25 01:00:43,831 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxOwnable
[2020-11-25 01:00:43,831 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 01:00:43,831 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 01:00:43,832 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 01:00:43,832 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 01:00:43,832 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 01:00:43,832 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 01:00:43,832 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxERC20
[2020-11-25 01:00:43,832 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxERC20
[2020-11-25 01:00:43,832 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 01:00:43,832 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 01:00:43,832 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 01:00:43,832 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 01:00:43,833 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BLY
[2020-11-25 01:00:43,833 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 01:00:43,833 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 01:00:43,833 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 01:00:43,833 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY.LockInfo_ctor__fail
[2020-11-25 01:00:43,833 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath_NoBaseCtor__fail
[2020-11-25 01:00:43,833 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath__success
[2020-11-25 01:00:43,833 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath__fail
[2020-11-25 01:00:43,833 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:00:43,833 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:00:43,833 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:00:43,834 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:00:43,834 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:00:43,834 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 01:00:43,834 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 01:00:43,834 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 01:00:43,834 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 01:00:43,834 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 01:00:43,834 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 01:00:43,834 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable_NoBaseCtor__fail
[2020-11-25 01:00:43,834 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable__success
[2020-11-25 01:00:43,834 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable__fail
[2020-11-25 01:00:43,835 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable__success
[2020-11-25 01:00:43,835 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable__fail
[2020-11-25 01:00:43,835 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable__success
[2020-11-25 01:00:43,835 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable__fail
[2020-11-25 01:00:43,835 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable__success
[2020-11-25 01:00:43,835 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable__fail
[2020-11-25 01:00:43,835 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable__success
[2020-11-25 01:00:43,835 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable__fail
[2020-11-25 01:00:43,835 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable__success
[2020-11-25 01:00:43,835 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable__fail
[2020-11-25 01:00:43,835 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 01:00:43,835 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 01:00:43,836 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 01:00:43,836 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 01:00:43,836 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 01:00:43,836 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 01:00:43,836 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 01:00:43,836 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__success
[2020-11-25 01:00:43,836 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__fail
[2020-11-25 01:00:43,836 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 01:00:43,836 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 01:00:43,836 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 01:00:43,836 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 01:00:43,837 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 01:00:43,837 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 01:00:43,837 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 01:00:43,837 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 01:00:43,837 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 01:00:43,837 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 01:00:43,837 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 01:00:43,837 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 01:00:43,837 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 01:00:43,837 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 01:00:43,837 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 01:00:43,837 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 01:00:43,838 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20_NoBaseCtor__fail
[2020-11-25 01:00:43,838 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20__success
[2020-11-25 01:00:43,838 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20__fail
[2020-11-25 01:00:43,838 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20__success
[2020-11-25 01:00:43,838 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20__fail
[2020-11-25 01:00:43,838 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20__success
[2020-11-25 01:00:43,838 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20__fail
[2020-11-25 01:00:43,838 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20__success
[2020-11-25 01:00:43,838 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20__fail
[2020-11-25 01:00:43,838 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20__success
[2020-11-25 01:00:43,838 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20__fail
[2020-11-25 01:00:43,838 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20__success
[2020-11-25 01:00:43,839 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20__fail
[2020-11-25 01:00:43,839 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20__success
[2020-11-25 01:00:43,839 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20__fail
[2020-11-25 01:00:43,839 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20__success
[2020-11-25 01:00:43,839 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 01:00:43,839 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20__success
[2020-11-25 01:00:43,839 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 01:00:43,839 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_HxERC20__fail
[2020-11-25 01:00:43,839 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_HxERC20__fail
[2020-11-25 01:00:43,839 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_HxERC20__fail
[2020-11-25 01:00:43,839 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_HxERC20__fail
[2020-11-25 01:00:43,840 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 01:00:43,840 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 01:00:43,840 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 01:00:43,840 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 01:00:43,840 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 01:00:43,840 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 01:00:43,840 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 01:00:43,840 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 01:00:43,840 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 01:00:43,840 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 01:00:43,840 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 01:00:43,840 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 01:00:43,841 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 01:00:43,841 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 01:00:43,841 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 01:00:43,841 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 01:00:43,841 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY_NoBaseCtor__fail
[2020-11-25 01:00:43,841 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY__success
[2020-11-25 01:00:43,841 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY__fail
[2020-11-25 01:00:43,841 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY__success
[2020-11-25 01:00:43,841 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY__fail
[2020-11-25 01:00:43,841 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY__success
[2020-11-25 01:00:43,841 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY__fail
[2020-11-25 01:00:43,842 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY__success
[2020-11-25 01:00:43,842 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY__fail
[2020-11-25 01:00:43,842 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY__success
[2020-11-25 01:00:43,842 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY__fail
[2020-11-25 01:00:43,842 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY__success
[2020-11-25 01:00:43,842 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY__fail
[2020-11-25 01:00:43,842 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY__success
[2020-11-25 01:00:43,842 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY__fail
[2020-11-25 01:00:43,842 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY__success
[2020-11-25 01:00:43,842 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY__fail
[2020-11-25 01:00:43,842 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY__success
[2020-11-25 01:00:43,843 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY__fail
[2020-11-25 01:00:43,843 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY__success
[2020-11-25 01:00:43,843 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY__fail
[2020-11-25 01:00:43,843 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_BLY__fail
[2020-11-25 01:00:43,843 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_BLY__fail
[2020-11-25 01:00:43,843 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_BLY__fail
[2020-11-25 01:00:43,844 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_BLY__fail
[2020-11-25 01:00:43,844 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BLY__fail
[2020-11-25 01:00:43,844 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY__success
[2020-11-25 01:00:43,844 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY__fail
[2020-11-25 01:00:43,844 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY__success
[2020-11-25 01:00:43,844 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY__fail
[2020-11-25 01:00:43,844 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY__success
[2020-11-25 01:00:43,844 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY__fail
[2020-11-25 01:00:43,844 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 01:00:43,844 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 01:00:43,845 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 01:00:43,845 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 01:00:43,845 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__fail
[2020-11-25 01:00:43,845 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 01:00:43,845 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 01:00:43,845 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 01:00:43,845 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__fail
[2020-11-25 01:00:43,845 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 01:00:43,845 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 01:00:43,845 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 01:00:43,845 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 01:00:43,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY.LockInfo_ctor__fail
[2020-11-25 01:00:43,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY.LockInfo_ctor__success
[2020-11-25 01:00:43,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath_NoBaseCtor__fail
[2020-11-25 01:00:43,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath_NoBaseCtor__success
[2020-11-25 01:00:43,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath__fail
[2020-11-25 01:00:43,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath__success
[2020-11-25 01:00:43,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:00:43,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_HxSafeMath__success
[2020-11-25 01:00:43,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:00:43,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_HxSafeMath__success
[2020-11-25 01:00:43,846 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:00:43,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_HxSafeMath__success
[2020-11-25 01:00:43,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:00:43,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_HxSafeMath__success
[2020-11-25 01:00:43,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:00:43,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_HxSafeMath__success
[2020-11-25 01:00:43,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 01:00:43,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 01:00:43,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 01:00:43,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 01:00:43,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 01:00:43,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 01:00:43,847 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 01:00:43,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 01:00:43,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 01:00:43,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 01:00:43,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable_NoBaseCtor__fail
[2020-11-25 01:00:43,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable_NoBaseCtor__success
[2020-11-25 01:00:43,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable__fail
[2020-11-25 01:00:43,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable__success
[2020-11-25 01:00:43,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable__fail
[2020-11-25 01:00:43,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable__success
[2020-11-25 01:00:43,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable__fail
[2020-11-25 01:00:43,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable__success
[2020-11-25 01:00:43,848 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable__fail
[2020-11-25 01:00:43,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable__success
[2020-11-25 01:00:43,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable__fail
[2020-11-25 01:00:43,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable__success
[2020-11-25 01:00:43,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable__fail
[2020-11-25 01:00:43,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable__success
[2020-11-25 01:00:43,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 01:00:43,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 01:00:43,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 01:00:43,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 01:00:43,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 01:00:43,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 01:00:43,849 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 01:00:43,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 01:00:43,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__fail
[2020-11-25 01:00:43,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__success
[2020-11-25 01:00:43,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 01:00:43,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 01:00:43,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 01:00:43,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 01:00:43,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 01:00:43,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 01:00:43,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 01:00:43,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 01:00:43,850 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 01:00:43,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 01:00:43,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 01:00:43,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 01:00:43,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 01:00:43,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 01:00:43,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 01:00:43,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 01:00:43,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 01:00:43,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 01:00:43,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 01:00:43,851 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 01:00:43,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20_NoBaseCtor__fail
[2020-11-25 01:00:43,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20_NoBaseCtor__success
[2020-11-25 01:00:43,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20__fail
[2020-11-25 01:00:43,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20__success
[2020-11-25 01:00:43,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20__fail
[2020-11-25 01:00:43,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20__success
[2020-11-25 01:00:43,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20__fail
[2020-11-25 01:00:43,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20__success
[2020-11-25 01:00:43,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20__fail
[2020-11-25 01:00:43,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20__success
[2020-11-25 01:00:43,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20__fail
[2020-11-25 01:00:43,852 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20__success
[2020-11-25 01:00:43,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20__fail
[2020-11-25 01:00:43,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20__success
[2020-11-25 01:00:43,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20__fail
[2020-11-25 01:00:43,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20__success
[2020-11-25 01:00:43,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 01:00:43,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20__success
[2020-11-25 01:00:43,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 01:00:43,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20__success
[2020-11-25 01:00:43,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_HxERC20__fail
[2020-11-25 01:00:43,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_HxERC20__success
[2020-11-25 01:00:43,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_HxERC20__fail
[2020-11-25 01:00:43,853 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_HxERC20__success
[2020-11-25 01:00:43,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_HxERC20__fail
[2020-11-25 01:00:43,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_HxERC20__success
[2020-11-25 01:00:43,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_HxERC20__fail
[2020-11-25 01:00:43,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_HxERC20__success
[2020-11-25 01:00:43,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 01:00:43,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 01:00:43,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 01:00:43,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 01:00:43,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 01:00:43,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 01:00:43,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 01:00:43,854 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 01:00:43,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 01:00:43,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 01:00:43,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 01:00:43,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 01:00:43,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 01:00:43,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 01:00:43,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 01:00:43,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 01:00:43,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 01:00:43,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 01:00:43,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY_NoBaseCtor__fail
[2020-11-25 01:00:43,855 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY_NoBaseCtor__success
[2020-11-25 01:00:43,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY__fail
[2020-11-25 01:00:43,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY__success
[2020-11-25 01:00:43,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY__fail
[2020-11-25 01:00:43,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY__success
[2020-11-25 01:00:43,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY__fail
[2020-11-25 01:00:43,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY__success
[2020-11-25 01:00:43,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY__fail
[2020-11-25 01:00:43,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY__success
[2020-11-25 01:00:43,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY__fail
[2020-11-25 01:00:43,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY__success
[2020-11-25 01:00:43,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY__fail
[2020-11-25 01:00:43,856 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY__success
[2020-11-25 01:00:43,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY__fail
[2020-11-25 01:00:43,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY__success
[2020-11-25 01:00:43,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY__fail
[2020-11-25 01:00:43,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY__success
[2020-11-25 01:00:43,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY__fail
[2020-11-25 01:00:43,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY__success
[2020-11-25 01:00:43,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY__fail
[2020-11-25 01:00:43,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY__success
[2020-11-25 01:00:43,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_BLY__fail
[2020-11-25 01:00:43,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_BLY__success
[2020-11-25 01:00:43,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_BLY__fail
[2020-11-25 01:00:43,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_BLY__success
[2020-11-25 01:00:43,857 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_BLY__fail
[2020-11-25 01:00:43,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_BLY__success
[2020-11-25 01:00:43,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_BLY__fail
[2020-11-25 01:00:43,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_BLY__success
[2020-11-25 01:00:43,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BLY__fail
[2020-11-25 01:00:43,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BLY__success
[2020-11-25 01:00:43,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY__fail
[2020-11-25 01:00:43,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY__success
[2020-11-25 01:00:43,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY__fail
[2020-11-25 01:00:43,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY__success
[2020-11-25 01:00:43,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY__fail
[2020-11-25 01:00:43,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY__success
[2020-11-25 01:00:43,858 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 01:00:43,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 01:00:43,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 01:00:43,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 01:00:43,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 01:00:43,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 01:00:43,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 01:00:43,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 01:00:43,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__fail
[2020-11-25 01:00:43,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__success
[2020-11-25 01:00:43,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 01:00:43,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 01:00:43,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 01:00:43,859 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 01:00:43,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 01:00:43,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 01:00:43,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__fail
[2020-11-25 01:00:43,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__success
[2020-11-25 01:00:43,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxSafeMath
[2020-11-25 01:00:43,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxSafeMath
[2020-11-25 01:00:43,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 01:00:43,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 01:00:43,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxOwnable
[2020-11-25 01:00:43,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxOwnable
[2020-11-25 01:00:43,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 01:00:43,860 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 01:00:43,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 01:00:43,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 01:00:43,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 01:00:43,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 01:00:43,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxERC20
[2020-11-25 01:00:43,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxERC20
[2020-11-25 01:00:43,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 01:00:43,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 01:00:43,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 01:00:43,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 01:00:43,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BLY
[2020-11-25 01:00:43,861 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 01:00:43,861 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 01:00:43,862 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 01:00:44,354 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:00:44,354 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:00:45,232 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 01:00:45,232 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 01:00:45,234 INFO  L202        PluginConnector]: Adding new model BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:00:45 BoogieIcfgContainer
[2020-11-25 01:00:45,234 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:00:43" (2/2) ...
[2020-11-25 01:00:45,234 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 01:00:45,235 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@531ab5af and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:00:45, skipping insertion in model container
[2020-11-25 01:00:45,235 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 01:00:45,235 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 01:00:45,235 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 01:00:45,236 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 01:00:45,236 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:00:43" (1/3) ...
[2020-11-25 01:00:45,236 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@5601e48e and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:00:45, skipping insertion in model container
[2020-11-25 01:00:45,236 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:00:43" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 01:00:45,268 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:00:45 NWAContainer
[2020-11-25 01:00:45,268 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 01:00:45,268 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 01:00:45,268 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 01:00:45,268 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 01:00:45,269 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:00:45" (3/4) ...
[2020-11-25 01:00:45,270 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@48427bf3 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:00:45, skipping insertion in model container
[2020-11-25 01:00:45,270 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:00:45" (4/4) ...
[2020-11-25 01:00:45,272 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 01:00:45,278 INFO  L110   BuchiProductObserver]: Initial RCFG 4614 locations, 6376 edges
[2020-11-25 01:00:45,278 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 01:00:45,295 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 01:00:48,664 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 01:00:48,678 INFO  L110   BuchiProductObserver]: BuchiProgram size 11452 locations, 20742 edges
[2020-11-25 01:00:48,678 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:00:48 BoogieIcfgContainer
[2020-11-25 01:00:48,678 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 01:00:48,679 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 01:00:48,679 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 01:00:48,680 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 01:00:48,680 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:00:48" (1/1) ...
[2020-11-25 01:00:48,869 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 01:00:48,873 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 01:00:48,889 INFO  L313           BlockEncoder]: Initial Icfg 11452 locations, 20742 edges
[2020-11-25 01:00:48,890 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 01:00:48,890 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 01:00:48,890 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 01:00:48,891 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 01:00:48,911 INFO  L70    emoveInfeasibleEdges]: Removed 219 edges and 25 locations because of local infeasibility
[2020-11-25 01:00:48,929 INFO  L70        RemoveSinkStates]: Removed 306 edges and 169 locations by removing sink states
[2020-11-25 01:00:48,951 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 01:00:48,958 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 01:00:48,965 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 01:00:48,965 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 01:00:48,971 INFO  L313           BlockEncoder]: Encoded RCFG 11204 locations, 20137 edges
[2020-11-25 01:00:48,971 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:00:48 BasicIcfg
[2020-11-25 01:00:48,971 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 01:00:48,971 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 01:00:48,971 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 01:00:48,973 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 01:00:48,973 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:00:48,973 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:00:43" (1/6) ...
[2020-11-25 01:00:48,975 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@77c3b97b and model type BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:00:48, skipping insertion in model container
[2020-11-25 01:00:48,975 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:00:48,975 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:00:43" (2/6) ...
[2020-11-25 01:00:48,975 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@77c3b97b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:00:48, skipping insertion in model container
[2020-11-25 01:00:48,975 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:00:48,975 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:00:45" (3/6) ...
[2020-11-25 01:00:48,975 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@77c3b97b and model type BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:00:48, skipping insertion in model container
[2020-11-25 01:00:48,975 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:00:48,975 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:00:45" (4/6) ...
[2020-11-25 01:00:48,976 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@77c3b97b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:00:48, skipping insertion in model container
[2020-11-25 01:00:48,976 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:00:48,976 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:00:48" (5/6) ...
[2020-11-25 01:00:48,976 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@77c3b97b and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:00:48, skipping insertion in model container
[2020-11-25 01:00:48,976 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:00:48,976 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:00:48" (6/6) ...
[2020-11-25 01:00:48,977 INFO  L404   chiAutomizerObserver]: Analyzing ICFG BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self-fail.bpl_BEv2
[2020-11-25 01:00:49,003 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 01:00:49,004 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 01:00:49,004 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 01:00:49,004 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 01:00:49,004 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 01:00:49,004 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 01:00:49,004 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 01:00:49,004 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 01:00:49,004 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 01:00:49,077 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11204 states.
[2020-11-25 01:00:49,194 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:00:49,194 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:00:49,194 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:00:49,202 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:00:49,202 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:00:49,202 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 01:00:49,202 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11204 states.
[2020-11-25 01:00:49,238 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:00:49,239 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:00:49,239 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:00:49,240 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:00:49,240 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:00:49,254 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:00:49,255 INFO  L82        PathProgramCache]: Analyzing trace with hash -1380915776, now seen corresponding path program 1 times
[2020-11-25 01:00:49,259 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:00:49,276 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:00:49,306 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:00:49,308 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:00:49,308 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:00:49,778 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:00:49,793 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:00:49,794 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:00:49,795 INFO  L87              Difference]: Start difference. First operand 11204 states. Second operand 3 states.
[2020-11-25 01:00:50,254 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:00:50,254 INFO  L93              Difference]: Finished difference Result 6858 states and 8009 transitions.
[2020-11-25 01:00:50,254 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:00:50,255 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6858 states and 8009 transitions.
[2020-11-25 01:00:50,296 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:00:50,338 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6858 states to 6858 states and 8009 transitions.
[2020-11-25 01:00:50,339 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 01:00:50,342 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1288
[2020-11-25 01:00:50,342 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6858 states and 8009 transitions.
[2020-11-25 01:00:50,356 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:00:50,356 INFO  L728         BuchiCegarLoop]: Abstraction has 6858 states and 8009 transitions.
[2020-11-25 01:00:50,383 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6858 states and 8009 transitions.
[2020-11-25 01:00:50,467 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6858 to 6858.
[2020-11-25 01:00:50,467 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6858 states.
[2020-11-25 01:00:50,478 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6858 states to 6858 states and 8009 transitions.
[2020-11-25 01:00:50,478 INFO  L751         BuchiCegarLoop]: Abstraction has 6858 states and 8009 transitions.
[2020-11-25 01:00:50,478 INFO  L631         BuchiCegarLoop]: Abstraction has 6858 states and 8009 transitions.
[2020-11-25 01:00:50,478 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 01:00:50,479 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6858 states and 8009 transitions.
[2020-11-25 01:00:50,489 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:00:50,489 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:00:50,489 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:00:50,491 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:00:50,491 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:00:50,495 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:00:50,496 INFO  L82        PathProgramCache]: Analyzing trace with hash 202376281, now seen corresponding path program 1 times
[2020-11-25 01:00:50,497 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:00:50,508 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:00:50,544 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:00:50,544 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:00:50,544 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:00:50,545 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:00:50,546 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:00:50,546 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:00:50,546 INFO  L87              Difference]: Start difference. First operand 6858 states and 8009 transitions. cyclomatic complexity: 1160 Second operand 3 states.
[2020-11-25 01:00:50,730 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:00:50,730 INFO  L93              Difference]: Finished difference Result 8739 states and 10190 transitions.
[2020-11-25 01:00:50,730 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:00:50,730 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8739 states and 10190 transitions.
[2020-11-25 01:00:50,753 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:00:50,788 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8739 states to 8739 states and 10190 transitions.
[2020-11-25 01:00:50,788 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1762
[2020-11-25 01:00:50,789 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1762
[2020-11-25 01:00:50,789 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8739 states and 10190 transitions.
[2020-11-25 01:00:50,799 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:00:50,800 INFO  L728         BuchiCegarLoop]: Abstraction has 8739 states and 10190 transitions.
[2020-11-25 01:00:50,808 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8739 states and 10190 transitions.
[2020-11-25 01:00:50,887 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8739 to 7907.
[2020-11-25 01:00:50,887 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7907 states.
[2020-11-25 01:00:50,896 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7907 states to 7907 states and 9189 transitions.
[2020-11-25 01:00:50,897 INFO  L751         BuchiCegarLoop]: Abstraction has 7907 states and 9189 transitions.
[2020-11-25 01:00:50,897 INFO  L631         BuchiCegarLoop]: Abstraction has 7907 states and 9189 transitions.
[2020-11-25 01:00:50,897 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 01:00:50,897 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7907 states and 9189 transitions.
[2020-11-25 01:00:50,907 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:00:50,907 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:00:50,907 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:00:50,909 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:00:50,909 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND TRUE   !(account_s164 != null)
[L5739]               revert := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND TRUE   revert
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND TRUE   revert
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND TRUE   revert
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:00:50,913 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:00:50,914 INFO  L82        PathProgramCache]: Analyzing trace with hash 1763611976, now seen corresponding path program 1 times
[2020-11-25 01:00:50,915 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:00:50,926 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:00:50,991 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 01:00:50,991 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:00:50,991 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 01:00:50,992 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:00:50,992 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 01:00:50,992 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 01:00:50,992 INFO  L87              Difference]: Start difference. First operand 7907 states and 9189 transitions. cyclomatic complexity: 1291 Second operand 9 states.
[2020-11-25 01:00:51,125 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:00:51,125 INFO  L93              Difference]: Finished difference Result 7953 states and 9264 transitions.
[2020-11-25 01:00:51,125 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 01:00:51,125 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7953 states and 9264 transitions.
[2020-11-25 01:00:51,145 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:00:51,177 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7953 states to 7953 states and 9264 transitions.
[2020-11-25 01:00:51,177 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1626
[2020-11-25 01:00:51,179 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1626
[2020-11-25 01:00:51,179 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7953 states and 9264 transitions.
[2020-11-25 01:00:51,187 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:00:51,187 INFO  L728         BuchiCegarLoop]: Abstraction has 7953 states and 9264 transitions.
[2020-11-25 01:00:51,197 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7953 states and 9264 transitions.
[2020-11-25 01:00:51,265 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7953 to 7944.
[2020-11-25 01:00:51,265 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7944 states.
[2020-11-25 01:00:51,275 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7944 states to 7944 states and 9248 transitions.
[2020-11-25 01:00:51,275 INFO  L751         BuchiCegarLoop]: Abstraction has 7944 states and 9248 transitions.
[2020-11-25 01:00:51,275 INFO  L631         BuchiCegarLoop]: Abstraction has 7944 states and 9248 transitions.
[2020-11-25 01:00:51,275 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 01:00:51,276 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7944 states and 9248 transitions.
[2020-11-25 01:00:51,286 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:00:51,286 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:00:51,286 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:00:51,289 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:00:51,289 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND TRUE   !(account_s218 != null)
[L5810]               revert := true;
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND TRUE   revert
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND TRUE   revert
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND TRUE   revert
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND TRUE   revert
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:00:51,293 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:00:51,293 INFO  L82        PathProgramCache]: Analyzing trace with hash -653464290, now seen corresponding path program 1 times
[2020-11-25 01:00:51,294 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:00:51,303 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:00:51,374 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 01:00:51,374 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:00:51,374 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 01:00:51,375 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:00:51,375 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 01:00:51,375 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 01:00:51,375 INFO  L87              Difference]: Start difference. First operand 7944 states and 9248 transitions. cyclomatic complexity: 1313 Second operand 10 states.
[2020-11-25 01:00:51,572 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:00:51,572 INFO  L93              Difference]: Finished difference Result 8004 states and 9339 transitions.
[2020-11-25 01:00:51,572 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 01:00:51,572 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8004 states and 9339 transitions.
[2020-11-25 01:00:51,601 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:00:51,640 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8004 states to 8004 states and 9339 transitions.
[2020-11-25 01:00:51,640 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1633
[2020-11-25 01:00:51,642 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1633
[2020-11-25 01:00:51,642 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8004 states and 9339 transitions.
[2020-11-25 01:00:51,651 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:00:51,651 INFO  L728         BuchiCegarLoop]: Abstraction has 8004 states and 9339 transitions.
[2020-11-25 01:00:51,661 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8004 states and 9339 transitions.
[2020-11-25 01:00:51,747 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8004 to 7951.
[2020-11-25 01:00:51,747 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7951 states.
[2020-11-25 01:00:51,761 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7951 states to 7951 states and 9256 transitions.
[2020-11-25 01:00:51,761 INFO  L751         BuchiCegarLoop]: Abstraction has 7951 states and 9256 transitions.
[2020-11-25 01:00:51,761 INFO  L631         BuchiCegarLoop]: Abstraction has 7951 states and 9256 transitions.
[2020-11-25 01:00:51,761 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 01:00:51,761 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7951 states and 9256 transitions.
[2020-11-25 01:00:51,787 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:00:51,787 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:00:51,787 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:00:51,791 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:00:51,791 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND TRUE   !!__var_2
[L5747]               revert := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND TRUE   revert
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND TRUE   revert
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND TRUE   revert
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:00:51,798 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:00:51,799 INFO  L82        PathProgramCache]: Analyzing trace with hash -2059254049, now seen corresponding path program 1 times
[2020-11-25 01:00:51,800 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:00:51,813 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:00:51,866 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 51 trivial. 0 not checked.
[2020-11-25 01:00:51,866 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:00:51,866 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:00:51,867 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:00:51,867 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:00:51,867 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:00:51,867 INFO  L87              Difference]: Start difference. First operand 7951 states and 9256 transitions. cyclomatic complexity: 1314 Second operand 3 states.
[2020-11-25 01:00:52,019 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:00:52,020 INFO  L93              Difference]: Finished difference Result 8768 states and 9916 transitions.
[2020-11-25 01:00:52,020 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:00:52,020 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8768 states and 9916 transitions.
[2020-11-25 01:00:52,038 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:00:52,059 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8768 states to 8090 states and 9112 transitions.
[2020-11-25 01:00:52,059 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1564
[2020-11-25 01:00:52,060 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1605
[2020-11-25 01:00:52,060 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8090 states and 9112 transitions.
[2020-11-25 01:00:52,065 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:00:52,065 INFO  L728         BuchiCegarLoop]: Abstraction has 8090 states and 9112 transitions.
[2020-11-25 01:00:52,072 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8090 states and 9112 transitions.
[2020-11-25 01:00:52,118 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8090 to 7427.
[2020-11-25 01:00:52,118 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7427 states.
[2020-11-25 01:00:52,125 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7427 states to 7427 states and 8280 transitions.
[2020-11-25 01:00:52,125 INFO  L751         BuchiCegarLoop]: Abstraction has 7427 states and 8280 transitions.
[2020-11-25 01:00:52,125 INFO  L631         BuchiCegarLoop]: Abstraction has 7427 states and 8280 transitions.
[2020-11-25 01:00:52,125 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 01:00:52,125 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7427 states and 8280 transitions.
[2020-11-25 01:00:52,133 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:00:52,133 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:00:52,133 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:00:52,138 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:00:52,138 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND FALSE  !(DType[this] == BLY)
[L7084]   COND TRUE   DType[this] == ERC20Pausable
[L7085]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6572]   COND TRUE   DType[this] == HxERC20
[L6573]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6573]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6574]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7085]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7086]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND FALSE  !(DType[this] == BLY)
[L7084]   COND TRUE   DType[this] == ERC20Pausable
[L7085]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6572]   COND TRUE   DType[this] == HxERC20
[L6573]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6573]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6574]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7085]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7086]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:00:52,145 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:00:52,145 INFO  L82        PathProgramCache]: Analyzing trace with hash -1226299362, now seen corresponding path program 1 times
[2020-11-25 01:00:52,146 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:00:52,160 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:00:52,340 INFO  L134       CoverageAnalysis]: Checked inductivity of 936 backedges. 0 proven. 27 refuted. 0 times theorem prover too weak. 909 trivial. 0 not checked.
[2020-11-25 01:00:52,341 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:00:52,341 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 01:00:52,341 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:00:52,342 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:00:52,342 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:00:52,342 INFO  L87              Difference]: Start difference. First operand 7427 states and 8280 transitions. cyclomatic complexity: 862 Second operand 7 states.
[2020-11-25 01:00:52,487 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:00:52,488 INFO  L93              Difference]: Finished difference Result 7450 states and 8307 transitions.
[2020-11-25 01:00:52,488 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:00:52,488 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7450 states and 8307 transitions.
[2020-11-25 01:00:52,502 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:00:52,518 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7450 states to 7433 states and 8287 transitions.
[2020-11-25 01:00:52,519 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1538
[2020-11-25 01:00:52,519 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1538
[2020-11-25 01:00:52,519 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7433 states and 8287 transitions.
[2020-11-25 01:00:52,524 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:00:52,524 INFO  L728         BuchiCegarLoop]: Abstraction has 7433 states and 8287 transitions.
[2020-11-25 01:00:52,530 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7433 states and 8287 transitions.
[2020-11-25 01:00:52,568 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7433 to 7433.
[2020-11-25 01:00:52,568 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7433 states.
[2020-11-25 01:00:52,576 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7433 states to 7433 states and 8287 transitions.
[2020-11-25 01:00:52,576 INFO  L751         BuchiCegarLoop]: Abstraction has 7433 states and 8287 transitions.
[2020-11-25 01:00:52,576 INFO  L631         BuchiCegarLoop]: Abstraction has 7433 states and 8287 transitions.
[2020-11-25 01:00:52,576 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 01:00:52,576 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7433 states and 8287 transitions.
[2020-11-25 01:00:52,583 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:00:52,583 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:00:52,584 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:00:52,586 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:00:52,586 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:00:52,592 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:00:52,592 INFO  L82        PathProgramCache]: Analyzing trace with hash -288925008, now seen corresponding path program 1 times
[2020-11-25 01:00:52,593 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:00:52,606 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:00:52,776 INFO  L134       CoverageAnalysis]: Checked inductivity of 942 backedges. 0 proven. 27 refuted. 0 times theorem prover too weak. 915 trivial. 0 not checked.
[2020-11-25 01:00:52,776 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:00:52,777 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 01:00:52,777 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:00:52,777 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:00:52,777 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:00:52,777 INFO  L87              Difference]: Start difference. First operand 7433 states and 8287 transitions. cyclomatic complexity: 863 Second operand 7 states.
[2020-11-25 01:00:52,898 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:00:52,898 INFO  L93              Difference]: Finished difference Result 7456 states and 8314 transitions.
[2020-11-25 01:00:52,898 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:00:52,898 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7456 states and 8314 transitions.
[2020-11-25 01:00:52,912 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:00:52,927 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7456 states to 7439 states and 8294 transitions.
[2020-11-25 01:00:52,927 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1538
[2020-11-25 01:00:52,928 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1538
[2020-11-25 01:00:52,928 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7439 states and 8294 transitions.
[2020-11-25 01:00:52,933 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:00:52,933 INFO  L728         BuchiCegarLoop]: Abstraction has 7439 states and 8294 transitions.
[2020-11-25 01:00:52,938 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7439 states and 8294 transitions.
[2020-11-25 01:00:52,978 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7439 to 7433.
[2020-11-25 01:00:52,978 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7433 states.
[2020-11-25 01:00:52,987 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7433 states to 7433 states and 8287 transitions.
[2020-11-25 01:00:52,987 INFO  L751         BuchiCegarLoop]: Abstraction has 7433 states and 8287 transitions.
[2020-11-25 01:00:52,987 INFO  L631         BuchiCegarLoop]: Abstraction has 7433 states and 8287 transitions.
[2020-11-25 01:00:52,987 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 01:00:52,987 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7433 states and 8287 transitions.
[2020-11-25 01:00:52,997 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:00:52,997 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:00:52,997 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:00:53,000 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:00:53,000 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND FALSE  !(DType[this] == BLY)
[L7084]   COND TRUE   DType[this] == ERC20Pausable
[L7085]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7085]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7086]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND FALSE  !(DType[this] == BLY)
[L7084]   COND TRUE   DType[this] == ERC20Pausable
[L7085]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7085]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7086]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:00:53,006 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:00:53,006 INFO  L82        PathProgramCache]: Analyzing trace with hash -854835578, now seen corresponding path program 1 times
[2020-11-25 01:00:53,007 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:00:53,022 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:00:53,244 INFO  L134       CoverageAnalysis]: Checked inductivity of 924 backedges. 0 proven. 21 refuted. 0 times theorem prover too weak. 903 trivial. 0 not checked.
[2020-11-25 01:00:53,244 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:00:53,244 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 01:00:53,245 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:00:53,245 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:00:53,245 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:00:53,245 INFO  L87              Difference]: Start difference. First operand 7433 states and 8287 transitions. cyclomatic complexity: 863 Second operand 7 states.
[2020-11-25 01:00:53,354 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:00:53,354 INFO  L93              Difference]: Finished difference Result 7456 states and 8314 transitions.
[2020-11-25 01:00:53,354 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:00:53,354 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7456 states and 8314 transitions.
[2020-11-25 01:00:53,365 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:00:53,377 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7456 states to 7439 states and 8294 transitions.
[2020-11-25 01:00:53,377 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1538
[2020-11-25 01:00:53,378 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1538
[2020-11-25 01:00:53,378 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7439 states and 8294 transitions.
[2020-11-25 01:00:53,381 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:00:53,381 INFO  L728         BuchiCegarLoop]: Abstraction has 7439 states and 8294 transitions.
[2020-11-25 01:00:53,387 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7439 states and 8294 transitions.
[2020-11-25 01:00:53,420 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7439 to 7433.
[2020-11-25 01:00:53,420 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7433 states.
[2020-11-25 01:00:53,426 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7433 states to 7433 states and 8287 transitions.
[2020-11-25 01:00:53,427 INFO  L751         BuchiCegarLoop]: Abstraction has 7433 states and 8287 transitions.
[2020-11-25 01:00:53,427 INFO  L631         BuchiCegarLoop]: Abstraction has 7433 states and 8287 transitions.
[2020-11-25 01:00:53,427 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 01:00:53,427 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7433 states and 8287 transitions.
[2020-11-25 01:00:53,434 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:00:53,434 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:00:53,434 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:00:53,436 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:00:53,436 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6572]   COND TRUE   DType[this] == HxERC20
[L6573]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6573]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6574]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6572]   COND TRUE   DType[this] == HxERC20
[L6573]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6573]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6574]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:00:53,442 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:00:53,442 INFO  L82        PathProgramCache]: Analyzing trace with hash 222647, now seen corresponding path program 1 times
[2020-11-25 01:00:53,443 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:00:53,466 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:00:53,664 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 01:00:53,664 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:00:53,664 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 01:00:53,664 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:00:53,664 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:00:53,665 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:00:53,665 INFO  L87              Difference]: Start difference. First operand 7433 states and 8287 transitions. cyclomatic complexity: 863 Second operand 8 states.
[2020-11-25 01:00:53,811 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:00:53,811 INFO  L93              Difference]: Finished difference Result 7477 states and 8332 transitions.
[2020-11-25 01:00:53,811 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:00:53,811 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7477 states and 8332 transitions.
[2020-11-25 01:00:53,824 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:00:53,836 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7477 states to 7423 states and 8273 transitions.
[2020-11-25 01:00:53,836 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1536
[2020-11-25 01:00:53,837 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1536
[2020-11-25 01:00:53,837 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7423 states and 8273 transitions.
[2020-11-25 01:00:53,841 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:00:53,841 INFO  L728         BuchiCegarLoop]: Abstraction has 7423 states and 8273 transitions.
[2020-11-25 01:00:53,846 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7423 states and 8273 transitions.
[2020-11-25 01:00:53,878 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7423 to 7423.
[2020-11-25 01:00:53,878 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7423 states.
[2020-11-25 01:00:53,885 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7423 states to 7423 states and 8273 transitions.
[2020-11-25 01:00:53,885 INFO  L751         BuchiCegarLoop]: Abstraction has 7423 states and 8273 transitions.
[2020-11-25 01:00:53,885 INFO  L631         BuchiCegarLoop]: Abstraction has 7423 states and 8273 transitions.
[2020-11-25 01:00:53,885 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 01:00:53,885 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7423 states and 8273 transitions.
[2020-11-25 01:00:53,892 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:00:53,892 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:00:53,892 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:00:53,894 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:00:53,894 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND FALSE  !(DType[this] == BLY)
[L7084]   COND TRUE   DType[this] == ERC20Pausable
[L7085]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7085]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7086]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND FALSE  !(DType[this] == BLY)
[L7084]   COND TRUE   DType[this] == ERC20Pausable
[L7085]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7085]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7086]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:00:53,900 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:00:53,900 INFO  L82        PathProgramCache]: Analyzing trace with hash 474213420, now seen corresponding path program 1 times
[2020-11-25 01:00:53,901 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:00:53,915 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:00:54,095 INFO  L134       CoverageAnalysis]: Checked inductivity of 924 backedges. 6 proven. 25 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 01:00:54,095 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:00:54,095 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 01:00:54,095 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:00:54,095 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:00:54,095 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:00:54,096 INFO  L87              Difference]: Start difference. First operand 7423 states and 8273 transitions. cyclomatic complexity: 859 Second operand 8 states.
[2020-11-25 01:00:54,212 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:00:54,212 INFO  L93              Difference]: Finished difference Result 7450 states and 8304 transitions.
[2020-11-25 01:00:54,212 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:00:54,212 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7450 states and 8304 transitions.
[2020-11-25 01:00:54,223 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:00:54,234 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7450 states to 7436 states and 8288 transitions.
[2020-11-25 01:00:54,234 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1536
[2020-11-25 01:00:54,234 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1536
[2020-11-25 01:00:54,234 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7436 states and 8288 transitions.
[2020-11-25 01:00:54,238 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:00:54,238 INFO  L728         BuchiCegarLoop]: Abstraction has 7436 states and 8288 transitions.
[2020-11-25 01:00:54,244 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7436 states and 8288 transitions.
[2020-11-25 01:00:54,273 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7436 to 7436.
[2020-11-25 01:00:54,273 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7436 states.
[2020-11-25 01:00:54,280 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7436 states to 7436 states and 8288 transitions.
[2020-11-25 01:00:54,280 INFO  L751         BuchiCegarLoop]: Abstraction has 7436 states and 8288 transitions.
[2020-11-25 01:00:54,280 INFO  L631         BuchiCegarLoop]: Abstraction has 7436 states and 8288 transitions.
[2020-11-25 01:00:54,280 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 01:00:54,280 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7436 states and 8288 transitions.
[2020-11-25 01:00:54,287 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:00:54,287 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:00:54,287 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:00:54,288 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:00:54,288 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND TRUE   __exception
[L3017]               __tmp__Balance := Balance;
[L3018]               __tmp__DType := DType;
[L3019]               __tmp__Alloc := Alloc;
[L3020]               __tmp__balance_ADDR := balance_ADDR;
[L3021]               __tmp__M_Ref_bool := M_Ref_bool;
[L3022]               __tmp__sum := sum;
[L3023]               __tmp__M_Ref_int := M_Ref_int;
[L3024]               __tmp__sum__balances0 := sum__balances0;
[L3025]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3026]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3027]               __tmp__sum__allowed1 := sum__allowed1;
[L3028]               __tmp__M_int_Ref := M_int_Ref;
[L3029]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3030]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3031]               __tmp__Length := Length;
[L3032]               __tmp__now := now;
[L3033]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3034]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3035]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3036]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3037]               __tmp___paused_Pausable := _paused_Pausable;
[L3038]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3039]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3040]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3041]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3042]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3043]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3044]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3045]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3046]               __tmp__implementation_BLY := implementation_BLY;
[L3047]               __tmp__timelockList_BLY := timelockList_BLY;
[L3048]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3049]   CALL        call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L7306]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7307]   COND FALSE  !(revert)
[L7310]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7176]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L7176]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7149]               assume msgsender_MSG != null;
[L7150]               __tmp__Balance[this] := 0;
[L7151]               __tmp___name_ERC20Detailed[this] := -1412326813;
[L7152]               __tmp___symbol_ERC20Detailed[this] := -1412326813;
[L7153]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7155]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7156]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7157]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7180]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7181]   COND FALSE  !(revert)
[L7310]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7311]   COND FALSE  !(revert)
[L7314]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6478]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6478]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   COND FALSE  !(revert)
[L6482]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6453]               assume msgsender_MSG != null;
[L6454]               __tmp__Balance[this] := 0;
[L6455]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6456]               __tmp__sum__balances0[this] := 0;
[L6457]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6458]               __tmp__sum__allowed1[this] := 0;
[L6459]               __tmp___totalSupply_HxERC20[this] := 0;
[L6482]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6483]   COND FALSE  !(revert)
[L7314]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7318]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L7318]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7319]   COND FALSE  !(revert)
[L7322]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5987]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5992]   COND TRUE   __tmp__DType[this] == PauserRole
[L5993]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5993]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5994]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L7322]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7323]   COND FALSE  !(revert)
[L7326]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6322]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5987]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5992]   COND TRUE   __tmp__DType[this] == PauserRole
[L5993]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5993]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5994]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L6326]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6303]               assume msgsender_MSG != null;
[L6304]               __tmp__Balance[this] := 0;
[L6305]               __tmp___paused_Pausable[this] := false;
[L6307]               __tmp___paused_Pausable[this] := false;
[L6330]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L7326]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7327]   COND FALSE  !(revert)
[L7330]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6992]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]   COND FALSE  !(revert)
[L6996]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6478]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6478]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   COND FALSE  !(revert)
[L6482]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6453]               assume msgsender_MSG != null;
[L6454]               __tmp__Balance[this] := 0;
[L6455]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6456]               __tmp__sum__balances0[this] := 0;
[L6457]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6458]               __tmp__sum__allowed1[this] := 0;
[L6459]               __tmp___totalSupply_HxERC20[this] := 0;
[L6482]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6483]   COND FALSE  !(revert)
[L6996]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L7000]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7004]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5987]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5992]   COND TRUE   __tmp__DType[this] == PauserRole
[L5993]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5993]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5994]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L7004]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7005]   COND FALSE  !(revert)
[L7008]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6322]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5987]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5992]   COND TRUE   __tmp__DType[this] == PauserRole
[L5993]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5993]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5994]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L6326]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6303]               assume msgsender_MSG != null;
[L6304]               __tmp__Balance[this] := 0;
[L6305]               __tmp___paused_Pausable[this] := false;
[L6307]               __tmp___paused_Pausable[this] := false;
[L6330]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L7008]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               __tmp__Balance[this] := 0;
[L7012]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7013]   COND FALSE  !(revert)
[L7330]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7331]   COND FALSE  !(revert)
[L7334]   CALL        call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7239]               assume msgsender_MSG != null;
[L7240]               __tmp__Balance[this] := 0;
[L7241]               __tmp__implementation_BLY[this] := null;
[L7243]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7243]   RET         call __var_36 := FreshRefGenerator__fail();
[L7244]   COND FALSE  !(revert)
[L7247]               __tmp__timelockList_BLY[this] := __var_36;
[L7249]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]] := zeroRefboolArr();
[L7250]               __tmp__frozenAccount_BLY[this] := zeroRefboolArr();
[L7253]               assume __tmp__Balance[msgsender_MSG] >= msgvalue_MSG;
[L7254]               __tmp__Balance[msgsender_MSG] := __tmp__Balance[msgsender_MSG] - msgvalue_MSG;
[L7255]               __tmp__Balance[this] := __tmp__Balance[this] + msgvalue_MSG;
[L7257]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7258]   COND TRUE   __tmp__DType[this] == BLY
[L7259]   CALL        call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6820]               __var_23 := null;
[L6821]   COND FALSE  !(!(account_s946 != null))
[L6825]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND FALSE  !(!(c_s106 >= a_s106))
[L5645]               __ret_0_ := c_s106;
[L6825]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L6826]   COND FALSE  !(revert)
[L6829]               __tmp___totalSupply_HxERC20[this] := __var_24;
[L6830]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND FALSE  !(!(c_s106 >= a_s106))
[L5645]               __ret_0_ := c_s106;
[L6830]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L6831]   COND FALSE  !(revert)
[L6834]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][account_s946];
[L6835]               __tmp___balances_HxERC20[this][account_s946] := __var_25;
[L6836]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][account_s946];
[L7259]   RET         call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7260]   COND FALSE  !(revert)
[L7334]   RET         call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7335]   COND FALSE  !(revert)
[L3049]   RET         call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L3050]               assume revert || gas < 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND FALSE  !(DType[this] == BLY)
[L7084]   COND TRUE   DType[this] == ERC20Pausable
[L7085]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7085]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7086]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND FALSE  !(DType[this] == BLY)
[L7084]   COND TRUE   DType[this] == ERC20Pausable
[L7085]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7085]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7086]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:00:54,294 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:00:54,294 INFO  L82        PathProgramCache]: Analyzing trace with hash -811454029, now seen corresponding path program 1 times
[2020-11-25 01:00:54,295 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:00:54,308 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:00:54,549 INFO  L134       CoverageAnalysis]: Checked inductivity of 912 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 876 trivial. 0 not checked.
[2020-11-25 01:00:54,549 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:00:54,549 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 01:00:54,549 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:00:54,550 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:00:54,550 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:00:54,550 INFO  L87              Difference]: Start difference. First operand 7436 states and 8288 transitions. cyclomatic complexity: 861 Second operand 8 states.
[2020-11-25 01:00:55,809 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:00:55,810 INFO  L93              Difference]: Finished difference Result 10327 states and 11680 transitions.
[2020-11-25 01:00:55,810 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 01:00:55,810 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10327 states and 11680 transitions.
[2020-11-25 01:00:55,831 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:00:55,850 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10327 states to 10310 states and 11660 transitions.
[2020-11-25 01:00:55,851 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2123
[2020-11-25 01:00:55,851 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2123
[2020-11-25 01:00:55,852 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10310 states and 11660 transitions.
[2020-11-25 01:00:55,858 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:00:55,858 INFO  L728         BuchiCegarLoop]: Abstraction has 10310 states and 11660 transitions.
[2020-11-25 01:00:55,864 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10310 states and 11660 transitions.
[2020-11-25 01:00:55,911 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10310 to 10188.
[2020-11-25 01:00:55,911 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10188 states.
[2020-11-25 01:00:55,922 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10188 states to 10188 states and 11538 transitions.
[2020-11-25 01:00:55,922 INFO  L751         BuchiCegarLoop]: Abstraction has 10188 states and 11538 transitions.
[2020-11-25 01:00:55,922 INFO  L631         BuchiCegarLoop]: Abstraction has 10188 states and 11538 transitions.
[2020-11-25 01:00:55,922 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 01:00:55,922 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10188 states and 11538 transitions.
[2020-11-25 01:00:55,931 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:00:55,931 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:00:55,932 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:00:55,934 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:00:55,934 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:00:55,939 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:00:55,939 INFO  L82        PathProgramCache]: Analyzing trace with hash 194045911, now seen corresponding path program 1 times
[2020-11-25 01:00:55,939 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:00:55,953 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:00:56,149 INFO  L134       CoverageAnalysis]: Checked inductivity of 913 backedges. 6 proven. 22 refuted. 0 times theorem prover too weak. 885 trivial. 0 not checked.
[2020-11-25 01:00:56,150 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:00:56,150 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 01:00:56,150 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:00:56,150 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:00:56,150 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:00:56,150 INFO  L87              Difference]: Start difference. First operand 10188 states and 11538 transitions. cyclomatic complexity: 1365 Second operand 8 states.
[2020-11-25 01:00:56,282 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:00:56,283 INFO  L93              Difference]: Finished difference Result 10215 states and 11569 transitions.
[2020-11-25 01:00:56,283 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:00:56,283 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10215 states and 11569 transitions.
[2020-11-25 01:00:56,299 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:00:56,317 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10215 states to 10201 states and 11553 transitions.
[2020-11-25 01:00:56,317 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2099
[2020-11-25 01:00:56,318 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2099
[2020-11-25 01:00:56,318 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10201 states and 11553 transitions.
[2020-11-25 01:00:56,324 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:00:56,324 INFO  L728         BuchiCegarLoop]: Abstraction has 10201 states and 11553 transitions.
[2020-11-25 01:00:56,329 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10201 states and 11553 transitions.
[2020-11-25 01:00:56,369 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10201 to 10188.
[2020-11-25 01:00:56,369 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10188 states.
[2020-11-25 01:00:56,379 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10188 states to 10188 states and 11538 transitions.
[2020-11-25 01:00:56,379 INFO  L751         BuchiCegarLoop]: Abstraction has 10188 states and 11538 transitions.
[2020-11-25 01:00:56,379 INFO  L631         BuchiCegarLoop]: Abstraction has 10188 states and 11538 transitions.
[2020-11-25 01:00:56,379 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 01:00:56,380 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10188 states and 11538 transitions.
[2020-11-25 01:00:56,389 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:00:56,389 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:00:56,389 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:00:56,390 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:00:56,390 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND FALSE  !(DType[this] == BLY)
[L7084]   COND TRUE   DType[this] == ERC20Pausable
[L7085]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7085]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7086]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND FALSE  !(DType[this] == BLY)
[L7084]   COND TRUE   DType[this] == ERC20Pausable
[L7085]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7085]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7086]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:00:56,395 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:00:56,395 INFO  L82        PathProgramCache]: Analyzing trace with hash -1321577150, now seen corresponding path program 1 times
[2020-11-25 01:00:56,396 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:00:56,415 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:00:56,575 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 01:00:56,575 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:00:56,575 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 01:00:56,576 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:00:56,576 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:00:56,576 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:00:56,576 INFO  L87              Difference]: Start difference. First operand 10188 states and 11538 transitions. cyclomatic complexity: 1365 Second operand 7 states.
[2020-11-25 01:00:56,689 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:00:56,689 INFO  L93              Difference]: Finished difference Result 10248 states and 11596 transitions.
[2020-11-25 01:00:56,689 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:00:56,689 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10248 states and 11596 transitions.
[2020-11-25 01:00:56,705 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:00:56,723 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10248 states to 10168 states and 11510 transitions.
[2020-11-25 01:00:56,723 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2095
[2020-11-25 01:00:56,724 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2095
[2020-11-25 01:00:56,724 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10168 states and 11510 transitions.
[2020-11-25 01:00:56,729 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:00:56,729 INFO  L728         BuchiCegarLoop]: Abstraction has 10168 states and 11510 transitions.
[2020-11-25 01:00:56,734 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10168 states and 11510 transitions.
[2020-11-25 01:00:56,774 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10168 to 10168.
[2020-11-25 01:00:56,774 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10168 states.
[2020-11-25 01:00:56,785 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10168 states to 10168 states and 11510 transitions.
[2020-11-25 01:00:56,785 INFO  L751         BuchiCegarLoop]: Abstraction has 10168 states and 11510 transitions.
[2020-11-25 01:00:56,785 INFO  L631         BuchiCegarLoop]: Abstraction has 10168 states and 11510 transitions.
[2020-11-25 01:00:56,785 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 01:00:56,785 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10168 states and 11510 transitions.
[2020-11-25 01:00:56,794 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:00:56,794 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:00:56,794 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:00:56,796 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:00:56,796 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND TRUE   __exception
[L3017]               __tmp__Balance := Balance;
[L3018]               __tmp__DType := DType;
[L3019]               __tmp__Alloc := Alloc;
[L3020]               __tmp__balance_ADDR := balance_ADDR;
[L3021]               __tmp__M_Ref_bool := M_Ref_bool;
[L3022]               __tmp__sum := sum;
[L3023]               __tmp__M_Ref_int := M_Ref_int;
[L3024]               __tmp__sum__balances0 := sum__balances0;
[L3025]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3026]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3027]               __tmp__sum__allowed1 := sum__allowed1;
[L3028]               __tmp__M_int_Ref := M_int_Ref;
[L3029]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3030]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3031]               __tmp__Length := Length;
[L3032]               __tmp__now := now;
[L3033]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3034]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3035]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3036]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3037]               __tmp___paused_Pausable := _paused_Pausable;
[L3038]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3039]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3040]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3041]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3042]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3043]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3044]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3045]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3046]               __tmp__implementation_BLY := implementation_BLY;
[L3047]               __tmp__timelockList_BLY := timelockList_BLY;
[L3048]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3049]   CALL        call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L7306]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7307]   COND FALSE  !(revert)
[L7310]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7176]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L7176]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7149]               assume msgsender_MSG != null;
[L7150]               __tmp__Balance[this] := 0;
[L7151]               __tmp___name_ERC20Detailed[this] := -1412326813;
[L7152]               __tmp___symbol_ERC20Detailed[this] := -1412326813;
[L7153]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7155]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7156]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7157]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7180]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7181]   COND FALSE  !(revert)
[L7310]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7311]   COND FALSE  !(revert)
[L7314]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6478]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6478]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   COND FALSE  !(revert)
[L6482]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6453]               assume msgsender_MSG != null;
[L6454]               __tmp__Balance[this] := 0;
[L6455]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6456]               __tmp__sum__balances0[this] := 0;
[L6457]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6458]               __tmp__sum__allowed1[this] := 0;
[L6459]               __tmp___totalSupply_HxERC20[this] := 0;
[L6482]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6483]   COND FALSE  !(revert)
[L7314]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7318]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L7318]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7319]   COND FALSE  !(revert)
[L7322]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND TRUE   __tmp__DType[this] == BLY
[L5978]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5978]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L7322]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7323]   COND FALSE  !(revert)
[L7326]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6322]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5987]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5992]   COND TRUE   __tmp__DType[this] == PauserRole
[L5993]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5993]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5994]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L6326]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6303]               assume msgsender_MSG != null;
[L6304]               __tmp__Balance[this] := 0;
[L6305]               __tmp___paused_Pausable[this] := false;
[L6307]               __tmp___paused_Pausable[this] := false;
[L6330]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L7326]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7327]   COND FALSE  !(revert)
[L7330]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6992]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]   COND FALSE  !(revert)
[L6996]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6478]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6478]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   COND FALSE  !(revert)
[L6482]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6453]               assume msgsender_MSG != null;
[L6454]               __tmp__Balance[this] := 0;
[L6455]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6456]               __tmp__sum__balances0[this] := 0;
[L6457]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6458]               __tmp__sum__allowed1[this] := 0;
[L6459]               __tmp___totalSupply_HxERC20[this] := 0;
[L6482]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6483]   COND FALSE  !(revert)
[L6996]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L7000]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7004]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5987]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5992]   COND TRUE   __tmp__DType[this] == PauserRole
[L5993]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5993]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5994]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L7004]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7005]   COND FALSE  !(revert)
[L7008]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6322]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5987]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5992]   COND TRUE   __tmp__DType[this] == PauserRole
[L5993]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5993]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5994]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L6326]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6303]               assume msgsender_MSG != null;
[L6304]               __tmp__Balance[this] := 0;
[L6305]               __tmp___paused_Pausable[this] := false;
[L6307]               __tmp___paused_Pausable[this] := false;
[L6330]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L7008]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               __tmp__Balance[this] := 0;
[L7012]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7013]   COND FALSE  !(revert)
[L7330]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7331]   COND FALSE  !(revert)
[L7334]   CALL        call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7239]               assume msgsender_MSG != null;
[L7240]               __tmp__Balance[this] := 0;
[L7241]               __tmp__implementation_BLY[this] := null;
[L7243]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7243]   RET         call __var_36 := FreshRefGenerator__fail();
[L7244]   COND FALSE  !(revert)
[L7247]               __tmp__timelockList_BLY[this] := __var_36;
[L7249]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]] := zeroRefboolArr();
[L7250]               __tmp__frozenAccount_BLY[this] := zeroRefboolArr();
[L7253]               assume __tmp__Balance[msgsender_MSG] >= msgvalue_MSG;
[L7254]               __tmp__Balance[msgsender_MSG] := __tmp__Balance[msgsender_MSG] - msgvalue_MSG;
[L7255]               __tmp__Balance[this] := __tmp__Balance[this] + msgvalue_MSG;
[L7257]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7258]   COND TRUE   __tmp__DType[this] == BLY
[L7259]   CALL        call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6820]               __var_23 := null;
[L6821]   COND FALSE  !(!(account_s946 != null))
[L6825]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND FALSE  !(!(c_s106 >= a_s106))
[L5645]               __ret_0_ := c_s106;
[L6825]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L6826]   COND FALSE  !(revert)
[L6829]               __tmp___totalSupply_HxERC20[this] := __var_24;
[L6830]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND FALSE  !(!(c_s106 >= a_s106))
[L5645]               __ret_0_ := c_s106;
[L6830]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L6831]   COND FALSE  !(revert)
[L6834]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][account_s946];
[L6835]               __tmp___balances_HxERC20[this][account_s946] := __var_25;
[L6836]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][account_s946];
[L7259]   RET         call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7260]   COND FALSE  !(revert)
[L7334]   RET         call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7335]   COND FALSE  !(revert)
[L3049]   RET         call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L3050]               assume revert || gas < 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:00:56,800 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:00:56,801 INFO  L82        PathProgramCache]: Analyzing trace with hash 477705737, now seen corresponding path program 1 times
[2020-11-25 01:00:56,801 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:00:56,815 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:00:57,060 INFO  L134       CoverageAnalysis]: Checked inductivity of 891 backedges. 6 proven. 31 refuted. 0 times theorem prover too weak. 854 trivial. 0 not checked.
[2020-11-25 01:00:57,060 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:00:57,060 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 01:00:57,061 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:00:57,061 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 01:00:57,061 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 01:00:57,061 INFO  L87              Difference]: Start difference. First operand 10168 states and 11510 transitions. cyclomatic complexity: 1357 Second operand 9 states.
[2020-11-25 01:00:58,438 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:00:58,438 INFO  L93              Difference]: Finished difference Result 10311 states and 11656 transitions.
[2020-11-25 01:00:58,438 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 01:00:58,438 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10311 states and 11656 transitions.
[2020-11-25 01:00:58,457 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:00:58,474 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10311 states to 10297 states and 11640 transitions.
[2020-11-25 01:00:58,475 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2119
[2020-11-25 01:00:58,475 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2119
[2020-11-25 01:00:58,475 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10297 states and 11640 transitions.
[2020-11-25 01:00:58,480 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:00:58,481 INFO  L728         BuchiCegarLoop]: Abstraction has 10297 states and 11640 transitions.
[2020-11-25 01:00:58,486 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10297 states and 11640 transitions.
[2020-11-25 01:00:58,529 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10297 to 10175.
[2020-11-25 01:00:58,529 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10175 states.
[2020-11-25 01:00:58,539 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10175 states to 10175 states and 11518 transitions.
[2020-11-25 01:00:58,539 INFO  L751         BuchiCegarLoop]: Abstraction has 10175 states and 11518 transitions.
[2020-11-25 01:00:58,539 INFO  L631         BuchiCegarLoop]: Abstraction has 10175 states and 11518 transitions.
[2020-11-25 01:00:58,539 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 01:00:58,539 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10175 states and 11518 transitions.
[2020-11-25 01:00:58,548 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:00:58,548 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:00:58,548 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:00:58,550 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:00:58,550 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND TRUE   __exception
[L3017]               __tmp__Balance := Balance;
[L3018]               __tmp__DType := DType;
[L3019]               __tmp__Alloc := Alloc;
[L3020]               __tmp__balance_ADDR := balance_ADDR;
[L3021]               __tmp__M_Ref_bool := M_Ref_bool;
[L3022]               __tmp__sum := sum;
[L3023]               __tmp__M_Ref_int := M_Ref_int;
[L3024]               __tmp__sum__balances0 := sum__balances0;
[L3025]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3026]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3027]               __tmp__sum__allowed1 := sum__allowed1;
[L3028]               __tmp__M_int_Ref := M_int_Ref;
[L3029]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3030]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3031]               __tmp__Length := Length;
[L3032]               __tmp__now := now;
[L3033]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3034]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3035]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3036]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3037]               __tmp___paused_Pausable := _paused_Pausable;
[L3038]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3039]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3040]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3041]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3042]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3043]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3044]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3045]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3046]               __tmp__implementation_BLY := implementation_BLY;
[L3047]               __tmp__timelockList_BLY := timelockList_BLY;
[L3048]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3049]   CALL        call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L7306]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7307]   COND FALSE  !(revert)
[L7310]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7176]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L7176]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7149]               assume msgsender_MSG != null;
[L7150]               __tmp__Balance[this] := 0;
[L7151]               __tmp___name_ERC20Detailed[this] := -1412326813;
[L7152]               __tmp___symbol_ERC20Detailed[this] := -1412326813;
[L7153]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7155]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7156]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7157]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7180]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7181]   COND FALSE  !(revert)
[L7310]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7311]   COND FALSE  !(revert)
[L7314]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6478]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6478]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   COND FALSE  !(revert)
[L6482]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6453]               assume msgsender_MSG != null;
[L6454]               __tmp__Balance[this] := 0;
[L6455]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6456]               __tmp__sum__balances0[this] := 0;
[L6457]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6458]               __tmp__sum__allowed1[this] := 0;
[L6459]               __tmp___totalSupply_HxERC20[this] := 0;
[L6482]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6483]   COND FALSE  !(revert)
[L7314]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7318]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L7318]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7319]   COND FALSE  !(revert)
[L7322]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND TRUE   __tmp__DType[this] == BLY
[L5978]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5978]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L7322]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7323]   COND FALSE  !(revert)
[L7326]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6322]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND TRUE   __tmp__DType[this] == BLY
[L5978]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5978]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L6326]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6303]               assume msgsender_MSG != null;
[L6304]               __tmp__Balance[this] := 0;
[L6305]               __tmp___paused_Pausable[this] := false;
[L6307]               __tmp___paused_Pausable[this] := false;
[L6330]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L7326]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7327]   COND FALSE  !(revert)
[L7330]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6992]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]   COND FALSE  !(revert)
[L6996]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6478]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6478]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   COND FALSE  !(revert)
[L6482]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6453]               assume msgsender_MSG != null;
[L6454]               __tmp__Balance[this] := 0;
[L6455]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6456]               __tmp__sum__balances0[this] := 0;
[L6457]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6458]               __tmp__sum__allowed1[this] := 0;
[L6459]               __tmp___totalSupply_HxERC20[this] := 0;
[L6482]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6483]   COND FALSE  !(revert)
[L6996]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L7000]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7004]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5983]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5983]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5984]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L7004]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7005]   COND FALSE  !(revert)
[L7008]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6322]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND TRUE   __tmp__DType[this] == BLY
[L5978]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5978]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L6326]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6303]               assume msgsender_MSG != null;
[L6304]               __tmp__Balance[this] := 0;
[L6305]               __tmp___paused_Pausable[this] := false;
[L6307]               __tmp___paused_Pausable[this] := false;
[L6330]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L7008]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               __tmp__Balance[this] := 0;
[L7012]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7013]   COND FALSE  !(revert)
[L7330]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7331]   COND FALSE  !(revert)
[L7334]   CALL        call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7239]               assume msgsender_MSG != null;
[L7240]               __tmp__Balance[this] := 0;
[L7241]               __tmp__implementation_BLY[this] := null;
[L7243]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7243]   RET         call __var_36 := FreshRefGenerator__fail();
[L7244]   COND FALSE  !(revert)
[L7247]               __tmp__timelockList_BLY[this] := __var_36;
[L7249]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]] := zeroRefboolArr();
[L7250]               __tmp__frozenAccount_BLY[this] := zeroRefboolArr();
[L7253]               assume __tmp__Balance[msgsender_MSG] >= msgvalue_MSG;
[L7254]               __tmp__Balance[msgsender_MSG] := __tmp__Balance[msgsender_MSG] - msgvalue_MSG;
[L7255]               __tmp__Balance[this] := __tmp__Balance[this] + msgvalue_MSG;
[L7257]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7258]   COND TRUE   __tmp__DType[this] == BLY
[L7259]   CALL        call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6820]               __var_23 := null;
[L6821]   COND FALSE  !(!(account_s946 != null))
[L6825]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND FALSE  !(!(c_s106 >= a_s106))
[L5645]               __ret_0_ := c_s106;
[L6825]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L6826]   COND FALSE  !(revert)
[L6829]               __tmp___totalSupply_HxERC20[this] := __var_24;
[L6830]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND FALSE  !(!(c_s106 >= a_s106))
[L5645]               __ret_0_ := c_s106;
[L6830]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L6831]   COND FALSE  !(revert)
[L6834]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][account_s946];
[L6835]               __tmp___balances_HxERC20[this][account_s946] := __var_25;
[L6836]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][account_s946];
[L7259]   RET         call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7260]   COND FALSE  !(revert)
[L7334]   RET         call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7335]   COND FALSE  !(revert)
[L3049]   RET         call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L3050]               assume revert || gas < 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:00:58,555 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:00:58,555 INFO  L82        PathProgramCache]: Analyzing trace with hash -789584524, now seen corresponding path program 1 times
[2020-11-25 01:00:58,556 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:00:58,575 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:00:58,730 INFO  L134       CoverageAnalysis]: Checked inductivity of 882 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 882 trivial. 0 not checked.
[2020-11-25 01:00:58,730 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:00:58,730 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:00:58,730 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:00:58,730 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:00:58,730 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:00:58,731 INFO  L87              Difference]: Start difference. First operand 10175 states and 11518 transitions. cyclomatic complexity: 1358 Second operand 4 states.
[2020-11-25 01:00:59,295 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:00:59,295 INFO  L93              Difference]: Finished difference Result 12178 states and 13871 transitions.
[2020-11-25 01:00:59,295 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 01:00:59,295 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12178 states and 13871 transitions.
[2020-11-25 01:00:59,319 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 12
[2020-11-25 01:00:59,342 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12178 states to 11381 states and 13007 transitions.
[2020-11-25 01:00:59,342 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2265
[2020-11-25 01:00:59,343 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2265
[2020-11-25 01:00:59,343 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11381 states and 13007 transitions.
[2020-11-25 01:00:59,349 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:00:59,349 INFO  L728         BuchiCegarLoop]: Abstraction has 11381 states and 13007 transitions.
[2020-11-25 01:00:59,355 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11381 states and 13007 transitions.
[2020-11-25 01:00:59,405 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11381 to 10580.
[2020-11-25 01:00:59,405 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10580 states.
[2020-11-25 01:00:59,417 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10580 states to 10580 states and 12010 transitions.
[2020-11-25 01:00:59,417 INFO  L751         BuchiCegarLoop]: Abstraction has 10580 states and 12010 transitions.
[2020-11-25 01:00:59,417 INFO  L631         BuchiCegarLoop]: Abstraction has 10580 states and 12010 transitions.
[2020-11-25 01:00:59,417 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 01:00:59,417 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10580 states and 12010 transitions.
[2020-11-25 01:00:59,427 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:00:59,427 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:00:59,427 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:00:59,428 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:00:59,429 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:00:59,433 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:00:59,433 INFO  L82        PathProgramCache]: Analyzing trace with hash 1047302868, now seen corresponding path program 1 times
[2020-11-25 01:00:59,434 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:00:59,448 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:00:59,606 INFO  L134       CoverageAnalysis]: Checked inductivity of 915 backedges. 12 proven. 9 refuted. 0 times theorem prover too weak. 894 trivial. 0 not checked.
[2020-11-25 01:00:59,606 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:00:59,606 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 01:00:59,607 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:00:59,607 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:00:59,607 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:00:59,607 INFO  L87              Difference]: Start difference. First operand 10580 states and 12010 transitions. cyclomatic complexity: 1445 Second operand 8 states.
[2020-11-25 01:00:59,734 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:00:59,734 INFO  L93              Difference]: Finished difference Result 10607 states and 12041 transitions.
[2020-11-25 01:00:59,734 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:00:59,734 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10607 states and 12041 transitions.
[2020-11-25 01:00:59,751 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:00:59,768 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10607 states to 10586 states and 12016 transitions.
[2020-11-25 01:00:59,768 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2188
[2020-11-25 01:00:59,769 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2188
[2020-11-25 01:00:59,769 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10586 states and 12016 transitions.
[2020-11-25 01:00:59,774 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:00:59,774 INFO  L728         BuchiCegarLoop]: Abstraction has 10586 states and 12016 transitions.
[2020-11-25 01:00:59,780 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10586 states and 12016 transitions.
[2020-11-25 01:00:59,819 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10586 to 10586.
[2020-11-25 01:00:59,819 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10586 states.
[2020-11-25 01:00:59,830 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10586 states to 10586 states and 12016 transitions.
[2020-11-25 01:00:59,830 INFO  L751         BuchiCegarLoop]: Abstraction has 10586 states and 12016 transitions.
[2020-11-25 01:00:59,830 INFO  L631         BuchiCegarLoop]: Abstraction has 10586 states and 12016 transitions.
[2020-11-25 01:00:59,831 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 01:00:59,831 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10586 states and 12016 transitions.
[2020-11-25 01:00:59,840 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:00:59,840 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:00:59,840 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:00:59,841 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:00:59,842 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:00:59,846 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:00:59,846 INFO  L82        PathProgramCache]: Analyzing trace with hash 1236705394, now seen corresponding path program 1 times
[2020-11-25 01:00:59,847 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:00:59,860 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:01:00,027 INFO  L134       CoverageAnalysis]: Checked inductivity of 917 backedges. 6 proven. 27 refuted. 0 times theorem prover too weak. 884 trivial. 0 not checked.
[2020-11-25 01:01:00,027 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:01:00,028 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 01:01:00,028 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:01:00,028 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:01:00,028 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:01:00,028 INFO  L87              Difference]: Start difference. First operand 10586 states and 12016 transitions. cyclomatic complexity: 1445 Second operand 8 states.
[2020-11-25 01:01:00,178 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:01:00,178 INFO  L93              Difference]: Finished difference Result 10607 states and 12040 transitions.
[2020-11-25 01:01:00,179 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:01:00,179 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10607 states and 12040 transitions.
[2020-11-25 01:01:00,201 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:00,222 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10607 states to 10593 states and 12024 transitions.
[2020-11-25 01:01:00,222 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2188
[2020-11-25 01:01:00,223 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2188
[2020-11-25 01:01:00,223 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10593 states and 12024 transitions.
[2020-11-25 01:01:00,228 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:01:00,228 INFO  L728         BuchiCegarLoop]: Abstraction has 10593 states and 12024 transitions.
[2020-11-25 01:01:00,234 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10593 states and 12024 transitions.
[2020-11-25 01:01:00,283 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10593 to 10580.
[2020-11-25 01:01:00,283 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10580 states.
[2020-11-25 01:01:00,295 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10580 states to 10580 states and 12009 transitions.
[2020-11-25 01:01:00,295 INFO  L751         BuchiCegarLoop]: Abstraction has 10580 states and 12009 transitions.
[2020-11-25 01:01:00,295 INFO  L631         BuchiCegarLoop]: Abstraction has 10580 states and 12009 transitions.
[2020-11-25 01:01:00,295 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 01:01:00,295 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10580 states and 12009 transitions.
[2020-11-25 01:01:00,308 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:00,308 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:01:00,308 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:01:00,325 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:01:00,325 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:01:00,336 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:01:00,336 INFO  L82        PathProgramCache]: Analyzing trace with hash -1802591701, now seen corresponding path program 2 times
[2020-11-25 01:01:00,337 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:01:00,359 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:01:00,526 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 01:01:00,526 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:01:00,527 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 01:01:00,527 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:01:00,527 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 01:01:00,527 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 01:01:00,527 INFO  L87              Difference]: Start difference. First operand 10580 states and 12009 transitions. cyclomatic complexity: 1444 Second operand 9 states.
[2020-11-25 01:01:00,741 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:01:00,741 INFO  L93              Difference]: Finished difference Result 10605 states and 12036 transitions.
[2020-11-25 01:01:00,741 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 01:01:00,742 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10605 states and 12036 transitions.
[2020-11-25 01:01:00,766 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:00,786 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10605 states to 10570 states and 11997 transitions.
[2020-11-25 01:01:00,786 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2188
[2020-11-25 01:01:00,787 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2188
[2020-11-25 01:01:00,787 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10570 states and 11997 transitions.
[2020-11-25 01:01:00,793 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:01:00,793 INFO  L728         BuchiCegarLoop]: Abstraction has 10570 states and 11997 transitions.
[2020-11-25 01:01:00,799 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10570 states and 11997 transitions.
[2020-11-25 01:01:00,840 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10570 to 10570.
[2020-11-25 01:01:00,840 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10570 states.
[2020-11-25 01:01:00,853 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10570 states to 10570 states and 11997 transitions.
[2020-11-25 01:01:00,853 INFO  L751         BuchiCegarLoop]: Abstraction has 10570 states and 11997 transitions.
[2020-11-25 01:01:00,853 INFO  L631         BuchiCegarLoop]: Abstraction has 10570 states and 11997 transitions.
[2020-11-25 01:01:00,853 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 01:01:00,853 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10570 states and 11997 transitions.
[2020-11-25 01:01:00,863 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:00,863 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:01:00,863 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:01:00,864 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:01:00,865 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:01:00,869 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:01:00,869 INFO  L82        PathProgramCache]: Analyzing trace with hash -1452871682, now seen corresponding path program 1 times
[2020-11-25 01:01:00,869 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:01:00,888 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:01:01,052 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 01:01:01,053 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:01:01,053 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 01:01:01,053 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:01:01,053 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 01:01:01,053 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 01:01:01,053 INFO  L87              Difference]: Start difference. First operand 10570 states and 11997 transitions. cyclomatic complexity: 1442 Second operand 9 states.
[2020-11-25 01:01:01,194 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:01:01,194 INFO  L93              Difference]: Finished difference Result 10624 states and 12060 transitions.
[2020-11-25 01:01:01,194 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 01:01:01,194 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10624 states and 12060 transitions.
[2020-11-25 01:01:01,210 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:01,228 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10624 states to 10566 states and 11991 transitions.
[2020-11-25 01:01:01,228 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2188
[2020-11-25 01:01:01,229 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2188
[2020-11-25 01:01:01,229 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10566 states and 11991 transitions.
[2020-11-25 01:01:01,234 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:01:01,234 INFO  L728         BuchiCegarLoop]: Abstraction has 10566 states and 11991 transitions.
[2020-11-25 01:01:01,240 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10566 states and 11991 transitions.
[2020-11-25 01:01:01,279 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10566 to 10566.
[2020-11-25 01:01:01,279 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10566 states.
[2020-11-25 01:01:01,290 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10566 states to 10566 states and 11991 transitions.
[2020-11-25 01:01:01,290 INFO  L751         BuchiCegarLoop]: Abstraction has 10566 states and 11991 transitions.
[2020-11-25 01:01:01,290 INFO  L631         BuchiCegarLoop]: Abstraction has 10566 states and 11991 transitions.
[2020-11-25 01:01:01,290 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 01:01:01,290 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10566 states and 11991 transitions.
[2020-11-25 01:01:01,299 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:01,299 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:01:01,299 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:01:01,300 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:01:01,300 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:01:01,305 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:01:01,305 INFO  L82        PathProgramCache]: Analyzing trace with hash -1309246870, now seen corresponding path program 1 times
[2020-11-25 01:01:01,305 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:01:01,319 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:01:01,584 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 12 proven. 6 refuted. 0 times theorem prover too weak. 900 trivial. 0 not checked.
[2020-11-25 01:01:01,584 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:01:01,585 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 01:01:01,585 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:01:01,585 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:01:01,586 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:01:01,586 INFO  L87              Difference]: Start difference. First operand 10566 states and 11991 transitions. cyclomatic complexity: 1440 Second operand 8 states.
[2020-11-25 01:01:01,747 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:01:01,747 INFO  L93              Difference]: Finished difference Result 10587 states and 12015 transitions.
[2020-11-25 01:01:01,747 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:01:01,747 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10587 states and 12015 transitions.
[2020-11-25 01:01:01,764 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:01,782 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10587 states to 10566 states and 11990 transitions.
[2020-11-25 01:01:01,782 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2188
[2020-11-25 01:01:01,783 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2188
[2020-11-25 01:01:01,783 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10566 states and 11990 transitions.
[2020-11-25 01:01:01,788 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:01:01,788 INFO  L728         BuchiCegarLoop]: Abstraction has 10566 states and 11990 transitions.
[2020-11-25 01:01:01,794 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10566 states and 11990 transitions.
[2020-11-25 01:01:01,834 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10566 to 10566.
[2020-11-25 01:01:01,834 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10566 states.
[2020-11-25 01:01:01,845 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10566 states to 10566 states and 11990 transitions.
[2020-11-25 01:01:01,845 INFO  L751         BuchiCegarLoop]: Abstraction has 10566 states and 11990 transitions.
[2020-11-25 01:01:01,845 INFO  L631         BuchiCegarLoop]: Abstraction has 10566 states and 11990 transitions.
[2020-11-25 01:01:01,845 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 01:01:01,845 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10566 states and 11990 transitions.
[2020-11-25 01:01:01,854 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:01,854 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:01:01,854 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:01:01,856 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:01:01,856 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:01:01,860 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:01:01,860 INFO  L82        PathProgramCache]: Analyzing trace with hash -101904976, now seen corresponding path program 1 times
[2020-11-25 01:01:01,860 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:01:01,879 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:01:02,042 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 01:01:02,042 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:01:02,042 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 01:01:02,042 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:01:02,042 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:01:02,042 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:01:02,042 INFO  L87              Difference]: Start difference. First operand 10566 states and 11990 transitions. cyclomatic complexity: 1439 Second operand 8 states.
[2020-11-25 01:01:02,179 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:01:02,179 INFO  L93              Difference]: Finished difference Result 10646 states and 12068 transitions.
[2020-11-25 01:01:02,179 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:01:02,179 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10646 states and 12068 transitions.
[2020-11-25 01:01:02,196 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:02,213 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10646 states to 10546 states and 11962 transitions.
[2020-11-25 01:01:02,213 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2184
[2020-11-25 01:01:02,214 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2184
[2020-11-25 01:01:02,214 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10546 states and 11962 transitions.
[2020-11-25 01:01:02,219 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:01:02,219 INFO  L728         BuchiCegarLoop]: Abstraction has 10546 states and 11962 transitions.
[2020-11-25 01:01:02,225 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10546 states and 11962 transitions.
[2020-11-25 01:01:02,266 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10546 to 10546.
[2020-11-25 01:01:02,266 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10546 states.
[2020-11-25 01:01:02,277 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10546 states to 10546 states and 11962 transitions.
[2020-11-25 01:01:02,277 INFO  L751         BuchiCegarLoop]: Abstraction has 10546 states and 11962 transitions.
[2020-11-25 01:01:02,277 INFO  L631         BuchiCegarLoop]: Abstraction has 10546 states and 11962 transitions.
[2020-11-25 01:01:02,277 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 01:01:02,277 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10546 states and 11962 transitions.
[2020-11-25 01:01:02,286 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:02,286 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:01:02,286 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:01:02,288 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:01:02,288 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:01:02,292 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:01:02,292 INFO  L82        PathProgramCache]: Analyzing trace with hash 1573058723, now seen corresponding path program 1 times
[2020-11-25 01:01:02,293 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:01:02,311 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:01:02,520 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 01:01:02,520 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:01:02,520 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 01:01:02,521 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:01:02,521 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 01:01:02,521 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 01:01:02,521 INFO  L87              Difference]: Start difference. First operand 10546 states and 11962 transitions. cyclomatic complexity: 1431 Second operand 9 states.
[2020-11-25 01:01:02,650 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:01:02,650 INFO  L93              Difference]: Finished difference Result 10564 states and 11981 transitions.
[2020-11-25 01:01:02,650 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 01:01:02,650 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10564 states and 11981 transitions.
[2020-11-25 01:01:02,667 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:02,684 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10564 states to 10526 states and 11939 transitions.
[2020-11-25 01:01:02,684 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2184
[2020-11-25 01:01:02,685 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2184
[2020-11-25 01:01:02,685 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10526 states and 11939 transitions.
[2020-11-25 01:01:02,691 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:01:02,691 INFO  L728         BuchiCegarLoop]: Abstraction has 10526 states and 11939 transitions.
[2020-11-25 01:01:02,696 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10526 states and 11939 transitions.
[2020-11-25 01:01:02,736 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10526 to 10526.
[2020-11-25 01:01:02,736 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10526 states.
[2020-11-25 01:01:02,747 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10526 states to 10526 states and 11939 transitions.
[2020-11-25 01:01:02,747 INFO  L751         BuchiCegarLoop]: Abstraction has 10526 states and 11939 transitions.
[2020-11-25 01:01:02,747 INFO  L631         BuchiCegarLoop]: Abstraction has 10526 states and 11939 transitions.
[2020-11-25 01:01:02,747 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 01:01:02,747 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10526 states and 11939 transitions.
[2020-11-25 01:01:02,756 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:02,756 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:01:02,756 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:01:02,757 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:01:02,757 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:01:02,761 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:01:02,761 INFO  L82        PathProgramCache]: Analyzing trace with hash -245465759, now seen corresponding path program 1 times
[2020-11-25 01:01:02,762 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:01:02,780 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:01:03,017 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 01:01:03,017 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:01:03,017 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 01:01:03,017 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:01:03,017 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 01:01:03,017 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-25 01:01:03,017 INFO  L87              Difference]: Start difference. First operand 10526 states and 11939 transitions. cyclomatic complexity: 1428 Second operand 14 states.
[2020-11-25 01:01:08,215 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:01:08,216 INFO  L93              Difference]: Finished difference Result 11348 states and 12965 transitions.
[2020-11-25 01:01:08,216 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 01:01:08,216 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11348 states and 12965 transitions.
[2020-11-25 01:01:08,239 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:08,260 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11348 states to 11348 states and 12965 transitions.
[2020-11-25 01:01:08,260 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2380
[2020-11-25 01:01:08,262 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2380
[2020-11-25 01:01:08,262 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11348 states and 12965 transitions.
[2020-11-25 01:01:08,268 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:01:08,268 INFO  L728         BuchiCegarLoop]: Abstraction has 11348 states and 12965 transitions.
[2020-11-25 01:01:08,274 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11348 states and 12965 transitions.
[2020-11-25 01:01:08,327 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11348 to 11114.
[2020-11-25 01:01:08,328 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11114 states.
[2020-11-25 01:01:08,340 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11114 states to 11114 states and 12683 transitions.
[2020-11-25 01:01:08,340 INFO  L751         BuchiCegarLoop]: Abstraction has 11114 states and 12683 transitions.
[2020-11-25 01:01:08,340 INFO  L631         BuchiCegarLoop]: Abstraction has 11114 states and 12683 transitions.
[2020-11-25 01:01:08,340 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-25 01:01:08,340 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11114 states and 12683 transitions.
[2020-11-25 01:01:08,350 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:08,350 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:01:08,350 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:01:08,352 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:01:08,352 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:01:08,357 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:01:08,357 INFO  L82        PathProgramCache]: Analyzing trace with hash 493487555, now seen corresponding path program 1 times
[2020-11-25 01:01:08,357 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:01:08,377 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:01:08,663 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 01:01:08,663 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:01:08,663 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 01:01:08,664 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:01:08,664 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 01:01:08,664 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=19, Invalid=71, Unknown=0, NotChecked=0, Total=90
[2020-11-25 01:01:08,664 INFO  L87              Difference]: Start difference. First operand 11114 states and 12683 transitions. cyclomatic complexity: 1594 Second operand 10 states.
[2020-11-25 01:01:11,771 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:01:11,771 INFO  L93              Difference]: Finished difference Result 11404 states and 13081 transitions.
[2020-11-25 01:01:11,771 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 01:01:11,771 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11404 states and 13081 transitions.
[2020-11-25 01:01:11,795 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:11,818 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11404 states to 11404 states and 13081 transitions.
[2020-11-25 01:01:11,818 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2380
[2020-11-25 01:01:11,819 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2380
[2020-11-25 01:01:11,819 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11404 states and 13081 transitions.
[2020-11-25 01:01:11,826 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:01:11,826 INFO  L728         BuchiCegarLoop]: Abstraction has 11404 states and 13081 transitions.
[2020-11-25 01:01:11,832 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11404 states and 13081 transitions.
[2020-11-25 01:01:11,888 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11404 to 11248.
[2020-11-25 01:01:11,888 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11248 states.
[2020-11-25 01:01:11,902 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11248 states to 11248 states and 12877 transitions.
[2020-11-25 01:01:11,902 INFO  L751         BuchiCegarLoop]: Abstraction has 11248 states and 12877 transitions.
[2020-11-25 01:01:11,902 INFO  L631         BuchiCegarLoop]: Abstraction has 11248 states and 12877 transitions.
[2020-11-25 01:01:11,902 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-25 01:01:11,902 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11248 states and 12877 transitions.
[2020-11-25 01:01:11,912 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:11,912 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:01:11,912 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:01:11,914 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:01:11,914 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND FALSE  !(__var_69)
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:01:11,918 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:01:11,918 INFO  L82        PathProgramCache]: Analyzing trace with hash -1856083956, now seen corresponding path program 1 times
[2020-11-25 01:01:11,920 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:01:11,958 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:01:12,216 INFO  L134       CoverageAnalysis]: Checked inductivity of 941 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 941 trivial. 0 not checked.
[2020-11-25 01:01:12,216 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:01:12,216 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:01:12,217 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:01:12,217 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:01:12,217 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:01:12,217 INFO  L87              Difference]: Start difference. First operand 11248 states and 12877 transitions. cyclomatic complexity: 1660 Second operand 3 states.
[2020-11-25 01:01:12,303 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:01:12,304 INFO  L93              Difference]: Finished difference Result 11200 states and 12793 transitions.
[2020-11-25 01:01:12,304 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:01:12,304 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11200 states and 12793 transitions.
[2020-11-25 01:01:12,322 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:12,341 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11200 states to 11200 states and 12793 transitions.
[2020-11-25 01:01:12,341 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2330
[2020-11-25 01:01:12,342 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2330
[2020-11-25 01:01:12,342 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11200 states and 12793 transitions.
[2020-11-25 01:01:12,348 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:01:12,348 INFO  L728         BuchiCegarLoop]: Abstraction has 11200 states and 12793 transitions.
[2020-11-25 01:01:12,353 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11200 states and 12793 transitions.
[2020-11-25 01:01:12,400 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11200 to 10982.
[2020-11-25 01:01:12,400 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10982 states.
[2020-11-25 01:01:12,412 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10982 states to 10982 states and 12514 transitions.
[2020-11-25 01:01:12,412 INFO  L751         BuchiCegarLoop]: Abstraction has 10982 states and 12514 transitions.
[2020-11-25 01:01:12,412 INFO  L631         BuchiCegarLoop]: Abstraction has 10982 states and 12514 transitions.
[2020-11-25 01:01:12,412 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-11-25 01:01:12,412 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10982 states and 12514 transitions.
[2020-11-25 01:01:12,422 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:12,422 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:01:12,422 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:01:12,424 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:01:12,424 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND FALSE  !(__var_69)
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:01:12,429 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:01:12,429 INFO  L82        PathProgramCache]: Analyzing trace with hash -1056161602, now seen corresponding path program 1 times
[2020-11-25 01:01:12,430 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:01:12,453 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:01:12,663 INFO  L134       CoverageAnalysis]: Checked inductivity of 1074 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1073 trivial. 0 not checked.
[2020-11-25 01:01:12,663 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:01:12,663 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:01:12,664 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:01:12,664 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:01:12,664 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:01:12,664 INFO  L87              Difference]: Start difference. First operand 10982 states and 12514 transitions. cyclomatic complexity: 1559 Second operand 4 states.
[2020-11-25 01:01:12,701 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:01:12,701 INFO  L93              Difference]: Finished difference Result 10988 states and 12524 transitions.
[2020-11-25 01:01:12,701 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:01:12,701 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10988 states and 12524 transitions.
[2020-11-25 01:01:12,718 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:12,737 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10988 states to 10988 states and 12524 transitions.
[2020-11-25 01:01:12,737 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2218
[2020-11-25 01:01:12,738 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2218
[2020-11-25 01:01:12,738 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10988 states and 12524 transitions.
[2020-11-25 01:01:12,743 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:01:12,743 INFO  L728         BuchiCegarLoop]: Abstraction has 10988 states and 12524 transitions.
[2020-11-25 01:01:12,751 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10988 states and 12524 transitions.
[2020-11-25 01:01:12,797 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10988 to 10982.
[2020-11-25 01:01:12,797 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10982 states.
[2020-11-25 01:01:12,809 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10982 states to 10982 states and 12508 transitions.
[2020-11-25 01:01:12,809 INFO  L751         BuchiCegarLoop]: Abstraction has 10982 states and 12508 transitions.
[2020-11-25 01:01:12,809 INFO  L631         BuchiCegarLoop]: Abstraction has 10982 states and 12508 transitions.
[2020-11-25 01:01:12,810 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-11-25 01:01:12,810 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10982 states and 12508 transitions.
[2020-11-25 01:01:12,819 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:12,819 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:01:12,819 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:01:12,821 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:01:12,821 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:01:12,825 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:01:12,825 INFO  L82        PathProgramCache]: Analyzing trace with hash -557766945, now seen corresponding path program 1 times
[2020-11-25 01:01:12,826 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:01:12,850 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:01:13,563 INFO  L134       CoverageAnalysis]: Checked inductivity of 1074 backedges. 96 proven. 6 refuted. 0 times theorem prover too weak. 972 trivial. 0 not checked.
[2020-11-25 01:01:13,563 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:01:13,564 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 01:01:13,566 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:01:13,566 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 01:01:13,567 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 01:01:13,567 INFO  L87              Difference]: Start difference. First operand 10982 states and 12508 transitions. cyclomatic complexity: 1553 Second operand 26 states.
[2020-11-25 01:01:26,034 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:01:26,034 INFO  L93              Difference]: Finished difference Result 11540 states and 13197 transitions.
[2020-11-25 01:01:26,035 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 01:01:26,035 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11540 states and 13197 transitions.
[2020-11-25 01:01:26,058 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:26,080 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11540 states to 11540 states and 13197 transitions.
[2020-11-25 01:01:26,080 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2442
[2020-11-25 01:01:26,081 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2442
[2020-11-25 01:01:26,082 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11540 states and 13197 transitions.
[2020-11-25 01:01:26,088 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:01:26,088 INFO  L728         BuchiCegarLoop]: Abstraction has 11540 states and 13197 transitions.
[2020-11-25 01:01:26,093 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11540 states and 13197 transitions.
[2020-11-25 01:01:26,144 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11540 to 11224.
[2020-11-25 01:01:26,144 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11224 states.
[2020-11-25 01:01:26,157 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11224 states to 11224 states and 12821 transitions.
[2020-11-25 01:01:26,157 INFO  L751         BuchiCegarLoop]: Abstraction has 11224 states and 12821 transitions.
[2020-11-25 01:01:26,157 INFO  L631         BuchiCegarLoop]: Abstraction has 11224 states and 12821 transitions.
[2020-11-25 01:01:26,157 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-11-25 01:01:26,157 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11224 states and 12821 transitions.
[2020-11-25 01:01:26,167 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:26,167 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:01:26,167 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:01:26,169 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:01:26,169 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false
[L8109]   CALL        call __var_59 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8109]   RET         call __var_59 := FreshRefGenerator__success();
[L8110]   COND FALSE  !(revert)
[L8113]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == 0;
[L8114]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] := true;
[L8115]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == zerointRefArr();
[L8116]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1600] == __var_59;
[L8117]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == 0;
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:01:26,173 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:01:26,173 INFO  L82        PathProgramCache]: Analyzing trace with hash 580345836, now seen corresponding path program 1 times
[2020-11-25 01:01:26,174 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:01:26,197 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:01:26,476 INFO  L134       CoverageAnalysis]: Checked inductivity of 1074 backedges. 1 proven. 4 refuted. 0 times theorem prover too weak. 1069 trivial. 0 not checked.
[2020-11-25 01:01:26,476 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:01:26,476 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-11-25 01:01:26,476 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:01:26,476 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:01:26,476 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:01:26,477 INFO  L87              Difference]: Start difference. First operand 11224 states and 12821 transitions. cyclomatic complexity: 1630 Second operand 4 states.
[2020-11-25 01:01:26,578 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:01:26,578 INFO  L93              Difference]: Finished difference Result 11088 states and 12651 transitions.
[2020-11-25 01:01:26,578 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:01:26,579 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11088 states and 12651 transitions.
[2020-11-25 01:01:26,597 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:26,616 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11088 states to 10920 states and 12451 transitions.
[2020-11-25 01:01:26,616 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2242
[2020-11-25 01:01:26,617 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2242
[2020-11-25 01:01:26,617 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10920 states and 12451 transitions.
[2020-11-25 01:01:26,622 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:01:26,622 INFO  L728         BuchiCegarLoop]: Abstraction has 10920 states and 12451 transitions.
[2020-11-25 01:01:26,628 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10920 states and 12451 transitions.
[2020-11-25 01:01:26,676 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10920 to 10908.
[2020-11-25 01:01:26,676 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10908 states.
[2020-11-25 01:01:26,688 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10908 states to 10908 states and 12435 transitions.
[2020-11-25 01:01:26,688 INFO  L751         BuchiCegarLoop]: Abstraction has 10908 states and 12435 transitions.
[2020-11-25 01:01:26,688 INFO  L631         BuchiCegarLoop]: Abstraction has 10908 states and 12435 transitions.
[2020-11-25 01:01:26,688 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-11-25 01:01:26,688 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10908 states and 12435 transitions.
[2020-11-25 01:01:26,698 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:26,698 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:01:26,698 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:01:26,699 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:01:26,699 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false
[L8264]   CALL        call __var_68 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8264]   RET         call __var_68 := FreshRefGenerator__success();
[L8265]   COND FALSE  !(revert)
[L8268]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8269]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] := true;
[L8270]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == zerointRefArr();
[L8271]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1645] == __var_68;
[L8272]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:01:26,703 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:01:26,704 INFO  L82        PathProgramCache]: Analyzing trace with hash -1402738347, now seen corresponding path program 1 times
[2020-11-25 01:01:26,704 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:01:26,727 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:01:26,953 INFO  L134       CoverageAnalysis]: Checked inductivity of 1074 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1073 trivial. 0 not checked.
[2020-11-25 01:01:26,953 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:01:26,953 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:01:26,953 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:01:26,953 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:01:26,954 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:01:26,954 INFO  L87              Difference]: Start difference. First operand 10908 states and 12435 transitions. cyclomatic complexity: 1560 Second operand 3 states.
[2020-11-25 01:01:27,016 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:01:27,016 INFO  L93              Difference]: Finished difference Result 10932 states and 12467 transitions.
[2020-11-25 01:01:27,016 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:01:27,016 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10932 states and 12467 transitions.
[2020-11-25 01:01:27,035 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:27,053 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10932 states to 10932 states and 12467 transitions.
[2020-11-25 01:01:27,053 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2242
[2020-11-25 01:01:27,054 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2242
[2020-11-25 01:01:27,054 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10932 states and 12467 transitions.
[2020-11-25 01:01:27,060 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:01:27,060 INFO  L728         BuchiCegarLoop]: Abstraction has 10932 states and 12467 transitions.
[2020-11-25 01:01:27,066 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10932 states and 12467 transitions.
[2020-11-25 01:01:27,113 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10932 to 10892.
[2020-11-25 01:01:27,113 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10892 states.
[2020-11-25 01:01:27,125 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10892 states to 10892 states and 12411 transitions.
[2020-11-25 01:01:27,125 INFO  L751         BuchiCegarLoop]: Abstraction has 10892 states and 12411 transitions.
[2020-11-25 01:01:27,125 INFO  L631         BuchiCegarLoop]: Abstraction has 10892 states and 12411 transitions.
[2020-11-25 01:01:27,125 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-11-25 01:01:27,125 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10892 states and 12411 transitions.
[2020-11-25 01:01:27,134 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:27,135 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:01:27,135 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:01:27,136 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:01:27,136 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false
[L8250]   CALL        call __var_67 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8250]   RET         call __var_67 := FreshRefGenerator__success();
[L8251]   COND FALSE  !(revert)
[L8254]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8255]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] := true;
[L8256]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == zerointRefArr();
[L8257]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1645] == __var_67;
[L8258]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:01:27,141 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:01:27,141 INFO  L82        PathProgramCache]: Analyzing trace with hash -282460723, now seen corresponding path program 1 times
[2020-11-25 01:01:27,142 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:01:27,164 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:01:27,433 INFO  L134       CoverageAnalysis]: Checked inductivity of 1074 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1074 trivial. 0 not checked.
[2020-11-25 01:01:27,433 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:01:27,433 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 01:01:27,434 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:01:27,434 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 01:01:27,434 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-11-25 01:01:27,434 INFO  L87              Difference]: Start difference. First operand 10892 states and 12411 transitions. cyclomatic complexity: 1552 Second operand 6 states.
[2020-11-25 01:01:28,826 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:01:28,826 INFO  L93              Difference]: Finished difference Result 11044 states and 12578 transitions.
[2020-11-25 01:01:28,826 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:01:28,826 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11044 states and 12578 transitions.
[2020-11-25 01:01:28,848 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:28,868 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11044 states to 11044 states and 12578 transitions.
[2020-11-25 01:01:28,868 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2372
[2020-11-25 01:01:28,869 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2372
[2020-11-25 01:01:28,869 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11044 states and 12578 transitions.
[2020-11-25 01:01:28,875 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:01:28,875 INFO  L728         BuchiCegarLoop]: Abstraction has 11044 states and 12578 transitions.
[2020-11-25 01:01:28,880 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11044 states and 12578 transitions.
[2020-11-25 01:01:28,923 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11044 to 10760.
[2020-11-25 01:01:28,923 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10760 states.
[2020-11-25 01:01:28,935 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10760 states to 10760 states and 12236 transitions.
[2020-11-25 01:01:28,935 INFO  L751         BuchiCegarLoop]: Abstraction has 10760 states and 12236 transitions.
[2020-11-25 01:01:28,935 INFO  L631         BuchiCegarLoop]: Abstraction has 10760 states and 12236 transitions.
[2020-11-25 01:01:28,935 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-11-25 01:01:28,935 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10760 states and 12236 transitions.
[2020-11-25 01:01:28,944 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:28,944 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:01:28,944 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:01:28,946 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:01:28,946 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND TRUE   choice == 16
[L12077]              gas := gas - 21000;
[L12078]  COND TRUE   gas >= 0
[L12079]              assume msgvalue_MSG == 0;
[L12080]  CALL        call __ret_0_balanceOf := balanceOf~address_BLY(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7455]   COND TRUE   DType[this] == BLY
[L7456]   CALL        call totalBalance_s1254 := balanceOf~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6520]               __ret_0_ := _balances_HxERC20[this][owner_s640];
[L7456]   RET         call totalBalance_s1254 := balanceOf~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7457]   COND FALSE  !(revert)
[L7463]               totalBalance_s1254 := totalBalance_s1254;
[L7464]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][owner_s1254] == false
[L7465]   CALL        call __var_38 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7465]   RET         call __var_38 := FreshRefGenerator__success();
[L7466]   COND FALSE  !(revert)
[L7469]               assume Length[M_Ref_Ref[timelockList_BLY[this]][owner_s1254]] == 0;
[L7470]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][owner_s1254] := true;
[L7471]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][owner_s1254]] == zerointRefArr();
[L7472]               assume M_Ref_Ref[timelockList_BLY[this]][owner_s1254] == __var_38;
[L7473]               assume sum[M_Ref_Ref[timelockList_BLY[this]][owner_s1254]] == 0;
[L7475]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][owner_s1254]] > 0)
[L7512]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L12080]  RET         call __ret_0_balanceOf := balanceOf~address_BLY(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:01:28,951 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:01:28,951 INFO  L82        PathProgramCache]: Analyzing trace with hash -748509167, now seen corresponding path program 1 times
[2020-11-25 01:01:28,952 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:01:28,976 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:01:29,713 INFO  L134       CoverageAnalysis]: Checked inductivity of 1074 backedges. 96 proven. 6 refuted. 0 times theorem prover too weak. 972 trivial. 0 not checked.
[2020-11-25 01:01:29,713 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:01:29,713 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 01:01:29,714 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:01:29,714 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 01:01:29,714 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 01:01:29,714 INFO  L87              Difference]: Start difference. First operand 10760 states and 12236 transitions. cyclomatic complexity: 1505 Second operand 26 states.
[2020-11-25 01:01:41,406 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:01:41,406 INFO  L93              Difference]: Finished difference Result 11050 states and 12603 transitions.
[2020-11-25 01:01:41,406 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 01:01:41,406 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11050 states and 12603 transitions.
[2020-11-25 01:01:41,427 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:41,447 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11050 states to 11050 states and 12603 transitions.
[2020-11-25 01:01:41,447 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2404
[2020-11-25 01:01:41,448 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2420
[2020-11-25 01:01:41,448 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11050 states and 12603 transitions.
[2020-11-25 01:01:41,454 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:01:41,454 INFO  L728         BuchiCegarLoop]: Abstraction has 11050 states and 12603 transitions.
[2020-11-25 01:01:41,460 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11050 states and 12603 transitions.
[2020-11-25 01:01:41,503 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11050 to 10760.
[2020-11-25 01:01:41,503 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10760 states.
[2020-11-25 01:01:41,515 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10760 states to 10760 states and 12232 transitions.
[2020-11-25 01:01:41,515 INFO  L751         BuchiCegarLoop]: Abstraction has 10760 states and 12232 transitions.
[2020-11-25 01:01:41,515 INFO  L631         BuchiCegarLoop]: Abstraction has 10760 states and 12232 transitions.
[2020-11-25 01:01:41,516 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-11-25 01:01:41,516 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10760 states and 12232 transitions.
[2020-11-25 01:01:41,525 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:41,525 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:01:41,525 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:01:41,527 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:01:41,527 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND TRUE   choice == 6
[L12140]              gas := gas - 21000;
[L12141]  COND TRUE   gas >= 0
[L12142]              assume msgvalue_MSG == 0;
[L12143]  CALL        call __ret_0_freezeAccount := freezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3351]               havoc __exception;
[L3352]               revert := false;
[L3353]   COND FALSE  !(__exception)
[L3389]   CALL        call __ret_0_ := freezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L7689]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND FALSE  !(DType[this] == BLY)
[L10693]  COND TRUE   DType[this] == ERC20Pausable
[L10694]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10694]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10695]  COND FALSE  !(revert)
[L10711]  COND FALSE  !(DType[this] == BLY)
[L10716]  COND TRUE   DType[this] == ERC20Pausable
[L10717]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND FALSE  !(account_s293 == owner_HxOwnable[this])
[L5880]               __ret_0_ := false;
[L10717]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10718]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7689]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7690]   COND FALSE  !(revert)
[L7693]   COND FALSE  !(!!frozenAccount_BLY[this][holder_s1351])
[L7697]               frozenAccount_BLY[this][holder_s1351] := true;
[L7698]               assert { :EventEmitted "Freeze_BLY" } true;
[L7699]               __ret_0_ := true;
[L3389]   RET         call __ret_0_ := freezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3390]               assume !revert && gas >= 0;
[L12143]  RET         call __ret_0_freezeAccount := freezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:01:41,531 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:01:41,531 INFO  L82        PathProgramCache]: Analyzing trace with hash 178410447, now seen corresponding path program 1 times
[2020-11-25 01:01:41,532 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:01:41,552 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:01:41,849 INFO  L134       CoverageAnalysis]: Checked inductivity of 1058 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1057 trivial. 0 not checked.
[2020-11-25 01:01:41,849 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:01:41,849 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 01:01:41,850 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:01:41,850 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:01:41,850 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:01:41,850 INFO  L87              Difference]: Start difference. First operand 10760 states and 12232 transitions. cyclomatic complexity: 1501 Second operand 7 states.
[2020-11-25 01:01:41,983 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:01:41,984 INFO  L93              Difference]: Finished difference Result 10840 states and 12336 transitions.
[2020-11-25 01:01:41,984 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:01:41,984 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10840 states and 12336 transitions.
[2020-11-25 01:01:42,002 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:42,021 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10840 states to 10780 states and 12276 transitions.
[2020-11-25 01:01:42,022 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2224
[2020-11-25 01:01:42,022 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2224
[2020-11-25 01:01:42,022 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10780 states and 12276 transitions.
[2020-11-25 01:01:42,028 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:01:42,029 INFO  L728         BuchiCegarLoop]: Abstraction has 10780 states and 12276 transitions.
[2020-11-25 01:01:42,034 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10780 states and 12276 transitions.
[2020-11-25 01:01:42,083 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10780 to 10780.
[2020-11-25 01:01:42,083 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10780 states.
[2020-11-25 01:01:42,095 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10780 states to 10780 states and 12276 transitions.
[2020-11-25 01:01:42,095 INFO  L751         BuchiCegarLoop]: Abstraction has 10780 states and 12276 transitions.
[2020-11-25 01:01:42,096 INFO  L631         BuchiCegarLoop]: Abstraction has 10780 states and 12276 transitions.
[2020-11-25 01:01:42,096 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-11-25 01:01:42,096 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10780 states and 12276 transitions.
[2020-11-25 01:01:42,107 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:42,107 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:01:42,107 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:01:42,110 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:01:42,110 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND TRUE   choice == 5
[L12146]              gas := gas - 21000;
[L12147]  COND TRUE   gas >= 0
[L12148]              assume msgvalue_MSG == 0;
[L12149]  CALL        call __ret_0_unfreezeAccount := unfreezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3432]               havoc __exception;
[L3433]               revert := false;
[L3434]   COND FALSE  !(__exception)
[L3470]   CALL        call __ret_0_ := unfreezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L7720]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND FALSE  !(DType[this] == BLY)
[L10693]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10698]  COND FALSE  !(DType[this] == Pausable)
[L10703]  COND TRUE   DType[this] == PauserRole
[L10704]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10704]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10705]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND FALSE  !(account_s293 == owner_HxOwnable[this])
[L5880]               __ret_0_ := false;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7720]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7721]   COND FALSE  !(revert)
[L7724]   COND FALSE  !(!frozenAccount_BLY[this][holder_s1379])
[L7728]               frozenAccount_BLY[this][holder_s1379] := false;
[L7729]               assert { :EventEmitted "Unfreeze_BLY" } true;
[L7730]               __ret_0_ := true;
[L3470]   RET         call __ret_0_ := unfreezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3471]               assume !revert && gas >= 0;
[L12149]  RET         call __ret_0_unfreezeAccount := unfreezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:01:42,115 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:01:42,116 INFO  L82        PathProgramCache]: Analyzing trace with hash 836400050, now seen corresponding path program 1 times
[2020-11-25 01:01:42,116 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:01:42,140 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:01:42,421 INFO  L134       CoverageAnalysis]: Checked inductivity of 1058 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1057 trivial. 0 not checked.
[2020-11-25 01:01:42,421 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:01:42,421 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:01:42,422 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:01:42,422 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:01:42,422 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:01:42,422 INFO  L87              Difference]: Start difference. First operand 10780 states and 12276 transitions. cyclomatic complexity: 1525 Second operand 3 states.
[2020-11-25 01:01:42,473 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:01:42,473 INFO  L93              Difference]: Finished difference Result 10796 states and 12320 transitions.
[2020-11-25 01:01:42,473 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:01:42,473 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10796 states and 12320 transitions.
[2020-11-25 01:01:42,490 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:42,509 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10796 states to 10796 states and 12320 transitions.
[2020-11-25 01:01:42,509 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2224
[2020-11-25 01:01:42,510 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2224
[2020-11-25 01:01:42,510 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10796 states and 12320 transitions.
[2020-11-25 01:01:42,515 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:01:42,515 INFO  L728         BuchiCegarLoop]: Abstraction has 10796 states and 12320 transitions.
[2020-11-25 01:01:42,521 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10796 states and 12320 transitions.
[2020-11-25 01:01:42,564 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10796 to 10784.
[2020-11-25 01:01:42,564 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10784 states.
[2020-11-25 01:01:42,576 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10784 states to 10784 states and 12280 transitions.
[2020-11-25 01:01:42,577 INFO  L751         BuchiCegarLoop]: Abstraction has 10784 states and 12280 transitions.
[2020-11-25 01:01:42,577 INFO  L631         BuchiCegarLoop]: Abstraction has 10784 states and 12280 transitions.
[2020-11-25 01:01:42,577 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-11-25 01:01:42,577 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10784 states and 12280 transitions.
[2020-11-25 01:01:42,594 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:42,594 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:01:42,594 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:01:42,595 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:01:42,595 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND TRUE   choice == 5
[L12146]              gas := gas - 21000;
[L12147]  COND TRUE   gas >= 0
[L12148]              assume msgvalue_MSG == 0;
[L12149]  CALL        call __ret_0_unfreezeAccount := unfreezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3432]               havoc __exception;
[L3433]               revert := false;
[L3434]   COND FALSE  !(__exception)
[L3470]   CALL        call __ret_0_ := unfreezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L7720]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND FALSE  !(DType[this] == BLY)
[L10693]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10698]  COND FALSE  !(DType[this] == Pausable)
[L10703]  COND TRUE   DType[this] == PauserRole
[L10704]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10704]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10705]  COND FALSE  !(revert)
[L10711]  COND FALSE  !(DType[this] == BLY)
[L10716]  COND TRUE   DType[this] == ERC20Pausable
[L10717]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND FALSE  !(account_s293 == owner_HxOwnable[this])
[L5880]               __ret_0_ := false;
[L10717]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10718]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7720]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7721]   COND FALSE  !(revert)
[L7724]   COND FALSE  !(!frozenAccount_BLY[this][holder_s1379])
[L7728]               frozenAccount_BLY[this][holder_s1379] := false;
[L7729]               assert { :EventEmitted "Unfreeze_BLY" } true;
[L7730]               __ret_0_ := true;
[L3470]   RET         call __ret_0_ := unfreezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3471]               assume !revert && gas >= 0;
[L12149]  RET         call __ret_0_unfreezeAccount := unfreezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:01:42,600 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:01:42,600 INFO  L82        PathProgramCache]: Analyzing trace with hash -1578376577, now seen corresponding path program 1 times
[2020-11-25 01:01:42,601 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:01:42,620 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:01:42,846 INFO  L134       CoverageAnalysis]: Checked inductivity of 1058 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1057 trivial. 0 not checked.
[2020-11-25 01:01:42,846 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:01:42,846 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:01:42,846 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:01:42,846 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:01:42,847 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:01:42,847 INFO  L87              Difference]: Start difference. First operand 10784 states and 12280 transitions. cyclomatic complexity: 1525 Second operand 3 states.
[2020-11-25 01:01:42,895 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:01:42,895 INFO  L93              Difference]: Finished difference Result 10784 states and 12276 transitions.
[2020-11-25 01:01:42,895 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:01:42,896 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10784 states and 12276 transitions.
[2020-11-25 01:01:42,912 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:42,930 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10784 states to 10784 states and 12276 transitions.
[2020-11-25 01:01:42,930 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2224
[2020-11-25 01:01:42,931 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2224
[2020-11-25 01:01:42,931 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10784 states and 12276 transitions.
[2020-11-25 01:01:42,936 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:01:42,936 INFO  L728         BuchiCegarLoop]: Abstraction has 10784 states and 12276 transitions.
[2020-11-25 01:01:42,942 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10784 states and 12276 transitions.
[2020-11-25 01:01:42,984 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10784 to 10784.
[2020-11-25 01:01:42,984 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10784 states.
[2020-11-25 01:01:42,995 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10784 states to 10784 states and 12276 transitions.
[2020-11-25 01:01:42,996 INFO  L751         BuchiCegarLoop]: Abstraction has 10784 states and 12276 transitions.
[2020-11-25 01:01:42,996 INFO  L631         BuchiCegarLoop]: Abstraction has 10784 states and 12276 transitions.
[2020-11-25 01:01:42,996 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-11-25 01:01:42,996 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10784 states and 12276 transitions.
[2020-11-25 01:01:43,005 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:43,005 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:01:43,005 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:01:43,007 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:01:43,007 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND TRUE   choice == 5
[L12146]              gas := gas - 21000;
[L12147]  COND TRUE   gas >= 0
[L12148]              assume msgvalue_MSG == 0;
[L12149]  CALL        call __ret_0_unfreezeAccount := unfreezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3432]               havoc __exception;
[L3433]               revert := false;
[L3434]   COND FALSE  !(__exception)
[L3470]   CALL        call __ret_0_ := unfreezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L7720]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND FALSE  !(DType[this] == BLY)
[L10693]  COND TRUE   DType[this] == ERC20Pausable
[L10694]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10694]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10695]  COND FALSE  !(revert)
[L10711]  COND FALSE  !(DType[this] == BLY)
[L10716]  COND TRUE   DType[this] == ERC20Pausable
[L10717]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND FALSE  !(account_s293 == owner_HxOwnable[this])
[L5880]               __ret_0_ := false;
[L10717]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10718]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7720]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7721]   COND FALSE  !(revert)
[L7724]   COND FALSE  !(!frozenAccount_BLY[this][holder_s1379])
[L7728]               frozenAccount_BLY[this][holder_s1379] := false;
[L7729]               assert { :EventEmitted "Unfreeze_BLY" } true;
[L7730]               __ret_0_ := true;
[L3470]   RET         call __ret_0_ := unfreezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3471]               assume !revert && gas >= 0;
[L12149]  RET         call __ret_0_unfreezeAccount := unfreezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:01:43,012 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:01:43,012 INFO  L82        PathProgramCache]: Analyzing trace with hash -914452791, now seen corresponding path program 1 times
[2020-11-25 01:01:43,013 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:01:43,032 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:01:43,287 INFO  L134       CoverageAnalysis]: Checked inductivity of 1058 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1057 trivial. 0 not checked.
[2020-11-25 01:01:43,288 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:01:43,288 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 01:01:43,288 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:01:43,288 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:01:43,288 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:01:43,288 INFO  L87              Difference]: Start difference. First operand 10784 states and 12276 transitions. cyclomatic complexity: 1521 Second operand 7 states.
[2020-11-25 01:01:43,399 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:01:43,399 INFO  L93              Difference]: Finished difference Result 10844 states and 12332 transitions.
[2020-11-25 01:01:43,399 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:01:43,399 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10844 states and 12332 transitions.
[2020-11-25 01:01:43,417 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:43,436 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10844 states to 10784 states and 12272 transitions.
[2020-11-25 01:01:43,436 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2224
[2020-11-25 01:01:43,437 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2224
[2020-11-25 01:01:43,437 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10784 states and 12272 transitions.
[2020-11-25 01:01:43,442 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:01:43,442 INFO  L728         BuchiCegarLoop]: Abstraction has 10784 states and 12272 transitions.
[2020-11-25 01:01:43,448 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10784 states and 12272 transitions.
[2020-11-25 01:01:43,491 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10784 to 10784.
[2020-11-25 01:01:43,491 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10784 states.
[2020-11-25 01:01:43,503 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10784 states to 10784 states and 12272 transitions.
[2020-11-25 01:01:43,503 INFO  L751         BuchiCegarLoop]: Abstraction has 10784 states and 12272 transitions.
[2020-11-25 01:01:43,503 INFO  L631         BuchiCegarLoop]: Abstraction has 10784 states and 12272 transitions.
[2020-11-25 01:01:43,503 INFO  L445         BuchiCegarLoop]: ======== Iteration 36============
[2020-11-25 01:01:43,503 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10784 states and 12272 transitions.
[2020-11-25 01:01:43,512 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 01:01:43,512 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:01:43,512 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:01:43,514 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:01:43,514 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND TRUE   choice == 5
[L12146]              gas := gas - 21000;
[L12147]  COND TRUE   gas >= 0
[L12148]              assume msgvalue_MSG == 0;
[L12149]  CALL        call __ret_0_unfreezeAccount := unfreezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3432]               havoc __exception;
[L3433]               revert := false;
[L3434]   COND FALSE  !(__exception)
[L3470]   CALL        call __ret_0_ := unfreezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L7720]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND FALSE  !(account_s293 == owner_HxOwnable[this])
[L5880]               __ret_0_ := false;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7720]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7721]   COND FALSE  !(revert)
[L7724]   COND FALSE  !(!frozenAccount_BLY[this][holder_s1379])
[L7728]               frozenAccount_BLY[this][holder_s1379] := false;
[L7729]               assert { :EventEmitted "Unfreeze_BLY" } true;
[L7730]               __ret_0_ := true;
[L3470]   RET         call __ret_0_ := unfreezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3471]               assume !revert && gas >= 0;
[L12149]  RET         call __ret_0_unfreezeAccount := unfreezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:01:43,518 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:01:43,518 INFO  L82        PathProgramCache]: Analyzing trace with hash -1193502391, now seen corresponding path program 1 times
[2020-11-25 01:01:43,519 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:01:43,538 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:01:43,804 INFO  L134       CoverageAnalysis]: Checked inductivity of 1058 backedges. 1 proven. 96 refuted. 0 times theorem prover too weak. 961 trivial. 0 not checked.
[2020-11-25 01:01:43,805 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:01:43,805 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-11-25 01:01:43,805 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:01:43,805 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 01:01:43,805 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-11-25 01:01:43,805 INFO  L87              Difference]: Start difference. First operand 10784 states and 12272 transitions. cyclomatic complexity: 1517 Second operand 11 states.
[2020-11-25 01:01:46,954 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:01:46,954 INFO  L93              Difference]: Finished difference Result 10812 states and 12356 transitions.
[2020-11-25 01:01:46,955 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 01:01:46,955 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10812 states and 12356 transitions.
[2020-11-25 01:01:46,988 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 01:01:47,018 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10812 states to 10812 states and 12356 transitions.
[2020-11-25 01:01:47,018 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2238
[2020-11-25 01:01:47,020 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2238
[2020-11-25 01:01:47,020 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10812 states and 12356 transitions.
[2020-11-25 01:01:47,028 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:01:47,028 INFO  L728         BuchiCegarLoop]: Abstraction has 10812 states and 12356 transitions.
[2020-11-25 01:01:47,035 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10812 states and 12356 transitions.
[2020-11-25 01:01:47,110 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10812 to 10812.
[2020-11-25 01:01:47,110 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10812 states.
[2020-11-25 01:01:47,127 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10812 states to 10812 states and 12356 transitions.
[2020-11-25 01:01:47,127 INFO  L751         BuchiCegarLoop]: Abstraction has 10812 states and 12356 transitions.
[2020-11-25 01:01:47,127 INFO  L631         BuchiCegarLoop]: Abstraction has 10812 states and 12356 transitions.
[2020-11-25 01:01:47,127 INFO  L445         BuchiCegarLoop]: ======== Iteration 37============
[2020-11-25 01:01:47,127 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10812 states and 12356 transitions.
[2020-11-25 01:01:47,137 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 01:01:47,137 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:01:47,137 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:01:47,139 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:01:47,139 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND TRUE   choice == 6
[L12140]              gas := gas - 21000;
[L12141]  COND TRUE   gas >= 0
[L12142]              assume msgvalue_MSG == 0;
[L12143]  CALL        call __ret_0_freezeAccount := freezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3351]               havoc __exception;
[L3352]               revert := false;
[L3353]   COND FALSE  !(__exception)
[L3389]   CALL        call __ret_0_ := freezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L7689]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND FALSE  !(account_s293 == owner_HxOwnable[this])
[L5880]               __ret_0_ := false;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7689]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7690]   COND FALSE  !(revert)
[L7693]   COND FALSE  !(!!frozenAccount_BLY[this][holder_s1351])
[L7697]               frozenAccount_BLY[this][holder_s1351] := true;
[L7698]               assert { :EventEmitted "Freeze_BLY" } true;
[L7699]               __ret_0_ := true;
[L3389]   RET         call __ret_0_ := freezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3390]               assume !revert && gas >= 0;
[L12143]  RET         call __ret_0_freezeAccount := freezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND TRUE   choice == 5
[L12146]              gas := gas - 21000;
[L12147]  COND TRUE   gas >= 0
[L12148]              assume msgvalue_MSG == 0;
[L12149]  CALL        call __ret_0_unfreezeAccount := unfreezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3432]               havoc __exception;
[L3433]               revert := false;
[L3434]   COND FALSE  !(__exception)
[L3470]   CALL        call __ret_0_ := unfreezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L7720]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND FALSE  !(DType[this] == BLY)
[L10716]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10721]  COND TRUE   DType[this] == Pausable
[L10722]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10722]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10723]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7720]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7721]   COND FALSE  !(revert)
[L7724]   COND FALSE  !(!frozenAccount_BLY[this][holder_s1379])
[L7728]               frozenAccount_BLY[this][holder_s1379] := false;
[L7729]               assert { :EventEmitted "Unfreeze_BLY" } true;
[L7730]               __ret_0_ := true;
[L3470]   RET         call __ret_0_ := unfreezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3471]               assume !revert && gas >= 0;
[L12149]  RET         call __ret_0_unfreezeAccount := unfreezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:01:47,144 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:01:47,144 INFO  L82        PathProgramCache]: Analyzing trace with hash 1440441423, now seen corresponding path program 1 times
[2020-11-25 01:01:47,145 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:01:47,169 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:01:47,506 INFO  L134       CoverageAnalysis]: Checked inductivity of 1058 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 1057 trivial. 0 not checked.
[2020-11-25 01:01:47,506 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:01:47,506 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-11-25 01:01:47,507 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:01:47,507 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 01:01:47,507 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 01:01:47,507 INFO  L87              Difference]: Start difference. First operand 10812 states and 12356 transitions. cyclomatic complexity: 1577 Second operand 12 states.
[2020-11-25 01:01:51,159 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:01:51,159 INFO  L93              Difference]: Finished difference Result 11186 states and 12820 transitions.
[2020-11-25 01:01:51,159 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 01:01:51,159 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11186 states and 12820 transitions.
[2020-11-25 01:01:51,181 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 01:01:51,203 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11186 states to 11050 states and 12656 transitions.
[2020-11-25 01:01:51,203 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2406
[2020-11-25 01:01:51,204 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2406
[2020-11-25 01:01:51,204 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11050 states and 12656 transitions.
[2020-11-25 01:01:51,210 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:01:51,210 INFO  L728         BuchiCegarLoop]: Abstraction has 11050 states and 12656 transitions.
[2020-11-25 01:01:51,216 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11050 states and 12656 transitions.
[2020-11-25 01:01:51,267 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11050 to 10822.
[2020-11-25 01:01:51,267 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10822 states.
[2020-11-25 01:01:51,280 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10822 states to 10822 states and 12390 transitions.
[2020-11-25 01:01:51,280 INFO  L751         BuchiCegarLoop]: Abstraction has 10822 states and 12390 transitions.
[2020-11-25 01:01:51,280 INFO  L631         BuchiCegarLoop]: Abstraction has 10822 states and 12390 transitions.
[2020-11-25 01:01:51,281 INFO  L445         BuchiCegarLoop]: ======== Iteration 38============
[2020-11-25 01:01:51,281 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10822 states and 12390 transitions.
[2020-11-25 01:01:51,290 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 01:01:51,291 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:01:51,291 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:01:51,292 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:01:51,292 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:01:51,297 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:01:51,297 INFO  L82        PathProgramCache]: Analyzing trace with hash 1345740243, now seen corresponding path program 1 times
[2020-11-25 01:01:51,298 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:01:51,323 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:01:52,077 INFO  L134       CoverageAnalysis]: Checked inductivity of 1093 backedges. 105 proven. 6 refuted. 0 times theorem prover too weak. 982 trivial. 0 not checked.
[2020-11-25 01:01:52,077 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:01:52,078 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 01:01:52,079 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:01:52,079 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 01:01:52,079 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 01:01:52,079 INFO  L87              Difference]: Start difference. First operand 10822 states and 12390 transitions. cyclomatic complexity: 1603 Second operand 26 states.
[2020-11-25 01:02:04,514 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:02:04,514 INFO  L93              Difference]: Finished difference Result 11104 states and 12760 transitions.
[2020-11-25 01:02:04,515 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 01:02:04,515 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11104 states and 12760 transitions.
[2020-11-25 01:02:04,535 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 01:02:04,557 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11104 states to 11104 states and 12760 transitions.
[2020-11-25 01:02:04,557 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2430
[2020-11-25 01:02:04,558 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2430
[2020-11-25 01:02:04,558 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11104 states and 12760 transitions.
[2020-11-25 01:02:04,564 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:02:04,565 INFO  L728         BuchiCegarLoop]: Abstraction has 11104 states and 12760 transitions.
[2020-11-25 01:02:04,570 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11104 states and 12760 transitions.
[2020-11-25 01:02:04,622 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11104 to 10822.
[2020-11-25 01:02:04,622 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10822 states.
[2020-11-25 01:02:04,636 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10822 states to 10822 states and 12390 transitions.
[2020-11-25 01:02:04,636 INFO  L751         BuchiCegarLoop]: Abstraction has 10822 states and 12390 transitions.
[2020-11-25 01:02:04,636 INFO  L631         BuchiCegarLoop]: Abstraction has 10822 states and 12390 transitions.
[2020-11-25 01:02:04,636 INFO  L445         BuchiCegarLoop]: ======== Iteration 39============
[2020-11-25 01:02:04,636 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10822 states and 12390 transitions.
[2020-11-25 01:02:04,645 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 01:02:04,645 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:02:04,646 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:02:04,647 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:02:04,647 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND FALSE  !(DType[this] == BLY)
[L6662]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6667]   COND TRUE   DType[this] == HxERC20
[L6668]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6668]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6669]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:02:04,652 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:02:04,652 INFO  L82        PathProgramCache]: Analyzing trace with hash -1389469346, now seen corresponding path program 1 times
[2020-11-25 01:02:04,653 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:02:04,673 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:02:04,935 INFO  L134       CoverageAnalysis]: Checked inductivity of 1089 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1088 trivial. 0 not checked.
[2020-11-25 01:02:04,935 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:02:04,935 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 01:02:04,935 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:02:04,935 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:02:04,935 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:02:04,936 INFO  L87              Difference]: Start difference. First operand 10822 states and 12390 transitions. cyclomatic complexity: 1603 Second operand 8 states.
[2020-11-25 01:02:05,060 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:02:05,060 INFO  L93              Difference]: Finished difference Result 10962 states and 12530 transitions.
[2020-11-25 01:02:05,060 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:02:05,061 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10962 states and 12530 transitions.
[2020-11-25 01:02:05,080 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 01:02:05,101 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10962 states to 10802 states and 12362 transitions.
[2020-11-25 01:02:05,101 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2234
[2020-11-25 01:02:05,102 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2234
[2020-11-25 01:02:05,102 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10802 states and 12362 transitions.
[2020-11-25 01:02:05,108 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:02:05,108 INFO  L728         BuchiCegarLoop]: Abstraction has 10802 states and 12362 transitions.
[2020-11-25 01:02:05,114 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10802 states and 12362 transitions.
[2020-11-25 01:02:05,165 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10802 to 10802.
[2020-11-25 01:02:05,165 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10802 states.
[2020-11-25 01:02:05,179 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10802 states to 10802 states and 12362 transitions.
[2020-11-25 01:02:05,179 INFO  L751         BuchiCegarLoop]: Abstraction has 10802 states and 12362 transitions.
[2020-11-25 01:02:05,179 INFO  L631         BuchiCegarLoop]: Abstraction has 10802 states and 12362 transitions.
[2020-11-25 01:02:05,179 INFO  L445         BuchiCegarLoop]: ======== Iteration 40============
[2020-11-25 01:02:05,179 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10802 states and 12362 transitions.
[2020-11-25 01:02:05,189 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 01:02:05,189 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:02:05,189 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:02:05,191 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:02:05,191 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND FALSE  !(DType[this] == BLY)
[L7134]   COND TRUE   DType[this] == ERC20Pausable
[L7135]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND FALSE  !(DType[this] == BLY)
[L6662]   COND TRUE   DType[this] == ERC20Pausable
[L6663]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6663]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6664]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7135]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7136]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:02:05,196 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:02:05,196 INFO  L82        PathProgramCache]: Analyzing trace with hash 869922312, now seen corresponding path program 1 times
[2020-11-25 01:02:05,196 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:02:05,217 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:02:05,475 INFO  L134       CoverageAnalysis]: Checked inductivity of 1089 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1088 trivial. 0 not checked.
[2020-11-25 01:02:05,475 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:02:05,475 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 01:02:05,475 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:02:05,476 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:02:05,476 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:02:05,476 INFO  L87              Difference]: Start difference. First operand 10802 states and 12362 transitions. cyclomatic complexity: 1595 Second operand 7 states.
[2020-11-25 01:02:05,585 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:02:05,585 INFO  L93              Difference]: Finished difference Result 10910 states and 12466 transitions.
[2020-11-25 01:02:05,585 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:02:05,585 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10910 states and 12466 transitions.
[2020-11-25 01:02:05,605 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 01:02:05,626 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10910 states to 10782 states and 12334 transitions.
[2020-11-25 01:02:05,626 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2230
[2020-11-25 01:02:05,627 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2230
[2020-11-25 01:02:05,627 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10782 states and 12334 transitions.
[2020-11-25 01:02:05,633 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:02:05,633 INFO  L728         BuchiCegarLoop]: Abstraction has 10782 states and 12334 transitions.
[2020-11-25 01:02:05,638 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10782 states and 12334 transitions.
[2020-11-25 01:02:05,687 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10782 to 10782.
[2020-11-25 01:02:05,687 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10782 states.
[2020-11-25 01:02:05,701 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10782 states to 10782 states and 12334 transitions.
[2020-11-25 01:02:05,701 INFO  L751         BuchiCegarLoop]: Abstraction has 10782 states and 12334 transitions.
[2020-11-25 01:02:05,701 INFO  L631         BuchiCegarLoop]: Abstraction has 10782 states and 12334 transitions.
[2020-11-25 01:02:05,701 INFO  L445         BuchiCegarLoop]: ======== Iteration 41============
[2020-11-25 01:02:05,701 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10782 states and 12334 transitions.
[2020-11-25 01:02:05,711 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 01:02:05,711 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:02:05,711 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:02:05,712 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:02:05,712 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND FALSE  !(DType[this] == BLY)
[L6662]   COND TRUE   DType[this] == ERC20Pausable
[L6663]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6663]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6664]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:02:05,716 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:02:05,716 INFO  L82        PathProgramCache]: Analyzing trace with hash 418528825, now seen corresponding path program 1 times
[2020-11-25 01:02:05,717 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:02:05,738 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:02:06,021 INFO  L134       CoverageAnalysis]: Checked inductivity of 1089 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1088 trivial. 0 not checked.
[2020-11-25 01:02:06,021 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:02:06,021 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 01:02:06,022 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:02:06,022 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:02:06,022 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:02:06,022 INFO  L87              Difference]: Start difference. First operand 10782 states and 12334 transitions. cyclomatic complexity: 1587 Second operand 8 states.
[2020-11-25 01:02:06,142 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:02:06,142 INFO  L93              Difference]: Finished difference Result 10914 states and 12462 transitions.
[2020-11-25 01:02:06,143 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:02:06,143 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10914 states and 12462 transitions.
[2020-11-25 01:02:06,162 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 01:02:06,184 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10914 states to 10762 states and 12306 transitions.
[2020-11-25 01:02:06,184 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2226
[2020-11-25 01:02:06,184 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2226
[2020-11-25 01:02:06,185 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10762 states and 12306 transitions.
[2020-11-25 01:02:06,191 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:02:06,191 INFO  L728         BuchiCegarLoop]: Abstraction has 10762 states and 12306 transitions.
[2020-11-25 01:02:06,196 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10762 states and 12306 transitions.
[2020-11-25 01:02:06,245 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10762 to 10762.
[2020-11-25 01:02:06,245 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10762 states.
[2020-11-25 01:02:06,259 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10762 states to 10762 states and 12306 transitions.
[2020-11-25 01:02:06,259 INFO  L751         BuchiCegarLoop]: Abstraction has 10762 states and 12306 transitions.
[2020-11-25 01:02:06,259 INFO  L631         BuchiCegarLoop]: Abstraction has 10762 states and 12306 transitions.
[2020-11-25 01:02:06,259 INFO  L445         BuchiCegarLoop]: ======== Iteration 42============
[2020-11-25 01:02:06,259 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10762 states and 12306 transitions.
[2020-11-25 01:02:06,268 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 01:02:06,268 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:02:06,268 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:02:06,270 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:02:06,270 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:02:06,275 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:02:06,275 INFO  L82        PathProgramCache]: Analyzing trace with hash 1816990404, now seen corresponding path program 1 times
[2020-11-25 01:02:06,276 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:02:06,300 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:02:06,956 INFO  L134       CoverageAnalysis]: Checked inductivity of 1089 backedges. 96 proven. 6 refuted. 0 times theorem prover too weak. 987 trivial. 0 not checked.
[2020-11-25 01:02:06,956 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:02:06,956 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 01:02:06,957 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:02:06,957 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 01:02:06,957 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 01:02:06,957 INFO  L87              Difference]: Start difference. First operand 10762 states and 12306 transitions. cyclomatic complexity: 1579 Second operand 26 states.
[2020-11-25 01:02:20,033 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:02:20,033 INFO  L93              Difference]: Finished difference Result 11088 states and 12708 transitions.
[2020-11-25 01:02:20,033 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 01:02:20,033 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11088 states and 12708 transitions.
[2020-11-25 01:02:20,056 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 01:02:20,079 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11088 states to 11088 states and 12708 transitions.
[2020-11-25 01:02:20,079 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2438
[2020-11-25 01:02:20,080 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2438
[2020-11-25 01:02:20,080 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11088 states and 12708 transitions.
[2020-11-25 01:02:20,086 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:02:20,086 INFO  L728         BuchiCegarLoop]: Abstraction has 11088 states and 12708 transitions.
[2020-11-25 01:02:20,092 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11088 states and 12708 transitions.
[2020-11-25 01:02:20,143 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11088 to 10786.
[2020-11-25 01:02:20,143 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10786 states.
[2020-11-25 01:02:20,156 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10786 states to 10786 states and 12324 transitions.
[2020-11-25 01:02:20,156 INFO  L751         BuchiCegarLoop]: Abstraction has 10786 states and 12324 transitions.
[2020-11-25 01:02:20,156 INFO  L631         BuchiCegarLoop]: Abstraction has 10786 states and 12324 transitions.
[2020-11-25 01:02:20,156 INFO  L445         BuchiCegarLoop]: ======== Iteration 43============
[2020-11-25 01:02:20,156 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10786 states and 12324 transitions.
[2020-11-25 01:02:20,168 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 01:02:20,169 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:02:20,169 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:02:20,171 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:02:20,171 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false
[L8250]   CALL        call __var_67 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8250]   RET         call __var_67 := FreshRefGenerator__success();
[L8251]   COND FALSE  !(revert)
[L8254]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8255]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] := true;
[L8256]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == zerointRefArr();
[L8257]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1645] == __var_67;
[L8258]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8260]               idx_s1645 := 0;
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:02:20,177 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:02:20,177 INFO  L82        PathProgramCache]: Analyzing trace with hash -491424131, now seen corresponding path program 1 times
[2020-11-25 01:02:20,178 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:02:20,201 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:02:20,618 INFO  L134       CoverageAnalysis]: Checked inductivity of 1089 backedges. 1 proven. 96 refuted. 0 times theorem prover too weak. 992 trivial. 0 not checked.
[2020-11-25 01:02:20,618 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:02:20,618 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [15] total 15
[2020-11-25 01:02:20,619 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:02:20,619 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 01:02:20,619 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=179, Unknown=0, NotChecked=0, Total=210
[2020-11-25 01:02:20,619 INFO  L87              Difference]: Start difference. First operand 10786 states and 12324 transitions. cyclomatic complexity: 1573 Second operand 15 states.
[2020-11-25 01:02:25,338 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:02:25,338 INFO  L93              Difference]: Finished difference Result 11050 states and 12654 transitions.
[2020-11-25 01:02:25,338 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 01:02:25,338 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11050 states and 12654 transitions.
[2020-11-25 01:02:25,359 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 01:02:25,380 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11050 states to 11050 states and 12654 transitions.
[2020-11-25 01:02:25,380 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2418
[2020-11-25 01:02:25,381 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2418
[2020-11-25 01:02:25,381 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11050 states and 12654 transitions.
[2020-11-25 01:02:25,387 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:02:25,388 INFO  L728         BuchiCegarLoop]: Abstraction has 11050 states and 12654 transitions.
[2020-11-25 01:02:25,393 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11050 states and 12654 transitions.
[2020-11-25 01:02:25,443 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11050 to 10798.
[2020-11-25 01:02:25,443 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10798 states.
[2020-11-25 01:02:25,457 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10798 states to 10798 states and 12366 transitions.
[2020-11-25 01:02:25,457 INFO  L751         BuchiCegarLoop]: Abstraction has 10798 states and 12366 transitions.
[2020-11-25 01:02:25,457 INFO  L631         BuchiCegarLoop]: Abstraction has 10798 states and 12366 transitions.
[2020-11-25 01:02:25,457 INFO  L445         BuchiCegarLoop]: ======== Iteration 44============
[2020-11-25 01:02:25,457 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10798 states and 12366 transitions.
[2020-11-25 01:02:25,467 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 01:02:25,467 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:02:25,467 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:02:25,468 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:02:25,468 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND FALSE  !(choice == 5)
[L12151]  COND TRUE   choice == 4
[L12152]              gas := gas - 21000;
[L12153]  COND TRUE   gas >= 0
[L12154]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12155]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12156]              assume msgvalue_MSG == 0;
[L12157]  CALL        call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7756]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND FALSE  !(DType[this] == BLY)
[L10693]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10698]  COND FALSE  !(DType[this] == Pausable)
[L10703]  COND TRUE   DType[this] == PauserRole
[L10704]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10704]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10705]  COND FALSE  !(revert)
[L10711]  COND FALSE  !(DType[this] == BLY)
[L10716]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10721]  COND TRUE   DType[this] == Pausable
[L10722]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND FALSE  !(account_s293 == owner_HxOwnable[this])
[L5880]               __ret_0_ := false;
[L10722]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10723]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7756]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7757]   COND FALSE  !(revert)
[L7760]   COND FALSE  !(!(_balances_HxERC20[this][holder_s1410] >= value_s1410))
[L7764]   CALL        call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7963]   CALL        call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L7963]   RET         call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L7964]   COND FALSE  !(revert)
[L7967]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1527];
[L7968]               _balances_HxERC20[this][holder_s1527] := __var_53;
[L7969]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1527];
[L7970]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] == false
[L7971]   CALL        call __var_54 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7971]   RET         call __var_54 := FreshRefGenerator__success();
[L7972]   COND FALSE  !(revert)
[L7975]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7976]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] := true;
[L7977]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == zerointRefArr();
[L7978]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1527] == __var_54;
[L7979]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7981]   CALL        call __var_56 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7981]   RET         call __var_56 := FreshRefGenerator__success();
[L7982]   COND FALSE  !(revert)
[L7985]               assume DType[__var_56] == BLY.LockInfo;
[L7986]   CALL        call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5521]               _releaseTime_BLY.LockInfo[this] := _releaseTime;
[L5522]               _amount_BLY.LockInfo[this] := _amount;
[L7986]   RET         call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L7987]   COND FALSE  !(revert)
[L7990]               __var_55 := __var_56;
[L7991]               __var_58 := Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]];
[L7992]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]][__var_58] := __var_55;
[L7993]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] := __var_58 + 1;
[L7994]               assert { :EventEmitted "Lock_BLY" } true;
[L7995]               __ret_0_ := true;
[L7764]   RET         call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7765]   COND FALSE  !(revert)
[L7768]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12157]  RET         call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:02:25,473 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:02:25,473 INFO  L82        PathProgramCache]: Analyzing trace with hash -1640838117, now seen corresponding path program 1 times
[2020-11-25 01:02:25,473 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:02:25,494 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:02:25,745 INFO  L134       CoverageAnalysis]: Checked inductivity of 1136 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1135 trivial. 0 not checked.
[2020-11-25 01:02:25,746 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:02:25,746 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:02:25,746 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:02:25,746 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:02:25,746 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:02:25,746 INFO  L87              Difference]: Start difference. First operand 10798 states and 12366 transitions. cyclomatic complexity: 1603 Second operand 3 states.
[2020-11-25 01:02:25,802 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:02:25,802 INFO  L93              Difference]: Finished difference Result 10822 states and 12418 transitions.
[2020-11-25 01:02:25,802 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:02:25,802 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10822 states and 12418 transitions.
[2020-11-25 01:02:25,821 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 01:02:25,842 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10822 states to 10822 states and 12418 transitions.
[2020-11-25 01:02:25,842 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2226
[2020-11-25 01:02:25,843 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2226
[2020-11-25 01:02:25,843 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10822 states and 12418 transitions.
[2020-11-25 01:02:25,849 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:02:25,849 INFO  L728         BuchiCegarLoop]: Abstraction has 10822 states and 12418 transitions.
[2020-11-25 01:02:25,855 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10822 states and 12418 transitions.
[2020-11-25 01:02:25,904 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10822 to 10810.
[2020-11-25 01:02:25,904 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10810 states.
[2020-11-25 01:02:25,918 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10810 states to 10810 states and 12378 transitions.
[2020-11-25 01:02:25,918 INFO  L751         BuchiCegarLoop]: Abstraction has 10810 states and 12378 transitions.
[2020-11-25 01:02:25,918 INFO  L631         BuchiCegarLoop]: Abstraction has 10810 states and 12378 transitions.
[2020-11-25 01:02:25,918 INFO  L445         BuchiCegarLoop]: ======== Iteration 45============
[2020-11-25 01:02:25,918 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10810 states and 12378 transitions.
[2020-11-25 01:02:25,928 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 01:02:25,928 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:02:25,928 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:02:25,930 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:02:25,930 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND FALSE  !(choice == 5)
[L12151]  COND TRUE   choice == 4
[L12152]              gas := gas - 21000;
[L12153]  COND TRUE   gas >= 0
[L12154]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12155]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12156]              assume msgvalue_MSG == 0;
[L12157]  CALL        call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7756]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND FALSE  !(DType[this] == BLY)
[L10716]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10721]  COND FALSE  !(DType[this] == Pausable)
[L10726]  COND TRUE   DType[this] == PauserRole
[L10727]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND FALSE  !(account_s293 == owner_HxOwnable[this])
[L5880]               __ret_0_ := false;
[L10727]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10728]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7756]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7757]   COND FALSE  !(revert)
[L7760]   COND FALSE  !(!(_balances_HxERC20[this][holder_s1410] >= value_s1410))
[L7764]   CALL        call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7963]   CALL        call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L7963]   RET         call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L7964]   COND FALSE  !(revert)
[L7967]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1527];
[L7968]               _balances_HxERC20[this][holder_s1527] := __var_53;
[L7969]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1527];
[L7970]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] == false
[L7971]   CALL        call __var_54 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7971]   RET         call __var_54 := FreshRefGenerator__success();
[L7972]   COND FALSE  !(revert)
[L7975]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7976]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] := true;
[L7977]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == zerointRefArr();
[L7978]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1527] == __var_54;
[L7979]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7981]   CALL        call __var_56 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7981]   RET         call __var_56 := FreshRefGenerator__success();
[L7982]   COND FALSE  !(revert)
[L7985]               assume DType[__var_56] == BLY.LockInfo;
[L7986]   CALL        call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5521]               _releaseTime_BLY.LockInfo[this] := _releaseTime;
[L5522]               _amount_BLY.LockInfo[this] := _amount;
[L7986]   RET         call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L7987]   COND FALSE  !(revert)
[L7990]               __var_55 := __var_56;
[L7991]               __var_58 := Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]];
[L7992]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]][__var_58] := __var_55;
[L7993]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] := __var_58 + 1;
[L7994]               assert { :EventEmitted "Lock_BLY" } true;
[L7995]               __ret_0_ := true;
[L7764]   RET         call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7765]   COND FALSE  !(revert)
[L7768]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12157]  RET         call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:02:25,934 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:02:25,934 INFO  L82        PathProgramCache]: Analyzing trace with hash -260353936, now seen corresponding path program 1 times
[2020-11-25 01:02:25,935 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:02:25,955 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:02:26,202 INFO  L134       CoverageAnalysis]: Checked inductivity of 1136 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1135 trivial. 0 not checked.
[2020-11-25 01:02:26,202 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:02:26,203 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:02:26,203 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:02:26,203 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:02:26,203 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:02:26,203 INFO  L87              Difference]: Start difference. First operand 10810 states and 12378 transitions. cyclomatic complexity: 1603 Second operand 3 states.
[2020-11-25 01:02:26,258 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:02:26,258 INFO  L93              Difference]: Finished difference Result 10822 states and 12414 transitions.
[2020-11-25 01:02:26,258 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:02:26,258 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10822 states and 12414 transitions.
[2020-11-25 01:02:26,277 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 01:02:26,297 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10822 states to 10822 states and 12414 transitions.
[2020-11-25 01:02:26,298 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2226
[2020-11-25 01:02:26,298 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2226
[2020-11-25 01:02:26,298 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10822 states and 12414 transitions.
[2020-11-25 01:02:26,304 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:02:26,304 INFO  L728         BuchiCegarLoop]: Abstraction has 10822 states and 12414 transitions.
[2020-11-25 01:02:26,310 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10822 states and 12414 transitions.
[2020-11-25 01:02:26,359 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10822 to 10810.
[2020-11-25 01:02:26,359 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10810 states.
[2020-11-25 01:02:26,372 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10810 states to 10810 states and 12374 transitions.
[2020-11-25 01:02:26,372 INFO  L751         BuchiCegarLoop]: Abstraction has 10810 states and 12374 transitions.
[2020-11-25 01:02:26,372 INFO  L631         BuchiCegarLoop]: Abstraction has 10810 states and 12374 transitions.
[2020-11-25 01:02:26,372 INFO  L445         BuchiCegarLoop]: ======== Iteration 46============
[2020-11-25 01:02:26,372 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10810 states and 12374 transitions.
[2020-11-25 01:02:26,382 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 01:02:26,382 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:02:26,382 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:02:26,384 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:02:26,384 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND FALSE  !(choice == 5)
[L12151]  COND TRUE   choice == 4
[L12152]              gas := gas - 21000;
[L12153]  COND TRUE   gas >= 0
[L12154]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12155]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12156]              assume msgvalue_MSG == 0;
[L12157]  CALL        call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7756]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND FALSE  !(DType[this] == BLY)
[L10693]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10698]  COND TRUE   DType[this] == Pausable
[L10699]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10699]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10700]  COND FALSE  !(revert)
[L10711]  COND FALSE  !(DType[this] == BLY)
[L10716]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10721]  COND FALSE  !(DType[this] == Pausable)
[L10726]  COND TRUE   DType[this] == PauserRole
[L10727]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND FALSE  !(account_s293 == owner_HxOwnable[this])
[L5880]               __ret_0_ := false;
[L10727]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10728]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7756]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7757]   COND FALSE  !(revert)
[L7760]   COND FALSE  !(!(_balances_HxERC20[this][holder_s1410] >= value_s1410))
[L7764]   CALL        call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7963]   CALL        call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L7963]   RET         call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L7964]   COND FALSE  !(revert)
[L7967]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1527];
[L7968]               _balances_HxERC20[this][holder_s1527] := __var_53;
[L7969]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1527];
[L7970]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] == false
[L7971]   CALL        call __var_54 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7971]   RET         call __var_54 := FreshRefGenerator__success();
[L7972]   COND FALSE  !(revert)
[L7975]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7976]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] := true;
[L7977]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == zerointRefArr();
[L7978]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1527] == __var_54;
[L7979]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7981]   CALL        call __var_56 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7981]   RET         call __var_56 := FreshRefGenerator__success();
[L7982]   COND FALSE  !(revert)
[L7985]               assume DType[__var_56] == BLY.LockInfo;
[L7986]   CALL        call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5521]               _releaseTime_BLY.LockInfo[this] := _releaseTime;
[L5522]               _amount_BLY.LockInfo[this] := _amount;
[L7986]   RET         call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L7987]   COND FALSE  !(revert)
[L7990]               __var_55 := __var_56;
[L7991]               __var_58 := Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]];
[L7992]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]][__var_58] := __var_55;
[L7993]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] := __var_58 + 1;
[L7994]               assert { :EventEmitted "Lock_BLY" } true;
[L7995]               __ret_0_ := true;
[L7764]   RET         call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7765]   COND FALSE  !(revert)
[L7768]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12157]  RET         call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:02:26,389 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:02:26,389 INFO  L82        PathProgramCache]: Analyzing trace with hash 1912001690, now seen corresponding path program 1 times
[2020-11-25 01:02:26,390 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:02:26,409 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:02:26,732 INFO  L134       CoverageAnalysis]: Checked inductivity of 1136 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1135 trivial. 0 not checked.
[2020-11-25 01:02:26,733 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:02:26,733 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:02:26,733 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:02:26,733 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:02:26,733 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:02:26,733 INFO  L87              Difference]: Start difference. First operand 10810 states and 12374 transitions. cyclomatic complexity: 1599 Second operand 3 states.
[2020-11-25 01:02:26,785 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:02:26,785 INFO  L93              Difference]: Finished difference Result 10822 states and 12410 transitions.
[2020-11-25 01:02:26,785 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:02:26,786 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10822 states and 12410 transitions.
[2020-11-25 01:02:26,804 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 01:02:26,825 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10822 states to 10822 states and 12410 transitions.
[2020-11-25 01:02:26,825 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2226
[2020-11-25 01:02:26,826 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2226
[2020-11-25 01:02:26,826 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10822 states and 12410 transitions.
[2020-11-25 01:02:26,832 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:02:26,832 INFO  L728         BuchiCegarLoop]: Abstraction has 10822 states and 12410 transitions.
[2020-11-25 01:02:26,838 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10822 states and 12410 transitions.
[2020-11-25 01:02:26,889 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10822 to 10810.
[2020-11-25 01:02:26,889 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10810 states.
[2020-11-25 01:02:26,903 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10810 states to 10810 states and 12370 transitions.
[2020-11-25 01:02:26,903 INFO  L751         BuchiCegarLoop]: Abstraction has 10810 states and 12370 transitions.
[2020-11-25 01:02:26,903 INFO  L631         BuchiCegarLoop]: Abstraction has 10810 states and 12370 transitions.
[2020-11-25 01:02:26,903 INFO  L445         BuchiCegarLoop]: ======== Iteration 47============
[2020-11-25 01:02:26,903 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10810 states and 12370 transitions.
[2020-11-25 01:02:26,913 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 01:02:26,913 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:02:26,913 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:02:26,915 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:02:26,915 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND FALSE  !(choice == 5)
[L12151]  COND TRUE   choice == 4
[L12152]              gas := gas - 21000;
[L12153]  COND TRUE   gas >= 0
[L12154]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12155]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12156]              assume msgvalue_MSG == 0;
[L12157]  CALL        call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7756]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND FALSE  !(account_s293 == owner_HxOwnable[this])
[L5880]               __ret_0_ := false;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7756]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7757]   COND FALSE  !(revert)
[L7760]   COND FALSE  !(!(_balances_HxERC20[this][holder_s1410] >= value_s1410))
[L7764]   CALL        call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7963]   CALL        call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L7963]   RET         call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L7964]   COND FALSE  !(revert)
[L7967]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1527];
[L7968]               _balances_HxERC20[this][holder_s1527] := __var_53;
[L7969]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1527];
[L7970]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] == false
[L7971]   CALL        call __var_54 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7971]   RET         call __var_54 := FreshRefGenerator__success();
[L7972]   COND FALSE  !(revert)
[L7975]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7976]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] := true;
[L7977]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == zerointRefArr();
[L7978]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1527] == __var_54;
[L7979]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7981]   CALL        call __var_56 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7981]   RET         call __var_56 := FreshRefGenerator__success();
[L7982]   COND FALSE  !(revert)
[L7985]               assume DType[__var_56] == BLY.LockInfo;
[L7986]   CALL        call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5521]               _releaseTime_BLY.LockInfo[this] := _releaseTime;
[L5522]               _amount_BLY.LockInfo[this] := _amount;
[L7986]   RET         call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L7987]   COND FALSE  !(revert)
[L7990]               __var_55 := __var_56;
[L7991]               __var_58 := Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]];
[L7992]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]][__var_58] := __var_55;
[L7993]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] := __var_58 + 1;
[L7994]               assert { :EventEmitted "Lock_BLY" } true;
[L7995]               __ret_0_ := true;
[L7764]   RET         call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7765]   COND FALSE  !(revert)
[L7768]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12157]  RET         call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:02:26,920 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:02:26,920 INFO  L82        PathProgramCache]: Analyzing trace with hash 1306577837, now seen corresponding path program 1 times
[2020-11-25 01:02:26,920 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:02:27,069 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:02:27,180 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:02:27,366 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:02:27,367 INFO  L82        PathProgramCache]: Analyzing trace with hash -1514206268, now seen corresponding path program 1 times
[2020-11-25 01:02:27,367 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:02:27,380 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:02:27,395 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:02:27,418 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:02:27,418 INFO  L82        PathProgramCache]: Analyzing trace with hash -409751912, now seen corresponding path program 1 times
[2020-11-25 01:02:27,419 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:02:27,498 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:02:28,883 INFO  L134       CoverageAnalysis]: Checked inductivity of 1308 backedges. 100 proven. 65 refuted. 0 times theorem prover too weak. 1143 trivial. 0 not checked.
[2020-11-25 01:02:28,883 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:02:28,883 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [36] total 36
[2020-11-25 01:02:28,884 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 37 interpolants.
[2020-11-25 01:02:28,884 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=131, Invalid=1201, Unknown=0, NotChecked=0, Total=1332
[2020-11-25 01:02:28,884 INFO  L87              Difference]: Start difference. First operand 10810 states and 12370 transitions. cyclomatic complexity: 1595 Second operand 37 states.
[2020-11-25 01:02:52,259 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:02:52,259 INFO  L93              Difference]: Finished difference Result 11100 states and 12813 transitions.
[2020-11-25 01:02:52,259 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-25 01:02:52,259 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11100 states and 12813 transitions.
[2020-11-25 01:02:52,294 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 18
[2020-11-25 01:02:52,324 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11100 states to 11100 states and 12813 transitions.
[2020-11-25 01:02:52,324 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2424
[2020-11-25 01:02:52,325 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2424
[2020-11-25 01:02:52,325 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11100 states and 12813 transitions.
[2020-11-25 01:02:52,333 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:02:52,333 INFO  L728         BuchiCegarLoop]: Abstraction has 11100 states and 12813 transitions.
[2020-11-25 01:02:52,339 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11100 states and 12813 transitions.
[2020-11-25 01:02:52,395 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11100 to 10932.
[2020-11-25 01:02:52,396 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10932 states.
[2020-11-25 01:02:52,411 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10932 states to 10932 states and 12577 transitions.
[2020-11-25 01:02:52,411 INFO  L751         BuchiCegarLoop]: Abstraction has 10932 states and 12577 transitions.
[2020-11-25 01:02:52,411 INFO  L631         BuchiCegarLoop]: Abstraction has 10932 states and 12577 transitions.
[2020-11-25 01:02:52,411 INFO  L445         BuchiCegarLoop]: ======== Iteration 48============
[2020-11-25 01:02:52,411 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10932 states and 12577 transitions.
[2020-11-25 01:02:52,424 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 18
[2020-11-25 01:02:52,424 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:02:52,424 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:02:52,425 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:02:52,425 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND FALSE  !(choice == 5)
[L12151]  COND TRUE   choice == 4
[L12152]              gas := gas - 21000;
[L12153]  COND TRUE   gas >= 0
[L12154]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12155]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12156]              assume msgvalue_MSG == 0;
[L12157]  CALL        call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7756]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND FALSE  !(DType[this] == BLY)
[L10693]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10698]  COND TRUE   DType[this] == Pausable
[L10699]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10699]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10700]  COND FALSE  !(revert)
[L10711]  COND FALSE  !(DType[this] == BLY)
[L10716]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10721]  COND TRUE   DType[this] == Pausable
[L10722]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND FALSE  !(account_s293 == owner_HxOwnable[this])
[L5880]               __ret_0_ := false;
[L10722]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10723]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7756]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7757]   COND FALSE  !(revert)
[L7760]   COND FALSE  !(!(_balances_HxERC20[this][holder_s1410] >= value_s1410))
[L7764]   CALL        call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7963]   CALL        call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L7963]   RET         call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L7964]   COND FALSE  !(revert)
[L7967]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1527];
[L7968]               _balances_HxERC20[this][holder_s1527] := __var_53;
[L7969]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1527];
[L7970]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] == false
[L7971]   CALL        call __var_54 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7971]   RET         call __var_54 := FreshRefGenerator__success();
[L7972]   COND FALSE  !(revert)
[L7975]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7976]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] := true;
[L7977]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == zerointRefArr();
[L7978]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1527] == __var_54;
[L7979]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7981]   CALL        call __var_56 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7981]   RET         call __var_56 := FreshRefGenerator__success();
[L7982]   COND FALSE  !(revert)
[L7985]               assume DType[__var_56] == BLY.LockInfo;
[L7986]   CALL        call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5521]               _releaseTime_BLY.LockInfo[this] := _releaseTime;
[L5522]               _amount_BLY.LockInfo[this] := _amount;
[L7986]   RET         call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L7987]   COND FALSE  !(revert)
[L7990]               __var_55 := __var_56;
[L7991]               __var_58 := Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]];
[L7992]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]][__var_58] := __var_55;
[L7993]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] := __var_58 + 1;
[L7994]               assert { :EventEmitted "Lock_BLY" } true;
[L7995]               __ret_0_ := true;
[L7764]   RET         call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7765]   COND FALSE  !(revert)
[L7768]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12157]  RET         call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:02:52,429 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:02:52,430 INFO  L82        PathProgramCache]: Analyzing trace with hash -776819450, now seen corresponding path program 1 times
[2020-11-25 01:02:52,430 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:02:52,451 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:02:52,720 INFO  L134       CoverageAnalysis]: Checked inductivity of 1136 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1135 trivial. 0 not checked.
[2020-11-25 01:02:52,720 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:02:52,720 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 01:02:52,720 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:02:52,721 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:02:52,721 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:02:52,721 INFO  L87              Difference]: Start difference. First operand 10932 states and 12577 transitions. cyclomatic complexity: 1686 Second operand 7 states.
[2020-11-25 01:02:52,863 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:02:52,863 INFO  L93              Difference]: Finished difference Result 11032 states and 12705 transitions.
[2020-11-25 01:02:52,863 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:02:52,863 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11032 states and 12705 transitions.
[2020-11-25 01:02:52,884 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 18
[2020-11-25 01:02:52,907 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11032 states to 10944 states and 12609 transitions.
[2020-11-25 01:02:52,907 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2308
[2020-11-25 01:02:52,908 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2308
[2020-11-25 01:02:52,908 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10944 states and 12609 transitions.
[2020-11-25 01:02:52,915 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:02:52,915 INFO  L728         BuchiCegarLoop]: Abstraction has 10944 states and 12609 transitions.
[2020-11-25 01:02:52,921 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10944 states and 12609 transitions.
[2020-11-25 01:02:52,971 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10944 to 10944.
[2020-11-25 01:02:52,971 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10944 states.
[2020-11-25 01:02:52,986 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10944 states to 10944 states and 12609 transitions.
[2020-11-25 01:02:52,986 INFO  L751         BuchiCegarLoop]: Abstraction has 10944 states and 12609 transitions.
[2020-11-25 01:02:52,986 INFO  L631         BuchiCegarLoop]: Abstraction has 10944 states and 12609 transitions.
[2020-11-25 01:02:52,986 INFO  L445         BuchiCegarLoop]: ======== Iteration 49============
[2020-11-25 01:02:52,986 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10944 states and 12609 transitions.
[2020-11-25 01:02:52,996 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 18
[2020-11-25 01:02:52,996 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:02:52,996 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:02:52,998 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:02:52,998 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND FALSE  !(choice == 5)
[L12151]  COND TRUE   choice == 4
[L12152]              gas := gas - 21000;
[L12153]  COND TRUE   gas >= 0
[L12154]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12155]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12156]              assume msgvalue_MSG == 0;
[L12157]  CALL        call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7756]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND FALSE  !(account_s293 == owner_HxOwnable[this])
[L5880]               __ret_0_ := false;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7756]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7757]   COND FALSE  !(revert)
[L7760]   COND FALSE  !(!(_balances_HxERC20[this][holder_s1410] >= value_s1410))
[L7764]   CALL        call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7963]   CALL        call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L7963]   RET         call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L7964]   COND FALSE  !(revert)
[L7967]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1527];
[L7968]               _balances_HxERC20[this][holder_s1527] := __var_53;
[L7969]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1527];
[L7970]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] == false
[L7971]   CALL        call __var_54 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7971]   RET         call __var_54 := FreshRefGenerator__success();
[L7972]   COND FALSE  !(revert)
[L7975]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7976]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] := true;
[L7977]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == zerointRefArr();
[L7978]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1527] == __var_54;
[L7979]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7981]   CALL        call __var_56 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7981]   RET         call __var_56 := FreshRefGenerator__success();
[L7982]   COND FALSE  !(revert)
[L7985]               assume DType[__var_56] == BLY.LockInfo;
[L7986]   CALL        call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5521]               _releaseTime_BLY.LockInfo[this] := _releaseTime;
[L5522]               _amount_BLY.LockInfo[this] := _amount;
[L7986]   RET         call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L7987]   COND FALSE  !(revert)
[L7990]               __var_55 := __var_56;
[L7991]               __var_58 := Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]];
[L7992]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]][__var_58] := __var_55;
[L7993]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] := __var_58 + 1;
[L7994]               assert { :EventEmitted "Lock_BLY" } true;
[L7995]               __ret_0_ := true;
[L7764]   RET         call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7765]   COND FALSE  !(revert)
[L7768]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12157]  RET         call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:02:53,002 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:02:53,002 INFO  L82        PathProgramCache]: Analyzing trace with hash 1306577837, now seen corresponding path program 2 times
[2020-11-25 01:02:53,003 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:02:53,094 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:02:53,182 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:02:53,282 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:02:53,283 INFO  L82        PathProgramCache]: Analyzing trace with hash 40461712, now seen corresponding path program 1 times
[2020-11-25 01:02:53,283 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:02:53,285 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:02:53,291 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:02:53,291 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:02:53,291 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:02:53,291 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 01:02:53,291 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:02:53,291 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:02:53,292 INFO  L87              Difference]: Start difference. First operand 10944 states and 12609 transitions. cyclomatic complexity: 1706 Second operand 4 states.
[2020-11-25 01:02:53,981 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:02:53,981 INFO  L93              Difference]: Finished difference Result 11341 states and 13113 transitions.
[2020-11-25 01:02:53,982 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:02:53,982 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11341 states and 13113 transitions.
[2020-11-25 01:02:54,010 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 36
[2020-11-25 01:02:54,039 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11341 states to 11341 states and 13113 transitions.
[2020-11-25 01:02:54,039 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2330
[2020-11-25 01:02:54,040 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2330
[2020-11-25 01:02:54,040 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11341 states and 13113 transitions.
[2020-11-25 01:02:54,048 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:02:54,049 INFO  L728         BuchiCegarLoop]: Abstraction has 11341 states and 13113 transitions.
[2020-11-25 01:02:54,054 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11341 states and 13113 transitions.
[2020-11-25 01:02:54,095 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11341 to 7091.
[2020-11-25 01:02:54,095 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7091 states.
[2020-11-25 01:02:54,102 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7091 states to 7091 states and 7832 transitions.
[2020-11-25 01:02:54,102 INFO  L751         BuchiCegarLoop]: Abstraction has 7091 states and 7832 transitions.
[2020-11-25 01:02:54,102 INFO  L631         BuchiCegarLoop]: Abstraction has 7091 states and 7832 transitions.
[2020-11-25 01:02:54,102 INFO  L445         BuchiCegarLoop]: ======== Iteration 50============
[2020-11-25 01:02:54,103 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7091 states and 7832 transitions.
[2020-11-25 01:02:54,109 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 01:02:54,109 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:02:54,109 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:02:54,110 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:02:54,110 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND FALSE  !(choice == 5)
[L12151]  COND TRUE   choice == 4
[L12152]              gas := gas - 21000;
[L12153]  COND TRUE   gas >= 0
[L12154]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12155]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12156]              assume msgvalue_MSG == 0;
[L12157]  CALL        call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7756]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND FALSE  !(account_s293 == owner_HxOwnable[this])
[L5880]               __ret_0_ := false;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7756]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7757]   COND FALSE  !(revert)
[L7760]   COND FALSE  !(!(_balances_HxERC20[this][holder_s1410] >= value_s1410))
[L7764]   CALL        call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7963]   CALL        call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L7963]   RET         call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L7964]   COND FALSE  !(revert)
[L7967]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1527];
[L7968]               _balances_HxERC20[this][holder_s1527] := __var_53;
[L7969]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1527];
[L7970]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] == false
[L7971]   CALL        call __var_54 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7971]   RET         call __var_54 := FreshRefGenerator__success();
[L7972]   COND FALSE  !(revert)
[L7975]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7976]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] := true;
[L7977]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == zerointRefArr();
[L7978]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1527] == __var_54;
[L7979]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7981]   CALL        call __var_56 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7981]   RET         call __var_56 := FreshRefGenerator__success();
[L7982]   COND FALSE  !(revert)
[L7985]               assume DType[__var_56] == BLY.LockInfo;
[L7986]   CALL        call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5521]               _releaseTime_BLY.LockInfo[this] := _releaseTime;
[L5522]               _amount_BLY.LockInfo[this] := _amount;
[L7986]   RET         call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L7987]   COND FALSE  !(revert)
[L7990]               __var_55 := __var_56;
[L7991]               __var_58 := Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]];
[L7992]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]][__var_58] := __var_55;
[L7993]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] := __var_58 + 1;
[L7994]               assert { :EventEmitted "Lock_BLY" } true;
[L7995]               __ret_0_ := true;
[L7764]   RET         call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7765]   COND FALSE  !(revert)
[L7768]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12157]  RET         call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND TRUE   gas >= 0
[L11980]              assume msgvalue_MSG == 0;
[L11981]  CALL        call __ret_0_owner := owner_HxOwnable(this, msgsender_MSG, msgvalue_MSG);
[L614]                havoc __exception;
[L615]                revert := false;
[L616]    COND FALSE  !(__exception)
[L652]    CALL        call __ret_0_ := owner_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]               __ret_0_ := owner_HxOwnable[this];
[L652]    RET         call __ret_0_ := owner_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L653]                assume !revert && gas >= 0;
[L11981]  RET         call __ret_0_owner := owner_HxOwnable(this, msgsender_MSG, msgvalue_MSG);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:02:54,115 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:02:54,115 INFO  L82        PathProgramCache]: Analyzing trace with hash 1306577837, now seen corresponding path program 3 times
[2020-11-25 01:02:54,115 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:02:54,202 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:02:54,289 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:02:54,386 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:02:54,386 INFO  L82        PathProgramCache]: Analyzing trace with hash -1548231248, now seen corresponding path program 1 times
[2020-11-25 01:02:54,386 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:02:54,390 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:02:54,393 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:02:54,399 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:02:54,399 INFO  L82        PathProgramCache]: Analyzing trace with hash -1150946724, now seen corresponding path program 1 times
[2020-11-25 01:02:54,400 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:02:54,516 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:02:54,615 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 37 to 73
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3019 to 6037
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 01:02:55,082 WARN  L188               SmtUtils]: Spent 135.00 ms on a formula simplification that was a NOOP. DAG size: 399
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.002s / 0.003s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.003s / 0.006s total
Resizing node table from 10513 to 21023
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 8053 to 16103
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2179 to 4357
[2020-11-25 01:02:55,283 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-25 01:02:56,080 WARN  L188               SmtUtils]: Spent 132.00 ms on a formula simplification. DAG size of input: 231 DAG size of output: 217
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2503 to 5003
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
[2020-11-25 01:02:56,322 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification that was a NOOP. DAG size: 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 01:02:57,730 WARN  L188               SmtUtils]: Spent 1.22 s on a formula simplification. DAG size of input: 455 DAG size of output: 429
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 01:02:57,913 WARN  L188               SmtUtils]: Spent 118.00 ms on a formula simplification that was a NOOP. DAG size: 260
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-25 01:02:58,177 WARN  L188               SmtUtils]: Spent 178.00 ms on a formula simplification. DAG size of input: 225 DAG size of output: 224
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 01:02:58,543 WARN  L188               SmtUtils]: Spent 314.00 ms on a formula simplification that was a NOOP. DAG size: 423
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9181 to 18353
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 8053 to 16103
[2020-11-25 01:02:58,766 WARN  L188               SmtUtils]: Spent 217.00 ms on a formula simplification that was a NOOP. DAG size: 383
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 01:02:58,987 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification. DAG size of input: 158 DAG size of output: 153
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 01:02:59,127 WARN  L188               SmtUtils]: Spent 100.00 ms on a formula simplification. DAG size of input: 169 DAG size of output: 167
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
[2020-11-25 01:02:59,622 WARN  L188               SmtUtils]: Spent 260.00 ms on a formula simplification. DAG size of input: 329 DAG size of output: 324
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 01:02:59,745 WARN  L188               SmtUtils]: Spent 119.00 ms on a formula simplification that was a NOOP. DAG size: 306
[2020-11-25 01:03:00,114 WARN  L188               SmtUtils]: Spent 365.00 ms on a formula simplification. DAG size of input: 446 DAG size of output: 359
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-11-25 01:03:00,517 WARN  L188               SmtUtils]: Spent 303.00 ms on a formula simplification that was a NOOP. DAG size: 484
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 9181 to 18353
[2020-11-25 01:03:00,717 WARN  L188               SmtUtils]: Spent 193.00 ms on a formula simplification that was a NOOP. DAG size: 398
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 01:03:01,640 WARN  L188               SmtUtils]: Spent 199.00 ms on a formula simplification. DAG size of input: 192 DAG size of output: 179
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
[2020-11-25 01:03:01,786 WARN  L188               SmtUtils]: Spent 110.00 ms on a formula simplification. DAG size of input: 146 DAG size of output: 141
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 01:03:02,024 WARN  L188               SmtUtils]: Spent 177.00 ms on a formula simplification. DAG size of input: 159 DAG size of output: 150
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #6: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
[2020-11-25 01:03:02,673 WARN  L188               SmtUtils]: Spent 544.00 ms on a formula simplification. DAG size of input: 329 DAG size of output: 324
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3967 to 7933
[2020-11-25 01:03:03,069 WARN  L188               SmtUtils]: Spent 393.00 ms on a formula simplification that was a NOOP. DAG size: 305
[2020-11-25 01:03:04,084 WARN  L188               SmtUtils]: Spent 1.01 s on a formula simplification. DAG size of input: 396 DAG size of output: 355
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 7933 to 15859
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-25 01:03:04,365 WARN  L188               SmtUtils]: Spent 270.00 ms on a formula simplification that was a NOOP. DAG size: 249
[2020-11-25 01:03:05,010 WARN  L188               SmtUtils]: Spent 644.00 ms on a formula simplification that was a NOOP. DAG size: 477
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 12073 to 24137
[2020-11-25 01:03:05,756 WARN  L188               SmtUtils]: Spent 736.00 ms on a formula simplification that was a NOOP. DAG size: 388
[2020-11-25 01:03:18,328 WARN  L188               SmtUtils]: Spent 12.57 s on a formula simplification. DAG size of input: 1054 DAG size of output: 1030
Garbage collection #1: 409 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 409 to 811
Garbage collection #2: 811 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 811 to 1621
Garbage collection #3: 1621 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1621 to 3229
Garbage collection #4: 3229 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3229 to 6451
Garbage collection #5: 6451 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6451 to 12899
Garbage collection #6: 12899 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12899 to 25793
Garbage collection #7: 25793 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 25793 to 51581
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
[2020-11-25 01:03:19,616 WARN  L188               SmtUtils]: Spent 1.23 s on a formula simplification that was a NOOP. DAG size: 445
[2020-11-25 01:03:21,600 WARN  L188               SmtUtils]: Spent 1.95 s on a formula simplification that was a NOOP. DAG size: 570
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 01:03:22,889 WARN  L188               SmtUtils]: Spent 1.28 s on a formula simplification that was a NOOP. DAG size: 445
[2020-11-25 01:03:26,782 WARN  L188               SmtUtils]: Spent 3.89 s on a formula simplification. DAG size of input: 572 DAG size of output: 571
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
[2020-11-25 01:03:28,702 WARN  L188               SmtUtils]: Spent 1.91 s on a formula simplification that was a NOOP. DAG size: 567
[2020-11-25 01:03:28,799 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:03:28,905 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:03:28,921 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:03:28 BasicIcfg
[2020-11-25 01:03:28,922 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 01:03:28,922 INFO  L168              Benchmark]: Toolchain (without parser) took 165455.86 ms. Allocated memory was 1.0 GB in the beginning and 6.0 GB in the end (delta: 5.0 GB). Free memory was 919.1 MB in the beginning and 826.7 MB in the end (delta: 92.4 MB). Peak memory consumption was 5.1 GB. Max. memory is 15.3 GB.
[2020-11-25 01:03:28,922 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 01:03:28,922 INFO  L168              Benchmark]: Boogie Preprocessor took 172.39 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.2 MB in the end (delta: 26.9 MB). Peak memory consumption was 26.9 MB. Max. memory is 15.3 GB.
[2020-11-25 01:03:28,923 INFO  L168              Benchmark]: UtopiaSpecLang took 89.59 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 881.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 01:03:28,923 INFO  L168              Benchmark]: Boogie Printer took 30.47 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 876.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:03:28,923 INFO  L168              Benchmark]: RCFGBuilder took 1474.26 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.5 MB). Free memory was 876.1 MB in the beginning and 764.0 MB in the end (delta: 112.1 MB). Peak memory consumption was 176.6 MB. Max. memory is 15.3 GB.
[2020-11-25 01:03:28,923 INFO  L168              Benchmark]: UtopiaLTL2Aut took 32.95 ms. Allocated memory is still 1.1 GB. Free memory was 764.0 MB in the beginning and 760.6 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:03:28,923 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3410.55 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 476.6 MB). Free memory was 760.6 MB in the beginning and 851.4 MB in the end (delta: -90.8 MB). Peak memory consumption was 385.8 MB. Max. memory is 15.3 GB.
[2020-11-25 01:03:28,924 INFO  L168              Benchmark]: BlockEncodingV2 took 292.44 ms. Allocated memory is still 1.6 GB. Free memory was 851.4 MB in the beginning and 688.8 MB in the end (delta: 162.6 MB). Peak memory consumption was 162.6 MB. Max. memory is 15.3 GB.
[2020-11-25 01:03:28,924 INFO  L168              Benchmark]: BuchiAutomizer took 159950.21 ms. Allocated memory was 1.6 GB in the beginning and 6.0 GB in the end (delta: 4.4 GB). Free memory was 688.8 MB in the beginning and 826.7 MB in the end (delta: -137.9 MB). Peak memory consumption was 4.3 GB. Max. memory is 15.3 GB.
[2020-11-25 01:03:28,926 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    11452 locations, 20742 edges
  - StatisticsResult: Encoded RCFG
    11204 locations, 20137 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 172.39 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.2 MB in the end (delta: 26.9 MB). Peak memory consumption was 26.9 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 89.59 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 881.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 30.47 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 876.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1474.26 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.5 MB). Free memory was 876.1 MB in the beginning and 764.0 MB in the end (delta: 112.1 MB). Peak memory consumption was 176.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 32.95 ms. Allocated memory is still 1.1 GB. Free memory was 764.0 MB in the beginning and 760.6 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3410.55 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 476.6 MB). Free memory was 760.6 MB in the beginning and 851.4 MB in the end (delta: -90.8 MB). Peak memory consumption was 385.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 292.44 ms. Allocated memory is still 1.6 GB. Free memory was 851.4 MB in the beginning and 688.8 MB in the end (delta: 162.6 MB). Peak memory consumption was 162.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 159950.21 ms. Allocated memory was 1.6 GB in the beginning and 6.0 GB in the end (delta: 4.4 GB). Free memory was 688.8 MB in the beginning and 826.7 MB in the end (delta: -137.9 MB). Peak memory consumption was 4.3 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4614 locations, 6376 edges
  - StatisticsResult: BuchiProgram size
    11452 locations, 20742 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 49 terminating modules (49 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.49 modules have a trivial ranking function, the largest among these consists of 37 locations. The remainder module has 7091 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 159.8s and 50 iterations.  TraceHistogramMax:8. Analysis of lassos took 50.7s. Construction of modules took 80.1s. BÃ¼chi inclusion checks took 22.3s. Highest rank in rank-based complementation 0. Minimization of det autom 49. Minimization of nondet autom 0. Automata minimization 3.2s AutomataMinimizationTime, 49 MinimizatonAttempts, 9726 StatesRemovedByMinimization, 30 NontrivialMinimizations. Non-live state removal took 2.0s Buchi closure took 0.0s. Biggest automaton had 11248 states and ocurred in iteration 24.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 356778 SDtfs, 196852 SDslu, 1252427 SDs, 0 SdLazy, 941709 SolverSat, 28428 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 80.1s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc1 concLT0 SILN0 SILU47 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1000000000000000000000000021) = (new BLY).gas(4).value(1)({from : 1000000000000000000000000003});
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
BLY(1000000000000000000000000021).lock~address~uint256~uint256.gas(3979002)({from : 1000000000000000000000000017, holder : 1000000000000000000000000003, value : 5, releaseTime : 6});
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7756]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND FALSE  !(account_s293 == owner_HxOwnable[this])
[L5880]               __ret_0_ := false;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7756]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7757]   COND FALSE  !(revert)
[L7760]   COND FALSE  !(!(_balances_HxERC20[this][holder_s1410] >= value_s1410))
[L7764]   CALL        call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7963]   CALL        call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L7963]   RET         call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L7964]   COND FALSE  !(revert)
[L7967]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1527];
[L7968]               _balances_HxERC20[this][holder_s1527] := __var_53;
[L7969]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1527];
[L7970]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] == false
[L7971]   CALL        call __var_54 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7971]   RET         call __var_54 := FreshRefGenerator__success();
[L7972]   COND FALSE  !(revert)
[L7975]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7976]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] := true;
[L7977]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == zerointRefArr();
[L7978]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1527] == __var_54;
[L7979]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7981]   CALL        call __var_56 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7981]   RET         call __var_56 := FreshRefGenerator__success();
[L7982]   COND FALSE  !(revert)
[L7985]               assume DType[__var_56] == BLY.LockInfo;
[L7986]   CALL        call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5521]               _releaseTime_BLY.LockInfo[this] := _releaseTime;
[L5522]               _amount_BLY.LockInfo[this] := _amount;
[L7986]   RET         call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L7987]   COND FALSE  !(revert)
[L7990]               __var_55 := __var_56;
[L7991]               __var_58 := Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]];
[L7992]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]][__var_58] := __var_55;
[L7993]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] := __var_58 + 1;
[L7994]               assert { :EventEmitted "Lock_BLY" } true;
[L7995]               __ret_0_ := true;
[L7764]   RET         call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7765]   COND FALSE  !(revert)
[L7768]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12157]  RET         call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
BLY(1000000000000000000000000021).transfer~address~uint256.gas(3979003)({from : 1000000000000000000000000003, to : 1000000000000000000000000003, value : 1000000000000000000000000000});
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 > _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);

Loop:
HxOwnable(1000000000000000000000000021).owner.gas(3979001)({from : 1000000000000000000000000006});
[L614]                havoc __exception;
[L615]                revert := false;
[L616]    COND FALSE  !(__exception)
[L652]    CALL        call __ret_0_ := owner_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]               __ret_0_ := owner_HxOwnable[this];
[L652]    RET         call __ret_0_ := owner_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L653]                assume !revert && gas >= 0;
[L11981]  RET         call __ret_0_owner := owner_HxOwnable(this, msgsender_MSG, msgvalue_MSG);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
