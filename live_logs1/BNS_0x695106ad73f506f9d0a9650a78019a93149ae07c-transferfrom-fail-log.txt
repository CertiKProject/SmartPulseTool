This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 01:14:55,827 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 01:14:55,829 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 01:14:55,840 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 01:14:55,840 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 01:14:55,841 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 01:14:55,842 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 01:14:55,843 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 01:14:55,845 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 01:14:55,845 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 01:14:55,846 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 01:14:55,846 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 01:14:55,847 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 01:14:55,848 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 01:14:55,849 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 01:14:55,849 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 01:14:55,850 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 01:14:55,851 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 01:14:55,853 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 01:14:55,855 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 01:14:55,856 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 01:14:55,856 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 01:14:55,858 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 01:14:55,858 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 01:14:55,858 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 01:14:55,859 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 01:14:55,859 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 01:14:55,860 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 01:14:55,860 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 01:14:55,861 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 01:14:55,861 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 01:14:55,862 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 01:14:55,862 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 01:14:55,863 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 01:14:55,863 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 01:14:55,863 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 01:14:55,864 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 01:14:55,864 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 01:14:55,864 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 01:14:55,865 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 01:14:55,866 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 01:14:55,866 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 01:14:55,874 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 01:14:55,874 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 01:14:55,875 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 01:14:55,875 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 01:14:55,875 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 01:14:55,875 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 01:14:55,875 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 01:14:55,875 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 01:14:55,876 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 01:14:55,876 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 01:14:55,876 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 01:14:55,876 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 01:14:55,876 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 01:14:55,876 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 01:14:55,876 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 01:14:55,876 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 01:14:55,876 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 01:14:55,877 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 01:14:55,877 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 01:14:55,877 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 01:14:55,877 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 01:14:55,877 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 01:14:55,877 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 01:14:55,877 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 01:14:55,877 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 01:14:55,877 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 01:14:55,900 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 01:14:55,911 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 01:14:55,913 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 01:14:55,914 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 01:14:55,915 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 01:14:55,915 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transferfrom-fail.bpl
[2020-11-25 01:14:55,916 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transferfrom-fail.bpl'
[2020-11-25 01:14:56,003 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 01:14:56,004 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 01:14:56,004 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 01:14:56,004 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 01:14:56,004 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 01:14:56,021 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:14:55" (1/1) ...
[2020-11-25 01:14:56,023 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:14:55" (1/1) ...
[2020-11-25 01:14:56,058 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:14:55" (1/1) ...
[2020-11-25 01:14:56,059 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:14:55" (1/1) ...
[2020-11-25 01:14:56,079 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:14:55" (1/1) ...
[2020-11-25 01:14:56,090 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:14:55" (1/1) ...
[2020-11-25 01:14:56,098 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:14:55" (1/1) ...
[2020-11-25 01:14:56,107 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 01:14:56,108 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 01:14:56,108 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 01:14:56,110 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 01:14:56,114 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:14:55" (1/1) ...
[2020-11-25 01:14:56,134 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 01:14:56,140 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 01:14:56,148 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 01:14:56,155 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( from_s322!=to_s322 && ( ( value_s322>_balances_ERC20[this][from_s322] || value_s322>_allowed_ERC20[this][from_s322][msg.sender] ) || ( _balances_ERC20[this][to_s322] + value_s322 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && value_s322>=0 ) && value_s322<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s322]>=0 ) && _balances_ERC20[this][to_s322]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][from_s322]>=0 ) && _balances_ERC20[this][from_s322]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_ERC20[this][from_s322][msg.sender]>=0 ) && _allowed_ERC20[this][from_s322][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[from_s322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IdentifierExpression[to_s322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]],BinaryExpression[COMPGT,IdentifierExpression[value_s322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[to_s322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IdentifierExpression[value_s322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[to_s322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[to_s322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[from_s322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 01:14:56,161 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowed_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 01:14:56,161 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC200) ==> ( <>AP(fail_transferFrom_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 01:14:56,170 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:14:56 PropertyContainer
[2020-11-25 01:14:56,170 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 01:14:56,171 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 01:14:56,171 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 01:14:56,171 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 01:14:56,172 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:14:55" (1/2) ...
[2020-11-25 01:14:56,172 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 01:14:56,172 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 01:14:56,187 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:14:56" (2/2) ...
[2020-11-25 01:14:56,187 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 01:14:56,188 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 01:14:56,188 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 01:14:56,188 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 01:14:56,189 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:14:55" (1/2) ...
[2020-11-25 01:14:56,241 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 01:14:56,241 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 01:14:56,241 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 01:14:56,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 01:14:56,242 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 01:14:56,242 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 01:14:56,242 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 01:14:56,242 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 01:14:56,242 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 01:14:56,242 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 01:14:56,242 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 01:14:56,242 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 01:14:56,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 01:14:56,242 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 01:14:56,242 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 01:14:56,242 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 01:14:56,243 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 01:14:56,243 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 01:14:56,243 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 01:14:56,243 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 01:14:56,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 01:14:56,243 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 01:14:56,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 01:14:56,243 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 01:14:56,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 01:14:56,243 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 01:14:56,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 01:14:56,244 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 01:14:56,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 01:14:56,244 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 01:14:56,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 01:14:56,244 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 01:14:56,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 01:14:56,244 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 01:14:56,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 01:14:56,244 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 01:14:56,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 01:14:56,245 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 01:14:56,245 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 01:14:56,245 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 01:14:56,245 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 01:14:56,245 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 01:14:56,245 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 01:14:56,245 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 01:14:56,245 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 01:14:56,245 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 01:14:56,245 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 01:14:56,245 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 01:14:56,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 01:14:56,246 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 01:14:56,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 01:14:56,246 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 01:14:56,246 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 01:14:56,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 01:14:56,246 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 01:14:56,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 01:14:56,246 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 01:14:56,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 01:14:56,247 INFO  L130     BoogieDeclarations]: Found specification of procedure BNS_BNS_NoBaseCtor__success
[2020-11-25 01:14:56,247 INFO  L130     BoogieDeclarations]: Found specification of procedure BNS_BNS
[2020-11-25 01:14:56,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure BNS_BNS
[2020-11-25 01:14:56,247 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 01:14:56,247 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 01:14:56,247 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 01:14:56,247 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 01:14:56,247 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 01:14:56,247 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 01:14:56,247 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 01:14:56,248 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 01:14:56,248 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 01:14:56,248 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 01:14:56,248 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 01:14:56,248 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 01:14:56,248 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 01:14:56,248 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BNS
[2020-11-25 01:14:56,248 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 01:14:56,248 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 01:14:56,249 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 01:14:56,249 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 01:14:56,249 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 01:14:56,249 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 01:14:56,249 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 01:14:56,249 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 01:14:56,249 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 01:14:56,249 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 01:14:56,249 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 01:14:56,249 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 01:14:56,250 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 01:14:56,250 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 01:14:56,250 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 01:14:56,250 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 01:14:56,250 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 01:14:56,250 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 01:14:56,250 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 01:14:56,250 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 01:14:56,250 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 01:14:56,250 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 01:14:56,251 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 01:14:56,251 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 01:14:56,251 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 01:14:56,251 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 01:14:56,251 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 01:14:56,251 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 01:14:56,251 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 01:14:56,251 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 01:14:56,251 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 01:14:56,251 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 01:14:56,251 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 01:14:56,252 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 01:14:56,252 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 01:14:56,252 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 01:14:56,252 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 01:14:56,252 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 01:14:56,252 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 01:14:56,252 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 01:14:56,252 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 01:14:56,252 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 01:14:56,252 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 01:14:56,253 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 01:14:56,253 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 01:14:56,253 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 01:14:56,253 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 01:14:56,253 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 01:14:56,253 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 01:14:56,253 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 01:14:56,253 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 01:14:56,253 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 01:14:56,253 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 01:14:56,254 INFO  L130     BoogieDeclarations]: Found specification of procedure BNS_BNS_NoBaseCtor__fail
[2020-11-25 01:14:56,254 INFO  L130     BoogieDeclarations]: Found specification of procedure BNS_BNS__success
[2020-11-25 01:14:56,254 INFO  L130     BoogieDeclarations]: Found specification of procedure BNS_BNS__fail
[2020-11-25 01:14:56,254 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 01:14:56,254 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 01:14:56,254 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 01:14:56,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 01:14:56,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 01:14:56,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 01:14:56,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 01:14:56,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 01:14:56,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 01:14:56,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 01:14:56,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 01:14:56,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 01:14:56,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 01:14:56,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 01:14:56,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 01:14:56,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 01:14:56,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 01:14:56,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 01:14:56,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 01:14:56,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 01:14:56,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 01:14:56,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 01:14:56,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 01:14:56,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 01:14:56,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 01:14:56,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 01:14:56,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 01:14:56,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 01:14:56,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 01:14:56,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 01:14:56,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 01:14:56,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 01:14:56,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 01:14:56,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 01:14:56,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 01:14:56,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 01:14:56,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 01:14:56,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 01:14:56,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 01:14:56,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 01:14:56,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 01:14:56,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 01:14:56,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 01:14:56,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 01:14:56,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 01:14:56,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 01:14:56,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 01:14:56,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 01:14:56,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 01:14:56,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 01:14:56,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 01:14:56,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 01:14:56,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 01:14:56,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 01:14:56,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 01:14:56,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 01:14:56,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 01:14:56,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 01:14:56,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 01:14:56,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 01:14:56,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 01:14:56,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 01:14:56,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 01:14:56,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 01:14:56,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 01:14:56,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 01:14:56,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 01:14:56,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 01:14:56,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 01:14:56,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 01:14:56,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 01:14:56,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure BNS_BNS_NoBaseCtor__fail
[2020-11-25 01:14:56,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure BNS_BNS_NoBaseCtor__success
[2020-11-25 01:14:56,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure BNS_BNS__fail
[2020-11-25 01:14:56,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure BNS_BNS__success
[2020-11-25 01:14:56,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 01:14:56,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 01:14:56,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 01:14:56,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 01:14:56,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 01:14:56,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 01:14:56,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 01:14:56,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 01:14:56,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 01:14:56,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 01:14:56,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 01:14:56,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 01:14:56,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 01:14:56,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 01:14:56,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 01:14:56,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 01:14:56,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BNS
[2020-11-25 01:14:56,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 01:14:56,262 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 01:14:56,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 01:14:56,566 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:14:56,567 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:14:57,003 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 01:14:57,003 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 01:14:57,007 INFO  L202        PluginConnector]: Adding new model BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:14:57 BoogieIcfgContainer
[2020-11-25 01:14:57,007 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:14:56" (2/2) ...
[2020-11-25 01:14:57,007 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 01:14:57,008 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@7fe830bf and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:14:57, skipping insertion in model container
[2020-11-25 01:14:57,008 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 01:14:57,008 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 01:14:57,009 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 01:14:57,011 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 01:14:57,011 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:14:55" (1/3) ...
[2020-11-25 01:14:57,011 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@72a0b6b4 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:14:57, skipping insertion in model container
[2020-11-25 01:14:57,012 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:14:56" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 01:14:57,059 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:14:57 NWAContainer
[2020-11-25 01:14:57,060 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 01:14:57,060 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 01:14:57,060 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 01:14:57,062 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 01:14:57,063 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:14:57" (3/4) ...
[2020-11-25 01:14:57,064 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@6422499d and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:14:57, skipping insertion in model container
[2020-11-25 01:14:57,064 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:14:57" (4/4) ...
[2020-11-25 01:14:57,068 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 01:14:57,072 INFO  L110   BuchiProductObserver]: Initial RCFG 1598 locations, 2298 edges
[2020-11-25 01:14:57,072 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 01:14:57,084 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 01:14:58,412 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 01:14:58,417 INFO  L110   BuchiProductObserver]: BuchiProgram size 4090 locations, 7549 edges
[2020-11-25 01:14:58,417 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:14:58 BoogieIcfgContainer
[2020-11-25 01:14:58,417 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 01:14:58,418 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 01:14:58,418 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 01:14:58,419 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 01:14:58,420 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:14:58" (1/1) ...
[2020-11-25 01:14:58,504 INFO  L313           BlockEncoder]: Initial Icfg 4090 locations, 7549 edges
[2020-11-25 01:14:58,504 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 01:14:58,505 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 01:14:58,505 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 01:14:58,505 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 01:14:58,517 INFO  L70    emoveInfeasibleEdges]: Removed 120 edges and 15 locations because of local infeasibility
[2020-11-25 01:14:58,527 INFO  L70        RemoveSinkStates]: Removed 106 edges and 64 locations by removing sink states
[2020-11-25 01:14:58,538 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 01:14:58,542 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 01:14:58,545 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 01:14:58,545 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 01:14:58,550 INFO  L313           BlockEncoder]: Encoded RCFG 3991 locations, 7294 edges
[2020-11-25 01:14:58,551 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:14:58 BasicIcfg
[2020-11-25 01:14:58,551 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 01:14:58,551 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 01:14:58,551 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 01:14:58,553 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 01:14:58,554 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:14:58,554 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:14:55" (1/6) ...
[2020-11-25 01:14:58,555 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@44fab443 and model type BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:14:58, skipping insertion in model container
[2020-11-25 01:14:58,555 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:14:58,556 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:14:56" (2/6) ...
[2020-11-25 01:14:58,556 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@44fab443 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:14:58, skipping insertion in model container
[2020-11-25 01:14:58,556 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:14:58,556 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:14:57" (3/6) ...
[2020-11-25 01:14:58,556 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@44fab443 and model type BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:14:58, skipping insertion in model container
[2020-11-25 01:14:58,556 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:14:58,556 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:14:57" (4/6) ...
[2020-11-25 01:14:58,556 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@44fab443 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:14:58, skipping insertion in model container
[2020-11-25 01:14:58,556 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:14:58,556 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:14:58" (5/6) ...
[2020-11-25 01:14:58,556 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@44fab443 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:14:58, skipping insertion in model container
[2020-11-25 01:14:58,557 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:14:58,557 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:14:58" (6/6) ...
[2020-11-25 01:14:58,558 INFO  L404   chiAutomizerObserver]: Analyzing ICFG BNS_0x695106ad73f506f9d0a9650a78019a93149ae07c_transferfrom-fail.bpl_BEv2
[2020-11-25 01:14:58,591 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 01:14:58,592 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 01:14:58,592 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 01:14:58,592 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 01:14:58,592 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 01:14:58,592 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 01:14:58,592 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 01:14:58,592 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 01:14:58,592 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 01:14:58,632 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3991 states.
[2020-11-25 01:14:58,693 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:14:58,693 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:14:58,693 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:14:58,701 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:14:58,701 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:14:58,701 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 01:14:58,701 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3991 states.
[2020-11-25 01:14:58,717 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:14:58,717 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:14:58,717 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:14:58,718 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:14:58,719 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND TRUE   revert
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND FALSE  !(gas >= 0)
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:14:58,733 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:14:58,733 INFO  L82        PathProgramCache]: Analyzing trace with hash 141988597, now seen corresponding path program 1 times
[2020-11-25 01:14:58,738 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:14:58,756 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:14:58,793 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:14:58,795 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:14:58,795 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:14:58,797 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:14:59,040 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:14:59,041 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:14:59,042 INFO  L87              Difference]: Start difference. First operand 3991 states. Second operand 4 states.
[2020-11-25 01:14:59,405 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:14:59,405 INFO  L93              Difference]: Finished difference Result 2347 states and 2818 transitions.
[2020-11-25 01:14:59,405 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:14:59,406 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2347 states and 2818 transitions.
[2020-11-25 01:14:59,420 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:14:59,438 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2347 states to 2347 states and 2818 transitions.
[2020-11-25 01:14:59,439 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 01:14:59,441 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 626
[2020-11-25 01:14:59,441 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2347 states and 2818 transitions.
[2020-11-25 01:14:59,448 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:14:59,448 INFO  L728         BuchiCegarLoop]: Abstraction has 2347 states and 2818 transitions.
[2020-11-25 01:14:59,462 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2347 states and 2818 transitions.
[2020-11-25 01:14:59,511 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2347 to 2347.
[2020-11-25 01:14:59,511 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2347 states.
[2020-11-25 01:14:59,517 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2347 states to 2347 states and 2818 transitions.
[2020-11-25 01:14:59,518 INFO  L751         BuchiCegarLoop]: Abstraction has 2347 states and 2818 transitions.
[2020-11-25 01:14:59,518 INFO  L631         BuchiCegarLoop]: Abstraction has 2347 states and 2818 transitions.
[2020-11-25 01:14:59,519 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 01:14:59,519 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2347 states and 2818 transitions.
[2020-11-25 01:14:59,527 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:14:59,527 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:14:59,527 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:14:59,529 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:14:59,529 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND TRUE   revert
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND TRUE   DType[this] == BNS
[L2088]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND TRUE   !(to_s422 != null)
[L2280]              revert := true;
[L2088]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2089]  COND TRUE   revert
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND TRUE   DType[this] == BNS
[L2088]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND TRUE   !(to_s422 != null)
[L2280]              revert := true;
[L2088]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2089]  COND TRUE   revert
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:14:59,534 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:14:59,534 INFO  L82        PathProgramCache]: Analyzing trace with hash -2083199819, now seen corresponding path program 1 times
[2020-11-25 01:14:59,535 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:14:59,546 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:14:59,569 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:14:59,569 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:14:59,569 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:14:59,571 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:14:59,571 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:14:59,571 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:14:59,571 INFO  L87              Difference]: Start difference. First operand 2347 states and 2818 transitions. cyclomatic complexity: 473 Second operand 3 states.
[2020-11-25 01:14:59,656 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:14:59,656 INFO  L93              Difference]: Finished difference Result 3189 states and 3853 transitions.
[2020-11-25 01:14:59,656 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:14:59,657 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3189 states and 3853 transitions.
[2020-11-25 01:14:59,669 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:14:59,683 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3189 states to 3189 states and 3853 transitions.
[2020-11-25 01:14:59,683 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 870
[2020-11-25 01:14:59,684 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 870
[2020-11-25 01:14:59,684 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3189 states and 3853 transitions.
[2020-11-25 01:14:59,690 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:14:59,691 INFO  L728         BuchiCegarLoop]: Abstraction has 3189 states and 3853 transitions.
[2020-11-25 01:14:59,694 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3189 states and 3853 transitions.
[2020-11-25 01:14:59,724 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3189 to 2834.
[2020-11-25 01:14:59,724 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2834 states.
[2020-11-25 01:14:59,729 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2834 states to 2834 states and 3429 transitions.
[2020-11-25 01:14:59,729 INFO  L751         BuchiCegarLoop]: Abstraction has 2834 states and 3429 transitions.
[2020-11-25 01:14:59,729 INFO  L631         BuchiCegarLoop]: Abstraction has 2834 states and 3429 transitions.
[2020-11-25 01:14:59,729 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 01:14:59,729 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2834 states and 3429 transitions.
[2020-11-25 01:14:59,735 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:14:59,735 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:14:59,735 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:14:59,737 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:14:59,737 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2799]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L2803]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2569]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2569]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2570]  COND FALSE  !(revert)
[L2573]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2544]              assume msgsender_MSG != null;
[L2545]              Balance[this] := 0;
[L2546]              _name_ERC20Detailed[this] := -2028290499;
[L2547]              _symbol_ERC20Detailed[this] := -2028290499;
[L2548]              _decimals_ERC20Detailed[this] := 0;
[L2550]              _name_ERC20Detailed[this] := name_s606;
[L2551]              _symbol_ERC20Detailed[this] := symbol_s606;
[L2552]              _decimals_ERC20Detailed[this] := decimals_s606;
[L2573]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2574]  COND FALSE  !(revert)
[L2803]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2804]  COND FALSE  !(revert)
[L2807]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2649]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2649]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2650]  COND FALSE  !(revert)
[L2653]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2653]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  COND FALSE  !(revert)
[L2657]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2657]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2658]  COND FALSE  !(revert)
[L2807]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2808]  COND FALSE  !(revert)
[L2811]  CALL        call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2753]              assume msgsender_MSG != null;
[L2754]              Balance[this] := 0;
[L2756]              __var_16 := 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2757]  COND TRUE   DType[this] == BNS
[L2758]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2329]              __var_7 := null;
[L2330]  COND TRUE   !(account_s464 != null)
[L2331]              revert := true;
[L2758]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2759]  COND TRUE   revert
[L2811]  RET         call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  COND FALSE  !(revert)
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND TRUE   DType[this] == BNS
[L2088]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND TRUE   !(to_s422 != null)
[L2280]              revert := true;
[L2088]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2089]  COND TRUE   revert
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND TRUE   DType[this] == BNS
[L2088]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND TRUE   !(to_s422 != null)
[L2280]              revert := true;
[L2088]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2089]  COND TRUE   revert
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:14:59,741 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:14:59,741 INFO  L82        PathProgramCache]: Analyzing trace with hash -1681577437, now seen corresponding path program 1 times
[2020-11-25 01:14:59,742 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:14:59,752 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:14:59,804 INFO  L134       CoverageAnalysis]: Checked inductivity of 119 backedges. 0 proven. 28 refuted. 0 times theorem prover too weak. 91 trivial. 0 not checked.
[2020-11-25 01:14:59,804 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:14:59,804 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 01:14:59,805 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:14:59,805 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:14:59,805 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:14:59,805 INFO  L87              Difference]: Start difference. First operand 2834 states and 3429 transitions. cyclomatic complexity: 597 Second operand 7 states.
[2020-11-25 01:14:59,852 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:14:59,852 INFO  L93              Difference]: Finished difference Result 2842 states and 3436 transitions.
[2020-11-25 01:14:59,853 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:14:59,853 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2842 states and 3436 transitions.
[2020-11-25 01:14:59,862 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:14:59,873 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2842 states to 2833 states and 3427 transitions.
[2020-11-25 01:14:59,873 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 800
[2020-11-25 01:14:59,874 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 800
[2020-11-25 01:14:59,874 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2833 states and 3427 transitions.
[2020-11-25 01:14:59,876 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:14:59,876 INFO  L728         BuchiCegarLoop]: Abstraction has 2833 states and 3427 transitions.
[2020-11-25 01:14:59,879 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2833 states and 3427 transitions.
[2020-11-25 01:14:59,906 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2833 to 2833.
[2020-11-25 01:14:59,906 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2833 states.
[2020-11-25 01:14:59,910 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2833 states to 2833 states and 3427 transitions.
[2020-11-25 01:14:59,910 INFO  L751         BuchiCegarLoop]: Abstraction has 2833 states and 3427 transitions.
[2020-11-25 01:14:59,910 INFO  L631         BuchiCegarLoop]: Abstraction has 2833 states and 3427 transitions.
[2020-11-25 01:14:59,910 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 01:14:59,911 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2833 states and 3427 transitions.
[2020-11-25 01:14:59,917 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:14:59,917 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:14:59,917 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:14:59,919 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:14:59,919 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2799]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L2803]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2569]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2569]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2570]  COND FALSE  !(revert)
[L2573]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2544]              assume msgsender_MSG != null;
[L2545]              Balance[this] := 0;
[L2546]              _name_ERC20Detailed[this] := -2028290499;
[L2547]              _symbol_ERC20Detailed[this] := -2028290499;
[L2548]              _decimals_ERC20Detailed[this] := 0;
[L2550]              _name_ERC20Detailed[this] := name_s606;
[L2551]              _symbol_ERC20Detailed[this] := symbol_s606;
[L2552]              _decimals_ERC20Detailed[this] := decimals_s606;
[L2573]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2574]  COND FALSE  !(revert)
[L2803]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2804]  COND FALSE  !(revert)
[L2807]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2649]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2649]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2650]  COND FALSE  !(revert)
[L2653]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2653]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  COND FALSE  !(revert)
[L2657]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2657]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2658]  COND FALSE  !(revert)
[L2807]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2808]  COND FALSE  !(revert)
[L2811]  CALL        call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2753]              assume msgsender_MSG != null;
[L2754]              Balance[this] := 0;
[L2756]              __var_16 := 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2757]  COND TRUE   DType[this] == BNS
[L2758]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2329]              __var_7 := null;
[L2330]  COND FALSE  !(!(account_s464 != null))
[L2334]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND TRUE   !(c_s174 >= a_s174)
[L1828]              revert := true;
[L2334]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2335]  COND TRUE   revert
[L2758]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2759]  COND TRUE   revert
[L2811]  RET         call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  COND FALSE  !(revert)
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND TRUE   DType[this] == BNS
[L2088]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND TRUE   !(to_s422 != null)
[L2280]              revert := true;
[L2088]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2089]  COND TRUE   revert
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND TRUE   DType[this] == BNS
[L2088]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND TRUE   !(to_s422 != null)
[L2280]              revert := true;
[L2088]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2089]  COND TRUE   revert
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:14:59,923 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:14:59,923 INFO  L82        PathProgramCache]: Analyzing trace with hash 1052503866, now seen corresponding path program 1 times
[2020-11-25 01:14:59,924 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:14:59,934 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:15:00,001 INFO  L134       CoverageAnalysis]: Checked inductivity of 119 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 119 trivial. 0 not checked.
[2020-11-25 01:15:00,002 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:15:00,002 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:15:00,002 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:15:00,003 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:15:00,003 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:15:00,003 INFO  L87              Difference]: Start difference. First operand 2833 states and 3427 transitions. cyclomatic complexity: 596 Second operand 3 states.
[2020-11-25 01:15:00,074 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:15:00,074 INFO  L93              Difference]: Finished difference Result 3190 states and 3693 transitions.
[2020-11-25 01:15:00,074 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:15:00,074 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3190 states and 3693 transitions.
[2020-11-25 01:15:00,085 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:15:00,099 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3190 states to 2917 states and 3359 transitions.
[2020-11-25 01:15:00,099 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 784
[2020-11-25 01:15:00,099 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 800
[2020-11-25 01:15:00,100 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2917 states and 3359 transitions.
[2020-11-25 01:15:00,103 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:15:00,103 INFO  L728         BuchiCegarLoop]: Abstraction has 2917 states and 3359 transitions.
[2020-11-25 01:15:00,105 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2917 states and 3359 transitions.
[2020-11-25 01:15:00,127 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2917 to 2632.
[2020-11-25 01:15:00,127 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2632 states.
[2020-11-25 01:15:00,130 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2632 states to 2632 states and 3005 transitions.
[2020-11-25 01:15:00,130 INFO  L751         BuchiCegarLoop]: Abstraction has 2632 states and 3005 transitions.
[2020-11-25 01:15:00,130 INFO  L631         BuchiCegarLoop]: Abstraction has 2632 states and 3005 transitions.
[2020-11-25 01:15:00,131 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 01:15:00,131 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2632 states and 3005 transitions.
[2020-11-25 01:15:00,134 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:15:00,134 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:15:00,134 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:15:00,136 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:15:00,136 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2799]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L2803]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2569]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2569]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2570]  COND FALSE  !(revert)
[L2573]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2544]              assume msgsender_MSG != null;
[L2545]              Balance[this] := 0;
[L2546]              _name_ERC20Detailed[this] := -2028290499;
[L2547]              _symbol_ERC20Detailed[this] := -2028290499;
[L2548]              _decimals_ERC20Detailed[this] := 0;
[L2550]              _name_ERC20Detailed[this] := name_s606;
[L2551]              _symbol_ERC20Detailed[this] := symbol_s606;
[L2552]              _decimals_ERC20Detailed[this] := decimals_s606;
[L2573]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2574]  COND FALSE  !(revert)
[L2803]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2804]  COND FALSE  !(revert)
[L2807]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2649]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2649]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2650]  COND FALSE  !(revert)
[L2653]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2653]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  COND FALSE  !(revert)
[L2657]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2657]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2658]  COND FALSE  !(revert)
[L2807]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2808]  COND FALSE  !(revert)
[L2811]  CALL        call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2753]              assume msgsender_MSG != null;
[L2754]              Balance[this] := 0;
[L2756]              __var_16 := 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2757]  COND TRUE   DType[this] == BNS
[L2758]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2329]              __var_7 := null;
[L2330]  COND FALSE  !(!(account_s464 != null))
[L2334]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2334]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2335]  COND FALSE  !(revert)
[L2338]              _totalSupply_ERC20[this] := __var_8;
[L2339]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2339]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2340]  COND FALSE  !(revert)
[L2343]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L2344]              _balances_ERC20[this][account_s464] := __var_9;
[L2345]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L2346]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2758]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2759]  COND FALSE  !(revert)
[L2811]  RET         call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  COND FALSE  !(revert)
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND TRUE   DType[this] == BNS
[L2088]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2088]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2089]  COND FALSE  !(revert)
[L2105]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2105]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2106]  COND FALSE  !(revert)
[L2109]  COND TRUE   DType[this] == BNS
[L2110]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2421]              __var_13 := null;
[L2422]  COND FALSE  !(!(spender_s546 != null))
[L2426]              __var_14 := null;
[L2427]  COND FALSE  !(!(owner_s546 != null))
[L2431]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L2432]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L2433]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L2434]              assert { :EventEmitted "Approval_ERC20" } true;
[L2110]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2111]  COND FALSE  !(revert)
[L2127]              __ret_0_ := true;
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND TRUE   DType[this] == BNS
[L2088]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2088]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2089]  COND FALSE  !(revert)
[L2105]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2105]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2106]  COND FALSE  !(revert)
[L2109]  COND TRUE   DType[this] == BNS
[L2110]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2421]              __var_13 := null;
[L2422]  COND FALSE  !(!(spender_s546 != null))
[L2426]              __var_14 := null;
[L2427]  COND FALSE  !(!(owner_s546 != null))
[L2431]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L2432]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L2433]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L2434]              assert { :EventEmitted "Approval_ERC20" } true;
[L2110]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2111]  COND FALSE  !(revert)
[L2127]              __ret_0_ := true;
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:15:00,140 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:15:00,140 INFO  L82        PathProgramCache]: Analyzing trace with hash 2100543155, now seen corresponding path program 1 times
[2020-11-25 01:15:00,141 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:15:00,157 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:15:00,283 INFO  L134       CoverageAnalysis]: Checked inductivity of 129 backedges. 12 proven. 0 refuted. 0 times theorem prover too weak. 117 trivial. 0 not checked.
[2020-11-25 01:15:00,283 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:15:00,283 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 01:15:00,283 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:15:00,283 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 01:15:00,284 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=181, Unknown=0, NotChecked=0, Total=210
[2020-11-25 01:15:00,284 INFO  L87              Difference]: Start difference. First operand 2632 states and 3005 transitions. cyclomatic complexity: 375 Second operand 15 states.
[2020-11-25 01:15:01,742 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:15:01,743 INFO  L93              Difference]: Finished difference Result 2740 states and 3125 transitions.
[2020-11-25 01:15:01,743 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 01:15:01,743 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2740 states and 3125 transitions.
[2020-11-25 01:15:01,749 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:15:01,757 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2740 states to 2740 states and 3125 transitions.
[2020-11-25 01:15:01,757 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 780
[2020-11-25 01:15:01,757 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 780
[2020-11-25 01:15:01,758 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2740 states and 3125 transitions.
[2020-11-25 01:15:01,760 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:15:01,760 INFO  L728         BuchiCegarLoop]: Abstraction has 2740 states and 3125 transitions.
[2020-11-25 01:15:01,762 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2740 states and 3125 transitions.
[2020-11-25 01:15:01,780 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2740 to 2563.
[2020-11-25 01:15:01,780 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2563 states.
[2020-11-25 01:15:01,783 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2563 states to 2563 states and 2913 transitions.
[2020-11-25 01:15:01,784 INFO  L751         BuchiCegarLoop]: Abstraction has 2563 states and 2913 transitions.
[2020-11-25 01:15:01,784 INFO  L631         BuchiCegarLoop]: Abstraction has 2563 states and 2913 transitions.
[2020-11-25 01:15:01,784 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 01:15:01,784 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2563 states and 2913 transitions.
[2020-11-25 01:15:01,787 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:15:01,787 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:15:01,787 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:15:01,789 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:15:01,789 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2799]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L2803]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2569]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2569]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2570]  COND FALSE  !(revert)
[L2573]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2544]              assume msgsender_MSG != null;
[L2545]              Balance[this] := 0;
[L2546]              _name_ERC20Detailed[this] := -2028290499;
[L2547]              _symbol_ERC20Detailed[this] := -2028290499;
[L2548]              _decimals_ERC20Detailed[this] := 0;
[L2550]              _name_ERC20Detailed[this] := name_s606;
[L2551]              _symbol_ERC20Detailed[this] := symbol_s606;
[L2552]              _decimals_ERC20Detailed[this] := decimals_s606;
[L2573]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2574]  COND FALSE  !(revert)
[L2803]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2804]  COND FALSE  !(revert)
[L2807]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2649]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2649]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2650]  COND FALSE  !(revert)
[L2653]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2653]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  COND FALSE  !(revert)
[L2657]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2657]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2658]  COND FALSE  !(revert)
[L2807]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2808]  COND FALSE  !(revert)
[L2811]  CALL        call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2753]              assume msgsender_MSG != null;
[L2754]              Balance[this] := 0;
[L2756]              __var_16 := 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2757]  COND TRUE   DType[this] == BNS
[L2758]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2329]              __var_7 := null;
[L2330]  COND FALSE  !(!(account_s464 != null))
[L2334]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2334]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2335]  COND FALSE  !(revert)
[L2338]              _totalSupply_ERC20[this] := __var_8;
[L2339]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2339]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2340]  COND FALSE  !(revert)
[L2343]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L2344]              _balances_ERC20[this][account_s464] := __var_9;
[L2345]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L2346]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2758]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2759]  COND FALSE  !(revert)
[L2811]  RET         call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  COND FALSE  !(revert)
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND TRUE   choice == 12
[L4471]              gas := gas - 21000;
[L4472]  COND TRUE   gas >= 0
[L4473]              assume value_s287 >= 0 && value_s287 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4474]              assume msgvalue_MSG == 0;
[L4475]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s287, value_s287);
[L456]               havoc __exception;
[L457]               revert := false;
[L458]   COND FALSE  !(__exception)
[L479]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s287, value_s287);
[L2015]  COND TRUE   DType[this] == BNS
[L2016]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s287, value_s287);
[L2421]              __var_13 := null;
[L2422]  COND FALSE  !(!(spender_s546 != null))
[L2426]              __var_14 := null;
[L2427]  COND FALSE  !(!(owner_s546 != null))
[L2431]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L2432]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L2433]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L2434]              assert { :EventEmitted "Approval_ERC20" } true;
[L2016]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s287, value_s287);
[L2017]  COND FALSE  !(revert)
[L2033]              __ret_0_ := true;
[L479]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s287, value_s287);
[L480]               assume !revert && gas >= 0;
[L4475]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s287, value_s287);
[L4566]  RET         call CorralChoice_BNS(this);
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND TRUE   DType[this] == BNS
[L2088]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2088]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2089]  COND FALSE  !(revert)
[L2105]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2105]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2106]  COND FALSE  !(revert)
[L2109]  COND TRUE   DType[this] == BNS
[L2110]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2421]              __var_13 := null;
[L2422]  COND FALSE  !(!(spender_s546 != null))
[L2426]              __var_14 := null;
[L2427]  COND FALSE  !(!(owner_s546 != null))
[L2431]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L2432]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L2433]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L2434]              assert { :EventEmitted "Approval_ERC20" } true;
[L2110]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2111]  COND FALSE  !(revert)
[L2127]              __ret_0_ := true;
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND TRUE   DType[this] == BNS
[L2088]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2088]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2089]  COND FALSE  !(revert)
[L2105]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2105]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2106]  COND FALSE  !(revert)
[L2109]  COND TRUE   DType[this] == BNS
[L2110]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2421]              __var_13 := null;
[L2422]  COND FALSE  !(!(spender_s546 != null))
[L2426]              __var_14 := null;
[L2427]  COND FALSE  !(!(owner_s546 != null))
[L2431]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L2432]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L2433]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L2434]              assert { :EventEmitted "Approval_ERC20" } true;
[L2110]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2111]  COND FALSE  !(revert)
[L2127]              __ret_0_ := true;
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:15:01,793 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:15:01,793 INFO  L82        PathProgramCache]: Analyzing trace with hash -1729023519, now seen corresponding path program 1 times
[2020-11-25 01:15:01,794 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:15:01,825 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:15:02,210 INFO  L134       CoverageAnalysis]: Checked inductivity of 181 backedges. 10 proven. 0 refuted. 0 times theorem prover too weak. 171 trivial. 0 not checked.
[2020-11-25 01:15:02,210 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:15:02,212 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [22] imperfect sequences [] total 22
[2020-11-25 01:15:02,212 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:15:02,212 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 23 interpolants.
[2020-11-25 01:15:02,212 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=57, Invalid=449, Unknown=0, NotChecked=0, Total=506
[2020-11-25 01:15:02,212 INFO  L87              Difference]: Start difference. First operand 2563 states and 2913 transitions. cyclomatic complexity: 353 Second operand 23 states.
[2020-11-25 01:15:04,708 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:15:04,709 INFO  L93              Difference]: Finished difference Result 2630 states and 3003 transitions.
[2020-11-25 01:15:04,709 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 01:15:04,709 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2630 states and 3003 transitions.
[2020-11-25 01:15:04,714 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:15:04,720 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2630 states to 2630 states and 3003 transitions.
[2020-11-25 01:15:04,720 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 726
[2020-11-25 01:15:04,720 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 726
[2020-11-25 01:15:04,721 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2630 states and 3003 transitions.
[2020-11-25 01:15:04,723 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:15:04,723 INFO  L728         BuchiCegarLoop]: Abstraction has 2630 states and 3003 transitions.
[2020-11-25 01:15:04,724 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2630 states and 3003 transitions.
[2020-11-25 01:15:04,739 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2630 to 2577.
[2020-11-25 01:15:04,739 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2577 states.
[2020-11-25 01:15:04,742 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2577 states to 2577 states and 2937 transitions.
[2020-11-25 01:15:04,742 INFO  L751         BuchiCegarLoop]: Abstraction has 2577 states and 2937 transitions.
[2020-11-25 01:15:04,742 INFO  L631         BuchiCegarLoop]: Abstraction has 2577 states and 2937 transitions.
[2020-11-25 01:15:04,742 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 01:15:04,742 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2577 states and 2937 transitions.
[2020-11-25 01:15:04,745 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:15:04,745 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:15:04,745 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:15:04,746 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:15:04,746 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND TRUE   __exception
[L1085]              __tmp__Balance := Balance;
[L1086]              __tmp__DType := DType;
[L1087]              __tmp__Alloc := Alloc;
[L1088]              __tmp__balance_ADDR := balance_ADDR;
[L1089]              __tmp__M_Ref_int := M_Ref_int;
[L1090]              __tmp__sum__balances0 := sum__balances0;
[L1091]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1092]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1093]              __tmp__sum__allowed1 := sum__allowed1;
[L1094]              __tmp__Length := Length;
[L1095]              __tmp__now := now;
[L1096]              __tmp___balances_ERC20 := _balances_ERC20;
[L1097]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1098]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1099]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1100]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1101]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1102]  CALL        call BNS_BNS__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1685]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1670]              assume msgsender_MSG != null;
[L1671]              __tmp__Balance[this] := 0;
[L1685]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1686]  COND FALSE  !(revert)
[L2770]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2771]  COND FALSE  !(revert)
[L2774]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1883]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1685]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1670]              assume msgsender_MSG != null;
[L1671]              __tmp__Balance[this] := 0;
[L1685]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1686]  COND FALSE  !(revert)
[L1883]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1884]  COND FALSE  !(revert)
[L1887]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1858]              assume msgsender_MSG != null;
[L1859]              __tmp__Balance[this] := 0;
[L1860]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L1861]              __tmp__sum__balances0[this] := 0;
[L1862]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L1863]              __tmp__sum__allowed1[this] := 0;
[L1864]              __tmp___totalSupply_ERC20[this] := 0;
[L1887]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1888]  COND FALSE  !(revert)
[L2774]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2775]  COND FALSE  !(revert)
[L2778]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2557]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1685]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1670]              assume msgsender_MSG != null;
[L1671]              __tmp__Balance[this] := 0;
[L1685]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1686]  COND FALSE  !(revert)
[L2557]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2558]  COND FALSE  !(revert)
[L2561]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2530]              assume msgsender_MSG != null;
[L2531]              __tmp__Balance[this] := 0;
[L2532]              __tmp___name_ERC20Detailed[this] := -2028290499;
[L2533]              __tmp___symbol_ERC20Detailed[this] := -2028290499;
[L2534]              __tmp___decimals_ERC20Detailed[this] := 0;
[L2536]              __tmp___name_ERC20Detailed[this] := name_s606;
[L2537]              __tmp___symbol_ERC20Detailed[this] := symbol_s606;
[L2538]              __tmp___decimals_ERC20Detailed[this] := decimals_s606;
[L2561]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2562]  COND FALSE  !(revert)
[L2778]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2779]  COND FALSE  !(revert)
[L2782]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2633]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1685]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1670]              assume msgsender_MSG != null;
[L1671]              __tmp__Balance[this] := 0;
[L1685]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1686]  COND FALSE  !(revert)
[L2633]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2634]  COND FALSE  !(revert)
[L2637]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1883]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1685]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1670]              assume msgsender_MSG != null;
[L1671]              __tmp__Balance[this] := 0;
[L1685]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1686]  COND FALSE  !(revert)
[L1883]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1884]  COND FALSE  !(revert)
[L1887]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1858]              assume msgsender_MSG != null;
[L1859]              __tmp__Balance[this] := 0;
[L1860]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L1861]              __tmp__sum__balances0[this] := 0;
[L1862]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L1863]              __tmp__sum__allowed1[this] := 0;
[L1864]              __tmp___totalSupply_ERC20[this] := 0;
[L1887]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1888]  COND FALSE  !(revert)
[L2637]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2638]  COND FALSE  !(revert)
[L2641]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2618]              assume msgsender_MSG != null;
[L2619]              __tmp__Balance[this] := 0;
[L2641]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2642]  COND FALSE  !(revert)
[L2782]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2783]  COND FALSE  !(revert)
[L2786]  CALL        call BNS_BNS_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2735]              assume msgsender_MSG != null;
[L2736]              __tmp__Balance[this] := 0;
[L2738]              __var_16 := 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2739]  COND TRUE   __tmp__DType[this] == BNS
[L2740]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2305]              __var_7 := null;
[L2306]  COND FALSE  !(!(account_s464 != null))
[L2310]  CALL        call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s464);
[L1814]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1815]  COND FALSE  !(!(c_s174 >= a_s174))
[L1819]              __ret_0_ := c_s174;
[L2310]  RET         call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s464);
[L2311]  COND FALSE  !(revert)
[L2314]              __tmp___totalSupply_ERC20[this] := __var_8;
[L2315]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s464], value_s464);
[L1814]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1815]  COND FALSE  !(!(c_s174 >= a_s174))
[L1819]              __ret_0_ := c_s174;
[L2315]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s464], value_s464);
[L2316]  COND FALSE  !(revert)
[L2319]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s464];
[L2320]              __tmp___balances_ERC20[this][account_s464] := __var_9;
[L2321]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s464];
[L2740]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2741]  COND FALSE  !(revert)
[L2786]  RET         call BNS_BNS_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND FALSE  !(revert)
[L1102]  RET         call BNS_BNS__fail(this, msgsender_MSG, msgvalue_MSG);
[L1103]              assume revert || gas < 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND TRUE   DType[this] == BNS
[L2088]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2088]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2089]  COND FALSE  !(revert)
[L2105]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2105]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2106]  COND FALSE  !(revert)
[L2109]  COND TRUE   DType[this] == BNS
[L2110]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2421]              __var_13 := null;
[L2422]  COND FALSE  !(!(spender_s546 != null))
[L2426]              __var_14 := null;
[L2427]  COND FALSE  !(!(owner_s546 != null))
[L2431]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L2432]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L2433]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L2434]              assert { :EventEmitted "Approval_ERC20" } true;
[L2110]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2111]  COND FALSE  !(revert)
[L2127]              __ret_0_ := true;
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND TRUE   DType[this] == BNS
[L2088]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2088]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2089]  COND FALSE  !(revert)
[L2105]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2105]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2106]  COND FALSE  !(revert)
[L2109]  COND TRUE   DType[this] == BNS
[L2110]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2421]              __var_13 := null;
[L2422]  COND FALSE  !(!(spender_s546 != null))
[L2426]              __var_14 := null;
[L2427]  COND FALSE  !(!(owner_s546 != null))
[L2431]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L2432]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L2433]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L2434]              assert { :EventEmitted "Approval_ERC20" } true;
[L2110]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2111]  COND FALSE  !(revert)
[L2127]              __ret_0_ := true;
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:15:04,750 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:15:04,751 INFO  L82        PathProgramCache]: Analyzing trace with hash 1471696542, now seen corresponding path program 1 times
[2020-11-25 01:15:04,751 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:15:04,762 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:15:04,802 INFO  L134       CoverageAnalysis]: Checked inductivity of 129 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 129 trivial. 0 not checked.
[2020-11-25 01:15:04,802 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:15:04,802 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:15:04,802 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:15:04,802 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:15:04,802 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:15:04,803 INFO  L87              Difference]: Start difference. First operand 2577 states and 2937 transitions. cyclomatic complexity: 365 Second operand 4 states.
[2020-11-25 01:15:04,881 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:15:04,882 INFO  L93              Difference]: Finished difference Result 3234 states and 3816 transitions.
[2020-11-25 01:15:04,882 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 01:15:04,882 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3234 states and 3816 transitions.
[2020-11-25 01:15:04,888 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 01:15:04,897 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3234 states to 3094 states and 3670 transitions.
[2020-11-25 01:15:04,897 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 852
[2020-11-25 01:15:04,898 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 852
[2020-11-25 01:15:04,898 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3094 states and 3670 transitions.
[2020-11-25 01:15:04,900 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:15:04,900 INFO  L728         BuchiCegarLoop]: Abstraction has 3094 states and 3670 transitions.
[2020-11-25 01:15:04,902 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3094 states and 3670 transitions.
[2020-11-25 01:15:04,943 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3094 to 2437.
[2020-11-25 01:15:04,943 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2437 states.
[2020-11-25 01:15:04,946 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2437 states to 2437 states and 2790 transitions.
[2020-11-25 01:15:04,946 INFO  L751         BuchiCegarLoop]: Abstraction has 2437 states and 2790 transitions.
[2020-11-25 01:15:04,946 INFO  L631         BuchiCegarLoop]: Abstraction has 2437 states and 2790 transitions.
[2020-11-25 01:15:04,946 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 01:15:04,946 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2437 states and 2790 transitions.
[2020-11-25 01:15:04,948 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:15:04,948 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:15:04,949 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:15:04,950 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:15:04,950 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2799]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L2803]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2569]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2569]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2570]  COND FALSE  !(revert)
[L2573]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2544]              assume msgsender_MSG != null;
[L2545]              Balance[this] := 0;
[L2546]              _name_ERC20Detailed[this] := -2028290499;
[L2547]              _symbol_ERC20Detailed[this] := -2028290499;
[L2548]              _decimals_ERC20Detailed[this] := 0;
[L2550]              _name_ERC20Detailed[this] := name_s606;
[L2551]              _symbol_ERC20Detailed[this] := symbol_s606;
[L2552]              _decimals_ERC20Detailed[this] := decimals_s606;
[L2573]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2574]  COND FALSE  !(revert)
[L2803]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2804]  COND FALSE  !(revert)
[L2807]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2649]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2649]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2650]  COND FALSE  !(revert)
[L2653]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2653]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  COND FALSE  !(revert)
[L2657]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2657]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2658]  COND FALSE  !(revert)
[L2807]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2808]  COND FALSE  !(revert)
[L2811]  CALL        call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2753]              assume msgsender_MSG != null;
[L2754]              Balance[this] := 0;
[L2756]              __var_16 := 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2757]  COND TRUE   DType[this] == BNS
[L2758]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2329]              __var_7 := null;
[L2330]  COND FALSE  !(!(account_s464 != null))
[L2334]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2334]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2335]  COND FALSE  !(revert)
[L2338]              _totalSupply_ERC20[this] := __var_8;
[L2339]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2339]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2340]  COND FALSE  !(revert)
[L2343]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L2344]              _balances_ERC20[this][account_s464] := __var_9;
[L2345]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L2346]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2758]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2759]  COND FALSE  !(revert)
[L2811]  RET         call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  COND FALSE  !(revert)
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND FALSE  !(choice == 11)
[L4484]  COND FALSE  !(choice == 10)
[L4490]  COND FALSE  !(choice == 9)
[L4496]  COND FALSE  !(choice == 8)
[L4502]  COND FALSE  !(choice == 7)
[L4509]  COND FALSE  !(choice == 6)
[L4516]  COND FALSE  !(choice == 5)
[L4522]  COND FALSE  !(choice == 4)
[L4528]  COND FALSE  !(choice == 3)
[L4534]  COND FALSE  !(choice == 2)
[L4541]  COND TRUE   choice == 1
[L4542]              gas := gas - 21000;
[L4543]  COND TRUE   gas >= 0
[L4544]              assume value_s659 >= 0 && value_s659 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4545]              assume msgvalue_MSG == 0;
[L4546]  CALL        call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, from_s659, value_s659);
[L1017]              havoc __exception;
[L1018]              revert := false;
[L1019]  COND FALSE  !(__exception)
[L1040]  CALL        call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, from_s659, value_s659);
[L2716]  COND TRUE   DType[this] == BNS
[L2717]  CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s659, value_s659);
[L2485]  COND FALSE  !(DType[this] == BNS)
[L2490]  COND FALSE  !(DType[this] == ERC20Burnable)
[L2495]  COND TRUE   DType[this] == ERC20
[L2496]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s574, value_s574);
[L2378]              __var_10 := null;
[L2379]  COND FALSE  !(!(account_s506 != null))
[L2383]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s506);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2383]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s506);
[L2384]  COND FALSE  !(revert)
[L2387]              _totalSupply_ERC20[this] := __var_11;
[L2388]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s506], value_s506);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2388]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s506], value_s506);
[L2389]  COND FALSE  !(revert)
[L2392]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s506];
[L2393]              _balances_ERC20[this][account_s506] := __var_12;
[L2394]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s506];
[L2395]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2496]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s574, value_s574);
[L2497]  COND FALSE  !(revert)
[L2503]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s574][msgsender_MSG], value_s574);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2503]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s574][msgsender_MSG], value_s574);
[L2504]  COND FALSE  !(revert)
[L2507]  COND FALSE  !(DType[this] == BNS)
[L2512]  COND FALSE  !(DType[this] == ERC20Burnable)
[L2517]  COND TRUE   DType[this] == ERC20
[L2518]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s574, msgsender_MSG, __var_15);
[L2421]              __var_13 := null;
[L2422]  COND FALSE  !(!(spender_s546 != null))
[L2426]              __var_14 := null;
[L2427]  COND FALSE  !(!(owner_s546 != null))
[L2431]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L2432]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L2433]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L2434]              assert { :EventEmitted "Approval_ERC20" } true;
[L2518]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s574, msgsender_MSG, __var_15);
[L2519]  COND FALSE  !(revert)
[L2717]  RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s659, value_s659);
[L2718]  COND FALSE  !(revert)
[L1040]  RET         call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, from_s659, value_s659);
[L1041]              assume !revert && gas >= 0;
[L4546]  RET         call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, from_s659, value_s659);
[L4566]  RET         call CorralChoice_BNS(this);
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND TRUE   DType[this] == BNS
[L2088]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2088]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2089]  COND FALSE  !(revert)
[L2105]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2105]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2106]  COND FALSE  !(revert)
[L2109]  COND TRUE   DType[this] == BNS
[L2110]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2421]              __var_13 := null;
[L2422]  COND FALSE  !(!(spender_s546 != null))
[L2426]              __var_14 := null;
[L2427]  COND FALSE  !(!(owner_s546 != null))
[L2431]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L2432]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L2433]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L2434]              assert { :EventEmitted "Approval_ERC20" } true;
[L2110]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2111]  COND FALSE  !(revert)
[L2127]              __ret_0_ := true;
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND TRUE   DType[this] == BNS
[L2088]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2088]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2089]  COND FALSE  !(revert)
[L2105]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2105]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2106]  COND FALSE  !(revert)
[L2109]  COND TRUE   DType[this] == BNS
[L2110]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2421]              __var_13 := null;
[L2422]  COND FALSE  !(!(spender_s546 != null))
[L2426]              __var_14 := null;
[L2427]  COND FALSE  !(!(owner_s546 != null))
[L2431]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L2432]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L2433]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L2434]              assert { :EventEmitted "Approval_ERC20" } true;
[L2110]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2111]  COND FALSE  !(revert)
[L2127]              __ret_0_ := true;
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:15:04,957 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:15:04,957 INFO  L82        PathProgramCache]: Analyzing trace with hash 1017261950, now seen corresponding path program 1 times
[2020-11-25 01:15:04,957 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:15:04,970 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:15:05,081 INFO  L134       CoverageAnalysis]: Checked inductivity of 197 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 196 trivial. 0 not checked.
[2020-11-25 01:15:05,082 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:15:05,082 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 01:15:05,082 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:15:05,082 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:15:05,082 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:15:05,083 INFO  L87              Difference]: Start difference. First operand 2437 states and 2790 transitions. cyclomatic complexity: 358 Second operand 7 states.
[2020-11-25 01:15:05,158 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:15:05,158 INFO  L93              Difference]: Finished difference Result 2473 states and 2826 transitions.
[2020-11-25 01:15:05,158 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:15:05,158 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2473 states and 2826 transitions.
[2020-11-25 01:15:05,165 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:15:05,173 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2473 states to 2387 states and 2720 transitions.
[2020-11-25 01:15:05,173 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 692
[2020-11-25 01:15:05,173 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 692
[2020-11-25 01:15:05,173 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2387 states and 2720 transitions.
[2020-11-25 01:15:05,176 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:15:05,176 INFO  L728         BuchiCegarLoop]: Abstraction has 2387 states and 2720 transitions.
[2020-11-25 01:15:05,178 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2387 states and 2720 transitions.
[2020-11-25 01:15:05,195 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2387 to 2387.
[2020-11-25 01:15:05,196 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2387 states.
[2020-11-25 01:15:05,199 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2387 states to 2387 states and 2720 transitions.
[2020-11-25 01:15:05,199 INFO  L751         BuchiCegarLoop]: Abstraction has 2387 states and 2720 transitions.
[2020-11-25 01:15:05,199 INFO  L631         BuchiCegarLoop]: Abstraction has 2387 states and 2720 transitions.
[2020-11-25 01:15:05,199 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 01:15:05,199 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2387 states and 2720 transitions.
[2020-11-25 01:15:05,203 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:15:05,203 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:15:05,203 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:15:05,205 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:15:05,205 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2799]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L2803]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2569]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2569]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2570]  COND FALSE  !(revert)
[L2573]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2544]              assume msgsender_MSG != null;
[L2545]              Balance[this] := 0;
[L2546]              _name_ERC20Detailed[this] := -2028290499;
[L2547]              _symbol_ERC20Detailed[this] := -2028290499;
[L2548]              _decimals_ERC20Detailed[this] := 0;
[L2550]              _name_ERC20Detailed[this] := name_s606;
[L2551]              _symbol_ERC20Detailed[this] := symbol_s606;
[L2552]              _decimals_ERC20Detailed[this] := decimals_s606;
[L2573]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2574]  COND FALSE  !(revert)
[L2803]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2804]  COND FALSE  !(revert)
[L2807]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2649]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2649]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2650]  COND FALSE  !(revert)
[L2653]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2653]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  COND FALSE  !(revert)
[L2657]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2657]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2658]  COND FALSE  !(revert)
[L2807]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2808]  COND FALSE  !(revert)
[L2811]  CALL        call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2753]              assume msgsender_MSG != null;
[L2754]              Balance[this] := 0;
[L2756]              __var_16 := 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2757]  COND TRUE   DType[this] == BNS
[L2758]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2329]              __var_7 := null;
[L2330]  COND FALSE  !(!(account_s464 != null))
[L2334]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2334]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2335]  COND FALSE  !(revert)
[L2338]              _totalSupply_ERC20[this] := __var_8;
[L2339]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2339]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2340]  COND FALSE  !(revert)
[L2343]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L2344]              _balances_ERC20[this][account_s464] := __var_9;
[L2345]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L2346]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2758]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2759]  COND FALSE  !(revert)
[L2811]  RET         call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  COND FALSE  !(revert)
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND FALSE  !(choice == 11)
[L4484]  COND FALSE  !(choice == 10)
[L4490]  COND FALSE  !(choice == 9)
[L4496]  COND FALSE  !(choice == 8)
[L4502]  COND FALSE  !(choice == 7)
[L4509]  COND FALSE  !(choice == 6)
[L4516]  COND FALSE  !(choice == 5)
[L4522]  COND FALSE  !(choice == 4)
[L4528]  COND FALSE  !(choice == 3)
[L4534]  COND FALSE  !(choice == 2)
[L4541]  COND TRUE   choice == 1
[L4542]              gas := gas - 21000;
[L4543]  COND TRUE   gas >= 0
[L4544]              assume value_s659 >= 0 && value_s659 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4545]              assume msgvalue_MSG == 0;
[L4546]  CALL        call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, from_s659, value_s659);
[L1017]              havoc __exception;
[L1018]              revert := false;
[L1019]  COND FALSE  !(__exception)
[L1040]  CALL        call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, from_s659, value_s659);
[L2716]  COND TRUE   DType[this] == BNS
[L2717]  CALL        call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s659, value_s659);
[L2485]  COND TRUE   DType[this] == BNS
[L2486]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s574, value_s574);
[L2378]              __var_10 := null;
[L2379]  COND FALSE  !(!(account_s506 != null))
[L2383]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s506);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2383]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s506);
[L2384]  COND FALSE  !(revert)
[L2387]              _totalSupply_ERC20[this] := __var_11;
[L2388]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s506], value_s506);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2388]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s506], value_s506);
[L2389]  COND FALSE  !(revert)
[L2392]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s506];
[L2393]              _balances_ERC20[this][account_s506] := __var_12;
[L2394]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s506];
[L2395]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2486]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s574, value_s574);
[L2487]  COND FALSE  !(revert)
[L2503]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s574][msgsender_MSG], value_s574);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2503]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s574][msgsender_MSG], value_s574);
[L2504]  COND FALSE  !(revert)
[L2507]  COND TRUE   DType[this] == BNS
[L2508]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s574, msgsender_MSG, __var_15);
[L2421]              __var_13 := null;
[L2422]  COND FALSE  !(!(spender_s546 != null))
[L2426]              __var_14 := null;
[L2427]  COND FALSE  !(!(owner_s546 != null))
[L2431]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L2432]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L2433]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L2434]              assert { :EventEmitted "Approval_ERC20" } true;
[L2508]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s574, msgsender_MSG, __var_15);
[L2509]  COND FALSE  !(revert)
[L2717]  RET         call _burnFrom~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s659, value_s659);
[L2718]  COND FALSE  !(revert)
[L1040]  RET         call burnFrom~address~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, from_s659, value_s659);
[L1041]              assume !revert && gas >= 0;
[L4546]  RET         call burnFrom~address~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, from_s659, value_s659);
[L4566]  RET         call CorralChoice_BNS(this);
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND TRUE   DType[this] == BNS
[L2088]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2088]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2089]  COND FALSE  !(revert)
[L2105]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2105]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2106]  COND FALSE  !(revert)
[L2109]  COND TRUE   DType[this] == BNS
[L2110]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2421]              __var_13 := null;
[L2422]  COND FALSE  !(!(spender_s546 != null))
[L2426]              __var_14 := null;
[L2427]  COND FALSE  !(!(owner_s546 != null))
[L2431]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L2432]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L2433]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L2434]              assert { :EventEmitted "Approval_ERC20" } true;
[L2110]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2111]  COND FALSE  !(revert)
[L2127]              __ret_0_ := true;
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND TRUE   DType[this] == BNS
[L2088]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2088]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2089]  COND FALSE  !(revert)
[L2105]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2105]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2106]  COND FALSE  !(revert)
[L2109]  COND TRUE   DType[this] == BNS
[L2110]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2421]              __var_13 := null;
[L2422]  COND FALSE  !(!(spender_s546 != null))
[L2426]              __var_14 := null;
[L2427]  COND FALSE  !(!(owner_s546 != null))
[L2431]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L2432]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L2433]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L2434]              assert { :EventEmitted "Approval_ERC20" } true;
[L2110]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2111]  COND FALSE  !(revert)
[L2127]              __ret_0_ := true;
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:15:05,210 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:15:05,210 INFO  L82        PathProgramCache]: Analyzing trace with hash -469234015, now seen corresponding path program 1 times
[2020-11-25 01:15:05,211 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:15:05,258 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:15:05,786 INFO  L134       CoverageAnalysis]: Checked inductivity of 197 backedges. 10 proven. 1 refuted. 0 times theorem prover too weak. 186 trivial. 0 not checked.
[2020-11-25 01:15:05,786 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:15:05,786 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [35] total 35
[2020-11-25 01:15:05,786 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:15:05,786 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-11-25 01:15:05,787 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=117, Invalid=1143, Unknown=0, NotChecked=0, Total=1260
[2020-11-25 01:15:05,787 INFO  L87              Difference]: Start difference. First operand 2387 states and 2720 transitions. cyclomatic complexity: 338 Second operand 36 states.
[2020-11-25 01:15:10,128 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:15:10,128 INFO  L93              Difference]: Finished difference Result 2446 states and 2793 transitions.
[2020-11-25 01:15:10,129 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 38 states. 
[2020-11-25 01:15:10,129 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2446 states and 2793 transitions.
[2020-11-25 01:15:10,133 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:15:10,139 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2446 states to 2446 states and 2793 transitions.
[2020-11-25 01:15:10,139 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 718
[2020-11-25 01:15:10,139 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 718
[2020-11-25 01:15:10,139 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2446 states and 2793 transitions.
[2020-11-25 01:15:10,141 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:15:10,141 INFO  L728         BuchiCegarLoop]: Abstraction has 2446 states and 2793 transitions.
[2020-11-25 01:15:10,143 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2446 states and 2793 transitions.
[2020-11-25 01:15:10,154 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2446 to 2391.
[2020-11-25 01:15:10,155 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2391 states.
[2020-11-25 01:15:10,157 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2391 states to 2391 states and 2732 transitions.
[2020-11-25 01:15:10,157 INFO  L751         BuchiCegarLoop]: Abstraction has 2391 states and 2732 transitions.
[2020-11-25 01:15:10,157 INFO  L631         BuchiCegarLoop]: Abstraction has 2391 states and 2732 transitions.
[2020-11-25 01:15:10,157 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 01:15:10,157 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2391 states and 2732 transitions.
[2020-11-25 01:15:10,159 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:15:10,159 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:15:10,159 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:15:10,160 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:15:10,160 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2799]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L2803]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2569]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2569]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2570]  COND FALSE  !(revert)
[L2573]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2544]              assume msgsender_MSG != null;
[L2545]              Balance[this] := 0;
[L2546]              _name_ERC20Detailed[this] := -2028290499;
[L2547]              _symbol_ERC20Detailed[this] := -2028290499;
[L2548]              _decimals_ERC20Detailed[this] := 0;
[L2550]              _name_ERC20Detailed[this] := name_s606;
[L2551]              _symbol_ERC20Detailed[this] := symbol_s606;
[L2552]              _decimals_ERC20Detailed[this] := decimals_s606;
[L2573]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2574]  COND FALSE  !(revert)
[L2803]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2804]  COND FALSE  !(revert)
[L2807]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2649]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2649]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2650]  COND FALSE  !(revert)
[L2653]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2653]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  COND FALSE  !(revert)
[L2657]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2657]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2658]  COND FALSE  !(revert)
[L2807]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2808]  COND FALSE  !(revert)
[L2811]  CALL        call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2753]              assume msgsender_MSG != null;
[L2754]              Balance[this] := 0;
[L2756]              __var_16 := 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2757]  COND TRUE   DType[this] == BNS
[L2758]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2329]              __var_7 := null;
[L2330]  COND FALSE  !(!(account_s464 != null))
[L2334]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2334]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2335]  COND FALSE  !(revert)
[L2338]              _totalSupply_ERC20[this] := __var_8;
[L2339]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2339]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2340]  COND FALSE  !(revert)
[L2343]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L2344]              _balances_ERC20[this][account_s464] := __var_9;
[L2345]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L2346]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2758]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2759]  COND FALSE  !(revert)
[L2811]  RET         call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  COND FALSE  !(revert)
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND FALSE  !(DType[this] == BNS)
[L2092]  COND FALSE  !(DType[this] == ERC20Burnable)
[L2097]  COND TRUE   DType[this] == ERC20
[L2098]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2098]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2099]  COND FALSE  !(revert)
[L2105]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2105]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2106]  COND FALSE  !(revert)
[L2109]  COND FALSE  !(DType[this] == BNS)
[L2114]  COND TRUE   DType[this] == ERC20Burnable
[L2115]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2421]              __var_13 := null;
[L2422]  COND FALSE  !(!(spender_s546 != null))
[L2426]              __var_14 := null;
[L2427]  COND FALSE  !(!(owner_s546 != null))
[L2431]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L2432]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L2433]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L2434]              assert { :EventEmitted "Approval_ERC20" } true;
[L2115]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2116]  COND FALSE  !(revert)
[L2127]              __ret_0_ := true;
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND TRUE   DType[this] == BNS
[L2088]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2088]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2089]  COND FALSE  !(revert)
[L2105]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2105]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2106]  COND FALSE  !(revert)
[L2109]  COND TRUE   DType[this] == BNS
[L2110]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2421]              __var_13 := null;
[L2422]  COND FALSE  !(!(spender_s546 != null))
[L2426]              __var_14 := null;
[L2427]  COND FALSE  !(!(owner_s546 != null))
[L2431]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L2432]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L2433]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L2434]              assert { :EventEmitted "Approval_ERC20" } true;
[L2110]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2111]  COND FALSE  !(revert)
[L2127]              __ret_0_ := true;
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND TRUE   choice == 13
[L4464]              gas := gas - 21000;
[L4465]  COND FALSE  !(gas >= 0)
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:15:10,164 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:15:10,164 INFO  L82        PathProgramCache]: Analyzing trace with hash -1865327035, now seen corresponding path program 1 times
[2020-11-25 01:15:10,164 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:15:10,175 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:15:10,238 INFO  L134       CoverageAnalysis]: Checked inductivity of 206 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 205 trivial. 0 not checked.
[2020-11-25 01:15:10,238 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:15:10,238 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:15:10,239 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:15:10,239 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:15:10,239 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:15:10,239 INFO  L87              Difference]: Start difference. First operand 2391 states and 2732 transitions. cyclomatic complexity: 347 Second operand 3 states.
[2020-11-25 01:15:10,257 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:15:10,257 INFO  L93              Difference]: Finished difference Result 2407 states and 2754 transitions.
[2020-11-25 01:15:10,257 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:15:10,257 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2407 states and 2754 transitions.
[2020-11-25 01:15:10,263 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:15:10,268 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2407 states to 2407 states and 2754 transitions.
[2020-11-25 01:15:10,268 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 699
[2020-11-25 01:15:10,268 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 699
[2020-11-25 01:15:10,269 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2407 states and 2754 transitions.
[2020-11-25 01:15:10,270 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:15:10,270 INFO  L728         BuchiCegarLoop]: Abstraction has 2407 states and 2754 transitions.
[2020-11-25 01:15:10,272 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2407 states and 2754 transitions.
[2020-11-25 01:15:10,283 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2407 to 2401.
[2020-11-25 01:15:10,283 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2401 states.
[2020-11-25 01:15:10,285 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2401 states to 2401 states and 2746 transitions.
[2020-11-25 01:15:10,285 INFO  L751         BuchiCegarLoop]: Abstraction has 2401 states and 2746 transitions.
[2020-11-25 01:15:10,286 INFO  L631         BuchiCegarLoop]: Abstraction has 2401 states and 2746 transitions.
[2020-11-25 01:15:10,286 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 01:15:10,286 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2401 states and 2746 transitions.
[2020-11-25 01:15:10,288 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:15:10,288 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:15:10,288 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:15:10,289 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:15:10,289 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2799]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L2803]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2569]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2569]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2570]  COND FALSE  !(revert)
[L2573]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2544]              assume msgsender_MSG != null;
[L2545]              Balance[this] := 0;
[L2546]              _name_ERC20Detailed[this] := -2028290499;
[L2547]              _symbol_ERC20Detailed[this] := -2028290499;
[L2548]              _decimals_ERC20Detailed[this] := 0;
[L2550]              _name_ERC20Detailed[this] := name_s606;
[L2551]              _symbol_ERC20Detailed[this] := symbol_s606;
[L2552]              _decimals_ERC20Detailed[this] := decimals_s606;
[L2573]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2574]  COND FALSE  !(revert)
[L2803]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2804]  COND FALSE  !(revert)
[L2807]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2649]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2649]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2650]  COND FALSE  !(revert)
[L2653]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2653]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  COND FALSE  !(revert)
[L2657]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2657]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2658]  COND FALSE  !(revert)
[L2807]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2808]  COND FALSE  !(revert)
[L2811]  CALL        call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2753]              assume msgsender_MSG != null;
[L2754]              Balance[this] := 0;
[L2756]              __var_16 := 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2757]  COND TRUE   DType[this] == BNS
[L2758]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2329]              __var_7 := null;
[L2330]  COND FALSE  !(!(account_s464 != null))
[L2334]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2334]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2335]  COND FALSE  !(revert)
[L2338]              _totalSupply_ERC20[this] := __var_8;
[L2339]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2339]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2340]  COND FALSE  !(revert)
[L2343]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L2344]              _balances_ERC20[this][account_s464] := __var_9;
[L2345]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L2346]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2758]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2759]  COND FALSE  !(revert)
[L2811]  RET         call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  COND FALSE  !(revert)
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND FALSE  !(DType[this] == BNS)
[L2092]  COND TRUE   DType[this] == ERC20Burnable
[L2093]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2093]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2094]  COND FALSE  !(revert)
[L2105]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2105]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2106]  COND FALSE  !(revert)
[L2109]  COND FALSE  !(DType[this] == BNS)
[L2114]  COND TRUE   DType[this] == ERC20Burnable
[L2115]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2421]              __var_13 := null;
[L2422]  COND FALSE  !(!(spender_s546 != null))
[L2426]              __var_14 := null;
[L2427]  COND FALSE  !(!(owner_s546 != null))
[L2431]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L2432]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L2433]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L2434]              assert { :EventEmitted "Approval_ERC20" } true;
[L2115]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2116]  COND FALSE  !(revert)
[L2127]              __ret_0_ := true;
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND TRUE   DType[this] == BNS
[L2088]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2088]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2089]  COND FALSE  !(revert)
[L2105]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2105]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2106]  COND FALSE  !(revert)
[L2109]  COND TRUE   DType[this] == BNS
[L2110]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2421]              __var_13 := null;
[L2422]  COND FALSE  !(!(spender_s546 != null))
[L2426]              __var_14 := null;
[L2427]  COND FALSE  !(!(owner_s546 != null))
[L2431]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L2432]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L2433]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L2434]              assert { :EventEmitted "Approval_ERC20" } true;
[L2110]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2111]  COND FALSE  !(revert)
[L2127]              __ret_0_ := true;
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND TRUE   DType[this] == BNS
[L2088]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2088]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2089]  COND FALSE  !(revert)
[L2105]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2105]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2106]  COND FALSE  !(revert)
[L2109]  COND TRUE   DType[this] == BNS
[L2110]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2421]              __var_13 := null;
[L2422]  COND FALSE  !(!(spender_s546 != null))
[L2426]              __var_14 := null;
[L2427]  COND FALSE  !(!(owner_s546 != null))
[L2431]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L2432]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L2433]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L2434]              assert { :EventEmitted "Approval_ERC20" } true;
[L2110]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2111]  COND FALSE  !(revert)
[L2127]              __ret_0_ := true;
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:15:10,293 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:15:10,293 INFO  L82        PathProgramCache]: Analyzing trace with hash 789196230, now seen corresponding path program 1 times
[2020-11-25 01:15:10,293 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:15:10,304 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:15:10,376 INFO  L134       CoverageAnalysis]: Checked inductivity of 206 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 205 trivial. 0 not checked.
[2020-11-25 01:15:10,376 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:15:10,376 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 01:15:10,376 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:15:10,377 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 01:15:10,377 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 01:15:10,377 INFO  L87              Difference]: Start difference. First operand 2401 states and 2746 transitions. cyclomatic complexity: 351 Second operand 6 states.
[2020-11-25 01:15:10,427 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:15:10,427 INFO  L93              Difference]: Finished difference Result 2443 states and 2787 transitions.
[2020-11-25 01:15:10,428 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 01:15:10,428 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2443 states and 2787 transitions.
[2020-11-25 01:15:10,433 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:15:10,439 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2443 states to 2351 states and 2676 transitions.
[2020-11-25 01:15:10,439 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 682
[2020-11-25 01:15:10,439 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 682
[2020-11-25 01:15:10,439 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2351 states and 2676 transitions.
[2020-11-25 01:15:10,440 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:15:10,440 INFO  L728         BuchiCegarLoop]: Abstraction has 2351 states and 2676 transitions.
[2020-11-25 01:15:10,442 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2351 states and 2676 transitions.
[2020-11-25 01:15:10,454 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2351 to 2351.
[2020-11-25 01:15:10,454 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2351 states.
[2020-11-25 01:15:10,456 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2351 states to 2351 states and 2676 transitions.
[2020-11-25 01:15:10,457 INFO  L751         BuchiCegarLoop]: Abstraction has 2351 states and 2676 transitions.
[2020-11-25 01:15:10,457 INFO  L631         BuchiCegarLoop]: Abstraction has 2351 states and 2676 transitions.
[2020-11-25 01:15:10,457 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 01:15:10,457 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2351 states and 2676 transitions.
[2020-11-25 01:15:10,460 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:15:10,460 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:15:10,460 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:15:10,461 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:15:10,462 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L4556]              assume null == 0;
[L4557]  CALL        call this := FreshRefGenerator__success();
[L1661]              havoc newRef;
[L1662]              assume Alloc[newRef] == false;
[L1663]              Alloc[newRef] := true;
[L1664]              assume newRef != null;
[L4557]  RET         call this := FreshRefGenerator__success();
[L4558]              assume now >= 0;
[L4559]              assume DType[this] == BNS;
[L4560]              assume msgvalue_MSG == 0;
[L4561]              gas := gas - 53000;
[L4562]  CALL        call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L1082]              havoc __exception;
[L1083]              revert := false;
[L1084]  COND FALSE  !(__exception)
[L1105]  CALL        call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2799]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L2803]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2569]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2569]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2570]  COND FALSE  !(revert)
[L2573]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2544]              assume msgsender_MSG != null;
[L2545]              Balance[this] := 0;
[L2546]              _name_ERC20Detailed[this] := -2028290499;
[L2547]              _symbol_ERC20Detailed[this] := -2028290499;
[L2548]              _decimals_ERC20Detailed[this] := 0;
[L2550]              _name_ERC20Detailed[this] := name_s606;
[L2551]              _symbol_ERC20Detailed[this] := symbol_s606;
[L2552]              _decimals_ERC20Detailed[this] := decimals_s606;
[L2573]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s606, symbol_s606, decimals_s606);
[L2574]  COND FALSE  !(revert)
[L2803]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 2048224778, 26805932, 8);
[L2804]  COND FALSE  !(revert)
[L2807]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2649]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L2649]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2650]  COND FALSE  !(revert)
[L2653]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1693]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1678]              assume msgsender_MSG != null;
[L1679]              Balance[this] := 0;
[L1693]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1694]  COND FALSE  !(revert)
[L1895]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L1899]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1871]              assume msgsender_MSG != null;
[L1872]              Balance[this] := 0;
[L1873]              _balances_ERC20[this] := zeroRefintArr();
[L1874]              sum__balances0[this] := 0;
[L1875]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1876]              sum__allowed1[this] := 0;
[L1877]              _totalSupply_ERC20[this] := 0;
[L1899]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1900]  COND FALSE  !(revert)
[L2653]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  COND FALSE  !(revert)
[L2657]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2657]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2658]  COND FALSE  !(revert)
[L2807]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2808]  COND FALSE  !(revert)
[L2811]  CALL        call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2753]              assume msgsender_MSG != null;
[L2754]              Balance[this] := 0;
[L2756]              __var_16 := 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2757]  COND TRUE   DType[this] == BNS
[L2758]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2329]              __var_7 := null;
[L2330]  COND FALSE  !(!(account_s464 != null))
[L2334]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2334]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2335]  COND FALSE  !(revert)
[L2338]              _totalSupply_ERC20[this] := __var_8;
[L2339]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2339]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2340]  COND FALSE  !(revert)
[L2343]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L2344]              _balances_ERC20[this][account_s464] := __var_9;
[L2345]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L2346]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2758]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 250000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2759]  COND FALSE  !(revert)
[L2811]  RET         call BNS_BNS_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2812]  COND FALSE  !(revert)
[L1105]  RET         call BNS_BNS__success(this, msgsender_MSG, msgvalue_MSG);
[L1106]              assume !revert && gas >= 0;
[L4562]  RET         call BNS_BNS(this, msgsender_MSG, msgvalue_MSG);
[L4563]              assume !revert && gas >= 0;
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND TRUE   DType[this] == BNS
[L2088]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2088]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2089]  COND FALSE  !(revert)
[L2105]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2105]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2106]  COND FALSE  !(revert)
[L2109]  COND TRUE   DType[this] == BNS
[L2110]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2421]              __var_13 := null;
[L2422]  COND FALSE  !(!(spender_s546 != null))
[L2426]              __var_14 := null;
[L2427]  COND FALSE  !(!(owner_s546 != null))
[L2431]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L2432]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L2433]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L2434]              assert { :EventEmitted "Approval_ERC20" } true;
[L2110]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2111]  COND FALSE  !(revert)
[L2127]              __ret_0_ := true;
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND TRUE   DType[this] == BNS
[L2088]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2088]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2089]  COND FALSE  !(revert)
[L2105]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2105]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2106]  COND FALSE  !(revert)
[L2109]  COND TRUE   DType[this] == BNS
[L2110]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2421]              __var_13 := null;
[L2422]  COND FALSE  !(!(spender_s546 != null))
[L2426]              __var_14 := null;
[L2427]  COND FALSE  !(!(owner_s546 != null))
[L2431]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L2432]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L2433]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L2434]              assert { :EventEmitted "Approval_ERC20" } true;
[L2110]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2111]  COND FALSE  !(revert)
[L2127]              __ret_0_ := true;
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);

Loop:
[L4566]  CALL        call CorralChoice_BNS(this);
[L4415]              havoc msgsender_MSG;
[L4416]              havoc msgvalue_MSG;
[L4417]              havoc choice;
[L4418]              havoc to_s268;
[L4419]              havoc value_s268;
[L4420]              havoc __ret_0_transfer;
[L4421]              havoc spender_s287;
[L4422]              havoc value_s287;
[L4423]              havoc __ret_0_approve;
[L4424]              havoc from_s322;
[L4425]              havoc to_s322;
[L4426]              havoc value_s322;
[L4427]              havoc __ret_0_transferFrom;
[L4428]              havoc __ret_0_totalSupply;
[L4429]              havoc owner_s233;
[L4430]              havoc __ret_0_balanceOf;
[L4431]              havoc owner_s249;
[L4432]              havoc spender_s249;
[L4433]              havoc __ret_0_allowance;
[L4434]              havoc spender_s349;
[L4435]              havoc addedValue_s349;
[L4436]              havoc __ret_0_increaseAllowance;
[L4437]              havoc spender_s376;
[L4438]              havoc subtractedValue_s376;
[L4439]              havoc __ret_0_decreaseAllowance;
[L4440]              havoc name_s606;
[L4441]              havoc symbol_s606;
[L4442]              havoc decimals_s606;
[L4443]              havoc __ret_0_name;
[L4444]              havoc __ret_0_symbol;
[L4445]              havoc __ret_0_decimals;
[L4446]              havoc value_s646;
[L4447]              havoc from_s659;
[L4448]              havoc value_s659;
[L4449]              havoc tmpNow;
[L4450]              havoc gas;
[L4451]              assume gas > 4000000 && gas <= 8000000;
[L4452]              tmpNow := now;
[L4453]              havoc now;
[L4454]              assume now > tmpNow;
[L4455]              assume msgsender_MSG != null;
[L4456]              assume DType[msgsender_MSG] != IERC20;
[L4457]              assume DType[msgsender_MSG] != SafeMath;
[L4458]              assume DType[msgsender_MSG] != ERC20;
[L4459]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4460]              assume DType[msgsender_MSG] != ERC20Burnable;
[L4461]              assume DType[msgsender_MSG] != BNS;
[L4462]              Alloc[msgsender_MSG] := true;
[L4463]  COND FALSE  !(choice == 13)
[L4470]  COND FALSE  !(choice == 12)
[L4477]  COND TRUE   choice == 11
[L4478]              gas := gas - 21000;
[L4479]  COND TRUE   gas >= 0
[L4480]              assume value_s322 >= 0 && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4481]              assume msgvalue_MSG == 0;
[L4482]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s322 != to_s322 && ((value_s322 > _balances_ERC20[this][from_s322] || value_s322 > _allowed_ERC20[this][from_s322][msgsender_MSG]) || _balances_ERC20[this][to_s322] + value_s322 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s322 >= 0) && value_s322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s322] >= 0) && _balances_ERC20[this][to_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s322] >= 0) && _balances_ERC20[this][from_s322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L533]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2087]  COND TRUE   DType[this] == BNS
[L2088]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2278]              __var_4 := null;
[L2279]  COND FALSE  !(!(to_s422 != null))
[L2283]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2283]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2284]  COND FALSE  !(revert)
[L2287]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L2288]              _balances_ERC20[this][from_s422] := __var_5;
[L2289]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L2290]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L1826]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]  COND FALSE  !(!(c_s174 >= a_s174))
[L1831]              __ret_0_ := c_s174;
[L2290]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2291]  COND FALSE  !(revert)
[L2294]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L2295]              _balances_ERC20[this][to_s422] := __var_6;
[L2296]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L2297]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2088]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L2089]  COND FALSE  !(revert)
[L2105]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L1802]  COND FALSE  !(!(b_s150 <= a_s150))
[L1806]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1807]              __ret_0_ := c_s150;
[L2105]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s322][msgsender_MSG], value_s322);
[L2106]  COND FALSE  !(revert)
[L2109]  COND TRUE   DType[this] == BNS
[L2110]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2421]              __var_13 := null;
[L2422]  COND FALSE  !(!(spender_s546 != null))
[L2426]              __var_14 := null;
[L2427]  COND FALSE  !(!(owner_s546 != null))
[L2431]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] - _allowed_ERC20[this][owner_s546][spender_s546];
[L2432]              _allowed_ERC20[this][owner_s546][spender_s546] := value_s546;
[L2433]              sum__allowed1[owner_s546] := sum__allowed1[owner_s546] + _allowed_ERC20[this][owner_s546][spender_s546];
[L2434]              assert { :EventEmitted "Approval_ERC20" } true;
[L2110]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, msgsender_MSG, __var_1);
[L2111]  COND FALSE  !(revert)
[L2127]              __ret_0_ := true;
[L533]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L534]               assume !revert && gas >= 0;
[L4482]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s322, to_s322, value_s322);
[L4566]  RET         call CorralChoice_BNS(this);

[2020-11-25 01:15:10,466 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:15:10,466 INFO  L82        PathProgramCache]: Analyzing trace with hash -1838235977, now seen corresponding path program 1 times
[2020-11-25 01:15:10,466 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:15:10,497 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:15:10,704 INFO  L134       CoverageAnalysis]: Checked inductivity of 206 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 206 trivial. 0 not checked.
[2020-11-25 01:15:10,704 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:15:10,704 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 01:15:10,704 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:15:10,704 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 01:15:10,705 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=34, Invalid=176, Unknown=0, NotChecked=0, Total=210
[2020-11-25 01:15:10,705 INFO  L87              Difference]: Start difference. First operand 2351 states and 2676 transitions. cyclomatic complexity: 331 Second operand 15 states.
[2020-11-25 01:15:11,737 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:15:11,737 INFO  L93              Difference]: Finished difference Result 1403 states and 1590 transitions.
[2020-11-25 01:15:11,737 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 01:15:11,738 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1403 states and 1590 transitions.
[2020-11-25 01:15:11,740 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 01:15:11,740 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1403 states to 0 states and 0 transitions.
[2020-11-25 01:15:11,740 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 01:15:11,740 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 01:15:11,740 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 01:15:11,740 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:15:11,740 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 01:15:11,740 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 01:15:11,740 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 01:15:11,740 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 01:15:11,740 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 01:15:11,741 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 01:15:11,741 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 01:15:11,744 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:15:11 BasicIcfg
[2020-11-25 01:15:11,744 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 01:15:11,744 INFO  L168              Benchmark]: Toolchain (without parser) took 15740.83 ms. Allocated memory was 1.0 GB in the beginning and 2.2 GB in the end (delta: 1.2 GB). Free memory was 935.2 MB in the beginning and 950.7 MB in the end (delta: -15.5 MB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
[2020-11-25 01:15:11,745 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 01:15:11,745 INFO  L168              Benchmark]: Boogie Preprocessor took 103.47 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 01:15:11,745 INFO  L168              Benchmark]: UtopiaSpecLang took 62.36 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:15:11,745 INFO  L168              Benchmark]: Boogie Printer took 16.89 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:15:11,746 INFO  L168              Benchmark]: RCFGBuilder took 820.56 ms. Allocated memory is still 1.0 GB. Free memory was 913.6 MB in the beginning and 784.8 MB in the end (delta: 128.8 MB). Peak memory consumption was 128.8 MB. Max. memory is 15.3 GB.
[2020-11-25 01:15:11,746 INFO  L168              Benchmark]: UtopiaLTL2Aut took 51.44 ms. Allocated memory is still 1.0 GB. Free memory was 784.8 MB in the beginning and 781.2 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 01:15:11,746 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1357.31 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 214.4 MB). Free memory was 781.2 MB in the beginning and 950.8 MB in the end (delta: -169.6 MB). Peak memory consumption was 166.1 MB. Max. memory is 15.3 GB.
[2020-11-25 01:15:11,746 INFO  L168              Benchmark]: BlockEncodingV2 took 133.43 ms. Allocated memory is still 1.2 GB. Free memory was 950.8 MB in the beginning and 879.8 MB in the end (delta: 71.1 MB). Peak memory consumption was 71.1 MB. Max. memory is 15.3 GB.
[2020-11-25 01:15:11,747 INFO  L168              Benchmark]: BuchiAutomizer took 13192.26 ms. Allocated memory was 1.2 GB in the beginning and 2.2 GB in the end (delta: 944.2 MB). Free memory was 879.8 MB in the beginning and 950.7 MB in the end (delta: -71.0 MB). Peak memory consumption was 873.3 MB. Max. memory is 15.3 GB.
[2020-11-25 01:15:11,749 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4090 locations, 7549 edges
  - StatisticsResult: Encoded RCFG
    3991 locations, 7294 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 103.47 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 62.36 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.89 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 820.56 ms. Allocated memory is still 1.0 GB. Free memory was 913.6 MB in the beginning and 784.8 MB in the end (delta: 128.8 MB). Peak memory consumption was 128.8 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 51.44 ms. Allocated memory is still 1.0 GB. Free memory was 784.8 MB in the beginning and 781.2 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1357.31 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 214.4 MB). Free memory was 781.2 MB in the beginning and 950.8 MB in the end (delta: -169.6 MB). Peak memory consumption was 166.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 133.43 ms. Allocated memory is still 1.2 GB. Free memory was 950.8 MB in the beginning and 879.8 MB in the end (delta: 71.1 MB). Peak memory consumption was 71.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 13192.26 ms. Allocated memory was 1.2 GB in the beginning and 2.2 GB in the end (delta: 944.2 MB). Free memory was 879.8 MB in the beginning and 950.7 MB in the end (delta: -71.0 MB). Peak memory consumption was 873.3 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1598 locations, 2298 edges
  - StatisticsResult: BuchiProgram size
    4090 locations, 7549 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 12 terminating modules (12 trivial, 0 deterministic, 0 nondeterministic). 12 modules have a trivial ranking function, the largest among these consists of 36 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 13.1s and 13 iterations.  TraceHistogramMax:5. Analysis of lassos took 2.0s. Construction of modules took 7.6s. BÃ¼chi inclusion checks took 2.7s. Highest rank in rank-based complementation 0. Minimization of det autom 12. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 11 MinimizatonAttempts, 1588 StatesRemovedByMinimization, 7 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2834 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 30542 SDtfs, 20414 SDslu, 85652 SDs, 0 SdLazy, 108983 SolverSat, 3971 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 7.6s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU12 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_ERC200) ==> ( <>(fail_transferFrom_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
