This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 22:13:12,732 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 22:13:12,733 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 22:13:12,746 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 22:13:12,746 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 22:13:12,746 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 22:13:12,747 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 22:13:12,749 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 22:13:12,751 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 22:13:12,752 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 22:13:12,753 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 22:13:12,753 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 22:13:12,754 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 22:13:12,755 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 22:13:12,756 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 22:13:12,756 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 22:13:12,757 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 22:13:12,758 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 22:13:12,759 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 22:13:12,760 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 22:13:12,761 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 22:13:12,762 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 22:13:12,763 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 22:13:12,764 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 22:13:12,764 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 22:13:12,764 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 22:13:12,765 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 22:13:12,765 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 22:13:12,766 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 22:13:12,766 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 22:13:12,766 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 22:13:12,767 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 22:13:12,767 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 22:13:12,768 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 22:13:12,769 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 22:13:12,769 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 22:13:12,769 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 22:13:12,770 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 22:13:12,770 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 22:13:12,771 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 22:13:12,771 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 22:13:12,771 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 22:13:12,779 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 22:13:12,780 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 22:13:12,780 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 22:13:12,781 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 22:13:12,781 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 22:13:12,781 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 22:13:12,781 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 22:13:12,781 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 22:13:12,781 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 22:13:12,781 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 22:13:12,781 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 22:13:12,781 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 22:13:12,782 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 22:13:12,782 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 22:13:12,782 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 22:13:12,782 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 22:13:12,782 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 22:13:12,782 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 22:13:12,782 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 22:13:12,782 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 22:13:12,782 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 22:13:12,782 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 22:13:12,782 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 22:13:12,783 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 22:13:12,783 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 22:13:12,783 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 22:13:12,805 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 22:13:12,817 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 22:13:12,819 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 22:13:12,821 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 22:13:12,821 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 22:13:12,821 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-self.bpl
[2020-11-24 22:13:12,822 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-self.bpl'
[2020-11-24 22:13:12,928 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 22:13:12,929 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 22:13:12,929 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 22:13:12,930 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 22:13:12,930 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 22:13:12,946 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:13:12" (1/1) ...
[2020-11-24 22:13:12,948 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:13:12" (1/1) ...
[2020-11-24 22:13:12,989 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:13:12" (1/1) ...
[2020-11-24 22:13:12,990 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:13:12" (1/1) ...
[2020-11-24 22:13:13,018 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:13:12" (1/1) ...
[2020-11-24 22:13:13,031 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:13:12" (1/1) ...
[2020-11-24 22:13:13,043 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:13:12" (1/1) ...
[2020-11-24 22:13:13,062 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 22:13:13,063 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 22:13:13,063 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 22:13:13,065 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 22:13:13,069 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:13:12" (1/1) ...
[2020-11-24 22:13:13,093 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC777.transfer(to, value), msg.sender == to && value <= _balances_ERC777[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][to] >= 0 && _balances_ERC777[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][msg.sender] >= 0 &&  _balances_ERC777[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC777.transfer(to, value), return == true && _totalSupply_ERC777[this] == old(_totalSupply_ERC777[this]) && _balances_ERC777[this] == old(_balances_ERC777[this]) && _allowances_ERC777[this] == old(_allowances_ERC777[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _erc1820_ERC777[this] == old(_erc1820_ERC777[this]) && _name_ERC777[this] == old(_name_ERC777[this]) && _symbol_ERC777[this] == old(_symbol_ERC777[this]) && M_int_Ref[_defaultOperatorsArray_ERC777[this]] == old(M_int_Ref[_defaultOperatorsArray_ERC777[this]]) && _defaultOperators_ERC777[this] == old(_defaultOperators_ERC777[this]) && _operators_ERC777[this] == old(_operators_ERC777[this]) && _revokedDefaultOperators_ERC777[this] == old(_revokedDefaultOperators_ERC777[this]))))
[2020-11-24 22:13:13,099 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC777.transfer(to, value), msg.sender == to && value <= _balances_ERC777[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][to] >= 0 && _balances_ERC777[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][msg.sender] >= 0 &&  _balances_ERC777[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC777.transfer(to, value), return == true && _totalSupply_ERC777[this] == old(_totalSupply_ERC777[this]) && _balances_ERC777[this] == old(_balances_ERC777[this]) && _allowances_ERC777[this] == old(_allowances_ERC777[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _erc1820_ERC777[this] == old(_erc1820_ERC777[this]) && _name_ERC777[this] == old(_name_ERC777[this]) && _symbol_ERC777[this] == old(_symbol_ERC777[this]) && M_int_Ref[_defaultOperatorsArray_ERC777[this]] == old(M_int_Ref[_defaultOperatorsArray_ERC777[this]]) && _defaultOperators_ERC777[this] == old(_defaultOperators_ERC777[this]) && _operators_ERC777[this] == old(_operators_ERC777[this]) && _revokedDefaultOperators_ERC777[this] == old(_revokedDefaultOperators_ERC777[this]))))
[2020-11-24 22:13:13,113 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC777.transfer(to, value), msg.sender == to && value <= _balances_ERC777[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][to] >= 0 && _balances_ERC777[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][msg.sender] >= 0 &&  _balances_ERC777[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC777.transfer(to, value), return == true && _totalSupply_ERC777[this] == old(_totalSupply_ERC777[this]) && _balances_ERC777[this] == old(_balances_ERC777[this]) && _allowances_ERC777[this] == old(_allowances_ERC777[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _erc1820_ERC777[this] == old(_erc1820_ERC777[this]) && _name_ERC777[this] == old(_name_ERC777[this]) && _symbol_ERC777[this] == old(_symbol_ERC777[this]) && M_int_Ref[_defaultOperatorsArray_ERC777[this]] == old(M_int_Ref[_defaultOperatorsArray_ERC777[this]]) && _defaultOperators_ERC777[this] == old(_defaultOperators_ERC777[this]) && _operators_ERC777[this] == old(_operators_ERC777[this]) && _revokedDefaultOperators_ERC777[this] == old(_revokedDefaultOperators_ERC777[this]))))
[2020-11-24 22:13:13,122 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==recipient_s739 && amount_s739<=_balances_ERC777[this][msg.sender] ) && amount_s739>=0 ) && amount_s739<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC777[this][recipient_s739]>=0 ) && _balances_ERC777[this][recipient_s739]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC777[this][msg.sender]>=0 ) && _balances_ERC777[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>],IdentifierExpression[recipient_s739,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s739,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s739,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s739,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],[IdentifierExpression[recipient_s739,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],[IdentifierExpression[recipient_s739,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 22:13:13,126 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _totalSupply_ERC777[this]==( old(_totalSupply_ERC777[this]) ) ) && _balances_ERC777[this]==( old(_balances_ERC777[this]) ) ) && _allowances_ERC777[this]==( old(_allowances_ERC777[this]) ) ) && _owner_Ownable[this]==( old(_owner_Ownable[this]) ) ) && _erc1820_ERC777[this]==( old(_erc1820_ERC777[this]) ) ) && _name_ERC777[this]==( old(_name_ERC777[this]) ) ) && _symbol_ERC777[this]==( old(_symbol_ERC777[this]) ) ) && M_int_Ref[_defaultOperatorsArray_ERC777[this]]==( old(M_int_Ref[_defaultOperatorsArray_ERC777[this]]) ) ) && _defaultOperators_ERC777[this]==( old(_defaultOperators_ERC777[this]) ) ) && _operators_ERC777[this]==( old(_operators_ERC777[this]) ) ) && _revokedDefaultOperators_ERC777[this]==( old(_revokedDefaultOperators_ERC777[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC777>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_erc1820_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_erc1820_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[M_int_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[_defaultOperatorsArray_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[M_int_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[_defaultOperatorsArray_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_defaultOperators_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_defaultOperators_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_operators_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_operators_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_revokedDefaultOperators_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_revokedDefaultOperators_ERC777,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC777>]]]]]]
[2020-11-24 22:13:13,133 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC777.transfer(to, value), msg.sender == to && value <= _balances_ERC777[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][to] >= 0 && _balances_ERC777[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC777[this][msg.sender] >= 0 &&  _balances_ERC777[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC777.transfer(to, value), return == true && _totalSupply_ERC777[this] == old(_totalSupply_ERC777[this]) && _balances_ERC777[this] == old(_balances_ERC777[this]) && _allowances_ERC777[this] == old(_allowances_ERC777[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _erc1820_ERC777[this] == old(_erc1820_ERC777[this]) && _name_ERC777[this] == old(_name_ERC777[this]) && _symbol_ERC777[this] == old(_symbol_ERC777[this]) && M_int_Ref[_defaultOperatorsArray_ERC777[this]] == old(M_int_Ref[_defaultOperatorsArray_ERC777[this]]) && _defaultOperators_ERC777[this] == old(_defaultOperators_ERC777[this]) && _operators_ERC777[this] == old(_operators_ERC777[this]) && _revokedDefaultOperators_ERC777[this] == old(_revokedDefaultOperators_ERC777[this]))))
[2020-11-24 22:13:13,133 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC7770) ==> ( <>AP(success_transfer_ERC7770) ) ) )
Executed UtopiaSpecLang
[2020-11-24 22:13:13,148 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 10:13:13 PropertyContainer
[2020-11-24 22:13:13,148 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 22:13:13,149 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 22:13:13,149 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 22:13:13,149 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 22:13:13,150 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:13:12" (1/2) ...
[2020-11-24 22:13:13,150 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 22:13:13,150 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 22:13:13,172 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 10:13:13" (2/2) ...
[2020-11-24 22:13:13,172 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 22:13:13,172 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 22:13:13,172 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 22:13:13,173 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 22:13:13,173 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:13:12" (1/2) ...
[2020-11-24 22:13:13,230 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 22:13:13,230 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777_IERC777_NoBaseCtor__success
[2020-11-24 22:13:13,230 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777_IERC777
[2020-11-24 22:13:13,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777_IERC777
[2020-11-24 22:13:13,230 INFO  L130     BoogieDeclarations]: Found specification of procedure name_IERC777
[2020-11-24 22:13:13,230 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_IERC777
[2020-11-24 22:13:13,230 INFO  L130     BoogieDeclarations]: Found specification of procedure granularity_IERC777
[2020-11-24 22:13:13,231 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC777
[2020-11-24 22:13:13,231 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC777
[2020-11-24 22:13:13,231 INFO  L130     BoogieDeclarations]: Found specification of procedure send~address~uint256~bytes_IERC777
[2020-11-24 22:13:13,231 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256~bytes_IERC777
[2020-11-24 22:13:13,231 INFO  L130     BoogieDeclarations]: Found specification of procedure isOperatorFor~address~address_IERC777
[2020-11-24 22:13:13,231 INFO  L130     BoogieDeclarations]: Found specification of procedure authorizeOperator~address_IERC777
[2020-11-24 22:13:13,231 INFO  L130     BoogieDeclarations]: Found specification of procedure revokeOperator~address_IERC777
[2020-11-24 22:13:13,231 INFO  L130     BoogieDeclarations]: Found specification of procedure defaultOperators_IERC777
[2020-11-24 22:13:13,232 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorSend~address~address~uint256~bytes~bytes_IERC777
[2020-11-24 22:13:13,232 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorBurn~address~uint256~bytes~bytes_IERC777
[2020-11-24 22:13:13,232 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Recipient_IERC777Recipient_NoBaseCtor__success
[2020-11-24 22:13:13,232 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Recipient_IERC777Recipient
[2020-11-24 22:13:13,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Recipient_IERC777Recipient
[2020-11-24 22:13:13,232 INFO  L130     BoogieDeclarations]: Found specification of procedure tokensReceived~address~address~address~uint256~bytes~bytes_IERC777Recipient
[2020-11-24 22:13:13,232 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Sender_IERC777Sender_NoBaseCtor__success
[2020-11-24 22:13:13,232 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Sender_IERC777Sender
[2020-11-24 22:13:13,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Sender_IERC777Sender
[2020-11-24 22:13:13,233 INFO  L130     BoogieDeclarations]: Found specification of procedure tokensToSend~address~address~address~uint256~bytes~bytes_IERC777Sender
[2020-11-24 22:13:13,233 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 22:13:13,233 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-24 22:13:13,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-24 22:13:13,233 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-24 22:13:13,233 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-24 22:13:13,233 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-24 22:13:13,233 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-24 22:13:13,233 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-24 22:13:13,234 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-24 22:13:13,234 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 22:13:13,234 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 22:13:13,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 22:13:13,234 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 22:13:13,234 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 22:13:13,234 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 22:13:13,234 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 22:13:13,234 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-24 22:13:13,234 INFO  L130     BoogieDeclarations]: Found specification of procedure Address_Address_NoBaseCtor__success
[2020-11-24 22:13:13,235 INFO  L130     BoogieDeclarations]: Found specification of procedure Address_Address
[2020-11-24 22:13:13,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure Address_Address
[2020-11-24 22:13:13,235 INFO  L130     BoogieDeclarations]: Found specification of procedure isContract~address_Address__success
[2020-11-24 22:13:13,235 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC1820Registry_IERC1820Registry_NoBaseCtor__success
[2020-11-24 22:13:13,235 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC1820Registry_IERC1820Registry
[2020-11-24 22:13:13,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC1820Registry_IERC1820Registry
[2020-11-24 22:13:13,235 INFO  L130     BoogieDeclarations]: Found specification of procedure setManager~address~address_IERC1820Registry
[2020-11-24 22:13:13,235 INFO  L130     BoogieDeclarations]: Found specification of procedure getManager~address_IERC1820Registry
[2020-11-24 22:13:13,235 INFO  L130     BoogieDeclarations]: Found specification of procedure setInterfaceImplementer~address~bytes32~address_IERC1820Registry
[2020-11-24 22:13:13,235 INFO  L130     BoogieDeclarations]: Found specification of procedure getInterfaceImplementer~address~bytes32_IERC1820Registry
[2020-11-24 22:13:13,236 INFO  L130     BoogieDeclarations]: Found specification of procedure interfaceHash~string_IERC1820Registry
[2020-11-24 22:13:13,236 INFO  L130     BoogieDeclarations]: Found specification of procedure updateERC165Cache~address~bytes4_IERC1820Registry
[2020-11-24 22:13:13,236 INFO  L130     BoogieDeclarations]: Found specification of procedure implementsERC165Interface~address~bytes4_IERC1820Registry
[2020-11-24 22:13:13,236 INFO  L130     BoogieDeclarations]: Found specification of procedure implementsERC165InterfaceNoCache~address~bytes4_IERC1820Registry
[2020-11-24 22:13:13,236 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC777_ERC777_NoBaseCtor__success
[2020-11-24 22:13:13,236 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC777_ERC777
[2020-11-24 22:13:13,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC777_ERC777
[2020-11-24 22:13:13,236 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC777
[2020-11-24 22:13:13,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC777
[2020-11-24 22:13:13,237 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC777
[2020-11-24 22:13:13,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC777
[2020-11-24 22:13:13,237 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC777
[2020-11-24 22:13:13,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC777
[2020-11-24 22:13:13,237 INFO  L130     BoogieDeclarations]: Found specification of procedure granularity_ERC777
[2020-11-24 22:13:13,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure granularity_ERC777
[2020-11-24 22:13:13,237 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC777
[2020-11-24 22:13:13,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC777
[2020-11-24 22:13:13,237 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC777
[2020-11-24 22:13:13,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC777
[2020-11-24 22:13:13,238 INFO  L130     BoogieDeclarations]: Found specification of procedure send~address~uint256~bytes_ERC777
[2020-11-24 22:13:13,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure send~address~uint256~bytes_ERC777
[2020-11-24 22:13:13,238 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC777
[2020-11-24 22:13:13,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC777
[2020-11-24 22:13:13,238 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256~bytes_ERC777
[2020-11-24 22:13:13,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256~bytes_ERC777
[2020-11-24 22:13:13,238 INFO  L130     BoogieDeclarations]: Found specification of procedure isOperatorFor~address~address_ERC777
[2020-11-24 22:13:13,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOperatorFor~address~address_ERC777
[2020-11-24 22:13:13,238 INFO  L130     BoogieDeclarations]: Found specification of procedure authorizeOperator~address_ERC777
[2020-11-24 22:13:13,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure authorizeOperator~address_ERC777
[2020-11-24 22:13:13,239 INFO  L130     BoogieDeclarations]: Found specification of procedure revokeOperator~address_ERC777
[2020-11-24 22:13:13,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure revokeOperator~address_ERC777
[2020-11-24 22:13:13,239 INFO  L130     BoogieDeclarations]: Found specification of procedure defaultOperators_ERC777
[2020-11-24 22:13:13,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure defaultOperators_ERC777
[2020-11-24 22:13:13,239 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorSend~address~address~uint256~bytes~bytes_ERC777
[2020-11-24 22:13:13,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure operatorSend~address~address~uint256~bytes~bytes_ERC777
[2020-11-24 22:13:13,239 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorBurn~address~uint256~bytes~bytes_ERC777
[2020-11-24 22:13:13,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure operatorBurn~address~uint256~bytes~bytes_ERC777
[2020-11-24 22:13:13,239 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC777
[2020-11-24 22:13:13,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC777
[2020-11-24 22:13:13,240 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC777
[2020-11-24 22:13:13,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC777
[2020-11-24 22:13:13,240 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC777
[2020-11-24 22:13:13,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC777
[2020-11-24 22:13:13,240 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:13:13,240 INFO  L130     BoogieDeclarations]: Found specification of procedure _send~address~address~address~uint256~bytes~bytes~bool_ERC777__success
[2020-11-24 22:13:13,240 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:13:13,240 INFO  L130     BoogieDeclarations]: Found specification of procedure _move~address~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:13:13,240 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC777__success
[2020-11-24 22:13:13,240 INFO  L130     BoogieDeclarations]: Found specification of procedure _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:13:13,241 INFO  L130     BoogieDeclarations]: Found specification of procedure _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success
[2020-11-24 22:13:13,241 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 22:13:13,241 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 22:13:13,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 22:13:13,241 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 22:13:13,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 22:13:13,241 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-24 22:13:13,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-24 22:13:13,241 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 22:13:13,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 22:13:13,242 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 22:13:13,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 22:13:13,242 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 22:13:13,242 INFO  L130     BoogieDeclarations]: Found specification of procedure MMM_MMM_NoBaseCtor__success
[2020-11-24 22:13:13,242 INFO  L130     BoogieDeclarations]: Found specification of procedure MMM_MMM
[2020-11-24 22:13:13,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure MMM_MMM
[2020-11-24 22:13:13,242 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MMM
[2020-11-24 22:13:13,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MMM
[2020-11-24 22:13:13,242 INFO  L130     BoogieDeclarations]: Found specification of procedure _maxSupply_MMM
[2020-11-24 22:13:13,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure _maxSupply_MMM
[2020-11-24 22:13:13,243 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 22:13:13,243 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 22:13:13,243 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 22:13:13,243 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 22:13:13,243 INFO  L130     BoogieDeclarations]: Found specification of procedure noOverflow_pre__success
[2020-11-24 22:13:13,243 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC777
[2020-11-24 22:13:13,243 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC777
[2020-11-24 22:13:13,243 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC777Recipient
[2020-11-24 22:13:13,243 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC777Recipient
[2020-11-24 22:13:13,244 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC777Sender
[2020-11-24 22:13:13,244 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC777Sender
[2020-11-24 22:13:13,244 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-24 22:13:13,244 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-24 22:13:13,244 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 22:13:13,244 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 22:13:13,244 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Address
[2020-11-24 22:13:13,244 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Address
[2020-11-24 22:13:13,244 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC1820Registry
[2020-11-24 22:13:13,245 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC1820Registry
[2020-11-24 22:13:13,245 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC777
[2020-11-24 22:13:13,245 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC777
[2020-11-24 22:13:13,245 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 22:13:13,245 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 22:13:13,245 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MMM
[2020-11-24 22:13:13,245 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 22:13:13,245 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 22:13:13,245 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777_IERC777_NoBaseCtor__fail
[2020-11-24 22:13:13,246 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777_IERC777__success
[2020-11-24 22:13:13,246 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777_IERC777__fail
[2020-11-24 22:13:13,246 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Recipient_IERC777Recipient_NoBaseCtor__fail
[2020-11-24 22:13:13,246 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Recipient_IERC777Recipient__success
[2020-11-24 22:13:13,246 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Recipient_IERC777Recipient__fail
[2020-11-24 22:13:13,246 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Sender_IERC777Sender_NoBaseCtor__fail
[2020-11-24 22:13:13,246 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Sender_IERC777Sender__success
[2020-11-24 22:13:13,246 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC777Sender_IERC777Sender__fail
[2020-11-24 22:13:13,246 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 22:13:13,246 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-24 22:13:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-24 22:13:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 22:13:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 22:13:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 22:13:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 22:13:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 22:13:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 22:13:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 22:13:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-24 22:13:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure Address_Address_NoBaseCtor__fail
[2020-11-24 22:13:13,247 INFO  L130     BoogieDeclarations]: Found specification of procedure Address_Address__success
[2020-11-24 22:13:13,248 INFO  L130     BoogieDeclarations]: Found specification of procedure Address_Address__fail
[2020-11-24 22:13:13,248 INFO  L130     BoogieDeclarations]: Found specification of procedure isContract~address_Address__fail
[2020-11-24 22:13:13,248 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC1820Registry_IERC1820Registry_NoBaseCtor__fail
[2020-11-24 22:13:13,248 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC1820Registry_IERC1820Registry__success
[2020-11-24 22:13:13,248 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC1820Registry_IERC1820Registry__fail
[2020-11-24 22:13:13,248 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC777_ERC777_NoBaseCtor__fail
[2020-11-24 22:13:13,248 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC777_ERC777__success
[2020-11-24 22:13:13,248 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC777_ERC777__fail
[2020-11-24 22:13:13,248 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC777__success
[2020-11-24 22:13:13,248 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC777__fail
[2020-11-24 22:13:13,248 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC777__success
[2020-11-24 22:13:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC777__fail
[2020-11-24 22:13:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC777__success
[2020-11-24 22:13:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC777__fail
[2020-11-24 22:13:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure granularity_ERC777__success
[2020-11-24 22:13:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure granularity_ERC777__fail
[2020-11-24 22:13:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC777__success
[2020-11-24 22:13:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC777__fail
[2020-11-24 22:13:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC777__success
[2020-11-24 22:13:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC777__fail
[2020-11-24 22:13:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure send~address~uint256~bytes_ERC777__success
[2020-11-24 22:13:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure send~address~uint256~bytes_ERC777__fail
[2020-11-24 22:13:13,249 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC777__success
[2020-11-24 22:13:13,250 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC777__fail
[2020-11-24 22:13:13,250 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256~bytes_ERC777__success
[2020-11-24 22:13:13,250 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256~bytes_ERC777__fail
[2020-11-24 22:13:13,250 INFO  L130     BoogieDeclarations]: Found specification of procedure isOperatorFor~address~address_ERC777__success
[2020-11-24 22:13:13,250 INFO  L130     BoogieDeclarations]: Found specification of procedure isOperatorFor~address~address_ERC777__fail
[2020-11-24 22:13:13,250 INFO  L130     BoogieDeclarations]: Found specification of procedure authorizeOperator~address_ERC777__success
[2020-11-24 22:13:13,250 INFO  L130     BoogieDeclarations]: Found specification of procedure authorizeOperator~address_ERC777__fail
[2020-11-24 22:13:13,250 INFO  L130     BoogieDeclarations]: Found specification of procedure revokeOperator~address_ERC777__success
[2020-11-24 22:13:13,250 INFO  L130     BoogieDeclarations]: Found specification of procedure revokeOperator~address_ERC777__fail
[2020-11-24 22:13:13,250 INFO  L130     BoogieDeclarations]: Found specification of procedure defaultOperators_ERC777__success
[2020-11-24 22:13:13,250 INFO  L130     BoogieDeclarations]: Found specification of procedure defaultOperators_ERC777__fail
[2020-11-24 22:13:13,251 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorSend~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:13:13,251 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorSend~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:13:13,251 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorBurn~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:13:13,251 INFO  L130     BoogieDeclarations]: Found specification of procedure operatorBurn~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:13:13,251 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC777__success
[2020-11-24 22:13:13,251 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC777__fail
[2020-11-24 22:13:13,251 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC777__success
[2020-11-24 22:13:13,251 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC777__fail
[2020-11-24 22:13:13,251 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC777__success
[2020-11-24 22:13:13,251 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC777__fail
[2020-11-24 22:13:13,251 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:13:13,251 INFO  L130     BoogieDeclarations]: Found specification of procedure _send~address~address~address~uint256~bytes~bytes~bool_ERC777__fail
[2020-11-24 22:13:13,252 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:13:13,252 INFO  L130     BoogieDeclarations]: Found specification of procedure _move~address~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:13:13,252 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC777__fail
[2020-11-24 22:13:13,252 INFO  L130     BoogieDeclarations]: Found specification of procedure _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:13:13,252 INFO  L130     BoogieDeclarations]: Found specification of procedure _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__fail
[2020-11-24 22:13:13,252 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 22:13:13,252 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 22:13:13,252 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 22:13:13,252 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 22:13:13,252 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 22:13:13,252 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-24 22:13:13,253 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-24 22:13:13,253 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 22:13:13,253 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 22:13:13,253 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 22:13:13,253 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 22:13:13,253 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 22:13:13,253 INFO  L130     BoogieDeclarations]: Found specification of procedure MMM_MMM_NoBaseCtor__fail
[2020-11-24 22:13:13,253 INFO  L130     BoogieDeclarations]: Found specification of procedure MMM_MMM__success
[2020-11-24 22:13:13,253 INFO  L130     BoogieDeclarations]: Found specification of procedure MMM_MMM__fail
[2020-11-24 22:13:13,253 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MMM__success
[2020-11-24 22:13:13,253 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MMM__fail
[2020-11-24 22:13:13,253 INFO  L130     BoogieDeclarations]: Found specification of procedure _maxSupply_MMM__success
[2020-11-24 22:13:13,254 INFO  L130     BoogieDeclarations]: Found specification of procedure _maxSupply_MMM__fail
[2020-11-24 22:13:13,254 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 22:13:13,254 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 22:13:13,254 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 22:13:13,254 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 22:13:13,254 INFO  L130     BoogieDeclarations]: Found specification of procedure noOverflow_pre__fail
[2020-11-24 22:13:13,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 22:13:13,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 22:13:13,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777_IERC777_NoBaseCtor__fail
[2020-11-24 22:13:13,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777_IERC777_NoBaseCtor__success
[2020-11-24 22:13:13,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777_IERC777__fail
[2020-11-24 22:13:13,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777_IERC777__success
[2020-11-24 22:13:13,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Recipient_IERC777Recipient_NoBaseCtor__fail
[2020-11-24 22:13:13,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Recipient_IERC777Recipient_NoBaseCtor__success
[2020-11-24 22:13:13,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Recipient_IERC777Recipient__fail
[2020-11-24 22:13:13,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Recipient_IERC777Recipient__success
[2020-11-24 22:13:13,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Sender_IERC777Sender_NoBaseCtor__fail
[2020-11-24 22:13:13,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Sender_IERC777Sender_NoBaseCtor__success
[2020-11-24 22:13:13,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Sender_IERC777Sender__fail
[2020-11-24 22:13:13,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC777Sender_IERC777Sender__success
[2020-11-24 22:13:13,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 22:13:13,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 22:13:13,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-24 22:13:13,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-24 22:13:13,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 22:13:13,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 22:13:13,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 22:13:13,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 22:13:13,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 22:13:13,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 22:13:13,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 22:13:13,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 22:13:13,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 22:13:13,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 22:13:13,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 22:13:13,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 22:13:13,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-24 22:13:13,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-24 22:13:13,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure Address_Address_NoBaseCtor__fail
[2020-11-24 22:13:13,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure Address_Address_NoBaseCtor__success
[2020-11-24 22:13:13,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure Address_Address__fail
[2020-11-24 22:13:13,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure Address_Address__success
[2020-11-24 22:13:13,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure isContract~address_Address__fail
[2020-11-24 22:13:13,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure isContract~address_Address__success
[2020-11-24 22:13:13,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC1820Registry_IERC1820Registry_NoBaseCtor__fail
[2020-11-24 22:13:13,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC1820Registry_IERC1820Registry_NoBaseCtor__success
[2020-11-24 22:13:13,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC1820Registry_IERC1820Registry__fail
[2020-11-24 22:13:13,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC1820Registry_IERC1820Registry__success
[2020-11-24 22:13:13,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC777_ERC777_NoBaseCtor__fail
[2020-11-24 22:13:13,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC777_ERC777_NoBaseCtor__success
[2020-11-24 22:13:13,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC777_ERC777__fail
[2020-11-24 22:13:13,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC777_ERC777__success
[2020-11-24 22:13:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC777__fail
[2020-11-24 22:13:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC777__success
[2020-11-24 22:13:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC777__fail
[2020-11-24 22:13:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC777__success
[2020-11-24 22:13:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC777__fail
[2020-11-24 22:13:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC777__success
[2020-11-24 22:13:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure granularity_ERC777__fail
[2020-11-24 22:13:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure granularity_ERC777__success
[2020-11-24 22:13:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC777__fail
[2020-11-24 22:13:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC777__success
[2020-11-24 22:13:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC777__fail
[2020-11-24 22:13:13,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC777__success
[2020-11-24 22:13:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure send~address~uint256~bytes_ERC777__fail
[2020-11-24 22:13:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure send~address~uint256~bytes_ERC777__success
[2020-11-24 22:13:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC777__fail
[2020-11-24 22:13:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC777__success
[2020-11-24 22:13:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256~bytes_ERC777__fail
[2020-11-24 22:13:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256~bytes_ERC777__success
[2020-11-24 22:13:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOperatorFor~address~address_ERC777__fail
[2020-11-24 22:13:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOperatorFor~address~address_ERC777__success
[2020-11-24 22:13:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure authorizeOperator~address_ERC777__fail
[2020-11-24 22:13:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure authorizeOperator~address_ERC777__success
[2020-11-24 22:13:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure revokeOperator~address_ERC777__fail
[2020-11-24 22:13:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure revokeOperator~address_ERC777__success
[2020-11-24 22:13:13,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure defaultOperators_ERC777__fail
[2020-11-24 22:13:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure defaultOperators_ERC777__success
[2020-11-24 22:13:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure operatorSend~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:13:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure operatorSend~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:13:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure operatorBurn~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:13:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure operatorBurn~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:13:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC777__fail
[2020-11-24 22:13:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC777__success
[2020-11-24 22:13:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC777__fail
[2020-11-24 22:13:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC777__success
[2020-11-24 22:13:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC777__fail
[2020-11-24 22:13:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC777__success
[2020-11-24 22:13:13,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:13:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:13:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure _send~address~address~address~uint256~bytes~bytes~bool_ERC777__fail
[2020-11-24 22:13:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure _send~address~address~address~uint256~bytes~bytes~bool_ERC777__success
[2020-11-24 22:13:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:13:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:13:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure _move~address~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:13:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure _move~address~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:13:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC777__fail
[2020-11-24 22:13:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC777__success
[2020-11-24 22:13:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail
[2020-11-24 22:13:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success
[2020-11-24 22:13:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__fail
[2020-11-24 22:13:13,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success
[2020-11-24 22:13:13,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 22:13:13,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 22:13:13,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 22:13:13,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 22:13:13,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 22:13:13,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 22:13:13,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-24 22:13:13,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-24 22:13:13,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 22:13:13,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 22:13:13,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 22:13:13,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 22:13:13,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 22:13:13,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 22:13:13,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure MMM_MMM_NoBaseCtor__fail
[2020-11-24 22:13:13,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure MMM_MMM_NoBaseCtor__success
[2020-11-24 22:13:13,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure MMM_MMM__fail
[2020-11-24 22:13:13,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure MMM_MMM__success
[2020-11-24 22:13:13,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MMM__fail
[2020-11-24 22:13:13,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MMM__success
[2020-11-24 22:13:13,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure _maxSupply_MMM__fail
[2020-11-24 22:13:13,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure _maxSupply_MMM__success
[2020-11-24 22:13:13,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 22:13:13,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 22:13:13,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 22:13:13,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 22:13:13,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 22:13:13,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 22:13:13,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 22:13:13,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 22:13:13,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure noOverflow_pre__fail
[2020-11-24 22:13:13,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure noOverflow_pre__success
[2020-11-24 22:13:13,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC777
[2020-11-24 22:13:13,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC777
[2020-11-24 22:13:13,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC777Recipient
[2020-11-24 22:13:13,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC777Recipient
[2020-11-24 22:13:13,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC777Sender
[2020-11-24 22:13:13,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC777Sender
[2020-11-24 22:13:13,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-24 22:13:13,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-24 22:13:13,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 22:13:13,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 22:13:13,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Address
[2020-11-24 22:13:13,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Address
[2020-11-24 22:13:13,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC1820Registry
[2020-11-24 22:13:13,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC1820Registry
[2020-11-24 22:13:13,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC777
[2020-11-24 22:13:13,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC777
[2020-11-24 22:13:13,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 22:13:13,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 22:13:13,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MMM
[2020-11-24 22:13:13,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 22:13:13,267 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 22:13:13,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 22:13:13,744 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 22:13:13,745 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 22:13:13,745 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 22:13:14,341 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 22:13:14,341 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-24 22:13:14,344 INFO  L202        PluginConnector]: Adding new model MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 10:13:14 BoogieIcfgContainer
[2020-11-24 22:13:14,344 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 10:13:13" (2/2) ...
[2020-11-24 22:13:14,344 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 22:13:14,345 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@63f1bbd9 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 10:13:14, skipping insertion in model container
[2020-11-24 22:13:14,345 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 22:13:14,345 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 22:13:14,345 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 22:13:14,347 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 22:13:14,347 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:13:12" (1/3) ...
[2020-11-24 22:13:14,347 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@2f719b48 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 10:13:14, skipping insertion in model container
[2020-11-24 22:13:14,347 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 10:13:13" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 22:13:14,387 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 10:13:14 NWAContainer
[2020-11-24 22:13:14,387 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 22:13:14,387 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 22:13:14,388 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 22:13:14,388 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 22:13:14,389 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 10:13:14" (3/4) ...
[2020-11-24 22:13:14,390 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@71b4a0bc and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 10:13:14, skipping insertion in model container
[2020-11-24 22:13:14,390 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 10:13:14" (4/4) ...
[2020-11-24 22:13:14,393 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 22:13:14,399 INFO  L110   BuchiProductObserver]: Initial RCFG 2824 locations, 3647 edges
[2020-11-24 22:13:14,399 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 22:13:14,411 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 22:13:16,335 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 22:13:16,343 INFO  L110   BuchiProductObserver]: BuchiProgram size 6806 locations, 11833 edges
[2020-11-24 22:13:16,343 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 10:13:16 BoogieIcfgContainer
[2020-11-24 22:13:16,343 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 22:13:16,344 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 22:13:16,344 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 22:13:16,345 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 22:13:16,345 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 10:13:16" (1/1) ...
[2020-11-24 22:13:16,470 INFO  L313           BlockEncoder]: Initial Icfg 6806 locations, 11833 edges
[2020-11-24 22:13:16,471 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 22:13:16,471 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 22:13:16,471 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 22:13:16,472 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 22:13:16,486 INFO  L70    emoveInfeasibleEdges]: Removed 138 edges and 23 locations because of local infeasibility
[2020-11-24 22:13:16,497 INFO  L70        RemoveSinkStates]: Removed 38 edges and 25 locations by removing sink states
[2020-11-24 22:13:16,510 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 22:13:16,515 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 22:13:16,519 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 22:13:16,520 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 22:13:16,523 INFO  L313           BlockEncoder]: Encoded RCFG 6714 locations, 11592 edges
[2020-11-24 22:13:16,524 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 10:13:16 BasicIcfg
[2020-11-24 22:13:16,524 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 22:13:16,524 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 22:13:16,524 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 22:13:16,526 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 22:13:16,526 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:13:16,526 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 10:13:12" (1/6) ...
[2020-11-24 22:13:16,528 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7208fbf6 and model type MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 10:13:16, skipping insertion in model container
[2020-11-24 22:13:16,528 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:13:16,528 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 10:13:13" (2/6) ...
[2020-11-24 22:13:16,528 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7208fbf6 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 10:13:16, skipping insertion in model container
[2020-11-24 22:13:16,528 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:13:16,529 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 10:13:14" (3/6) ...
[2020-11-24 22:13:16,529 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7208fbf6 and model type MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 10:13:16, skipping insertion in model container
[2020-11-24 22:13:16,529 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:13:16,529 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 10:13:14" (4/6) ...
[2020-11-24 22:13:16,529 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7208fbf6 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 10:13:16, skipping insertion in model container
[2020-11-24 22:13:16,529 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:13:16,529 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 10:13:16" (5/6) ...
[2020-11-24 22:13:16,529 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7208fbf6 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 10:13:16, skipping insertion in model container
[2020-11-24 22:13:16,530 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 22:13:16,530 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 10:13:16" (6/6) ...
[2020-11-24 22:13:16,531 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MMM_0xf453ac18fa17b9ec9a76fbf219ba9fe4612edd0a_transfer-self.bpl_BEv2
[2020-11-24 22:13:16,557 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 22:13:16,557 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 22:13:16,557 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 22:13:16,557 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 22:13:16,557 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 22:13:16,557 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 22:13:16,557 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 22:13:16,557 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 22:13:16,557 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 22:13:16,605 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6714 states.
[2020-11-24 22:13:16,688 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:13:16,688 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:13:16,688 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:13:16,696 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:13:16,696 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:13:16,696 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 22:13:16,696 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6714 states.
[2020-11-24 22:13:16,720 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:13:16,720 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:13:16,720 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:13:16,722 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:13:16,722 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND TRUE   revert
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND TRUE   choice == 24
[L7626]              gas := gas - 21000;
[L7627]  COND FALSE  !(gas >= 0)
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:13:16,736 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:13:16,736 INFO  L82        PathProgramCache]: Analyzing trace with hash -1289107017, now seen corresponding path program 1 times
[2020-11-24 22:13:16,740 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:13:16,761 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:13:16,792 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 22:13:16,794 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:13:16,794 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 22:13:17,193 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:13:17,202 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 22:13:17,203 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 22:13:17,204 INFO  L87              Difference]: Start difference. First operand 6714 states. Second operand 4 states.
[2020-11-24 22:13:19,099 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:13:19,099 INFO  L93              Difference]: Finished difference Result 6516 states and 10432 transitions.
[2020-11-24 22:13:19,099 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 22:13:19,101 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6516 states and 10432 transitions.
[2020-11-24 22:13:19,146 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 22:13:19,194 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6516 states to 6228 states and 9971 transitions.
[2020-11-24 22:13:19,195 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-11-24 22:13:19,199 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1564
[2020-11-24 22:13:19,200 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6228 states and 9971 transitions.
[2020-11-24 22:13:19,222 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:13:19,222 INFO  L728         BuchiCegarLoop]: Abstraction has 6228 states and 9971 transitions.
[2020-11-24 22:13:19,240 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6228 states and 9971 transitions.
[2020-11-24 22:13:19,330 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6228 to 4954.
[2020-11-24 22:13:19,330 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4954 states.
[2020-11-24 22:13:19,339 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4954 states to 4954 states and 7609 transitions.
[2020-11-24 22:13:19,340 INFO  L751         BuchiCegarLoop]: Abstraction has 4954 states and 7609 transitions.
[2020-11-24 22:13:19,340 INFO  L631         BuchiCegarLoop]: Abstraction has 4954 states and 7609 transitions.
[2020-11-24 22:13:19,340 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 22:13:19,340 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4954 states and 7609 transitions.
[2020-11-24 22:13:19,351 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:13:19,351 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:13:19,351 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:13:19,354 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:13:19,354 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND TRUE   i_s605 < Length[_defaultOperatorsArray_ERC777[this]]
[L4333]              _defaultOperators_ERC777[this][M_int_Ref[_defaultOperatorsArray_ERC777[this]][i_s605]] := true;
[L4334]              i_s605 := (i_s605 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4335]  COND TRUE   gas < 0
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND TRUE   choice == 24
[L7626]              gas := gas - 21000;
[L7627]  COND FALSE  !(gas >= 0)
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:13:19,357 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:13:19,358 INFO  L82        PathProgramCache]: Analyzing trace with hash -1562289070, now seen corresponding path program 1 times
[2020-11-24 22:13:19,359 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:13:19,369 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:13:19,397 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 6 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 22:13:19,398 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 22:13:19,398 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-11-24 22:13:19,399 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:13:19,399 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 22:13:19,399 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 22:13:19,399 INFO  L87              Difference]: Start difference. First operand 4954 states and 7609 transitions. cyclomatic complexity: 2661 Second operand 4 states.
[2020-11-24 22:13:20,506 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:13:20,506 INFO  L93              Difference]: Finished difference Result 4640 states and 5015 transitions.
[2020-11-24 22:13:20,506 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 22:13:20,507 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4640 states and 5015 transitions.
[2020-11-24 22:13:20,518 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:13:20,530 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4640 states to 4640 states and 5015 transitions.
[2020-11-24 22:13:20,530 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1170
[2020-11-24 22:13:20,530 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1170
[2020-11-24 22:13:20,530 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4640 states and 5015 transitions.
[2020-11-24 22:13:20,533 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:13:20,533 INFO  L728         BuchiCegarLoop]: Abstraction has 4640 states and 5015 transitions.
[2020-11-24 22:13:20,538 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4640 states and 5015 transitions.
[2020-11-24 22:13:20,599 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4640 to 4640.
[2020-11-24 22:13:20,599 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4640 states.
[2020-11-24 22:13:20,603 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4640 states to 4640 states and 5015 transitions.
[2020-11-24 22:13:20,604 INFO  L751         BuchiCegarLoop]: Abstraction has 4640 states and 5015 transitions.
[2020-11-24 22:13:20,604 INFO  L631         BuchiCegarLoop]: Abstraction has 4640 states and 5015 transitions.
[2020-11-24 22:13:20,604 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 22:13:20,604 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4640 states and 5015 transitions.
[2020-11-24 22:13:20,609 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:13:20,609 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:13:20,609 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:13:20,611 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:13:20,611 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND TRUE   i_s605 < Length[_defaultOperatorsArray_ERC777[this]]
[L4333]              _defaultOperators_ERC777[this][M_int_Ref[_defaultOperatorsArray_ERC777[this]][i_s605]] := true;
[L4334]              i_s605 := (i_s605 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4335]  COND TRUE   gas < 0
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND TRUE   __exception
[L1436]              __tmp__Balance := Balance;
[L1437]              __tmp__DType := DType;
[L1438]              __tmp__Alloc := Alloc;
[L1439]              __tmp__balance_ADDR := balance_ADDR;
[L1440]              __tmp__M_Ref_int := M_Ref_int;
[L1441]              __tmp__sum__balances0 := sum__balances0;
[L1442]              __tmp__M_Ref_bool := M_Ref_bool;
[L1443]              __tmp__sum__defaultOperators1 := sum__defaultOperators1;
[L1444]              __tmp__alloc__operators_ERC777_lvl0 := alloc__operators_ERC777_lvl0;
[L1445]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1446]              __tmp__sum__operators2 := sum__operators2;
[L1447]              __tmp__alloc__revokedDefaultOperators_ERC777_lvl0 := alloc__revokedDefaultOperators_ERC777_lvl0;
[L1448]              __tmp__sum__revokedDefaultOperators3 := sum__revokedDefaultOperators3;
[L1449]              __tmp__alloc__allowances_ERC777_lvl0 := alloc__allowances_ERC777_lvl0;
[L1450]              __tmp__sum__allowances4 := sum__allowances4;
[L1451]              __tmp__M_int_Ref := M_int_Ref;
[L1452]              __tmp__sum := sum;
[L1453]              __tmp__Length := Length;
[L1454]              __tmp__now := now;
[L1455]              __tmp___erc1820_ERC777 := _erc1820_ERC777;
[L1456]              __tmp___balances_ERC777 := _balances_ERC777;
[L1457]              __tmp___totalSupply_ERC777 := _totalSupply_ERC777;
[L1458]              __tmp___name_ERC777 := _name_ERC777;
[L1459]              __tmp___symbol_ERC777 := _symbol_ERC777;
[L1460]              __tmp__TOKENS_SENDER_INTERFACE_HASH_ERC777 := TOKENS_SENDER_INTERFACE_HASH_ERC777;
[L1461]              __tmp__TOKENS_RECIPIENT_INTERFACE_HASH_ERC777 := TOKENS_RECIPIENT_INTERFACE_HASH_ERC777;
[L1462]              __tmp___defaultOperatorsArray_ERC777 := _defaultOperatorsArray_ERC777;
[L1463]              __tmp___defaultOperators_ERC777 := _defaultOperators_ERC777;
[L1464]              __tmp___operators_ERC777 := _operators_ERC777;
[L1465]              __tmp___revokedDefaultOperators_ERC777 := _revokedDefaultOperators_ERC777;
[L1466]              __tmp___allowances_ERC777 := _allowances_ERC777;
[L1467]              __tmp___owner_Ownable := _owner_Ownable;
[L1468]              __tmp___maxSupply_MMM := _maxSupply_MMM;
[L1469]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4500]              __var_10 := null;
[L4501]  COND TRUE   !(recipient_s739 != null)
[L4502]              revert := true;
[L1469]  RET         call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1470]              assume revert || gas < 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND TRUE   __exception
[L1436]              __tmp__Balance := Balance;
[L1437]              __tmp__DType := DType;
[L1438]              __tmp__Alloc := Alloc;
[L1439]              __tmp__balance_ADDR := balance_ADDR;
[L1440]              __tmp__M_Ref_int := M_Ref_int;
[L1441]              __tmp__sum__balances0 := sum__balances0;
[L1442]              __tmp__M_Ref_bool := M_Ref_bool;
[L1443]              __tmp__sum__defaultOperators1 := sum__defaultOperators1;
[L1444]              __tmp__alloc__operators_ERC777_lvl0 := alloc__operators_ERC777_lvl0;
[L1445]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1446]              __tmp__sum__operators2 := sum__operators2;
[L1447]              __tmp__alloc__revokedDefaultOperators_ERC777_lvl0 := alloc__revokedDefaultOperators_ERC777_lvl0;
[L1448]              __tmp__sum__revokedDefaultOperators3 := sum__revokedDefaultOperators3;
[L1449]              __tmp__alloc__allowances_ERC777_lvl0 := alloc__allowances_ERC777_lvl0;
[L1450]              __tmp__sum__allowances4 := sum__allowances4;
[L1451]              __tmp__M_int_Ref := M_int_Ref;
[L1452]              __tmp__sum := sum;
[L1453]              __tmp__Length := Length;
[L1454]              __tmp__now := now;
[L1455]              __tmp___erc1820_ERC777 := _erc1820_ERC777;
[L1456]              __tmp___balances_ERC777 := _balances_ERC777;
[L1457]              __tmp___totalSupply_ERC777 := _totalSupply_ERC777;
[L1458]              __tmp___name_ERC777 := _name_ERC777;
[L1459]              __tmp___symbol_ERC777 := _symbol_ERC777;
[L1460]              __tmp__TOKENS_SENDER_INTERFACE_HASH_ERC777 := TOKENS_SENDER_INTERFACE_HASH_ERC777;
[L1461]              __tmp__TOKENS_RECIPIENT_INTERFACE_HASH_ERC777 := TOKENS_RECIPIENT_INTERFACE_HASH_ERC777;
[L1462]              __tmp___defaultOperatorsArray_ERC777 := _defaultOperatorsArray_ERC777;
[L1463]              __tmp___defaultOperators_ERC777 := _defaultOperators_ERC777;
[L1464]              __tmp___operators_ERC777 := _operators_ERC777;
[L1465]              __tmp___revokedDefaultOperators_ERC777 := _revokedDefaultOperators_ERC777;
[L1466]              __tmp___allowances_ERC777 := _allowances_ERC777;
[L1467]              __tmp___owner_Ownable := _owner_Ownable;
[L1468]              __tmp___maxSupply_MMM := _maxSupply_MMM;
[L1469]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4500]              __var_10 := null;
[L4501]  COND TRUE   !(recipient_s739 != null)
[L4502]              revert := true;
[L1469]  RET         call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1470]              assume revert || gas < 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:13:20,655 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:13:20,656 INFO  L82        PathProgramCache]: Analyzing trace with hash -598733198, now seen corresponding path program 1 times
[2020-11-24 22:13:20,656 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:13:20,667 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:13:20,715 INFO  L134       CoverageAnalysis]: Checked inductivity of 38 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 38 trivial. 0 not checked.
[2020-11-24 22:13:20,716 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:13:20,716 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 22:13:20,716 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:13:20,716 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 22:13:20,716 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 22:13:20,717 INFO  L87              Difference]: Start difference. First operand 4640 states and 5015 transitions. cyclomatic complexity: 379 Second operand 3 states.
[2020-11-24 22:13:20,758 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:13:20,758 INFO  L93              Difference]: Finished difference Result 4837 states and 5215 transitions.
[2020-11-24 22:13:20,758 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 22:13:20,758 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4837 states and 5215 transitions.
[2020-11-24 22:13:20,766 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 22:13:20,776 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4837 states to 4758 states and 5136 transitions.
[2020-11-24 22:13:20,776 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1174
[2020-11-24 22:13:20,776 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1174
[2020-11-24 22:13:20,776 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4758 states and 5136 transitions.
[2020-11-24 22:13:20,780 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:13:20,780 INFO  L728         BuchiCegarLoop]: Abstraction has 4758 states and 5136 transitions.
[2020-11-24 22:13:20,783 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4758 states and 5136 transitions.
[2020-11-24 22:13:20,810 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4758 to 4642.
[2020-11-24 22:13:20,810 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4642 states.
[2020-11-24 22:13:20,815 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4642 states to 4642 states and 5015 transitions.
[2020-11-24 22:13:20,815 INFO  L751         BuchiCegarLoop]: Abstraction has 4642 states and 5015 transitions.
[2020-11-24 22:13:20,815 INFO  L631         BuchiCegarLoop]: Abstraction has 4642 states and 5015 transitions.
[2020-11-24 22:13:20,815 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 22:13:20,815 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4642 states and 5015 transitions.
[2020-11-24 22:13:20,820 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:13:20,820 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:13:20,820 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:13:20,822 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:13:20,822 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND TRUE   __exception
[L1436]              __tmp__Balance := Balance;
[L1437]              __tmp__DType := DType;
[L1438]              __tmp__Alloc := Alloc;
[L1439]              __tmp__balance_ADDR := balance_ADDR;
[L1440]              __tmp__M_Ref_int := M_Ref_int;
[L1441]              __tmp__sum__balances0 := sum__balances0;
[L1442]              __tmp__M_Ref_bool := M_Ref_bool;
[L1443]              __tmp__sum__defaultOperators1 := sum__defaultOperators1;
[L1444]              __tmp__alloc__operators_ERC777_lvl0 := alloc__operators_ERC777_lvl0;
[L1445]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1446]              __tmp__sum__operators2 := sum__operators2;
[L1447]              __tmp__alloc__revokedDefaultOperators_ERC777_lvl0 := alloc__revokedDefaultOperators_ERC777_lvl0;
[L1448]              __tmp__sum__revokedDefaultOperators3 := sum__revokedDefaultOperators3;
[L1449]              __tmp__alloc__allowances_ERC777_lvl0 := alloc__allowances_ERC777_lvl0;
[L1450]              __tmp__sum__allowances4 := sum__allowances4;
[L1451]              __tmp__M_int_Ref := M_int_Ref;
[L1452]              __tmp__sum := sum;
[L1453]              __tmp__Length := Length;
[L1454]              __tmp__now := now;
[L1455]              __tmp___erc1820_ERC777 := _erc1820_ERC777;
[L1456]              __tmp___balances_ERC777 := _balances_ERC777;
[L1457]              __tmp___totalSupply_ERC777 := _totalSupply_ERC777;
[L1458]              __tmp___name_ERC777 := _name_ERC777;
[L1459]              __tmp___symbol_ERC777 := _symbol_ERC777;
[L1460]              __tmp__TOKENS_SENDER_INTERFACE_HASH_ERC777 := TOKENS_SENDER_INTERFACE_HASH_ERC777;
[L1461]              __tmp__TOKENS_RECIPIENT_INTERFACE_HASH_ERC777 := TOKENS_RECIPIENT_INTERFACE_HASH_ERC777;
[L1462]              __tmp___defaultOperatorsArray_ERC777 := _defaultOperatorsArray_ERC777;
[L1463]              __tmp___defaultOperators_ERC777 := _defaultOperators_ERC777;
[L1464]              __tmp___operators_ERC777 := _operators_ERC777;
[L1465]              __tmp___revokedDefaultOperators_ERC777 := _revokedDefaultOperators_ERC777;
[L1466]              __tmp___allowances_ERC777 := _allowances_ERC777;
[L1467]              __tmp___owner_Ownable := _owner_Ownable;
[L1468]              __tmp___maxSupply_MMM := _maxSupply_MMM;
[L1469]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4500]              __var_10 := null;
[L4501]  COND TRUE   !(recipient_s739 != null)
[L4502]              revert := true;
[L1469]  RET         call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1470]              assume revert || gas < 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND TRUE   __exception
[L1436]              __tmp__Balance := Balance;
[L1437]              __tmp__DType := DType;
[L1438]              __tmp__Alloc := Alloc;
[L1439]              __tmp__balance_ADDR := balance_ADDR;
[L1440]              __tmp__M_Ref_int := M_Ref_int;
[L1441]              __tmp__sum__balances0 := sum__balances0;
[L1442]              __tmp__M_Ref_bool := M_Ref_bool;
[L1443]              __tmp__sum__defaultOperators1 := sum__defaultOperators1;
[L1444]              __tmp__alloc__operators_ERC777_lvl0 := alloc__operators_ERC777_lvl0;
[L1445]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1446]              __tmp__sum__operators2 := sum__operators2;
[L1447]              __tmp__alloc__revokedDefaultOperators_ERC777_lvl0 := alloc__revokedDefaultOperators_ERC777_lvl0;
[L1448]              __tmp__sum__revokedDefaultOperators3 := sum__revokedDefaultOperators3;
[L1449]              __tmp__alloc__allowances_ERC777_lvl0 := alloc__allowances_ERC777_lvl0;
[L1450]              __tmp__sum__allowances4 := sum__allowances4;
[L1451]              __tmp__M_int_Ref := M_int_Ref;
[L1452]              __tmp__sum := sum;
[L1453]              __tmp__Length := Length;
[L1454]              __tmp__now := now;
[L1455]              __tmp___erc1820_ERC777 := _erc1820_ERC777;
[L1456]              __tmp___balances_ERC777 := _balances_ERC777;
[L1457]              __tmp___totalSupply_ERC777 := _totalSupply_ERC777;
[L1458]              __tmp___name_ERC777 := _name_ERC777;
[L1459]              __tmp___symbol_ERC777 := _symbol_ERC777;
[L1460]              __tmp__TOKENS_SENDER_INTERFACE_HASH_ERC777 := TOKENS_SENDER_INTERFACE_HASH_ERC777;
[L1461]              __tmp__TOKENS_RECIPIENT_INTERFACE_HASH_ERC777 := TOKENS_RECIPIENT_INTERFACE_HASH_ERC777;
[L1462]              __tmp___defaultOperatorsArray_ERC777 := _defaultOperatorsArray_ERC777;
[L1463]              __tmp___defaultOperators_ERC777 := _defaultOperators_ERC777;
[L1464]              __tmp___operators_ERC777 := _operators_ERC777;
[L1465]              __tmp___revokedDefaultOperators_ERC777 := _revokedDefaultOperators_ERC777;
[L1466]              __tmp___allowances_ERC777 := _allowances_ERC777;
[L1467]              __tmp___owner_Ownable := _owner_Ownable;
[L1468]              __tmp___maxSupply_MMM := _maxSupply_MMM;
[L1469]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4500]              __var_10 := null;
[L4501]  COND TRUE   !(recipient_s739 != null)
[L4502]              revert := true;
[L1469]  RET         call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1470]              assume revert || gas < 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:13:20,826 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:13:20,826 INFO  L82        PathProgramCache]: Analyzing trace with hash -275419583, now seen corresponding path program 1 times
[2020-11-24 22:13:20,827 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:13:20,838 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:13:20,893 INFO  L134       CoverageAnalysis]: Checked inductivity of 38 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 38 trivial. 0 not checked.
[2020-11-24 22:13:20,893 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:13:20,893 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-24 22:13:20,894 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:13:20,894 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-24 22:13:20,894 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-24 22:13:20,894 INFO  L87              Difference]: Start difference. First operand 4642 states and 5015 transitions. cyclomatic complexity: 377 Second operand 6 states.
[2020-11-24 22:13:20,949 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:13:20,950 INFO  L93              Difference]: Finished difference Result 4754 states and 5134 transitions.
[2020-11-24 22:13:20,950 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-24 22:13:20,950 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4754 states and 5134 transitions.
[2020-11-24 22:13:20,959 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:13:20,973 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4754 states to 4746 states and 5126 transitions.
[2020-11-24 22:13:20,973 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1185
[2020-11-24 22:13:20,974 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1185
[2020-11-24 22:13:20,974 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4746 states and 5126 transitions.
[2020-11-24 22:13:20,978 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:13:20,978 INFO  L728         BuchiCegarLoop]: Abstraction has 4746 states and 5126 transitions.
[2020-11-24 22:13:20,982 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4746 states and 5126 transitions.
[2020-11-24 22:13:21,015 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4746 to 4733.
[2020-11-24 22:13:21,016 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4733 states.
[2020-11-24 22:13:21,020 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4733 states to 4733 states and 5111 transitions.
[2020-11-24 22:13:21,020 INFO  L751         BuchiCegarLoop]: Abstraction has 4733 states and 5111 transitions.
[2020-11-24 22:13:21,020 INFO  L631         BuchiCegarLoop]: Abstraction has 4733 states and 5111 transitions.
[2020-11-24 22:13:21,020 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 22:13:21,020 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4733 states and 5111 transitions.
[2020-11-24 22:13:21,025 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:13:21,025 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:13:21,025 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:13:21,027 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:13:21,027 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND TRUE   __exception
[L1436]              __tmp__Balance := Balance;
[L1437]              __tmp__DType := DType;
[L1438]              __tmp__Alloc := Alloc;
[L1439]              __tmp__balance_ADDR := balance_ADDR;
[L1440]              __tmp__M_Ref_int := M_Ref_int;
[L1441]              __tmp__sum__balances0 := sum__balances0;
[L1442]              __tmp__M_Ref_bool := M_Ref_bool;
[L1443]              __tmp__sum__defaultOperators1 := sum__defaultOperators1;
[L1444]              __tmp__alloc__operators_ERC777_lvl0 := alloc__operators_ERC777_lvl0;
[L1445]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1446]              __tmp__sum__operators2 := sum__operators2;
[L1447]              __tmp__alloc__revokedDefaultOperators_ERC777_lvl0 := alloc__revokedDefaultOperators_ERC777_lvl0;
[L1448]              __tmp__sum__revokedDefaultOperators3 := sum__revokedDefaultOperators3;
[L1449]              __tmp__alloc__allowances_ERC777_lvl0 := alloc__allowances_ERC777_lvl0;
[L1450]              __tmp__sum__allowances4 := sum__allowances4;
[L1451]              __tmp__M_int_Ref := M_int_Ref;
[L1452]              __tmp__sum := sum;
[L1453]              __tmp__Length := Length;
[L1454]              __tmp__now := now;
[L1455]              __tmp___erc1820_ERC777 := _erc1820_ERC777;
[L1456]              __tmp___balances_ERC777 := _balances_ERC777;
[L1457]              __tmp___totalSupply_ERC777 := _totalSupply_ERC777;
[L1458]              __tmp___name_ERC777 := _name_ERC777;
[L1459]              __tmp___symbol_ERC777 := _symbol_ERC777;
[L1460]              __tmp__TOKENS_SENDER_INTERFACE_HASH_ERC777 := TOKENS_SENDER_INTERFACE_HASH_ERC777;
[L1461]              __tmp__TOKENS_RECIPIENT_INTERFACE_HASH_ERC777 := TOKENS_RECIPIENT_INTERFACE_HASH_ERC777;
[L1462]              __tmp___defaultOperatorsArray_ERC777 := _defaultOperatorsArray_ERC777;
[L1463]              __tmp___defaultOperators_ERC777 := _defaultOperators_ERC777;
[L1464]              __tmp___operators_ERC777 := _operators_ERC777;
[L1465]              __tmp___revokedDefaultOperators_ERC777 := _revokedDefaultOperators_ERC777;
[L1466]              __tmp___allowances_ERC777 := _allowances_ERC777;
[L1467]              __tmp___owner_Ownable := _owner_Ownable;
[L1468]              __tmp___maxSupply_MMM := _maxSupply_MMM;
[L1469]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4500]              __var_10 := null;
[L4501]  COND FALSE  !(!(recipient_s739 != null))
[L4505]              havoc empty_s739;
[L4506]              from_s739 := msgsender_MSG;
[L4507]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5132]              implementer_s1401 := implementer_s1401;
[L5133]              __var_30 := null;
[L5134]  COND FALSE  !(implementer_s1401 != null)
[L4507]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4508]  COND FALSE  !(revert)
[L4511]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5059]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][from_s1325], amount_s1325);
[L4052]  COND TRUE   !(b_s297 <= a_s297)
[L4053]              revert := true;
[L5059]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][from_s1325], amount_s1325);
[L5060]  COND TRUE   revert
[L4511]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4512]  COND TRUE   revert
[L1469]  RET         call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1470]              assume revert || gas < 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND TRUE   choice == 24
[L7626]              gas := gas - 21000;
[L7627]  COND FALSE  !(gas >= 0)
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:13:21,030 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:13:21,031 INFO  L82        PathProgramCache]: Analyzing trace with hash -1945533160, now seen corresponding path program 1 times
[2020-11-24 22:13:21,031 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:13:21,043 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:13:21,137 INFO  L134       CoverageAnalysis]: Checked inductivity of 38 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 38 trivial. 0 not checked.
[2020-11-24 22:13:21,137 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:13:21,137 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-24 22:13:21,137 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:13:21,138 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-24 22:13:21,138 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=16, Invalid=56, Unknown=0, NotChecked=0, Total=72
[2020-11-24 22:13:21,138 INFO  L87              Difference]: Start difference. First operand 4733 states and 5111 transitions. cyclomatic complexity: 382 Second operand 9 states.
[2020-11-24 22:13:22,516 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:13:22,516 INFO  L93              Difference]: Finished difference Result 4960 states and 5354 transitions.
[2020-11-24 22:13:22,516 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-24 22:13:22,516 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4960 states and 5354 transitions.
[2020-11-24 22:13:22,526 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 22:13:22,538 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4960 states to 4960 states and 5354 transitions.
[2020-11-24 22:13:22,538 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1295
[2020-11-24 22:13:22,539 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1295
[2020-11-24 22:13:22,539 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4960 states and 5354 transitions.
[2020-11-24 22:13:22,542 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:13:22,542 INFO  L728         BuchiCegarLoop]: Abstraction has 4960 states and 5354 transitions.
[2020-11-24 22:13:22,546 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4960 states and 5354 transitions.
[2020-11-24 22:13:22,575 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4960 to 4741.
[2020-11-24 22:13:22,575 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4741 states.
[2020-11-24 22:13:22,579 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4741 states to 4741 states and 5123 transitions.
[2020-11-24 22:13:22,579 INFO  L751         BuchiCegarLoop]: Abstraction has 4741 states and 5123 transitions.
[2020-11-24 22:13:22,579 INFO  L631         BuchiCegarLoop]: Abstraction has 4741 states and 5123 transitions.
[2020-11-24 22:13:22,579 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 22:13:22,579 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4741 states and 5123 transitions.
[2020-11-24 22:13:22,584 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:13:22,585 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:13:22,585 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:13:22,586 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:13:22,586 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((__ret_0_ == true && _totalSupply_ERC777[this] == old(_totalSupply_ERC777[this])) && _balances_ERC777[this] == old(_balances_ERC777[this])) && _allowances_ERC777[this] == old(_allowances_ERC777[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _erc1820_ERC777[this] == old(_erc1820_ERC777[this])) && _name_ERC777[this] == old(_name_ERC777[this])) && _symbol_ERC777[this] == old(_symbol_ERC777[this])) && M_int_Ref[_defaultOperatorsArray_ERC777[this]] == old(M_int_Ref[_defaultOperatorsArray_ERC777[this]])) && _defaultOperators_ERC777[this] == old(_defaultOperators_ERC777[this])) && _operators_ERC777[this] == old(_operators_ERC777[this])) && _revokedDefaultOperators_ERC777[this] == old(_revokedDefaultOperators_ERC777[this]));
[L2]                 revert := revert_hold;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((__ret_0_ == true && _totalSupply_ERC777[this] == old(_totalSupply_ERC777[this])) && _balances_ERC777[this] == old(_balances_ERC777[this])) && _allowances_ERC777[this] == old(_allowances_ERC777[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _erc1820_ERC777[this] == old(_erc1820_ERC777[this])) && _name_ERC777[this] == old(_name_ERC777[this])) && _symbol_ERC777[this] == old(_symbol_ERC777[this])) && M_int_Ref[_defaultOperatorsArray_ERC777[this]] == old(M_int_Ref[_defaultOperatorsArray_ERC777[this]])) && _defaultOperators_ERC777[this] == old(_defaultOperators_ERC777[this])) && _operators_ERC777[this] == old(_operators_ERC777[this])) && _revokedDefaultOperators_ERC777[this] == old(_revokedDefaultOperators_ERC777[this]));
[L2]                 revert := revert_hold;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:13:22,590 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:13:22,590 INFO  L82        PathProgramCache]: Analyzing trace with hash -1260781174, now seen corresponding path program 1 times
[2020-11-24 22:13:22,591 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:13:22,621 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:13:23,005 INFO  L134       CoverageAnalysis]: Checked inductivity of 38 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 38 trivial. 0 not checked.
[2020-11-24 22:13:23,005 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:13:23,006 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [24] imperfect sequences [] total 24
[2020-11-24 22:13:23,006 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:13:23,006 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-24 22:13:23,006 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=64, Invalid=536, Unknown=0, NotChecked=0, Total=600
[2020-11-24 22:13:23,006 INFO  L87              Difference]: Start difference. First operand 4741 states and 5123 transitions. cyclomatic complexity: 386 Second operand 25 states.
[2020-11-24 22:13:29,023 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:13:29,023 INFO  L93              Difference]: Finished difference Result 4827 states and 5237 transitions.
[2020-11-24 22:13:29,023 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-24 22:13:29,023 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4827 states and 5237 transitions.
[2020-11-24 22:13:29,032 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 22:13:29,043 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4827 states to 4827 states and 5237 transitions.
[2020-11-24 22:13:29,043 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1223
[2020-11-24 22:13:29,043 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1223
[2020-11-24 22:13:29,043 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4827 states and 5237 transitions.
[2020-11-24 22:13:29,046 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:13:29,047 INFO  L728         BuchiCegarLoop]: Abstraction has 4827 states and 5237 transitions.
[2020-11-24 22:13:29,050 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4827 states and 5237 transitions.
[2020-11-24 22:13:29,077 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4827 to 4812.
[2020-11-24 22:13:29,077 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4812 states.
[2020-11-24 22:13:29,081 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4812 states to 4812 states and 5204 transitions.
[2020-11-24 22:13:29,081 INFO  L751         BuchiCegarLoop]: Abstraction has 4812 states and 5204 transitions.
[2020-11-24 22:13:29,081 INFO  L631         BuchiCegarLoop]: Abstraction has 4812 states and 5204 transitions.
[2020-11-24 22:13:29,081 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 22:13:29,081 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4812 states and 5204 transitions.
[2020-11-24 22:13:29,086 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 22:13:29,086 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:13:29,086 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:13:29,087 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:13:29,087 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND TRUE   __exception
[L1436]              __tmp__Balance := Balance;
[L1437]              __tmp__DType := DType;
[L1438]              __tmp__Alloc := Alloc;
[L1439]              __tmp__balance_ADDR := balance_ADDR;
[L1440]              __tmp__M_Ref_int := M_Ref_int;
[L1441]              __tmp__sum__balances0 := sum__balances0;
[L1442]              __tmp__M_Ref_bool := M_Ref_bool;
[L1443]              __tmp__sum__defaultOperators1 := sum__defaultOperators1;
[L1444]              __tmp__alloc__operators_ERC777_lvl0 := alloc__operators_ERC777_lvl0;
[L1445]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1446]              __tmp__sum__operators2 := sum__operators2;
[L1447]              __tmp__alloc__revokedDefaultOperators_ERC777_lvl0 := alloc__revokedDefaultOperators_ERC777_lvl0;
[L1448]              __tmp__sum__revokedDefaultOperators3 := sum__revokedDefaultOperators3;
[L1449]              __tmp__alloc__allowances_ERC777_lvl0 := alloc__allowances_ERC777_lvl0;
[L1450]              __tmp__sum__allowances4 := sum__allowances4;
[L1451]              __tmp__M_int_Ref := M_int_Ref;
[L1452]              __tmp__sum := sum;
[L1453]              __tmp__Length := Length;
[L1454]              __tmp__now := now;
[L1455]              __tmp___erc1820_ERC777 := _erc1820_ERC777;
[L1456]              __tmp___balances_ERC777 := _balances_ERC777;
[L1457]              __tmp___totalSupply_ERC777 := _totalSupply_ERC777;
[L1458]              __tmp___name_ERC777 := _name_ERC777;
[L1459]              __tmp___symbol_ERC777 := _symbol_ERC777;
[L1460]              __tmp__TOKENS_SENDER_INTERFACE_HASH_ERC777 := TOKENS_SENDER_INTERFACE_HASH_ERC777;
[L1461]              __tmp__TOKENS_RECIPIENT_INTERFACE_HASH_ERC777 := TOKENS_RECIPIENT_INTERFACE_HASH_ERC777;
[L1462]              __tmp___defaultOperatorsArray_ERC777 := _defaultOperatorsArray_ERC777;
[L1463]              __tmp___defaultOperators_ERC777 := _defaultOperators_ERC777;
[L1464]              __tmp___operators_ERC777 := _operators_ERC777;
[L1465]              __tmp___revokedDefaultOperators_ERC777 := _revokedDefaultOperators_ERC777;
[L1466]              __tmp___allowances_ERC777 := _allowances_ERC777;
[L1467]              __tmp___owner_Ownable := _owner_Ownable;
[L1468]              __tmp___maxSupply_MMM := _maxSupply_MMM;
[L1469]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4500]              __var_10 := null;
[L4501]  COND FALSE  !(!(recipient_s739 != null))
[L4505]              havoc empty_s739;
[L4506]              from_s739 := msgsender_MSG;
[L4507]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5132]              implementer_s1401 := implementer_s1401;
[L5133]              __var_30 := null;
[L5134]  COND FALSE  !(implementer_s1401 != null)
[L4507]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4508]  COND FALSE  !(revert)
[L4511]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5059]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][from_s1325], amount_s1325);
[L4052]  COND FALSE  !(!(b_s297 <= a_s297))
[L4056]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4057]              __ret_0_ := c_s297;
[L5059]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][from_s1325], amount_s1325);
[L5060]  COND FALSE  !(revert)
[L5063]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC777[this][from_s1325];
[L5064]              __tmp___balances_ERC777[this][from_s1325] := __var_26;
[L5065]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC777[this][from_s1325];
[L5066]  CALL        call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][to_s1325], amount_s1325);
[L4028]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4029]  COND TRUE   !(c_s272 >= a_s272)
[L4030]              revert := true;
[L5066]  RET         call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][to_s1325], amount_s1325);
[L5067]  COND TRUE   revert
[L4511]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4512]  COND TRUE   revert
[L1469]  RET         call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1470]              assume revert || gas < 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND TRUE   __exception
[L1436]              __tmp__Balance := Balance;
[L1437]              __tmp__DType := DType;
[L1438]              __tmp__Alloc := Alloc;
[L1439]              __tmp__balance_ADDR := balance_ADDR;
[L1440]              __tmp__M_Ref_int := M_Ref_int;
[L1441]              __tmp__sum__balances0 := sum__balances0;
[L1442]              __tmp__M_Ref_bool := M_Ref_bool;
[L1443]              __tmp__sum__defaultOperators1 := sum__defaultOperators1;
[L1444]              __tmp__alloc__operators_ERC777_lvl0 := alloc__operators_ERC777_lvl0;
[L1445]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1446]              __tmp__sum__operators2 := sum__operators2;
[L1447]              __tmp__alloc__revokedDefaultOperators_ERC777_lvl0 := alloc__revokedDefaultOperators_ERC777_lvl0;
[L1448]              __tmp__sum__revokedDefaultOperators3 := sum__revokedDefaultOperators3;
[L1449]              __tmp__alloc__allowances_ERC777_lvl0 := alloc__allowances_ERC777_lvl0;
[L1450]              __tmp__sum__allowances4 := sum__allowances4;
[L1451]              __tmp__M_int_Ref := M_int_Ref;
[L1452]              __tmp__sum := sum;
[L1453]              __tmp__Length := Length;
[L1454]              __tmp__now := now;
[L1455]              __tmp___erc1820_ERC777 := _erc1820_ERC777;
[L1456]              __tmp___balances_ERC777 := _balances_ERC777;
[L1457]              __tmp___totalSupply_ERC777 := _totalSupply_ERC777;
[L1458]              __tmp___name_ERC777 := _name_ERC777;
[L1459]              __tmp___symbol_ERC777 := _symbol_ERC777;
[L1460]              __tmp__TOKENS_SENDER_INTERFACE_HASH_ERC777 := TOKENS_SENDER_INTERFACE_HASH_ERC777;
[L1461]              __tmp__TOKENS_RECIPIENT_INTERFACE_HASH_ERC777 := TOKENS_RECIPIENT_INTERFACE_HASH_ERC777;
[L1462]              __tmp___defaultOperatorsArray_ERC777 := _defaultOperatorsArray_ERC777;
[L1463]              __tmp___defaultOperators_ERC777 := _defaultOperators_ERC777;
[L1464]              __tmp___operators_ERC777 := _operators_ERC777;
[L1465]              __tmp___revokedDefaultOperators_ERC777 := _revokedDefaultOperators_ERC777;
[L1466]              __tmp___allowances_ERC777 := _allowances_ERC777;
[L1467]              __tmp___owner_Ownable := _owner_Ownable;
[L1468]              __tmp___maxSupply_MMM := _maxSupply_MMM;
[L1469]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4500]              __var_10 := null;
[L4501]  COND FALSE  !(!(recipient_s739 != null))
[L4505]              havoc empty_s739;
[L4506]              from_s739 := msgsender_MSG;
[L4507]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5132]              implementer_s1401 := implementer_s1401;
[L5133]              __var_30 := null;
[L5134]  COND FALSE  !(implementer_s1401 != null)
[L4507]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4508]  COND FALSE  !(revert)
[L4511]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5059]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][from_s1325], amount_s1325);
[L4052]  COND FALSE  !(!(b_s297 <= a_s297))
[L4056]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4057]              __ret_0_ := c_s297;
[L5059]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][from_s1325], amount_s1325);
[L5060]  COND FALSE  !(revert)
[L5063]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC777[this][from_s1325];
[L5064]              __tmp___balances_ERC777[this][from_s1325] := __var_26;
[L5065]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC777[this][from_s1325];
[L5066]  CALL        call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][to_s1325], amount_s1325);
[L4028]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4029]  COND TRUE   !(c_s272 >= a_s272)
[L4030]              revert := true;
[L5066]  RET         call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][to_s1325], amount_s1325);
[L5067]  COND TRUE   revert
[L4511]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4512]  COND TRUE   revert
[L1469]  RET         call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1470]              assume revert || gas < 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:13:29,092 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:13:29,092 INFO  L82        PathProgramCache]: Analyzing trace with hash 1385016224, now seen corresponding path program 1 times
[2020-11-24 22:13:29,093 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:13:29,104 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:13:29,238 INFO  L134       CoverageAnalysis]: Checked inductivity of 38 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 38 trivial. 0 not checked.
[2020-11-24 22:13:29,238 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:13:29,239 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [20] imperfect sequences [] total 20
[2020-11-24 22:13:29,239 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:13:29,239 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-11-24 22:13:29,239 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=40, Invalid=380, Unknown=0, NotChecked=0, Total=420
[2020-11-24 22:13:29,239 INFO  L87              Difference]: Start difference. First operand 4812 states and 5204 transitions. cyclomatic complexity: 398 Second operand 21 states.
[2020-11-24 22:13:33,409 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:13:33,409 INFO  L93              Difference]: Finished difference Result 4847 states and 5255 transitions.
[2020-11-24 22:13:33,410 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-24 22:13:33,410 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4847 states and 5255 transitions.
[2020-11-24 22:13:33,418 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 22:13:33,426 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4847 states to 4847 states and 5255 transitions.
[2020-11-24 22:13:33,426 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1232
[2020-11-24 22:13:33,427 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1232
[2020-11-24 22:13:33,427 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4847 states and 5255 transitions.
[2020-11-24 22:13:33,430 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:13:33,430 INFO  L728         BuchiCegarLoop]: Abstraction has 4847 states and 5255 transitions.
[2020-11-24 22:13:33,434 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4847 states and 5255 transitions.
[2020-11-24 22:13:33,455 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4847 to 4820.
[2020-11-24 22:13:33,455 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4820 states.
[2020-11-24 22:13:33,459 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4820 states to 4820 states and 5214 transitions.
[2020-11-24 22:13:33,459 INFO  L751         BuchiCegarLoop]: Abstraction has 4820 states and 5214 transitions.
[2020-11-24 22:13:33,459 INFO  L631         BuchiCegarLoop]: Abstraction has 4820 states and 5214 transitions.
[2020-11-24 22:13:33,459 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 22:13:33,459 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4820 states and 5214 transitions.
[2020-11-24 22:13:33,464 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 22:13:33,464 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:13:33,464 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:13:33,465 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:13:33,465 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND TRUE   __exception
[L1436]              __tmp__Balance := Balance;
[L1437]              __tmp__DType := DType;
[L1438]              __tmp__Alloc := Alloc;
[L1439]              __tmp__balance_ADDR := balance_ADDR;
[L1440]              __tmp__M_Ref_int := M_Ref_int;
[L1441]              __tmp__sum__balances0 := sum__balances0;
[L1442]              __tmp__M_Ref_bool := M_Ref_bool;
[L1443]              __tmp__sum__defaultOperators1 := sum__defaultOperators1;
[L1444]              __tmp__alloc__operators_ERC777_lvl0 := alloc__operators_ERC777_lvl0;
[L1445]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1446]              __tmp__sum__operators2 := sum__operators2;
[L1447]              __tmp__alloc__revokedDefaultOperators_ERC777_lvl0 := alloc__revokedDefaultOperators_ERC777_lvl0;
[L1448]              __tmp__sum__revokedDefaultOperators3 := sum__revokedDefaultOperators3;
[L1449]              __tmp__alloc__allowances_ERC777_lvl0 := alloc__allowances_ERC777_lvl0;
[L1450]              __tmp__sum__allowances4 := sum__allowances4;
[L1451]              __tmp__M_int_Ref := M_int_Ref;
[L1452]              __tmp__sum := sum;
[L1453]              __tmp__Length := Length;
[L1454]              __tmp__now := now;
[L1455]              __tmp___erc1820_ERC777 := _erc1820_ERC777;
[L1456]              __tmp___balances_ERC777 := _balances_ERC777;
[L1457]              __tmp___totalSupply_ERC777 := _totalSupply_ERC777;
[L1458]              __tmp___name_ERC777 := _name_ERC777;
[L1459]              __tmp___symbol_ERC777 := _symbol_ERC777;
[L1460]              __tmp__TOKENS_SENDER_INTERFACE_HASH_ERC777 := TOKENS_SENDER_INTERFACE_HASH_ERC777;
[L1461]              __tmp__TOKENS_RECIPIENT_INTERFACE_HASH_ERC777 := TOKENS_RECIPIENT_INTERFACE_HASH_ERC777;
[L1462]              __tmp___defaultOperatorsArray_ERC777 := _defaultOperatorsArray_ERC777;
[L1463]              __tmp___defaultOperators_ERC777 := _defaultOperators_ERC777;
[L1464]              __tmp___operators_ERC777 := _operators_ERC777;
[L1465]              __tmp___revokedDefaultOperators_ERC777 := _revokedDefaultOperators_ERC777;
[L1466]              __tmp___allowances_ERC777 := _allowances_ERC777;
[L1467]              __tmp___owner_Ownable := _owner_Ownable;
[L1468]              __tmp___maxSupply_MMM := _maxSupply_MMM;
[L1469]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4500]              __var_10 := null;
[L4501]  COND FALSE  !(!(recipient_s739 != null))
[L4505]              havoc empty_s739;
[L4506]              from_s739 := msgsender_MSG;
[L4507]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5132]              implementer_s1401 := implementer_s1401;
[L5133]              __var_30 := null;
[L5134]  COND FALSE  !(implementer_s1401 != null)
[L4507]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4508]  COND FALSE  !(revert)
[L4511]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5059]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][from_s1325], amount_s1325);
[L4052]  COND FALSE  !(!(b_s297 <= a_s297))
[L4056]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4057]              __ret_0_ := c_s297;
[L5059]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][from_s1325], amount_s1325);
[L5060]  COND FALSE  !(revert)
[L5063]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC777[this][from_s1325];
[L5064]              __tmp___balances_ERC777[this][from_s1325] := __var_26;
[L5065]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC777[this][from_s1325];
[L5066]  CALL        call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][to_s1325], amount_s1325);
[L4028]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4029]  COND FALSE  !(!(c_s272 >= a_s272))
[L4033]              __ret_0_ := c_s272;
[L5066]  RET         call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][to_s1325], amount_s1325);
[L5067]  COND FALSE  !(revert)
[L5070]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC777[this][to_s1325];
[L5071]              __tmp___balances_ERC777[this][to_s1325] := __var_27;
[L5072]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC777[this][to_s1325];
[L4511]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4512]  COND FALSE  !(revert)
[L4515]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5167]              implementer_s1457 := implementer_s1457;
[L5168]              __var_34 := null;
[L5169]  COND FALSE  !(implementer_s1457 != null)
[L5173]  COND FALSE  !(requireReceptionAck_s1457)
[L4515]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4516]  COND FALSE  !(revert)
[L4519]              __ret_0_ := true;
[L1469]  RET         call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1470]              assume revert || gas < 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND TRUE   choice == 24
[L7626]              gas := gas - 21000;
[L7627]  COND FALSE  !(gas >= 0)
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:13:33,468 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:13:33,468 INFO  L82        PathProgramCache]: Analyzing trace with hash -542384599, now seen corresponding path program 1 times
[2020-11-24 22:13:33,469 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:13:33,480 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:13:33,520 INFO  L134       CoverageAnalysis]: Checked inductivity of 38 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 38 trivial. 0 not checked.
[2020-11-24 22:13:33,520 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:13:33,520 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 22:13:33,521 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:13:33,521 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 22:13:33,521 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 22:13:33,521 INFO  L87              Difference]: Start difference. First operand 4820 states and 5214 transitions. cyclomatic complexity: 400 Second operand 5 states.
[2020-11-24 22:13:34,317 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:13:34,318 INFO  L93              Difference]: Finished difference Result 5851 states and 6449 transitions.
[2020-11-24 22:13:34,318 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 22:13:34,318 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5851 states and 6449 transitions.
[2020-11-24 22:13:34,331 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-24 22:13:34,343 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5851 states to 4482 states and 5059 transitions.
[2020-11-24 22:13:34,343 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 927
[2020-11-24 22:13:34,344 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 927
[2020-11-24 22:13:34,344 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4482 states and 5059 transitions.
[2020-11-24 22:13:34,347 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:13:34,347 INFO  L728         BuchiCegarLoop]: Abstraction has 4482 states and 5059 transitions.
[2020-11-24 22:13:34,350 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4482 states and 5059 transitions.
[2020-11-24 22:13:34,376 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4482 to 3768.
[2020-11-24 22:13:34,376 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3768 states.
[2020-11-24 22:13:34,380 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3768 states to 3768 states and 4153 transitions.
[2020-11-24 22:13:34,380 INFO  L751         BuchiCegarLoop]: Abstraction has 3768 states and 4153 transitions.
[2020-11-24 22:13:34,380 INFO  L631         BuchiCegarLoop]: Abstraction has 3768 states and 4153 transitions.
[2020-11-24 22:13:34,380 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 22:13:34,381 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3768 states and 4153 transitions.
[2020-11-24 22:13:34,385 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 22:13:34,386 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:13:34,386 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:13:34,387 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:13:34,387 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND TRUE   __exception
[L1436]              __tmp__Balance := Balance;
[L1437]              __tmp__DType := DType;
[L1438]              __tmp__Alloc := Alloc;
[L1439]              __tmp__balance_ADDR := balance_ADDR;
[L1440]              __tmp__M_Ref_int := M_Ref_int;
[L1441]              __tmp__sum__balances0 := sum__balances0;
[L1442]              __tmp__M_Ref_bool := M_Ref_bool;
[L1443]              __tmp__sum__defaultOperators1 := sum__defaultOperators1;
[L1444]              __tmp__alloc__operators_ERC777_lvl0 := alloc__operators_ERC777_lvl0;
[L1445]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1446]              __tmp__sum__operators2 := sum__operators2;
[L1447]              __tmp__alloc__revokedDefaultOperators_ERC777_lvl0 := alloc__revokedDefaultOperators_ERC777_lvl0;
[L1448]              __tmp__sum__revokedDefaultOperators3 := sum__revokedDefaultOperators3;
[L1449]              __tmp__alloc__allowances_ERC777_lvl0 := alloc__allowances_ERC777_lvl0;
[L1450]              __tmp__sum__allowances4 := sum__allowances4;
[L1451]              __tmp__M_int_Ref := M_int_Ref;
[L1452]              __tmp__sum := sum;
[L1453]              __tmp__Length := Length;
[L1454]              __tmp__now := now;
[L1455]              __tmp___erc1820_ERC777 := _erc1820_ERC777;
[L1456]              __tmp___balances_ERC777 := _balances_ERC777;
[L1457]              __tmp___totalSupply_ERC777 := _totalSupply_ERC777;
[L1458]              __tmp___name_ERC777 := _name_ERC777;
[L1459]              __tmp___symbol_ERC777 := _symbol_ERC777;
[L1460]              __tmp__TOKENS_SENDER_INTERFACE_HASH_ERC777 := TOKENS_SENDER_INTERFACE_HASH_ERC777;
[L1461]              __tmp__TOKENS_RECIPIENT_INTERFACE_HASH_ERC777 := TOKENS_RECIPIENT_INTERFACE_HASH_ERC777;
[L1462]              __tmp___defaultOperatorsArray_ERC777 := _defaultOperatorsArray_ERC777;
[L1463]              __tmp___defaultOperators_ERC777 := _defaultOperators_ERC777;
[L1464]              __tmp___operators_ERC777 := _operators_ERC777;
[L1465]              __tmp___revokedDefaultOperators_ERC777 := _revokedDefaultOperators_ERC777;
[L1466]              __tmp___allowances_ERC777 := _allowances_ERC777;
[L1467]              __tmp___owner_Ownable := _owner_Ownable;
[L1468]              __tmp___maxSupply_MMM := _maxSupply_MMM;
[L1469]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4500]              __var_10 := null;
[L4501]  COND FALSE  !(!(recipient_s739 != null))
[L4505]              havoc empty_s739;
[L4506]              from_s739 := msgsender_MSG;
[L4507]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5132]              implementer_s1401 := implementer_s1401;
[L5133]              __var_30 := null;
[L5134]  COND FALSE  !(implementer_s1401 != null)
[L4507]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4508]  COND FALSE  !(revert)
[L4511]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5059]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][from_s1325], amount_s1325);
[L4052]  COND FALSE  !(!(b_s297 <= a_s297))
[L4056]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4057]              __ret_0_ := c_s297;
[L5059]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][from_s1325], amount_s1325);
[L5060]  COND FALSE  !(revert)
[L5063]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC777[this][from_s1325];
[L5064]              __tmp___balances_ERC777[this][from_s1325] := __var_26;
[L5065]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC777[this][from_s1325];
[L5066]  CALL        call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][to_s1325], amount_s1325);
[L4028]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4029]  COND FALSE  !(!(c_s272 >= a_s272))
[L4033]              __ret_0_ := c_s272;
[L5066]  RET         call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][to_s1325], amount_s1325);
[L5067]  COND FALSE  !(revert)
[L5070]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC777[this][to_s1325];
[L5071]              __tmp___balances_ERC777[this][to_s1325] := __var_27;
[L5072]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC777[this][to_s1325];
[L4511]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4512]  COND FALSE  !(revert)
[L4515]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5167]              implementer_s1457 := implementer_s1457;
[L5168]              __var_34 := null;
[L5169]  COND FALSE  !(implementer_s1457 != null)
[L5173]  COND TRUE   requireReceptionAck_s1457
[L5174]  CALL        call __var_37 := isContract~address_Address__fail(this, this, 0, to_s1457);
[L4184]              havoc size_s395;
[L4186]              havoc size_s395;
[L4187]              __ret_0_ := size_s395 > 0;
[L5174]  RET         call __var_37 := isContract~address_Address__fail(this, this, 0, to_s1457);
[L5175]  COND FALSE  !(revert)
[L5178]  COND TRUE   !!__var_37
[L5179]              revert := true;
[L4515]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4516]  COND TRUE   revert
[L1469]  RET         call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1470]              assume revert || gas < 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND TRUE   __exception
[L1436]              __tmp__Balance := Balance;
[L1437]              __tmp__DType := DType;
[L1438]              __tmp__Alloc := Alloc;
[L1439]              __tmp__balance_ADDR := balance_ADDR;
[L1440]              __tmp__M_Ref_int := M_Ref_int;
[L1441]              __tmp__sum__balances0 := sum__balances0;
[L1442]              __tmp__M_Ref_bool := M_Ref_bool;
[L1443]              __tmp__sum__defaultOperators1 := sum__defaultOperators1;
[L1444]              __tmp__alloc__operators_ERC777_lvl0 := alloc__operators_ERC777_lvl0;
[L1445]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1446]              __tmp__sum__operators2 := sum__operators2;
[L1447]              __tmp__alloc__revokedDefaultOperators_ERC777_lvl0 := alloc__revokedDefaultOperators_ERC777_lvl0;
[L1448]              __tmp__sum__revokedDefaultOperators3 := sum__revokedDefaultOperators3;
[L1449]              __tmp__alloc__allowances_ERC777_lvl0 := alloc__allowances_ERC777_lvl0;
[L1450]              __tmp__sum__allowances4 := sum__allowances4;
[L1451]              __tmp__M_int_Ref := M_int_Ref;
[L1452]              __tmp__sum := sum;
[L1453]              __tmp__Length := Length;
[L1454]              __tmp__now := now;
[L1455]              __tmp___erc1820_ERC777 := _erc1820_ERC777;
[L1456]              __tmp___balances_ERC777 := _balances_ERC777;
[L1457]              __tmp___totalSupply_ERC777 := _totalSupply_ERC777;
[L1458]              __tmp___name_ERC777 := _name_ERC777;
[L1459]              __tmp___symbol_ERC777 := _symbol_ERC777;
[L1460]              __tmp__TOKENS_SENDER_INTERFACE_HASH_ERC777 := TOKENS_SENDER_INTERFACE_HASH_ERC777;
[L1461]              __tmp__TOKENS_RECIPIENT_INTERFACE_HASH_ERC777 := TOKENS_RECIPIENT_INTERFACE_HASH_ERC777;
[L1462]              __tmp___defaultOperatorsArray_ERC777 := _defaultOperatorsArray_ERC777;
[L1463]              __tmp___defaultOperators_ERC777 := _defaultOperators_ERC777;
[L1464]              __tmp___operators_ERC777 := _operators_ERC777;
[L1465]              __tmp___revokedDefaultOperators_ERC777 := _revokedDefaultOperators_ERC777;
[L1466]              __tmp___allowances_ERC777 := _allowances_ERC777;
[L1467]              __tmp___owner_Ownable := _owner_Ownable;
[L1468]              __tmp___maxSupply_MMM := _maxSupply_MMM;
[L1469]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4500]              __var_10 := null;
[L4501]  COND FALSE  !(!(recipient_s739 != null))
[L4505]              havoc empty_s739;
[L4506]              from_s739 := msgsender_MSG;
[L4507]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5132]              implementer_s1401 := implementer_s1401;
[L5133]              __var_30 := null;
[L5134]  COND FALSE  !(implementer_s1401 != null)
[L4507]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4508]  COND FALSE  !(revert)
[L4511]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5059]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][from_s1325], amount_s1325);
[L4052]  COND FALSE  !(!(b_s297 <= a_s297))
[L4056]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4057]              __ret_0_ := c_s297;
[L5059]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][from_s1325], amount_s1325);
[L5060]  COND FALSE  !(revert)
[L5063]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC777[this][from_s1325];
[L5064]              __tmp___balances_ERC777[this][from_s1325] := __var_26;
[L5065]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC777[this][from_s1325];
[L5066]  CALL        call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][to_s1325], amount_s1325);
[L4028]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4029]  COND FALSE  !(!(c_s272 >= a_s272))
[L4033]              __ret_0_ := c_s272;
[L5066]  RET         call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][to_s1325], amount_s1325);
[L5067]  COND FALSE  !(revert)
[L5070]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC777[this][to_s1325];
[L5071]              __tmp___balances_ERC777[this][to_s1325] := __var_27;
[L5072]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC777[this][to_s1325];
[L4511]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4512]  COND FALSE  !(revert)
[L4515]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5167]              implementer_s1457 := implementer_s1457;
[L5168]              __var_34 := null;
[L5169]  COND FALSE  !(implementer_s1457 != null)
[L5173]  COND TRUE   requireReceptionAck_s1457
[L5174]  CALL        call __var_37 := isContract~address_Address__fail(this, this, 0, to_s1457);
[L4184]              havoc size_s395;
[L4186]              havoc size_s395;
[L4187]              __ret_0_ := size_s395 > 0;
[L5174]  RET         call __var_37 := isContract~address_Address__fail(this, this, 0, to_s1457);
[L5175]  COND FALSE  !(revert)
[L5178]  COND TRUE   !!__var_37
[L5179]              revert := true;
[L4515]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4516]  COND TRUE   revert
[L1469]  RET         call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1470]              assume revert || gas < 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:13:34,391 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:13:34,392 INFO  L82        PathProgramCache]: Analyzing trace with hash 1429892069, now seen corresponding path program 1 times
[2020-11-24 22:13:34,392 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:13:34,405 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:13:34,489 INFO  L134       CoverageAnalysis]: Checked inductivity of 38 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 38 trivial. 0 not checked.
[2020-11-24 22:13:34,489 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:13:34,489 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 22:13:34,490 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:13:34,490 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 22:13:34,490 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 22:13:34,490 INFO  L87              Difference]: Start difference. First operand 3768 states and 4153 transitions. cyclomatic complexity: 390 Second operand 3 states.
[2020-11-24 22:13:34,519 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:13:34,520 INFO  L93              Difference]: Finished difference Result 3758 states and 4124 transitions.
[2020-11-24 22:13:34,520 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 22:13:34,520 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3758 states and 4124 transitions.
[2020-11-24 22:13:34,525 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 22:13:34,531 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3758 states to 3732 states and 4094 transitions.
[2020-11-24 22:13:34,532 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 830
[2020-11-24 22:13:34,532 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 830
[2020-11-24 22:13:34,532 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3732 states and 4094 transitions.
[2020-11-24 22:13:34,534 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:13:34,534 INFO  L728         BuchiCegarLoop]: Abstraction has 3732 states and 4094 transitions.
[2020-11-24 22:13:34,537 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3732 states and 4094 transitions.
[2020-11-24 22:13:34,550 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3732 to 3531.
[2020-11-24 22:13:34,550 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3531 states.
[2020-11-24 22:13:34,553 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3531 states to 3531 states and 3840 transitions.
[2020-11-24 22:13:34,553 INFO  L751         BuchiCegarLoop]: Abstraction has 3531 states and 3840 transitions.
[2020-11-24 22:13:34,553 INFO  L631         BuchiCegarLoop]: Abstraction has 3531 states and 3840 transitions.
[2020-11-24 22:13:34,553 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-24 22:13:34,553 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3531 states and 3840 transitions.
[2020-11-24 22:13:34,557 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:13:34,557 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:13:34,557 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:13:34,558 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:13:34,559 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND TRUE   choice == 18
[L7663]              gas := gas - 21000;
[L7664]  COND TRUE   gas >= 0
[L7665]              assume amount_s760 >= 0 && amount_s760 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7666]              assume msgvalue_MSG == 0;
[L7667]  CALL        call burn~uint256~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, amount_s760, data_s760);
[L1518]              havoc __exception;
[L1519]              revert := false;
[L1520]  COND FALSE  !(__exception)
[L1557]  CALL        call burn~uint256~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, amount_s760, data_s760);
[L4564]              havoc empty_s760;
[L4565]  CALL        call _burn~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, msgsender_MSG, amount_s760, data_s760, empty_s760);
[L5029]              __var_22 := null;
[L5030]  COND FALSE  !(!(from_s1272 != null))
[L5034]              __var_23 := null;
[L5035]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1272, from_s1272, null, amount_s1272, data_s1272, operatorData_s1272);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L5035]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1272, from_s1272, null, amount_s1272, data_s1272, operatorData_s1272);
[L5036]  COND FALSE  !(revert)
[L5039]  CALL        call __var_24 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC777[this], amount_s1272);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5039]  RET         call __var_24 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC777[this], amount_s1272);
[L5040]  COND FALSE  !(revert)
[L5043]              _totalSupply_ERC777[this] := __var_24;
[L5044]  CALL        call __var_25 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1272], amount_s1272);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5044]  RET         call __var_25 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1272], amount_s1272);
[L5045]  COND FALSE  !(revert)
[L5048]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1272];
[L5049]              _balances_ERC777[this][from_s1272] := __var_25;
[L5050]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1272];
[L5051]              assert { :EventEmitted "Burned_ERC777" } true;
[L5052]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4565]  RET         call _burn~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, msgsender_MSG, amount_s760, data_s760, empty_s760);
[L4566]  COND FALSE  !(revert)
[L1557]  RET         call burn~uint256~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, amount_s760, data_s760);
[L1558]              assume !revert && gas >= 0;
[L7667]  RET         call burn~uint256~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, amount_s760, data_s760);
[L7795]  RET         call CorralChoice_MMM(this);
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((__ret_0_ == true && _totalSupply_ERC777[this] == old(_totalSupply_ERC777[this])) && _balances_ERC777[this] == old(_balances_ERC777[this])) && _allowances_ERC777[this] == old(_allowances_ERC777[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _erc1820_ERC777[this] == old(_erc1820_ERC777[this])) && _name_ERC777[this] == old(_name_ERC777[this])) && _symbol_ERC777[this] == old(_symbol_ERC777[this])) && M_int_Ref[_defaultOperatorsArray_ERC777[this]] == old(M_int_Ref[_defaultOperatorsArray_ERC777[this]])) && _defaultOperators_ERC777[this] == old(_defaultOperators_ERC777[this])) && _operators_ERC777[this] == old(_operators_ERC777[this])) && _revokedDefaultOperators_ERC777[this] == old(_revokedDefaultOperators_ERC777[this]));
[L2]                 revert := revert_hold;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((__ret_0_ == true && _totalSupply_ERC777[this] == old(_totalSupply_ERC777[this])) && _balances_ERC777[this] == old(_balances_ERC777[this])) && _allowances_ERC777[this] == old(_allowances_ERC777[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _erc1820_ERC777[this] == old(_erc1820_ERC777[this])) && _name_ERC777[this] == old(_name_ERC777[this])) && _symbol_ERC777[this] == old(_symbol_ERC777[this])) && M_int_Ref[_defaultOperatorsArray_ERC777[this]] == old(M_int_Ref[_defaultOperatorsArray_ERC777[this]])) && _defaultOperators_ERC777[this] == old(_defaultOperators_ERC777[this])) && _operators_ERC777[this] == old(_operators_ERC777[this])) && _revokedDefaultOperators_ERC777[this] == old(_revokedDefaultOperators_ERC777[this]));
[L2]                 revert := revert_hold;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:13:34,562 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:13:34,563 INFO  L82        PathProgramCache]: Analyzing trace with hash -1278337130, now seen corresponding path program 1 times
[2020-11-24 22:13:34,563 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:13:34,589 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:13:35,505 INFO  L134       CoverageAnalysis]: Checked inductivity of 122 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 118 trivial. 0 not checked.
[2020-11-24 22:13:35,505 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:13:35,505 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [39] imperfect sequences [] total 39
[2020-11-24 22:13:35,505 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:13:35,506 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-11-24 22:13:35,506 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=121, Invalid=1439, Unknown=0, NotChecked=0, Total=1560
[2020-11-24 22:13:35,507 INFO  L87              Difference]: Start difference. First operand 3531 states and 3840 transitions. cyclomatic complexity: 313 Second operand 40 states.
[2020-11-24 22:13:43,871 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:13:43,871 INFO  L93              Difference]: Finished difference Result 3579 states and 3903 transitions.
[2020-11-24 22:13:43,871 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-11-24 22:13:43,871 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3579 states and 3903 transitions.
[2020-11-24 22:13:43,877 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 22:13:43,884 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3579 states to 3579 states and 3903 transitions.
[2020-11-24 22:13:43,884 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 785
[2020-11-24 22:13:43,884 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 785
[2020-11-24 22:13:43,884 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3579 states and 3903 transitions.
[2020-11-24 22:13:43,886 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:13:43,886 INFO  L728         BuchiCegarLoop]: Abstraction has 3579 states and 3903 transitions.
[2020-11-24 22:13:43,889 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3579 states and 3903 transitions.
[2020-11-24 22:13:43,903 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3579 to 3567.
[2020-11-24 22:13:43,903 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3567 states.
[2020-11-24 22:13:43,906 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3567 states to 3567 states and 3887 transitions.
[2020-11-24 22:13:43,907 INFO  L751         BuchiCegarLoop]: Abstraction has 3567 states and 3887 transitions.
[2020-11-24 22:13:43,907 INFO  L631         BuchiCegarLoop]: Abstraction has 3567 states and 3887 transitions.
[2020-11-24 22:13:43,907 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-24 22:13:43,907 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3567 states and 3887 transitions.
[2020-11-24 22:13:43,910 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 22:13:43,910 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:13:43,910 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:13:43,911 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:13:43,912 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND TRUE   choice == 18
[L7663]              gas := gas - 21000;
[L7664]  COND TRUE   gas >= 0
[L7665]              assume amount_s760 >= 0 && amount_s760 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7666]              assume msgvalue_MSG == 0;
[L7667]  CALL        call burn~uint256~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, amount_s760, data_s760);
[L1518]              havoc __exception;
[L1519]              revert := false;
[L1520]  COND FALSE  !(__exception)
[L1557]  CALL        call burn~uint256~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, amount_s760, data_s760);
[L4564]              havoc empty_s760;
[L4565]  CALL        call _burn~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, msgsender_MSG, amount_s760, data_s760, empty_s760);
[L5029]              __var_22 := null;
[L5030]  COND FALSE  !(!(from_s1272 != null))
[L5034]              __var_23 := null;
[L5035]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1272, from_s1272, null, amount_s1272, data_s1272, operatorData_s1272);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L5035]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1272, from_s1272, null, amount_s1272, data_s1272, operatorData_s1272);
[L5036]  COND FALSE  !(revert)
[L5039]  CALL        call __var_24 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC777[this], amount_s1272);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5039]  RET         call __var_24 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC777[this], amount_s1272);
[L5040]  COND FALSE  !(revert)
[L5043]              _totalSupply_ERC777[this] := __var_24;
[L5044]  CALL        call __var_25 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1272], amount_s1272);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5044]  RET         call __var_25 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1272], amount_s1272);
[L5045]  COND FALSE  !(revert)
[L5048]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1272];
[L5049]              _balances_ERC777[this][from_s1272] := __var_25;
[L5050]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1272];
[L5051]              assert { :EventEmitted "Burned_ERC777" } true;
[L5052]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4565]  RET         call _burn~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, msgsender_MSG, amount_s760, data_s760, empty_s760);
[L4566]  COND FALSE  !(revert)
[L1557]  RET         call burn~uint256~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, amount_s760, data_s760);
[L1558]              assume !revert && gas >= 0;
[L7667]  RET         call burn~uint256~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, amount_s760, data_s760);
[L7795]  RET         call CorralChoice_MMM(this);
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND TRUE   __exception
[L1436]              __tmp__Balance := Balance;
[L1437]              __tmp__DType := DType;
[L1438]              __tmp__Alloc := Alloc;
[L1439]              __tmp__balance_ADDR := balance_ADDR;
[L1440]              __tmp__M_Ref_int := M_Ref_int;
[L1441]              __tmp__sum__balances0 := sum__balances0;
[L1442]              __tmp__M_Ref_bool := M_Ref_bool;
[L1443]              __tmp__sum__defaultOperators1 := sum__defaultOperators1;
[L1444]              __tmp__alloc__operators_ERC777_lvl0 := alloc__operators_ERC777_lvl0;
[L1445]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1446]              __tmp__sum__operators2 := sum__operators2;
[L1447]              __tmp__alloc__revokedDefaultOperators_ERC777_lvl0 := alloc__revokedDefaultOperators_ERC777_lvl0;
[L1448]              __tmp__sum__revokedDefaultOperators3 := sum__revokedDefaultOperators3;
[L1449]              __tmp__alloc__allowances_ERC777_lvl0 := alloc__allowances_ERC777_lvl0;
[L1450]              __tmp__sum__allowances4 := sum__allowances4;
[L1451]              __tmp__M_int_Ref := M_int_Ref;
[L1452]              __tmp__sum := sum;
[L1453]              __tmp__Length := Length;
[L1454]              __tmp__now := now;
[L1455]              __tmp___erc1820_ERC777 := _erc1820_ERC777;
[L1456]              __tmp___balances_ERC777 := _balances_ERC777;
[L1457]              __tmp___totalSupply_ERC777 := _totalSupply_ERC777;
[L1458]              __tmp___name_ERC777 := _name_ERC777;
[L1459]              __tmp___symbol_ERC777 := _symbol_ERC777;
[L1460]              __tmp__TOKENS_SENDER_INTERFACE_HASH_ERC777 := TOKENS_SENDER_INTERFACE_HASH_ERC777;
[L1461]              __tmp__TOKENS_RECIPIENT_INTERFACE_HASH_ERC777 := TOKENS_RECIPIENT_INTERFACE_HASH_ERC777;
[L1462]              __tmp___defaultOperatorsArray_ERC777 := _defaultOperatorsArray_ERC777;
[L1463]              __tmp___defaultOperators_ERC777 := _defaultOperators_ERC777;
[L1464]              __tmp___operators_ERC777 := _operators_ERC777;
[L1465]              __tmp___revokedDefaultOperators_ERC777 := _revokedDefaultOperators_ERC777;
[L1466]              __tmp___allowances_ERC777 := _allowances_ERC777;
[L1467]              __tmp___owner_Ownable := _owner_Ownable;
[L1468]              __tmp___maxSupply_MMM := _maxSupply_MMM;
[L1469]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4500]              __var_10 := null;
[L4501]  COND FALSE  !(!(recipient_s739 != null))
[L4505]              havoc empty_s739;
[L4506]              from_s739 := msgsender_MSG;
[L4507]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5132]              implementer_s1401 := implementer_s1401;
[L5133]              __var_30 := null;
[L5134]  COND FALSE  !(implementer_s1401 != null)
[L4507]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4508]  COND FALSE  !(revert)
[L4511]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5059]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][from_s1325], amount_s1325);
[L4052]  COND FALSE  !(!(b_s297 <= a_s297))
[L4056]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4057]              __ret_0_ := c_s297;
[L5059]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][from_s1325], amount_s1325);
[L5060]  COND FALSE  !(revert)
[L5063]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC777[this][from_s1325];
[L5064]              __tmp___balances_ERC777[this][from_s1325] := __var_26;
[L5065]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC777[this][from_s1325];
[L5066]  CALL        call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][to_s1325], amount_s1325);
[L4028]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4029]  COND TRUE   !(c_s272 >= a_s272)
[L4030]              revert := true;
[L5066]  RET         call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][to_s1325], amount_s1325);
[L5067]  COND TRUE   revert
[L4511]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4512]  COND TRUE   revert
[L1469]  RET         call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1470]              assume revert || gas < 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND TRUE   __exception
[L1436]              __tmp__Balance := Balance;
[L1437]              __tmp__DType := DType;
[L1438]              __tmp__Alloc := Alloc;
[L1439]              __tmp__balance_ADDR := balance_ADDR;
[L1440]              __tmp__M_Ref_int := M_Ref_int;
[L1441]              __tmp__sum__balances0 := sum__balances0;
[L1442]              __tmp__M_Ref_bool := M_Ref_bool;
[L1443]              __tmp__sum__defaultOperators1 := sum__defaultOperators1;
[L1444]              __tmp__alloc__operators_ERC777_lvl0 := alloc__operators_ERC777_lvl0;
[L1445]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1446]              __tmp__sum__operators2 := sum__operators2;
[L1447]              __tmp__alloc__revokedDefaultOperators_ERC777_lvl0 := alloc__revokedDefaultOperators_ERC777_lvl0;
[L1448]              __tmp__sum__revokedDefaultOperators3 := sum__revokedDefaultOperators3;
[L1449]              __tmp__alloc__allowances_ERC777_lvl0 := alloc__allowances_ERC777_lvl0;
[L1450]              __tmp__sum__allowances4 := sum__allowances4;
[L1451]              __tmp__M_int_Ref := M_int_Ref;
[L1452]              __tmp__sum := sum;
[L1453]              __tmp__Length := Length;
[L1454]              __tmp__now := now;
[L1455]              __tmp___erc1820_ERC777 := _erc1820_ERC777;
[L1456]              __tmp___balances_ERC777 := _balances_ERC777;
[L1457]              __tmp___totalSupply_ERC777 := _totalSupply_ERC777;
[L1458]              __tmp___name_ERC777 := _name_ERC777;
[L1459]              __tmp___symbol_ERC777 := _symbol_ERC777;
[L1460]              __tmp__TOKENS_SENDER_INTERFACE_HASH_ERC777 := TOKENS_SENDER_INTERFACE_HASH_ERC777;
[L1461]              __tmp__TOKENS_RECIPIENT_INTERFACE_HASH_ERC777 := TOKENS_RECIPIENT_INTERFACE_HASH_ERC777;
[L1462]              __tmp___defaultOperatorsArray_ERC777 := _defaultOperatorsArray_ERC777;
[L1463]              __tmp___defaultOperators_ERC777 := _defaultOperators_ERC777;
[L1464]              __tmp___operators_ERC777 := _operators_ERC777;
[L1465]              __tmp___revokedDefaultOperators_ERC777 := _revokedDefaultOperators_ERC777;
[L1466]              __tmp___allowances_ERC777 := _allowances_ERC777;
[L1467]              __tmp___owner_Ownable := _owner_Ownable;
[L1468]              __tmp___maxSupply_MMM := _maxSupply_MMM;
[L1469]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4500]              __var_10 := null;
[L4501]  COND FALSE  !(!(recipient_s739 != null))
[L4505]              havoc empty_s739;
[L4506]              from_s739 := msgsender_MSG;
[L4507]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5132]              implementer_s1401 := implementer_s1401;
[L5133]              __var_30 := null;
[L5134]  COND FALSE  !(implementer_s1401 != null)
[L4507]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4508]  COND FALSE  !(revert)
[L4511]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5059]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][from_s1325], amount_s1325);
[L4052]  COND FALSE  !(!(b_s297 <= a_s297))
[L4056]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4057]              __ret_0_ := c_s297;
[L5059]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][from_s1325], amount_s1325);
[L5060]  COND FALSE  !(revert)
[L5063]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC777[this][from_s1325];
[L5064]              __tmp___balances_ERC777[this][from_s1325] := __var_26;
[L5065]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC777[this][from_s1325];
[L5066]  CALL        call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][to_s1325], amount_s1325);
[L4028]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4029]  COND TRUE   !(c_s272 >= a_s272)
[L4030]              revert := true;
[L5066]  RET         call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][to_s1325], amount_s1325);
[L5067]  COND TRUE   revert
[L4511]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4512]  COND TRUE   revert
[L1469]  RET         call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1470]              assume revert || gas < 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:13:43,916 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:13:43,916 INFO  L82        PathProgramCache]: Analyzing trace with hash 208213932, now seen corresponding path program 1 times
[2020-11-24 22:13:43,916 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:13:43,933 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:13:44,279 INFO  L134       CoverageAnalysis]: Checked inductivity of 122 backedges. 4 proven. 1 refuted. 0 times theorem prover too weak. 117 trivial. 0 not checked.
[2020-11-24 22:13:44,279 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 22:13:44,279 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-11-24 22:13:44,280 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:13:44,280 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-11-24 22:13:44,280 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=81, Invalid=975, Unknown=0, NotChecked=0, Total=1056
[2020-11-24 22:13:44,280 INFO  L87              Difference]: Start difference. First operand 3567 states and 3887 transitions. cyclomatic complexity: 326 Second operand 33 states.
[2020-11-24 22:13:51,353 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:13:51,354 INFO  L93              Difference]: Finished difference Result 3670 states and 4037 transitions.
[2020-11-24 22:13:51,354 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-11-24 22:13:51,354 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3670 states and 4037 transitions.
[2020-11-24 22:13:51,360 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 22:13:51,366 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3670 states to 3670 states and 4037 transitions.
[2020-11-24 22:13:51,367 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 828
[2020-11-24 22:13:51,367 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 828
[2020-11-24 22:13:51,367 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3670 states and 4037 transitions.
[2020-11-24 22:13:51,369 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:13:51,369 INFO  L728         BuchiCegarLoop]: Abstraction has 3670 states and 4037 transitions.
[2020-11-24 22:13:51,371 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3670 states and 4037 transitions.
[2020-11-24 22:13:51,386 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3670 to 3569.
[2020-11-24 22:13:51,386 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3569 states.
[2020-11-24 22:13:51,390 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3569 states to 3569 states and 3892 transitions.
[2020-11-24 22:13:51,390 INFO  L751         BuchiCegarLoop]: Abstraction has 3569 states and 3892 transitions.
[2020-11-24 22:13:51,390 INFO  L631         BuchiCegarLoop]: Abstraction has 3569 states and 3892 transitions.
[2020-11-24 22:13:51,390 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-24 22:13:51,390 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3569 states and 3892 transitions.
[2020-11-24 22:13:51,393 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 22:13:51,393 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:13:51,393 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:13:51,395 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:13:51,395 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND TRUE   choice == 13
[L7694]              gas := gas - 21000;
[L7695]  COND TRUE   gas >= 0
[L7696]              assume amount_s921 >= 0 && amount_s921 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7697]              assume msgvalue_MSG == 0;
[L7698]  CALL        call operatorSend~address~address~uint256~bytes~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L1934]              havoc __exception;
[L1935]              revert := false;
[L1936]  COND FALSE  !(__exception)
[L1973]  CALL        call operatorSend~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L4678]  COND FALSE  !(DType[this] == MMM)
[L4683]  COND TRUE   DType[this] == ERC777
[L4684]  CALL        call __var_11 := isOperatorFor~address~address_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921);
[L4579]              __ret_0_ := (operator_s792 == tokenHolder_s792 || (_defaultOperators_ERC777[this][operator_s792] && !_revokedDefaultOperators_ERC777[this][tokenHolder_s792][operator_s792])) || _operators_ERC777[this][tokenHolder_s792][operator_s792];
[L4684]  RET         call __var_11 := isOperatorFor~address~address_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921);
[L4685]  COND FALSE  !(revert)
[L4691]  COND FALSE  !(!__var_11)
[L4695]  CALL        call _send~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921, true);
[L4969]              __var_20 := null;
[L4970]  COND FALSE  !(!(from_s1204 != null))
[L4974]              __var_21 := null;
[L4975]  COND FALSE  !(!(to_s1204 != null))
[L4979]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4979]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4983]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204, requireReceptionAck_s1204);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4987]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204, requireReceptionAck_s1204);
[L4988]  COND FALSE  !(revert)
[L4695]  RET         call _send~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921, true);
[L4696]  COND FALSE  !(revert)
[L1973]  RET         call operatorSend~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L1974]              assume !revert && gas >= 0;
[L7698]  RET         call operatorSend~address~address~uint256~bytes~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L7795]  RET         call CorralChoice_MMM(this);
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((__ret_0_ == true && _totalSupply_ERC777[this] == old(_totalSupply_ERC777[this])) && _balances_ERC777[this] == old(_balances_ERC777[this])) && _allowances_ERC777[this] == old(_allowances_ERC777[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _erc1820_ERC777[this] == old(_erc1820_ERC777[this])) && _name_ERC777[this] == old(_name_ERC777[this])) && _symbol_ERC777[this] == old(_symbol_ERC777[this])) && M_int_Ref[_defaultOperatorsArray_ERC777[this]] == old(M_int_Ref[_defaultOperatorsArray_ERC777[this]])) && _defaultOperators_ERC777[this] == old(_defaultOperators_ERC777[this])) && _operators_ERC777[this] == old(_operators_ERC777[this])) && _revokedDefaultOperators_ERC777[this] == old(_revokedDefaultOperators_ERC777[this]));
[L2]                 revert := revert_hold;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND TRUE   choice == 24
[L7626]              gas := gas - 21000;
[L7627]  COND FALSE  !(gas >= 0)
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:13:51,398 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:13:51,398 INFO  L82        PathProgramCache]: Analyzing trace with hash 2109743155, now seen corresponding path program 1 times
[2020-11-24 22:13:51,399 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:13:51,412 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:13:51,481 INFO  L134       CoverageAnalysis]: Checked inductivity of 122 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 121 trivial. 0 not checked.
[2020-11-24 22:13:51,481 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:13:51,481 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 22:13:51,482 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:13:51,482 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 22:13:51,482 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 22:13:51,482 INFO  L87              Difference]: Start difference. First operand 3569 states and 3892 transitions. cyclomatic complexity: 330 Second operand 4 states.
[2020-11-24 22:13:51,503 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:13:51,504 INFO  L93              Difference]: Finished difference Result 3597 states and 3920 transitions.
[2020-11-24 22:13:51,504 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 22:13:51,504 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3597 states and 3920 transitions.
[2020-11-24 22:13:51,509 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 22:13:51,514 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3597 states to 3589 states and 3912 transitions.
[2020-11-24 22:13:51,514 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 788
[2020-11-24 22:13:51,515 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 788
[2020-11-24 22:13:51,515 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3589 states and 3912 transitions.
[2020-11-24 22:13:51,516 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:13:51,516 INFO  L728         BuchiCegarLoop]: Abstraction has 3589 states and 3912 transitions.
[2020-11-24 22:13:51,519 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3589 states and 3912 transitions.
[2020-11-24 22:13:51,533 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3589 to 3589.
[2020-11-24 22:13:51,533 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3589 states.
[2020-11-24 22:13:51,536 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3589 states to 3589 states and 3912 transitions.
[2020-11-24 22:13:51,537 INFO  L751         BuchiCegarLoop]: Abstraction has 3589 states and 3912 transitions.
[2020-11-24 22:13:51,537 INFO  L631         BuchiCegarLoop]: Abstraction has 3589 states and 3912 transitions.
[2020-11-24 22:13:51,537 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-24 22:13:51,537 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3589 states and 3912 transitions.
[2020-11-24 22:13:51,540 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 22:13:51,540 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:13:51,540 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:13:51,542 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:13:51,542 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND TRUE   choice == 13
[L7694]              gas := gas - 21000;
[L7695]  COND TRUE   gas >= 0
[L7696]              assume amount_s921 >= 0 && amount_s921 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7697]              assume msgvalue_MSG == 0;
[L7698]  CALL        call operatorSend~address~address~uint256~bytes~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L1934]              havoc __exception;
[L1935]              revert := false;
[L1936]  COND FALSE  !(__exception)
[L1973]  CALL        call operatorSend~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L4678]  COND TRUE   DType[this] == MMM
[L4679]  CALL        call __var_11 := isOperatorFor~address~address_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921);
[L4579]              __ret_0_ := (operator_s792 == tokenHolder_s792 || (_defaultOperators_ERC777[this][operator_s792] && !_revokedDefaultOperators_ERC777[this][tokenHolder_s792][operator_s792])) || _operators_ERC777[this][tokenHolder_s792][operator_s792];
[L4679]  RET         call __var_11 := isOperatorFor~address~address_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921);
[L4680]  COND FALSE  !(revert)
[L4691]  COND FALSE  !(!__var_11)
[L4695]  CALL        call _send~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921, true);
[L4969]              __var_20 := null;
[L4970]  COND FALSE  !(!(from_s1204 != null))
[L4974]              __var_21 := null;
[L4975]  COND FALSE  !(!(to_s1204 != null))
[L4979]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4979]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4983]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204, requireReceptionAck_s1204);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND TRUE   implementer_s1457 != null
[L5197]              assume DType[implementer_s1457] == IERC777Recipient;
[L5198]              __var_35 := implementer_s1457;
[L4987]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204, requireReceptionAck_s1204);
[L4988]  COND FALSE  !(revert)
[L4695]  RET         call _send~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921, true);
[L4696]  COND FALSE  !(revert)
[L1973]  RET         call operatorSend~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L1974]              assume !revert && gas >= 0;
[L7698]  RET         call operatorSend~address~address~uint256~bytes~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L7795]  RET         call CorralChoice_MMM(this);
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((__ret_0_ == true && _totalSupply_ERC777[this] == old(_totalSupply_ERC777[this])) && _balances_ERC777[this] == old(_balances_ERC777[this])) && _allowances_ERC777[this] == old(_allowances_ERC777[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _erc1820_ERC777[this] == old(_erc1820_ERC777[this])) && _name_ERC777[this] == old(_name_ERC777[this])) && _symbol_ERC777[this] == old(_symbol_ERC777[this])) && M_int_Ref[_defaultOperatorsArray_ERC777[this]] == old(M_int_Ref[_defaultOperatorsArray_ERC777[this]])) && _defaultOperators_ERC777[this] == old(_defaultOperators_ERC777[this])) && _operators_ERC777[this] == old(_operators_ERC777[this])) && _revokedDefaultOperators_ERC777[this] == old(_revokedDefaultOperators_ERC777[this]));
[L2]                 revert := revert_hold;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND TRUE   __exception
[L1436]              __tmp__Balance := Balance;
[L1437]              __tmp__DType := DType;
[L1438]              __tmp__Alloc := Alloc;
[L1439]              __tmp__balance_ADDR := balance_ADDR;
[L1440]              __tmp__M_Ref_int := M_Ref_int;
[L1441]              __tmp__sum__balances0 := sum__balances0;
[L1442]              __tmp__M_Ref_bool := M_Ref_bool;
[L1443]              __tmp__sum__defaultOperators1 := sum__defaultOperators1;
[L1444]              __tmp__alloc__operators_ERC777_lvl0 := alloc__operators_ERC777_lvl0;
[L1445]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1446]              __tmp__sum__operators2 := sum__operators2;
[L1447]              __tmp__alloc__revokedDefaultOperators_ERC777_lvl0 := alloc__revokedDefaultOperators_ERC777_lvl0;
[L1448]              __tmp__sum__revokedDefaultOperators3 := sum__revokedDefaultOperators3;
[L1449]              __tmp__alloc__allowances_ERC777_lvl0 := alloc__allowances_ERC777_lvl0;
[L1450]              __tmp__sum__allowances4 := sum__allowances4;
[L1451]              __tmp__M_int_Ref := M_int_Ref;
[L1452]              __tmp__sum := sum;
[L1453]              __tmp__Length := Length;
[L1454]              __tmp__now := now;
[L1455]              __tmp___erc1820_ERC777 := _erc1820_ERC777;
[L1456]              __tmp___balances_ERC777 := _balances_ERC777;
[L1457]              __tmp___totalSupply_ERC777 := _totalSupply_ERC777;
[L1458]              __tmp___name_ERC777 := _name_ERC777;
[L1459]              __tmp___symbol_ERC777 := _symbol_ERC777;
[L1460]              __tmp__TOKENS_SENDER_INTERFACE_HASH_ERC777 := TOKENS_SENDER_INTERFACE_HASH_ERC777;
[L1461]              __tmp__TOKENS_RECIPIENT_INTERFACE_HASH_ERC777 := TOKENS_RECIPIENT_INTERFACE_HASH_ERC777;
[L1462]              __tmp___defaultOperatorsArray_ERC777 := _defaultOperatorsArray_ERC777;
[L1463]              __tmp___defaultOperators_ERC777 := _defaultOperators_ERC777;
[L1464]              __tmp___operators_ERC777 := _operators_ERC777;
[L1465]              __tmp___revokedDefaultOperators_ERC777 := _revokedDefaultOperators_ERC777;
[L1466]              __tmp___allowances_ERC777 := _allowances_ERC777;
[L1467]              __tmp___owner_Ownable := _owner_Ownable;
[L1468]              __tmp___maxSupply_MMM := _maxSupply_MMM;
[L1469]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4500]              __var_10 := null;
[L4501]  COND FALSE  !(!(recipient_s739 != null))
[L4505]              havoc empty_s739;
[L4506]              from_s739 := msgsender_MSG;
[L4507]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5132]              implementer_s1401 := implementer_s1401;
[L5133]              __var_30 := null;
[L5134]  COND FALSE  !(implementer_s1401 != null)
[L4507]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4508]  COND FALSE  !(revert)
[L4511]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5059]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][from_s1325], amount_s1325);
[L4052]  COND FALSE  !(!(b_s297 <= a_s297))
[L4056]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4057]              __ret_0_ := c_s297;
[L5059]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][from_s1325], amount_s1325);
[L5060]  COND FALSE  !(revert)
[L5063]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC777[this][from_s1325];
[L5064]              __tmp___balances_ERC777[this][from_s1325] := __var_26;
[L5065]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC777[this][from_s1325];
[L5066]  CALL        call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][to_s1325], amount_s1325);
[L4028]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4029]  COND TRUE   !(c_s272 >= a_s272)
[L4030]              revert := true;
[L5066]  RET         call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][to_s1325], amount_s1325);
[L5067]  COND TRUE   revert
[L4511]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4512]  COND TRUE   revert
[L1469]  RET         call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1470]              assume revert || gas < 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:13:51,546 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:13:51,546 INFO  L82        PathProgramCache]: Analyzing trace with hash 101513028, now seen corresponding path program 1 times
[2020-11-24 22:13:51,547 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:13:51,577 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:13:53,470 INFO  L134       CoverageAnalysis]: Checked inductivity of 122 backedges. 0 proven. 84 refuted. 0 times theorem prover too weak. 38 trivial. 0 not checked.
[2020-11-24 22:13:53,470 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 22:13:53,470 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [43] total 43
[2020-11-24 22:13:53,470 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:13:53,471 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 44 interpolants.
[2020-11-24 22:13:53,471 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=137, Invalid=1755, Unknown=0, NotChecked=0, Total=1892
[2020-11-24 22:13:53,471 INFO  L87              Difference]: Start difference. First operand 3589 states and 3912 transitions. cyclomatic complexity: 330 Second operand 44 states.
[2020-11-24 22:14:02,187 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:14:02,187 INFO  L93              Difference]: Finished difference Result 3614 states and 3975 transitions.
[2020-11-24 22:14:02,188 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-24 22:14:02,188 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3614 states and 3975 transitions.
[2020-11-24 22:14:02,194 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 22:14:02,200 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3614 states to 3614 states and 3975 transitions.
[2020-11-24 22:14:02,200 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 801
[2020-11-24 22:14:02,201 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 801
[2020-11-24 22:14:02,201 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3614 states and 3975 transitions.
[2020-11-24 22:14:02,203 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:14:02,203 INFO  L728         BuchiCegarLoop]: Abstraction has 3614 states and 3975 transitions.
[2020-11-24 22:14:02,205 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3614 states and 3975 transitions.
[2020-11-24 22:14:02,218 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3614 to 3604.
[2020-11-24 22:14:02,218 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3604 states.
[2020-11-24 22:14:02,222 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3604 states to 3604 states and 3941 transitions.
[2020-11-24 22:14:02,222 INFO  L751         BuchiCegarLoop]: Abstraction has 3604 states and 3941 transitions.
[2020-11-24 22:14:02,222 INFO  L631         BuchiCegarLoop]: Abstraction has 3604 states and 3941 transitions.
[2020-11-24 22:14:02,222 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-24 22:14:02,222 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3604 states and 3941 transitions.
[2020-11-24 22:14:02,225 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 22:14:02,225 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:14:02,225 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:14:02,227 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:14:02,227 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND TRUE   choice == 13
[L7694]              gas := gas - 21000;
[L7695]  COND TRUE   gas >= 0
[L7696]              assume amount_s921 >= 0 && amount_s921 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7697]              assume msgvalue_MSG == 0;
[L7698]  CALL        call operatorSend~address~address~uint256~bytes~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L1934]              havoc __exception;
[L1935]              revert := false;
[L1936]  COND FALSE  !(__exception)
[L1973]  CALL        call operatorSend~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L4678]  COND TRUE   DType[this] == MMM
[L4679]  CALL        call __var_11 := isOperatorFor~address~address_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921);
[L4579]              __ret_0_ := (operator_s792 == tokenHolder_s792 || (_defaultOperators_ERC777[this][operator_s792] && !_revokedDefaultOperators_ERC777[this][tokenHolder_s792][operator_s792])) || _operators_ERC777[this][tokenHolder_s792][operator_s792];
[L4679]  RET         call __var_11 := isOperatorFor~address~address_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921);
[L4680]  COND FALSE  !(revert)
[L4691]  COND FALSE  !(!__var_11)
[L4695]  CALL        call _send~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921, true);
[L4969]              __var_20 := null;
[L4970]  COND FALSE  !(!(from_s1204 != null))
[L4974]              __var_21 := null;
[L4975]  COND FALSE  !(!(to_s1204 != null))
[L4979]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4979]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4983]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204, requireReceptionAck_s1204);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND TRUE   implementer_s1457 != null
[L5197]              assume DType[implementer_s1457] == IERC777Recipient;
[L5198]              __var_35 := implementer_s1457;
[L4987]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204, requireReceptionAck_s1204);
[L4988]  COND FALSE  !(revert)
[L4695]  RET         call _send~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921, true);
[L4696]  COND FALSE  !(revert)
[L1973]  RET         call operatorSend~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L1974]              assume !revert && gas >= 0;
[L7698]  RET         call operatorSend~address~address~uint256~bytes~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, sender_s921, recipient_s921, amount_s921, data_s921, operatorData_s921);
[L7795]  RET         call CorralChoice_MMM(this);
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND TRUE   __exception
[L1436]              __tmp__Balance := Balance;
[L1437]              __tmp__DType := DType;
[L1438]              __tmp__Alloc := Alloc;
[L1439]              __tmp__balance_ADDR := balance_ADDR;
[L1440]              __tmp__M_Ref_int := M_Ref_int;
[L1441]              __tmp__sum__balances0 := sum__balances0;
[L1442]              __tmp__M_Ref_bool := M_Ref_bool;
[L1443]              __tmp__sum__defaultOperators1 := sum__defaultOperators1;
[L1444]              __tmp__alloc__operators_ERC777_lvl0 := alloc__operators_ERC777_lvl0;
[L1445]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1446]              __tmp__sum__operators2 := sum__operators2;
[L1447]              __tmp__alloc__revokedDefaultOperators_ERC777_lvl0 := alloc__revokedDefaultOperators_ERC777_lvl0;
[L1448]              __tmp__sum__revokedDefaultOperators3 := sum__revokedDefaultOperators3;
[L1449]              __tmp__alloc__allowances_ERC777_lvl0 := alloc__allowances_ERC777_lvl0;
[L1450]              __tmp__sum__allowances4 := sum__allowances4;
[L1451]              __tmp__M_int_Ref := M_int_Ref;
[L1452]              __tmp__sum := sum;
[L1453]              __tmp__Length := Length;
[L1454]              __tmp__now := now;
[L1455]              __tmp___erc1820_ERC777 := _erc1820_ERC777;
[L1456]              __tmp___balances_ERC777 := _balances_ERC777;
[L1457]              __tmp___totalSupply_ERC777 := _totalSupply_ERC777;
[L1458]              __tmp___name_ERC777 := _name_ERC777;
[L1459]              __tmp___symbol_ERC777 := _symbol_ERC777;
[L1460]              __tmp__TOKENS_SENDER_INTERFACE_HASH_ERC777 := TOKENS_SENDER_INTERFACE_HASH_ERC777;
[L1461]              __tmp__TOKENS_RECIPIENT_INTERFACE_HASH_ERC777 := TOKENS_RECIPIENT_INTERFACE_HASH_ERC777;
[L1462]              __tmp___defaultOperatorsArray_ERC777 := _defaultOperatorsArray_ERC777;
[L1463]              __tmp___defaultOperators_ERC777 := _defaultOperators_ERC777;
[L1464]              __tmp___operators_ERC777 := _operators_ERC777;
[L1465]              __tmp___revokedDefaultOperators_ERC777 := _revokedDefaultOperators_ERC777;
[L1466]              __tmp___allowances_ERC777 := _allowances_ERC777;
[L1467]              __tmp___owner_Ownable := _owner_Ownable;
[L1468]              __tmp___maxSupply_MMM := _maxSupply_MMM;
[L1469]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4500]              __var_10 := null;
[L4501]  COND FALSE  !(!(recipient_s739 != null))
[L4505]              havoc empty_s739;
[L4506]              from_s739 := msgsender_MSG;
[L4507]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5132]              implementer_s1401 := implementer_s1401;
[L5133]              __var_30 := null;
[L5134]  COND FALSE  !(implementer_s1401 != null)
[L4507]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4508]  COND FALSE  !(revert)
[L4511]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5059]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][from_s1325], amount_s1325);
[L4052]  COND FALSE  !(!(b_s297 <= a_s297))
[L4056]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4057]              __ret_0_ := c_s297;
[L5059]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][from_s1325], amount_s1325);
[L5060]  COND FALSE  !(revert)
[L5063]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC777[this][from_s1325];
[L5064]              __tmp___balances_ERC777[this][from_s1325] := __var_26;
[L5065]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC777[this][from_s1325];
[L5066]  CALL        call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][to_s1325], amount_s1325);
[L4028]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4029]  COND TRUE   !(c_s272 >= a_s272)
[L4030]              revert := true;
[L5066]  RET         call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][to_s1325], amount_s1325);
[L5067]  COND TRUE   revert
[L4511]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4512]  COND TRUE   revert
[L1469]  RET         call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1470]              assume revert || gas < 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND TRUE   __exception
[L1436]              __tmp__Balance := Balance;
[L1437]              __tmp__DType := DType;
[L1438]              __tmp__Alloc := Alloc;
[L1439]              __tmp__balance_ADDR := balance_ADDR;
[L1440]              __tmp__M_Ref_int := M_Ref_int;
[L1441]              __tmp__sum__balances0 := sum__balances0;
[L1442]              __tmp__M_Ref_bool := M_Ref_bool;
[L1443]              __tmp__sum__defaultOperators1 := sum__defaultOperators1;
[L1444]              __tmp__alloc__operators_ERC777_lvl0 := alloc__operators_ERC777_lvl0;
[L1445]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1446]              __tmp__sum__operators2 := sum__operators2;
[L1447]              __tmp__alloc__revokedDefaultOperators_ERC777_lvl0 := alloc__revokedDefaultOperators_ERC777_lvl0;
[L1448]              __tmp__sum__revokedDefaultOperators3 := sum__revokedDefaultOperators3;
[L1449]              __tmp__alloc__allowances_ERC777_lvl0 := alloc__allowances_ERC777_lvl0;
[L1450]              __tmp__sum__allowances4 := sum__allowances4;
[L1451]              __tmp__M_int_Ref := M_int_Ref;
[L1452]              __tmp__sum := sum;
[L1453]              __tmp__Length := Length;
[L1454]              __tmp__now := now;
[L1455]              __tmp___erc1820_ERC777 := _erc1820_ERC777;
[L1456]              __tmp___balances_ERC777 := _balances_ERC777;
[L1457]              __tmp___totalSupply_ERC777 := _totalSupply_ERC777;
[L1458]              __tmp___name_ERC777 := _name_ERC777;
[L1459]              __tmp___symbol_ERC777 := _symbol_ERC777;
[L1460]              __tmp__TOKENS_SENDER_INTERFACE_HASH_ERC777 := TOKENS_SENDER_INTERFACE_HASH_ERC777;
[L1461]              __tmp__TOKENS_RECIPIENT_INTERFACE_HASH_ERC777 := TOKENS_RECIPIENT_INTERFACE_HASH_ERC777;
[L1462]              __tmp___defaultOperatorsArray_ERC777 := _defaultOperatorsArray_ERC777;
[L1463]              __tmp___defaultOperators_ERC777 := _defaultOperators_ERC777;
[L1464]              __tmp___operators_ERC777 := _operators_ERC777;
[L1465]              __tmp___revokedDefaultOperators_ERC777 := _revokedDefaultOperators_ERC777;
[L1466]              __tmp___allowances_ERC777 := _allowances_ERC777;
[L1467]              __tmp___owner_Ownable := _owner_Ownable;
[L1468]              __tmp___maxSupply_MMM := _maxSupply_MMM;
[L1469]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4500]              __var_10 := null;
[L4501]  COND FALSE  !(!(recipient_s739 != null))
[L4505]              havoc empty_s739;
[L4506]              from_s739 := msgsender_MSG;
[L4507]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5132]              implementer_s1401 := implementer_s1401;
[L5133]              __var_30 := null;
[L5134]  COND FALSE  !(implementer_s1401 != null)
[L4507]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4508]  COND FALSE  !(revert)
[L4511]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5059]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][from_s1325], amount_s1325);
[L4052]  COND FALSE  !(!(b_s297 <= a_s297))
[L4056]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4057]              __ret_0_ := c_s297;
[L5059]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][from_s1325], amount_s1325);
[L5060]  COND FALSE  !(revert)
[L5063]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC777[this][from_s1325];
[L5064]              __tmp___balances_ERC777[this][from_s1325] := __var_26;
[L5065]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC777[this][from_s1325];
[L5066]  CALL        call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][to_s1325], amount_s1325);
[L4028]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4029]  COND TRUE   !(c_s272 >= a_s272)
[L4030]              revert := true;
[L5066]  RET         call __var_27 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC777[this][to_s1325], amount_s1325);
[L5067]  COND TRUE   revert
[L4511]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4512]  COND TRUE   revert
[L1469]  RET         call __ret_0_ := transfer~address~uint256_ERC777__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1470]              assume revert || gas < 0;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:14:02,232 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:14:02,232 INFO  L82        PathProgramCache]: Analyzing trace with hash 422304346, now seen corresponding path program 1 times
[2020-11-24 22:14:02,233 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:14:02,253 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:14:02,395 INFO  L134       CoverageAnalysis]: Checked inductivity of 122 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 122 trivial. 0 not checked.
[2020-11-24 22:14:02,395 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:14:02,396 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-24 22:14:02,396 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:14:02,396 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-24 22:14:02,396 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=178, Unknown=0, NotChecked=0, Total=210
[2020-11-24 22:14:02,396 INFO  L87              Difference]: Start difference. First operand 3604 states and 3941 transitions. cyclomatic complexity: 346 Second operand 15 states.
[2020-11-24 22:14:04,120 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:14:04,120 INFO  L93              Difference]: Finished difference Result 3680 states and 4039 transitions.
[2020-11-24 22:14:04,120 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-24 22:14:04,121 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3680 states and 4039 transitions.
[2020-11-24 22:14:04,127 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 22:14:04,133 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3680 states to 3612 states and 3969 transitions.
[2020-11-24 22:14:04,134 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 827
[2020-11-24 22:14:04,134 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 827
[2020-11-24 22:14:04,134 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3612 states and 3969 transitions.
[2020-11-24 22:14:04,136 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:14:04,136 INFO  L728         BuchiCegarLoop]: Abstraction has 3612 states and 3969 transitions.
[2020-11-24 22:14:04,138 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3612 states and 3969 transitions.
[2020-11-24 22:14:04,151 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3612 to 3479.
[2020-11-24 22:14:04,151 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3479 states.
[2020-11-24 22:14:04,154 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3479 states to 3479 states and 3790 transitions.
[2020-11-24 22:14:04,154 INFO  L751         BuchiCegarLoop]: Abstraction has 3479 states and 3790 transitions.
[2020-11-24 22:14:04,154 INFO  L631         BuchiCegarLoop]: Abstraction has 3479 states and 3790 transitions.
[2020-11-24 22:14:04,154 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-24 22:14:04,154 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3479 states and 3790 transitions.
[2020-11-24 22:14:04,157 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 22:14:04,157 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:14:04,158 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:14:04,159 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:14:04,159 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND TRUE   choice == 19
[L7656]              gas := gas - 21000;
[L7657]  COND TRUE   gas >= 0
[L7658]              assume amount_s682 >= 0 && amount_s682 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7659]              assume msgvalue_MSG == 0;
[L7660]  CALL        call send~address~uint256~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s682, amount_s682, data_s682);
[L1349]              havoc __exception;
[L1350]              revert := false;
[L1351]  COND FALSE  !(__exception)
[L1388]  CALL        call send~address~uint256~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s682, amount_s682, data_s682);
[L4488]              havoc empty_s682;
[L4489]  CALL        call _send~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, msgsender_MSG, recipient_s682, amount_s682, data_s682, empty_s682, true);
[L4969]              __var_20 := null;
[L4970]  COND FALSE  !(!(from_s1204 != null))
[L4974]              __var_21 := null;
[L4975]  COND FALSE  !(!(to_s1204 != null))
[L4979]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4979]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4983]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204, requireReceptionAck_s1204);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND TRUE   implementer_s1457 != null
[L5197]              assume DType[implementer_s1457] == IERC777Recipient;
[L5198]              __var_35 := implementer_s1457;
[L4987]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1204, from_s1204, to_s1204, amount_s1204, userData_s1204, operatorData_s1204, requireReceptionAck_s1204);
[L4988]  COND FALSE  !(revert)
[L4489]  RET         call _send~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, msgsender_MSG, recipient_s682, amount_s682, data_s682, empty_s682, true);
[L4490]  COND FALSE  !(revert)
[L1388]  RET         call send~address~uint256~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s682, amount_s682, data_s682);
[L1389]              assume !revert && gas >= 0;
[L7660]  RET         call send~address~uint256~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s682, amount_s682, data_s682);
[L7795]  RET         call CorralChoice_MMM(this);
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((__ret_0_ == true && _totalSupply_ERC777[this] == old(_totalSupply_ERC777[this])) && _balances_ERC777[this] == old(_balances_ERC777[this])) && _allowances_ERC777[this] == old(_allowances_ERC777[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _erc1820_ERC777[this] == old(_erc1820_ERC777[this])) && _name_ERC777[this] == old(_name_ERC777[this])) && _symbol_ERC777[this] == old(_symbol_ERC777[this])) && M_int_Ref[_defaultOperatorsArray_ERC777[this]] == old(M_int_Ref[_defaultOperatorsArray_ERC777[this]])) && _defaultOperators_ERC777[this] == old(_defaultOperators_ERC777[this])) && _operators_ERC777[this] == old(_operators_ERC777[this])) && _revokedDefaultOperators_ERC777[this] == old(_revokedDefaultOperators_ERC777[this]));
[L2]                 revert := revert_hold;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND TRUE   choice == 24
[L7626]              gas := gas - 21000;
[L7627]  COND FALSE  !(gas >= 0)
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:14:04,162 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:14:04,162 INFO  L82        PathProgramCache]: Analyzing trace with hash -701923448, now seen corresponding path program 1 times
[2020-11-24 22:14:04,163 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:14:04,190 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:14:05,028 INFO  L134       CoverageAnalysis]: Checked inductivity of 116 backedges. 0 proven. 78 refuted. 0 times theorem prover too weak. 38 trivial. 0 not checked.
[2020-11-24 22:14:05,029 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 22:14:05,029 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [45] total 45
[2020-11-24 22:14:05,029 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:14:05,029 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 46 interpolants.
[2020-11-24 22:14:05,030 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=149, Invalid=1921, Unknown=0, NotChecked=0, Total=2070
[2020-11-24 22:14:05,030 INFO  L87              Difference]: Start difference. First operand 3479 states and 3790 transitions. cyclomatic complexity: 317 Second operand 46 states.
[2020-11-24 22:14:18,483 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:14:18,483 INFO  L93              Difference]: Finished difference Result 4645 states and 5183 transitions.
[2020-11-24 22:14:18,483 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 49 states. 
[2020-11-24 22:14:18,483 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4645 states and 5183 transitions.
[2020-11-24 22:14:18,491 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 22:14:18,499 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4645 states to 4645 states and 5183 transitions.
[2020-11-24 22:14:18,499 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1150
[2020-11-24 22:14:18,500 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1150
[2020-11-24 22:14:18,500 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4645 states and 5183 transitions.
[2020-11-24 22:14:18,502 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:14:18,502 INFO  L728         BuchiCegarLoop]: Abstraction has 4645 states and 5183 transitions.
[2020-11-24 22:14:18,505 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4645 states and 5183 transitions.
[2020-11-24 22:14:18,523 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4645 to 4590.
[2020-11-24 22:14:18,523 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4590 states.
[2020-11-24 22:14:18,528 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4590 states to 4590 states and 5096 transitions.
[2020-11-24 22:14:18,528 INFO  L751         BuchiCegarLoop]: Abstraction has 4590 states and 5096 transitions.
[2020-11-24 22:14:18,528 INFO  L631         BuchiCegarLoop]: Abstraction has 4590 states and 5096 transitions.
[2020-11-24 22:14:18,528 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-24 22:14:18,528 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4590 states and 5096 transitions.
[2020-11-24 22:14:18,533 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 22:14:18,533 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:14:18,533 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:14:18,534 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:14:18,534 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND TRUE   choice == 12
[L7701]              gas := gas - 21000;
[L7702]  COND TRUE   gas >= 0
[L7703]              assume amount_s951 >= 0 && amount_s951 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7704]              assume msgvalue_MSG == 0;
[L7705]  CALL        call operatorBurn~address~uint256~bytes~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, account_s951, amount_s951, data_s951, operatorData_s951);
[L2019]              havoc __exception;
[L2020]              revert := false;
[L2021]  COND FALSE  !(__exception)
[L2058]  CALL        call operatorBurn~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, account_s951, amount_s951, data_s951, operatorData_s951);
[L4730]  COND TRUE   DType[this] == MMM
[L4731]  CALL        call __var_12 := isOperatorFor~address~address_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, account_s951);
[L4579]              __ret_0_ := (operator_s792 == tokenHolder_s792 || (_defaultOperators_ERC777[this][operator_s792] && !_revokedDefaultOperators_ERC777[this][tokenHolder_s792][operator_s792])) || _operators_ERC777[this][tokenHolder_s792][operator_s792];
[L4731]  RET         call __var_12 := isOperatorFor~address~address_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, account_s951);
[L4732]  COND FALSE  !(revert)
[L4743]  COND FALSE  !(!__var_12)
[L4747]  CALL        call _burn~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, account_s951, amount_s951, data_s951, operatorData_s951);
[L5029]              __var_22 := null;
[L5030]  COND FALSE  !(!(from_s1272 != null))
[L5034]              __var_23 := null;
[L5035]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1272, from_s1272, null, amount_s1272, data_s1272, operatorData_s1272);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L5035]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1272, from_s1272, null, amount_s1272, data_s1272, operatorData_s1272);
[L5036]  COND FALSE  !(revert)
[L5039]  CALL        call __var_24 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC777[this], amount_s1272);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5039]  RET         call __var_24 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC777[this], amount_s1272);
[L5040]  COND FALSE  !(revert)
[L5043]              _totalSupply_ERC777[this] := __var_24;
[L5044]  CALL        call __var_25 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1272], amount_s1272);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5044]  RET         call __var_25 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1272], amount_s1272);
[L5045]  COND FALSE  !(revert)
[L5048]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1272];
[L5049]              _balances_ERC777[this][from_s1272] := __var_25;
[L5050]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1272];
[L5051]              assert { :EventEmitted "Burned_ERC777" } true;
[L5052]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4747]  RET         call _burn~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, account_s951, amount_s951, data_s951, operatorData_s951);
[L4748]  COND FALSE  !(revert)
[L2058]  RET         call operatorBurn~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, account_s951, amount_s951, data_s951, operatorData_s951);
[L2059]              assume !revert && gas >= 0;
[L7705]  RET         call operatorBurn~address~uint256~bytes~bytes_ERC777(this, msgsender_MSG, msgvalue_MSG, account_s951, amount_s951, data_s951, operatorData_s951);
[L7795]  RET         call CorralChoice_MMM(this);
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((__ret_0_ == true && _totalSupply_ERC777[this] == old(_totalSupply_ERC777[this])) && _balances_ERC777[this] == old(_balances_ERC777[this])) && _allowances_ERC777[this] == old(_allowances_ERC777[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _erc1820_ERC777[this] == old(_erc1820_ERC777[this])) && _name_ERC777[this] == old(_name_ERC777[this])) && _symbol_ERC777[this] == old(_symbol_ERC777[this])) && M_int_Ref[_defaultOperatorsArray_ERC777[this]] == old(M_int_Ref[_defaultOperatorsArray_ERC777[this]])) && _defaultOperators_ERC777[this] == old(_defaultOperators_ERC777[this])) && _operators_ERC777[this] == old(_operators_ERC777[this])) && _revokedDefaultOperators_ERC777[this] == old(_revokedDefaultOperators_ERC777[this]));
[L2]                 revert := revert_hold;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND TRUE   choice == 24
[L7626]              gas := gas - 21000;
[L7627]  COND FALSE  !(gas >= 0)
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:14:18,537 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:14:18,537 INFO  L82        PathProgramCache]: Analyzing trace with hash -2040934230, now seen corresponding path program 1 times
[2020-11-24 22:14:18,538 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:14:18,560 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:14:18,958 INFO  L134       CoverageAnalysis]: Checked inductivity of 128 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 124 trivial. 0 not checked.
[2020-11-24 22:14:18,958 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 22:14:18,958 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [31] imperfect sequences [] total 31
[2020-11-24 22:14:18,959 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:14:18,959 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-24 22:14:18,959 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=101, Invalid=891, Unknown=0, NotChecked=0, Total=992
[2020-11-24 22:14:18,959 INFO  L87              Difference]: Start difference. First operand 4590 states and 5096 transitions. cyclomatic complexity: 515 Second operand 32 states.
[2020-11-24 22:14:24,772 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:14:24,772 INFO  L93              Difference]: Finished difference Result 4619 states and 5164 transitions.
[2020-11-24 22:14:24,772 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-24 22:14:24,772 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4619 states and 5164 transitions.
[2020-11-24 22:14:24,781 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 22:14:24,788 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4619 states to 4619 states and 5164 transitions.
[2020-11-24 22:14:24,788 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1145
[2020-11-24 22:14:24,789 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1145
[2020-11-24 22:14:24,789 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4619 states and 5164 transitions.
[2020-11-24 22:14:24,791 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:14:24,791 INFO  L728         BuchiCegarLoop]: Abstraction has 4619 states and 5164 transitions.
[2020-11-24 22:14:24,794 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4619 states and 5164 transitions.
[2020-11-24 22:14:24,811 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4619 to 4600.
[2020-11-24 22:14:24,811 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4600 states.
[2020-11-24 22:14:24,815 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4600 states to 4600 states and 5137 transitions.
[2020-11-24 22:14:24,815 INFO  L751         BuchiCegarLoop]: Abstraction has 4600 states and 5137 transitions.
[2020-11-24 22:14:24,815 INFO  L631         BuchiCegarLoop]: Abstraction has 4600 states and 5137 transitions.
[2020-11-24 22:14:24,815 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-24 22:14:24,815 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4600 states and 5137 transitions.
[2020-11-24 22:14:24,820 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 22:14:24,820 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:14:24,820 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:14:24,821 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:14:24,821 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((__ret_0_ == true && _totalSupply_ERC777[this] == old(_totalSupply_ERC777[this])) && _balances_ERC777[this] == old(_balances_ERC777[this])) && _allowances_ERC777[this] == old(_allowances_ERC777[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _erc1820_ERC777[this] == old(_erc1820_ERC777[this])) && _name_ERC777[this] == old(_name_ERC777[this])) && _symbol_ERC777[this] == old(_symbol_ERC777[this])) && M_int_Ref[_defaultOperatorsArray_ERC777[this]] == old(M_int_Ref[_defaultOperatorsArray_ERC777[this]])) && _defaultOperators_ERC777[this] == old(_defaultOperators_ERC777[this])) && _operators_ERC777[this] == old(_operators_ERC777[this])) && _revokedDefaultOperators_ERC777[this] == old(_revokedDefaultOperators_ERC777[this]));
[L2]                 revert := revert_hold;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((__ret_0_ == true && _totalSupply_ERC777[this] == old(_totalSupply_ERC777[this])) && _balances_ERC777[this] == old(_balances_ERC777[this])) && _allowances_ERC777[this] == old(_allowances_ERC777[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _erc1820_ERC777[this] == old(_erc1820_ERC777[this])) && _name_ERC777[this] == old(_name_ERC777[this])) && _symbol_ERC777[this] == old(_symbol_ERC777[this])) && M_int_Ref[_defaultOperatorsArray_ERC777[this]] == old(M_int_Ref[_defaultOperatorsArray_ERC777[this]])) && _defaultOperators_ERC777[this] == old(_defaultOperators_ERC777[this])) && _operators_ERC777[this] == old(_operators_ERC777[this])) && _revokedDefaultOperators_ERC777[this] == old(_revokedDefaultOperators_ERC777[this]));
[L2]                 revert := revert_hold;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((__ret_0_ == true && _totalSupply_ERC777[this] == old(_totalSupply_ERC777[this])) && _balances_ERC777[this] == old(_balances_ERC777[this])) && _allowances_ERC777[this] == old(_allowances_ERC777[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _erc1820_ERC777[this] == old(_erc1820_ERC777[this])) && _name_ERC777[this] == old(_name_ERC777[this])) && _symbol_ERC777[this] == old(_symbol_ERC777[this])) && M_int_Ref[_defaultOperatorsArray_ERC777[this]] == old(M_int_Ref[_defaultOperatorsArray_ERC777[this]])) && _defaultOperators_ERC777[this] == old(_defaultOperators_ERC777[this])) && _operators_ERC777[this] == old(_operators_ERC777[this])) && _revokedDefaultOperators_ERC777[this] == old(_revokedDefaultOperators_ERC777[this]));
[L2]                 revert := revert_hold;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:14:24,824 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:14:24,824 INFO  L82        PathProgramCache]: Analyzing trace with hash 1651833299, now seen corresponding path program 1 times
[2020-11-24 22:14:24,825 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:14:24,846 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 22:14:25,184 INFO  L134       CoverageAnalysis]: Checked inductivity of 133 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 130 trivial. 0 not checked.
[2020-11-24 22:14:25,184 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 22:14:25,184 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [27] total 27
[2020-11-24 22:14:25,185 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 22:14:25,185 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-24 22:14:25,185 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=72, Invalid=630, Unknown=0, NotChecked=0, Total=702
[2020-11-24 22:14:25,185 INFO  L87              Difference]: Start difference. First operand 4600 states and 5137 transitions. cyclomatic complexity: 549 Second operand 27 states.
[2020-11-24 22:14:29,646 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 22:14:29,647 INFO  L93              Difference]: Finished difference Result 4619 states and 5171 transitions.
[2020-11-24 22:14:29,647 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-24 22:14:29,647 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4619 states and 5171 transitions.
[2020-11-24 22:14:29,656 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 22:14:29,664 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4619 states to 4619 states and 5171 transitions.
[2020-11-24 22:14:29,664 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1143
[2020-11-24 22:14:29,665 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1143
[2020-11-24 22:14:29,665 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4619 states and 5171 transitions.
[2020-11-24 22:14:29,667 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 22:14:29,667 INFO  L728         BuchiCegarLoop]: Abstraction has 4619 states and 5171 transitions.
[2020-11-24 22:14:29,670 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4619 states and 5171 transitions.
[2020-11-24 22:14:29,687 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4619 to 4602.
[2020-11-24 22:14:29,687 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4602 states.
[2020-11-24 22:14:29,692 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4602 states to 4602 states and 5146 transitions.
[2020-11-24 22:14:29,692 INFO  L751         BuchiCegarLoop]: Abstraction has 4602 states and 5146 transitions.
[2020-11-24 22:14:29,692 INFO  L631         BuchiCegarLoop]: Abstraction has 4602 states and 5146 transitions.
[2020-11-24 22:14:29,692 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-24 22:14:29,692 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4602 states and 5146 transitions.
[2020-11-24 22:14:29,697 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 22:14:29,697 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 22:14:29,697 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 22:14:29,698 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 22:14:29,698 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC7770 := false;
[L2]                 call_transfer_ERC7770 := false;
[L2]     CALL        call main();
[L7785]              assume null == 0;
[L7786]  CALL        call this := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L7786]  RET         call this := FreshRefGenerator__success();
[L7787]              assume now >= 0;
[L7788]              assume DType[this] == MMM;
[L7789]              assume msgvalue_MSG == 0;
[L7790]              gas := gas - 53000;
[L7791]  CALL        call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L2821]              havoc __exception;
[L2822]              revert := false;
[L2823]  COND FALSE  !(__exception)
[L2860]  CALL        call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L5421]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L5421]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L5422]  COND FALSE  !(revert)
[L5425]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L5425]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5426]  COND FALSE  !(revert)
[L5429]  CALL        call __var_44 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L5429]  RET         call __var_44 := FreshRefGenerator__success();
[L5430]  COND FALSE  !(revert)
[L5433]              Length[__var_44] := 0;
[L5434]              __var_43 := __var_44;
[L5435]  CALL        call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L4389]  CALL        call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L3891]  CALL        call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3876]              assume msgsender_MSG != null;
[L3877]              Balance[this] := 0;
[L3891]  RET         call IERC777_IERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3892]  COND FALSE  !(revert)
[L4389]  RET         call IERC777_IERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3987]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3972]              assume msgsender_MSG != null;
[L3973]              Balance[this] := 0;
[L3987]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3988]  COND FALSE  !(revert)
[L4393]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  COND FALSE  !(revert)
[L4397]  CALL        call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4305]              assume msgsender_MSG != null;
[L4306]              Balance[this] := 0;
[L4307]              _balances_ERC777[this] := zeroRefintArr();
[L4308]              sum__balances0[this] := 0;
[L4309]              _totalSupply_ERC777[this] := 0;
[L4310]              _name_ERC777[this] := -1488944962;
[L4311]              _symbol_ERC777[this] := -1488944962;
[L4312]              TOKENS_SENDER_INTERFACE_HASH_ERC777[this] := 18936552921575092301472466748482491067159488139731697543124572343800628504725;
[L4313]              TOKENS_RECIPIENT_INTERFACE_HASH_ERC777[this] := -35050735901709401846926806449422499789573591386021029871886258173058026781381;
[L4315]  CALL        call __var_9 := FreshRefGenerator__success();
[L3859]              havoc newRef;
[L3860]              assume Alloc[newRef] == false;
[L3861]              Alloc[newRef] := true;
[L3862]              assume newRef != null;
[L4315]  RET         call __var_9 := FreshRefGenerator__success();
[L4316]  COND FALSE  !(revert)
[L4319]              _defaultOperatorsArray_ERC777[this] := __var_9;
[L4320]              assume Length[_defaultOperatorsArray_ERC777[this]] == 0;
[L4321]              _defaultOperators_ERC777[this] := zeroRefboolArr();
[L4322]              _operators_ERC777[this] := zeroRefRefboolArr();
[L4323]              _revokedDefaultOperators_ERC777[this] := zeroRefRefboolArr();
[L4324]              _allowances_ERC777[this] := zeroRefRefintArr();
[L4325]              sum__allowances4[this] := 0;
[L4327]              _name_ERC777[this] := name_s605;
[L4328]              _symbol_ERC777[this] := symbol_s605;
[L4329]              _defaultOperatorsArray_ERC777[this] := defaultOperators_s605;
[L4330]              i_s605 := 0;
[L4331]  COND FALSE  !(i_s605 < Length[_defaultOperatorsArray_ERC777[this]])
[L4339]              __var_2 := this;
[L4340]              __var_3 := keccak256(874679271);
[L4341]              assume __var_3 != 0;
[L4342]              __var_4 := this;
[L4344]              __var_6 := this;
[L4345]              __var_7 := keccak256(-2132820306);
[L4346]              assume __var_7 != 0;
[L4347]              __var_8 := this;
[L4397]  RET         call ERC777_ERC777_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s605, symbol_s605, defaultOperators_s605);
[L4398]  COND FALSE  !(revert)
[L5435]  RET         call ERC777_ERC777__success(this, msgsender_MSG, msgvalue_MSG, 269097386, 269097386, __var_43);
[L5436]  COND FALSE  !(revert)
[L5439]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5243]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5225]              assume msgsender_MSG != null;
[L5226]              Balance[this] := 0;
[L5227]              _owner_Ownable[this] := null;
[L5229]              _owner_Ownable[this] := msgsender_MSG;
[L5230]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L5243]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5244]  COND FALSE  !(revert)
[L5439]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5440]  COND FALSE  !(revert)
[L5443]  CALL        call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5378]              assume msgsender_MSG != null;
[L5379]              Balance[this] := 0;
[L5380]              _maxSupply_MMM[this] := nonlinearMul(5 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5443]  RET         call MMM_MMM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5444]  COND FALSE  !(revert)
[L2860]  RET         call MMM_MMM__success(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L7791]  RET         call MMM_MMM(this, msgsender_MSG, msgvalue_MSG);
[L7792]              assume !revert && gas >= 0;
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND FALSE  !(choice == 11)
[L7714]  COND FALSE  !(choice == 10)
[L7720]  COND FALSE  !(choice == 9)
[L7727]  COND FALSE  !(choice == 8)
[L7734]  COND FALSE  !(choice == 7)
[L7740]  COND FALSE  !(choice == 6)
[L7746]  COND FALSE  !(choice == 5)
[L7752]  COND FALSE  !(choice == 4)
[L7758]  COND FALSE  !(choice == 3)
[L7764]  COND FALSE  !(choice == 2)
[L7770]  COND TRUE   choice == 1
[L7771]              gas := gas - 21000;
[L7772]  COND TRUE   gas >= 0
[L7773]              assume _amount_s1641 >= 0 && _amount_s1641 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7774]              assume msgvalue_MSG == 0;
[L7775]  CALL        call mint~address~uint256_MMM(this, msgsender_MSG, msgvalue_MSG, _address_s1641, _amount_s1641);
[L2906]              havoc __exception;
[L2907]              revert := false;
[L2908]  COND FALSE  !(__exception)
[L2945]  CALL        call mint~address~uint256_MMM__success(this, msgsender_MSG, msgvalue_MSG, _address_s1641, _amount_s1641);
[L5474]  CALL        call noOverflow_pre__success(this, msgsender_MSG, msgvalue_MSG, _amount_s1641);
[L6813]  COND TRUE   DType[this] == MMM
[L6814]  CALL        call __var_42 := totalSupply_ERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L4459]              __ret_0_ := _totalSupply_ERC777[this];
[L6814]  RET         call __var_42 := totalSupply_ERC777__success(this, msgsender_MSG, msgvalue_MSG);
[L6815]  COND FALSE  !(revert)
[L6821]  CALL        call __var_41 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_42, _amt_s1602);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L6821]  RET         call __var_41 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_42, _amt_s1602);
[L6822]  COND FALSE  !(revert)
[L6825]  COND FALSE  !(!(_maxSupply_MMM[this] >= __var_41))
[L5474]  RET         call noOverflow_pre__success(this, msgsender_MSG, msgvalue_MSG, _amount_s1641);
[L5475]  COND FALSE  !(revert)
[L5478]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6768]  COND TRUE   DType[this] == MMM
[L6769]  CALL        call __var_38 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5269]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L6769]  RET         call __var_38 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6770]  COND FALSE  !(revert)
[L6781]  COND FALSE  !(!__var_38)
[L5478]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5479]  COND FALSE  !(revert)
[L5482]              havoc empty_s1641;
[L5483]  COND TRUE   DType[this] == MMM
[L5484]  CALL        call _mint~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _address_s1641, _amount_s1641, empty_s1641, empty_s1641);
[L4911]              __var_16 := null;
[L4912]  COND FALSE  !(!(account_s1140 != null))
[L4916]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC777[this], amount_s1140);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L4916]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC777[this], amount_s1140);
[L4917]  COND FALSE  !(revert)
[L4920]              _totalSupply_ERC777[this] := __var_17;
[L4921]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][account_s1140], amount_s1140);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L4921]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][account_s1140], amount_s1140);
[L4922]  COND FALSE  !(revert)
[L4925]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][account_s1140];
[L4926]              _balances_ERC777[this][account_s1140] := __var_18;
[L4927]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][account_s1140];
[L4928]              __var_19 := null;
[L4929]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1140, null, account_s1140, amount_s1140, userData_s1140, operatorData_s1140, true);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND TRUE   implementer_s1457 != null
[L5197]              assume DType[implementer_s1457] == IERC777Recipient;
[L5198]              __var_35 := implementer_s1457;
[L4929]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, operator_s1140, null, account_s1140, amount_s1140, userData_s1140, operatorData_s1140, true);
[L4930]  COND FALSE  !(revert)
[L4933]              assert { :EventEmitted "Minted_ERC777" } true;
[L4934]              assert { :EventEmitted "Transfer_ERC777" } true;
[L5484]  RET         call _mint~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _address_s1641, _amount_s1641, empty_s1641, empty_s1641);
[L5485]  COND FALSE  !(revert)
[L2945]  RET         call mint~address~uint256_MMM__success(this, msgsender_MSG, msgvalue_MSG, _address_s1641, _amount_s1641);
[L2946]              assume !revert && gas >= 0;
[L7775]  RET         call mint~address~uint256_MMM(this, msgsender_MSG, msgvalue_MSG, _address_s1641, _amount_s1641);
[L7795]  RET         call CorralChoice_MMM(this);
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND FALSE  !(choice == 24)
[L7631]  COND FALSE  !(choice == 23)
[L7637]  COND FALSE  !(choice == 22)
[L7643]  COND FALSE  !(choice == 21)
[L7649]  COND FALSE  !(choice == 20)
[L7655]  COND FALSE  !(choice == 19)
[L7662]  COND FALSE  !(choice == 18)
[L7669]  COND FALSE  !(choice == 17)
[L7675]  COND FALSE  !(choice == 16)
[L7681]  COND FALSE  !(choice == 15)
[L7687]  COND FALSE  !(choice == 14)
[L7693]  COND FALSE  !(choice == 13)
[L7700]  COND FALSE  !(choice == 12)
[L7707]  COND TRUE   choice == 11
[L7708]              gas := gas - 21000;
[L7709]  COND TRUE   gas >= 0
[L7710]              assume amount_s739 >= 0 && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7711]              assume msgvalue_MSG == 0;
[L7712]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s739 && amount_s739 <= _balances_ERC777[this][msgsender_MSG]) && amount_s739 >= 0) && amount_s739 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][recipient_s739] >= 0) && _balances_ERC777[this][recipient_s739] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC777[this][msgsender_MSG] >= 0) && _balances_ERC777[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC7770 := true;
[L2]                 call_transfer_ERC7770 := false;
[L2]                 revert := revert_hold;
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1472]  CALL        call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L4528]              __var_10 := null;
[L4529]  COND FALSE  !(!(recipient_s739 != null))
[L4533]              havoc empty_s739;
[L4534]              from_s739 := msgsender_MSG;
[L4535]  CALL        call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5149]              implementer_s1401 := implementer_s1401;
[L5150]              __var_30 := null;
[L5151]  COND FALSE  !(implementer_s1401 != null)
[L4535]  RET         call _callTokensToSend~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4536]  COND FALSE  !(revert)
[L4539]  CALL        call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L5079]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L4064]  COND FALSE  !(!(b_s297 <= a_s297))
[L4068]              c_s297 := (a_s297 - b_s297) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4069]              __ret_0_ := c_s297;
[L5079]  RET         call __var_26 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][from_s1325], amount_s1325);
[L5080]  COND FALSE  !(revert)
[L5083]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][from_s1325];
[L5084]              _balances_ERC777[this][from_s1325] := __var_26;
[L5085]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][from_s1325];
[L5086]  CALL        call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L4040]              c_s272 := (a_s272 + b_s272) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4041]  COND FALSE  !(!(c_s272 >= a_s272))
[L4045]              __ret_0_ := c_s272;
[L5086]  RET         call __var_27 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC777[this][to_s1325], amount_s1325);
[L5087]  COND FALSE  !(revert)
[L5090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC777[this][to_s1325];
[L5091]              _balances_ERC777[this][to_s1325] := __var_27;
[L5092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC777[this][to_s1325];
[L5093]              assert { :EventEmitted "Sent_ERC777" } true;
[L5094]              assert { :EventEmitted "Transfer_ERC777" } true;
[L4539]  RET         call _move~address~address~address~uint256~bytes~bytes_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739);
[L4540]  COND FALSE  !(revert)
[L4543]  CALL        call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L5194]              implementer_s1457 := implementer_s1457;
[L5195]              __var_34 := null;
[L5196]  COND FALSE  !(implementer_s1457 != null)
[L5200]  COND FALSE  !(requireReceptionAck_s1457)
[L4543]  RET         call _callTokensReceived~address~address~address~uint256~bytes~bytes~bool_ERC777__success(this, msgsender_MSG, msgvalue_MSG, from_s739, from_s739, recipient_s739, amount_s739, empty_s739, empty_s739, false);
[L4544]  COND FALSE  !(revert)
[L4547]              __ret_0_ := true;
[L1472]  RET         call __ret_0_ := transfer~address~uint256_ERC777__success(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L1473]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((__ret_0_ == true && _totalSupply_ERC777[this] == old(_totalSupply_ERC777[this])) && _balances_ERC777[this] == old(_balances_ERC777[this])) && _allowances_ERC777[this] == old(_allowances_ERC777[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _erc1820_ERC777[this] == old(_erc1820_ERC777[this])) && _name_ERC777[this] == old(_name_ERC777[this])) && _symbol_ERC777[this] == old(_symbol_ERC777[this])) && M_int_Ref[_defaultOperatorsArray_ERC777[this]] == old(M_int_Ref[_defaultOperatorsArray_ERC777[this]])) && _defaultOperators_ERC777[this] == old(_defaultOperators_ERC777[this])) && _operators_ERC777[this] == old(_operators_ERC777[this])) && _revokedDefaultOperators_ERC777[this] == old(_revokedDefaultOperators_ERC777[this]));
[L2]                 revert := revert_hold;
[L7712]  RET         call __ret_0_transfer := transfer~address~uint256_ERC777(this, msgsender_MSG, msgvalue_MSG, recipient_s739, amount_s739);
[L7795]  RET         call CorralChoice_MMM(this);

Loop:
[L7795]  CALL        call CorralChoice_MMM(this);
[L7555]              havoc msgsender_MSG;
[L7556]              havoc msgvalue_MSG;
[L7557]              havoc choice;
[L7558]              havoc __ret_0_name;
[L7559]              havoc __ret_0_symbol;
[L7560]              havoc __ret_0_granularity;
[L7561]              havoc __ret_0_totalSupply;
[L7562]              havoc tokenHolder_s657;
[L7563]              havoc __ret_0_balanceOf;
[L7564]              havoc recipient_s682;
[L7565]              havoc amount_s682;
[L7566]              havoc data_s682;
[L7567]              havoc amount_s760;
[L7568]              havoc data_s760;
[L7569]              havoc operator_s792;
[L7570]              havoc tokenHolder_s792;
[L7571]              havoc __ret_0_isOperatorFor;
[L7572]              havoc operator_s835;
[L7573]              havoc operator_s878;
[L7574]              havoc __ret_0_defaultOperators;
[L7575]              havoc sender_s921;
[L7576]              havoc recipient_s921;
[L7577]              havoc amount_s921;
[L7578]              havoc data_s921;
[L7579]              havoc operatorData_s921;
[L7580]              havoc account_s951;
[L7581]              havoc amount_s951;
[L7582]              havoc data_s951;
[L7583]              havoc operatorData_s951;
[L7584]              havoc recipient_s739;
[L7585]              havoc amount_s739;
[L7586]              havoc __ret_0_transfer;
[L7587]              havoc holder_s967;
[L7588]              havoc spender_s967;
[L7589]              havoc __ret_0_allowance;
[L7590]              havoc spender_s990;
[L7591]              havoc value_s990;
[L7592]              havoc __ret_0_approve;
[L7593]              havoc holder_s1071;
[L7594]              havoc recipient_s1071;
[L7595]              havoc amount_s1071;
[L7596]              havoc __ret_0_transferFrom;
[L7597]              havoc name_s605;
[L7598]              havoc symbol_s605;
[L7599]              havoc defaultOperators_s605;
[L7600]              havoc __ret_0_decimals;
[L7601]              havoc __ret_0_owner;
[L7602]              havoc __ret_0_isOwner;
[L7603]              havoc newOwner_s1543;
[L7604]              havoc __ret_0__maxSupply;
[L7605]              havoc _address_s1641;
[L7606]              havoc _amount_s1641;
[L7607]              havoc tmpNow;
[L7608]              havoc gas;
[L7609]              assume gas > 4000000 && gas <= 8000000;
[L7610]              tmpNow := now;
[L7611]              havoc now;
[L7612]              assume now > tmpNow;
[L7613]              assume msgsender_MSG != null;
[L7614]              assume DType[msgsender_MSG] != IERC777;
[L7615]              assume DType[msgsender_MSG] != IERC777Recipient;
[L7616]              assume DType[msgsender_MSG] != IERC777Sender;
[L7617]              assume DType[msgsender_MSG] != IERC20;
[L7618]              assume DType[msgsender_MSG] != SafeMath;
[L7619]              assume DType[msgsender_MSG] != Address;
[L7620]              assume DType[msgsender_MSG] != IERC1820Registry;
[L7621]              assume DType[msgsender_MSG] != ERC777;
[L7622]              assume DType[msgsender_MSG] != Ownable;
[L7623]              assume DType[msgsender_MSG] != MMM;
[L7624]              Alloc[msgsender_MSG] := true;
[L7625]  COND TRUE   choice == 24
[L7626]              gas := gas - 21000;
[L7627]  COND FALSE  !(gas >= 0)
[L7795]  RET         call CorralChoice_MMM(this);

[2020-11-24 22:14:29,701 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 22:14:29,701 INFO  L82        PathProgramCache]: Analyzing trace with hash 256796974, now seen corresponding path program 1 times
[2020-11-24 22:14:29,702 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 22:14:29,737 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-24 22:28:11,429 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkStemFeasibility(LassoCheck.java:1080)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:994)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-24 22:28:11,431 INFO  L168              Benchmark]: Toolchain (without parser) took 898502.75 ms. Allocated memory was 1.0 GB in the beginning and 6.6 GB in the end (delta: 5.6 GB). Free memory was 935.2 MB in the beginning and 1.2 GB in the end (delta: -305.4 MB). Peak memory consumption was 6.2 GB. Max. memory is 15.3 GB.
[2020-11-24 22:28:11,432 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 22:28:11,432 INFO  L168              Benchmark]: Boogie Preprocessor took 132.99 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 913.7 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-24 22:28:11,432 INFO  L168              Benchmark]: UtopiaSpecLang took 85.77 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 22:28:11,433 INFO  L168              Benchmark]: Boogie Printer took 23.29 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 22:28:11,433 INFO  L168              Benchmark]: RCFGBuilder took 1172.52 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 57.7 MB). Free memory was 897.6 MB in the beginning and 970.7 MB in the end (delta: -73.1 MB). Peak memory consumption was 185.5 MB. Max. memory is 15.3 GB.
[2020-11-24 22:28:11,433 INFO  L168              Benchmark]: UtopiaLTL2Aut took 42.16 ms. Allocated memory is still 1.1 GB. Free memory was 970.7 MB in the beginning and 957.8 MB in the end (delta: 12.9 MB). Peak memory consumption was 12.9 MB. Max. memory is 15.3 GB.
[2020-11-24 22:28:11,433 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1955.93 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 166.7 MB). Free memory was 957.8 MB in the beginning and 753.1 MB in the end (delta: 204.7 MB). Peak memory consumption was 454.8 MB. Max. memory is 15.3 GB.
[2020-11-24 22:28:11,434 INFO  L168              Benchmark]: BlockEncodingV2 took 180.25 ms. Allocated memory is still 1.3 GB. Free memory was 753.1 MB in the beginning and 651.2 MB in the end (delta: 101.9 MB). Peak memory consumption was 101.9 MB. Max. memory is 15.3 GB.
[2020-11-24 22:28:11,434 INFO  L168              Benchmark]: BuchiAutomizer took 894906.70 ms. Allocated memory was 1.3 GB in the beginning and 6.6 GB in the end (delta: 5.3 GB). Free memory was 651.2 MB in the beginning and 1.2 GB in the end (delta: -589.4 MB). Peak memory consumption was 5.7 GB. Max. memory is 15.3 GB.
[2020-11-24 22:28:11,436 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    6806 locations, 11833 edges
  - StatisticsResult: Encoded RCFG
    6714 locations, 11592 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 132.99 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 913.7 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 85.77 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 23.29 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1172.52 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 57.7 MB). Free memory was 897.6 MB in the beginning and 970.7 MB in the end (delta: -73.1 MB). Peak memory consumption was 185.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 42.16 ms. Allocated memory is still 1.1 GB. Free memory was 970.7 MB in the beginning and 957.8 MB in the end (delta: 12.9 MB). Peak memory consumption was 12.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1955.93 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 166.7 MB). Free memory was 957.8 MB in the beginning and 753.1 MB in the end (delta: 204.7 MB). Peak memory consumption was 454.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 180.25 ms. Allocated memory is still 1.3 GB. Free memory was 753.1 MB in the beginning and 651.2 MB in the end (delta: 101.9 MB). Peak memory consumption was 101.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 894906.70 ms. Allocated memory was 1.3 GB in the beginning and 6.6 GB in the end (delta: 5.3 GB). Free memory was 651.2 MB in the beginning and 1.2 GB in the end (delta: -589.4 MB). Peak memory consumption was 5.7 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2824 locations, 3647 edges
  - StatisticsResult: BuchiProgram size
    6806 locations, 11833 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
