This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 09:27:01,530 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 09:27:01,532 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 09:27:01,544 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 09:27:01,545 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 09:27:01,545 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 09:27:01,546 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 09:27:01,548 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 09:27:01,549 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 09:27:01,550 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 09:27:01,551 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 09:27:01,551 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 09:27:01,552 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 09:27:01,553 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 09:27:01,554 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 09:27:01,554 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 09:27:01,555 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 09:27:01,556 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 09:27:01,558 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 09:27:01,559 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 09:27:01,560 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 09:27:01,560 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 09:27:01,562 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 09:27:01,562 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 09:27:01,563 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 09:27:01,563 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 09:27:01,563 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 09:27:01,564 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 09:27:01,564 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 09:27:01,564 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 09:27:01,565 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 09:27:01,565 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 09:27:01,566 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 09:27:01,566 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 09:27:01,567 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 09:27:01,567 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 09:27:01,568 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 09:27:01,568 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 09:27:01,568 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 09:27:01,569 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 09:27:01,569 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 09:27:01,569 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 09:27:01,577 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 09:27:01,577 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 09:27:01,578 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 09:27:01,578 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 09:27:01,579 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 09:27:01,579 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 09:27:01,579 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 09:27:01,579 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 09:27:01,579 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 09:27:01,579 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 09:27:01,579 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 09:27:01,579 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 09:27:01,579 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 09:27:01,580 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 09:27:01,580 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 09:27:01,580 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 09:27:01,580 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 09:27:01,580 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 09:27:01,580 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 09:27:01,580 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 09:27:01,580 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 09:27:01,580 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 09:27:01,580 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 09:27:01,581 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 09:27:01,581 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 09:27:01,581 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 09:27:01,604 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 09:27:01,617 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 09:27:01,620 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 09:27:01,621 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 09:27:01,621 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 09:27:01,622 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transferfrom-fail.bpl
[2020-11-25 09:27:01,622 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transferfrom-fail.bpl'
[2020-11-25 09:27:01,718 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 09:27:01,719 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 09:27:01,720 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 09:27:01,720 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 09:27:01,720 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 09:27:01,738 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:27:01" (1/1) ...
[2020-11-25 09:27:01,739 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:27:01" (1/1) ...
[2020-11-25 09:27:01,787 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:27:01" (1/1) ...
[2020-11-25 09:27:01,788 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:27:01" (1/1) ...
[2020-11-25 09:27:01,818 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:27:01" (1/1) ...
[2020-11-25 09:27:01,832 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:27:01" (1/1) ...
[2020-11-25 09:27:01,843 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:27:01" (1/1) ...
[2020-11-25 09:27:01,857 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 09:27:01,858 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 09:27:01,858 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 09:27:01,860 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 09:27:01,864 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:27:01" (1/1) ...
[2020-11-25 09:27:01,882 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(StandardToken.transferFrom(from, to, value), from != to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(StandardToken.transferFrom)))
[2020-11-25 09:27:01,888 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(StandardToken.transferFrom(from, to, value), from != to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(StandardToken.transferFrom)))
[2020-11-25 09:27:01,897 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(StandardToken.transferFrom(from, to, value), from != to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(StandardToken.transferFrom)))
[2020-11-25 09:27:01,905 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( _from_s435!=_to_s435 && ( ( _value_s435>balances_BasicToken[this][_from_s435] || _value_s435>allowed_StandardToken[this][_from_s435][msg.sender] ) || ( balances_BasicToken[this][_to_s435] + _value_s435 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && _value_s435>=0 ) && _value_s435<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s435]>=0 ) && balances_BasicToken[this][_to_s435]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_from_s435]>=0 ) && balances_BasicToken[this][_from_s435]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_StandardToken[this][_from_s435][msg.sender]>=0 ) && allowed_StandardToken[this][_from_s435][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[_from_s435,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>],IdentifierExpression[_to_s435,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s435,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s435,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]]],BinaryExpression[COMPGT,IdentifierExpression[_value_s435,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s435,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_to_s435,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IdentifierExpression[_value_s435,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s435,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s435,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_to_s435,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_to_s435,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s435,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s435,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s435,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[_from_s435,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_StandardToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 09:27:01,912 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(StandardToken.transferFrom(from, to, value), from != to && (value > balances_BasicToken[this][from] || value > allowed_StandardToken[this][from][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][from] >= 0 &&  balances_BasicToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_StandardToken[this][from][msg.sender] >= 0 && allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(StandardToken.transferFrom)))
[2020-11-25 09:27:01,912 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_StandardToken0) ==> ( <>AP(fail_transferFrom_StandardToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 09:27:01,925 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:27:01 PropertyContainer
[2020-11-25 09:27:01,925 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 09:27:01,925 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 09:27:01,926 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 09:27:01,926 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 09:27:01,927 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:27:01" (1/2) ...
[2020-11-25 09:27:01,927 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 09:27:01,927 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 09:27:01,951 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:27:01" (2/2) ...
[2020-11-25 09:27:01,951 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 09:27:01,951 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 09:27:01,951 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 09:27:01,952 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 09:27:01,952 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:27:01" (1/2) ...
[2020-11-25 09:27:02,013 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 09:27:02,013 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:27:02,013 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 09:27:02,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 09:27:02,013 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 09:27:02,013 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 09:27:02,013 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 09:27:02,014 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 09:27:02,014 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 09:27:02,014 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 09:27:02,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 09:27:02,014 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-25 09:27:02,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-25 09:27:02,014 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 09:27:02,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 09:27:02,014 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 09:27:02,015 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 09:27:02,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 09:27:02,015 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 09:27:02,015 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 09:27:02,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 09:27:02,015 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 09:27:02,015 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 09:27:02,015 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 09:27:02,015 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 09:27:02,016 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 09:27:02,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 09:27:02,016 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 09:27:02,016 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 09:27:02,016 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 09:27:02,016 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 09:27:02,016 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 09:27:02,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 09:27:02,016 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-25 09:27:02,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-25 09:27:02,016 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 09:27:02,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 09:27:02,017 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 09:27:02,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 09:27:02,017 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 09:27:02,017 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 09:27:02,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 09:27:02,017 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 09:27:02,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 09:27:02,017 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 09:27:02,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 09:27:02,017 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 09:27:02,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 09:27:02,017 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 09:27:02,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 09:27:02,017 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 09:27:02,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 09:27:02,018 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 09:27:02,018 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-25 09:27:02,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-25 09:27:02,018 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-25 09:27:02,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-25 09:27:02,018 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-25 09:27:02,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-25 09:27:02,018 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-25 09:27:02,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-25 09:27:02,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken_NoBaseCtor__success
[2020-11-25 09:27:02,018 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken
[2020-11-25 09:27:02,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken
[2020-11-25 09:27:02,019 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_CappedToken
[2020-11-25 09:27:02,019 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_CappedToken
[2020-11-25 09:27:02,019 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_CappedToken
[2020-11-25 09:27:02,019 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_CappedToken
[2020-11-25 09:27:02,019 INFO  L130     BoogieDeclarations]: Found specification of procedure XNC_XNC_NoBaseCtor__success
[2020-11-25 09:27:02,019 INFO  L130     BoogieDeclarations]: Found specification of procedure XNC_XNC
[2020-11-25 09:27:02,019 INFO  L138     BoogieDeclarations]: Found implementation of procedure XNC_XNC
[2020-11-25 09:27:02,019 INFO  L130     BoogieDeclarations]: Found specification of procedure name_XNC
[2020-11-25 09:27:02,019 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_XNC
[2020-11-25 09:27:02,019 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_XNC
[2020-11-25 09:27:02,019 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_XNC
[2020-11-25 09:27:02,019 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_XNC
[2020-11-25 09:27:02,020 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_XNC
[2020-11-25 09:27:02,020 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 09:27:02,020 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 09:27:02,020 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 09:27:02,020 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 09:27:02,020 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-25 09:27:02,020 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-25 09:27:02,020 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 09:27:02,020 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 09:27:02,020 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 09:27:02,020 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 09:27:02,020 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 09:27:02,021 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 09:27:02,021 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 09:27:02,021 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 09:27:02,021 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 09:27:02,021 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 09:27:02,021 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 09:27:02,021 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 09:27:02,021 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-25 09:27:02,021 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-25 09:27:02,021 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CappedToken
[2020-11-25 09:27:02,022 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_CappedToken
[2020-11-25 09:27:02,022 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_XNC
[2020-11-25 09:27:02,022 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 09:27:02,022 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 09:27:02,022 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:27:02,022 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 09:27:02,022 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 09:27:02,022 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 09:27:02,022 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 09:27:02,022 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 09:27:02,023 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 09:27:02,023 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 09:27:02,023 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 09:27:02,023 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 09:27:02,023 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-25 09:27:02,023 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-25 09:27:02,023 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 09:27:02,023 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 09:27:02,023 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 09:27:02,023 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 09:27:02,024 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 09:27:02,024 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 09:27:02,024 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 09:27:02,024 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 09:27:02,024 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 09:27:02,024 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 09:27:02,024 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 09:27:02,024 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 09:27:02,024 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 09:27:02,025 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 09:27:02,025 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-25 09:27:02,025 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-25 09:27:02,025 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 09:27:02,025 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 09:27:02,025 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 09:27:02,025 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 09:27:02,025 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 09:27:02,025 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 09:27:02,025 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 09:27:02,026 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 09:27:02,026 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 09:27:02,026 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 09:27:02,026 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 09:27:02,026 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 09:27:02,026 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 09:27:02,026 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 09:27:02,026 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 09:27:02,026 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 09:27:02,026 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 09:27:02,027 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 09:27:02,027 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-25 09:27:02,027 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-25 09:27:02,027 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-25 09:27:02,027 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 09:27:02,027 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-25 09:27:02,027 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-25 09:27:02,027 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-25 09:27:02,027 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-25 09:27:02,027 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken_NoBaseCtor__fail
[2020-11-25 09:27:02,028 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken__success
[2020-11-25 09:27:02,028 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken__fail
[2020-11-25 09:27:02,028 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_CappedToken__success
[2020-11-25 09:27:02,028 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_CappedToken__fail
[2020-11-25 09:27:02,028 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_CappedToken__success
[2020-11-25 09:27:02,028 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_CappedToken__fail
[2020-11-25 09:27:02,028 INFO  L130     BoogieDeclarations]: Found specification of procedure XNC_XNC_NoBaseCtor__fail
[2020-11-25 09:27:02,028 INFO  L130     BoogieDeclarations]: Found specification of procedure XNC_XNC__success
[2020-11-25 09:27:02,028 INFO  L130     BoogieDeclarations]: Found specification of procedure XNC_XNC__fail
[2020-11-25 09:27:02,028 INFO  L130     BoogieDeclarations]: Found specification of procedure name_XNC__success
[2020-11-25 09:27:02,029 INFO  L130     BoogieDeclarations]: Found specification of procedure name_XNC__fail
[2020-11-25 09:27:02,029 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_XNC__success
[2020-11-25 09:27:02,029 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_XNC__fail
[2020-11-25 09:27:02,029 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_XNC__success
[2020-11-25 09:27:02,029 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_XNC__fail
[2020-11-25 09:27:02,029 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 09:27:02,029 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 09:27:02,029 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 09:27:02,029 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 09:27:02,029 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-25 09:27:02,029 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-25 09:27:02,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 09:27:02,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 09:27:02,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:27:02,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:27:02,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 09:27:02,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 09:27:02,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 09:27:02,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 09:27:02,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 09:27:02,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 09:27:02,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 09:27:02,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 09:27:02,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 09:27:02,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 09:27:02,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 09:27:02,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 09:27:02,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 09:27:02,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 09:27:02,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-25 09:27:02,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-25 09:27:02,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 09:27:02,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 09:27:02,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 09:27:02,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 09:27:02,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 09:27:02,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 09:27:02,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 09:27:02,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 09:27:02,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 09:27:02,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 09:27:02,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 09:27:02,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 09:27:02,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 09:27:02,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 09:27:02,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 09:27:02,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 09:27:02,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 09:27:02,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 09:27:02,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-25 09:27:02,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-25 09:27:02,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 09:27:02,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 09:27:02,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 09:27:02,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 09:27:02,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 09:27:02,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 09:27:02,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 09:27:02,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 09:27:02,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 09:27:02,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 09:27:02,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 09:27:02,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 09:27:02,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 09:27:02,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 09:27:02,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 09:27:02,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 09:27:02,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 09:27:02,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 09:27:02,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 09:27:02,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 09:27:02,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-25 09:27:02,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-25 09:27:02,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 09:27:02,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-25 09:27:02,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-25 09:27:02,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-25 09:27:02,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-25 09:27:02,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-25 09:27:02,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken_NoBaseCtor__fail
[2020-11-25 09:27:02,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken_NoBaseCtor__success
[2020-11-25 09:27:02,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken__fail
[2020-11-25 09:27:02,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken__success
[2020-11-25 09:27:02,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_CappedToken__fail
[2020-11-25 09:27:02,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_CappedToken__success
[2020-11-25 09:27:02,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_CappedToken__fail
[2020-11-25 09:27:02,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_CappedToken__success
[2020-11-25 09:27:02,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure XNC_XNC_NoBaseCtor__fail
[2020-11-25 09:27:02,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure XNC_XNC_NoBaseCtor__success
[2020-11-25 09:27:02,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure XNC_XNC__fail
[2020-11-25 09:27:02,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure XNC_XNC__success
[2020-11-25 09:27:02,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_XNC__fail
[2020-11-25 09:27:02,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_XNC__success
[2020-11-25 09:27:02,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_XNC__fail
[2020-11-25 09:27:02,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_XNC__success
[2020-11-25 09:27:02,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_XNC__fail
[2020-11-25 09:27:02,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_XNC__success
[2020-11-25 09:27:02,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 09:27:02,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 09:27:02,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 09:27:02,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 09:27:02,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 09:27:02,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 09:27:02,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 09:27:02,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 09:27:02,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-25 09:27:02,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-25 09:27:02,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-25 09:27:02,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-25 09:27:02,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 09:27:02,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 09:27:02,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 09:27:02,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 09:27:02,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 09:27:02,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 09:27:02,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 09:27:02,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 09:27:02,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 09:27:02,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 09:27:02,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 09:27:02,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 09:27:02,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-25 09:27:02,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-25 09:27:02,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CappedToken
[2020-11-25 09:27:02,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_CappedToken
[2020-11-25 09:27:02,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_XNC
[2020-11-25 09:27:02,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 09:27:02,040 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 09:27:02,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 09:27:02,275 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:27:02,275 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:27:02,974 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 09:27:02,974 INFO  L286             CfgBuilder]: Removed 9 assue(true) statements.
[2020-11-25 09:27:02,976 INFO  L202        PluginConnector]: Adding new model XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:27:02 BoogieIcfgContainer
[2020-11-25 09:27:02,976 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:27:01" (2/2) ...
[2020-11-25 09:27:02,976 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 09:27:02,977 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@41d03b6c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:27:02, skipping insertion in model container
[2020-11-25 09:27:02,977 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 09:27:02,977 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 09:27:02,977 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 09:27:02,978 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 09:27:02,979 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:27:01" (1/3) ...
[2020-11-25 09:27:02,979 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1d2439ea and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:27:02, skipping insertion in model container
[2020-11-25 09:27:02,979 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:27:01" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 09:27:03,017 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:27:03 NWAContainer
[2020-11-25 09:27:03,018 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 09:27:03,018 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 09:27:03,018 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 09:27:03,019 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 09:27:03,019 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:27:02" (3/4) ...
[2020-11-25 09:27:03,020 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@4944f69c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:27:03, skipping insertion in model container
[2020-11-25 09:27:03,020 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:27:03" (4/4) ...
[2020-11-25 09:27:03,023 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 09:27:03,028 INFO  L110   BuchiProductObserver]: Initial RCFG 2301 locations, 3213 edges
[2020-11-25 09:27:03,028 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 09:27:03,040 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 09:27:04,879 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 09:27:04,886 INFO  L110   BuchiProductObserver]: BuchiProgram size 5814 locations, 10614 edges
[2020-11-25 09:27:04,887 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:27:04 BoogieIcfgContainer
[2020-11-25 09:27:04,887 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 09:27:04,887 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 09:27:04,887 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 09:27:04,888 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 09:27:04,889 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:27:04" (1/1) ...
[2020-11-25 09:27:05,011 INFO  L313           BlockEncoder]: Initial Icfg 5814 locations, 10614 edges
[2020-11-25 09:27:05,011 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 09:27:05,011 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 09:27:05,011 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 09:27:05,012 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 09:27:05,025 INFO  L70    emoveInfeasibleEdges]: Removed 102 edges and 21 locations because of local infeasibility
[2020-11-25 09:27:05,039 INFO  L70        RemoveSinkStates]: Removed 58 edges and 31 locations by removing sink states
[2020-11-25 09:27:05,051 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 09:27:05,054 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 09:27:05,058 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 09:27:05,058 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 09:27:05,061 INFO  L313           BlockEncoder]: Encoded RCFG 5724 locations, 10398 edges
[2020-11-25 09:27:05,062 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:27:05 BasicIcfg
[2020-11-25 09:27:05,062 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 09:27:05,062 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 09:27:05,062 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 09:27:05,064 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 09:27:05,064 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:27:05,064 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:27:01" (1/6) ...
[2020-11-25 09:27:05,065 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@23688671 and model type XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:27:05, skipping insertion in model container
[2020-11-25 09:27:05,065 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:27:05,065 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:27:01" (2/6) ...
[2020-11-25 09:27:05,066 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@23688671 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:27:05, skipping insertion in model container
[2020-11-25 09:27:05,066 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:27:05,066 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:27:02" (3/6) ...
[2020-11-25 09:27:05,066 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@23688671 and model type XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:27:05, skipping insertion in model container
[2020-11-25 09:27:05,066 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:27:05,066 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:27:03" (4/6) ...
[2020-11-25 09:27:05,066 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@23688671 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:27:05, skipping insertion in model container
[2020-11-25 09:27:05,066 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:27:05,066 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:27:04" (5/6) ...
[2020-11-25 09:27:05,066 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@23688671 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 09:27:05, skipping insertion in model container
[2020-11-25 09:27:05,067 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:27:05,067 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:27:05" (6/6) ...
[2020-11-25 09:27:05,068 INFO  L404   chiAutomizerObserver]: Analyzing ICFG XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transferfrom-fail.bpl_BEv2
[2020-11-25 09:27:05,098 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 09:27:05,098 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 09:27:05,098 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 09:27:05,098 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 09:27:05,098 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 09:27:05,099 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 09:27:05,099 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 09:27:05,099 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 09:27:05,099 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 09:27:05,137 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5724 states.
[2020-11-25 09:27:05,189 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:27:05,189 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:27:05,190 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:27:05,197 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:27:05,197 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:27:05,197 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 09:27:05,197 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5724 states.
[2020-11-25 09:27:05,217 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:27:05,217 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:27:05,217 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:27:05,219 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:27:05,219 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_StandardToken0 := false;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND TRUE   revert
[L1557]  RET         call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND TRUE   choice == 18
[L6389]              gas := gas - 21000;
[L6390]  COND FALSE  !(gas >= 0)
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:27:05,232 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:27:05,232 INFO  L82        PathProgramCache]: Analyzing trace with hash 2147009845, now seen corresponding path program 1 times
[2020-11-25 09:27:05,236 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:27:05,259 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:27:05,294 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:27:05,296 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:27:05,296 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:27:05,672 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:27:05,680 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:27:05,680 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:27:05,681 INFO  L87              Difference]: Start difference. First operand 5724 states. Second operand 4 states.
[2020-11-25 09:27:06,130 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:27:06,131 INFO  L93              Difference]: Finished difference Result 2886 states and 3298 transitions.
[2020-11-25 09:27:06,131 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:27:06,132 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2886 states and 3298 transitions.
[2020-11-25 09:27:06,147 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:27:06,168 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2886 states to 2882 states and 3290 transitions.
[2020-11-25 09:27:06,168 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 09:27:06,171 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 726
[2020-11-25 09:27:06,171 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2882 states and 3290 transitions.
[2020-11-25 09:27:06,179 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:27:06,179 INFO  L728         BuchiCegarLoop]: Abstraction has 2882 states and 3290 transitions.
[2020-11-25 09:27:06,196 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2882 states and 3290 transitions.
[2020-11-25 09:27:06,252 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2882 to 2882.
[2020-11-25 09:27:06,252 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2882 states.
[2020-11-25 09:27:06,258 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2882 states to 2882 states and 3290 transitions.
[2020-11-25 09:27:06,260 INFO  L751         BuchiCegarLoop]: Abstraction has 2882 states and 3290 transitions.
[2020-11-25 09:27:06,260 INFO  L631         BuchiCegarLoop]: Abstraction has 2882 states and 3290 transitions.
[2020-11-25 09:27:06,260 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 09:27:06,260 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2882 states and 3290 transitions.
[2020-11-25 09:27:06,266 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:27:06,266 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:27:06,266 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:27:06,267 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:27:06,268 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_StandardToken0 := false;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND TRUE   revert
[L1557]  RET         call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND FALSE  !(choice == 13)
[L6425]  COND FALSE  !(choice == 12)
[L6431]  COND TRUE   choice == 11
[L6432]              gas := gas - 21000;
[L6433]  COND TRUE   gas >= 0
[L6434]              assume _value_s435 >= 0 && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6435]              assume msgvalue_MSG == 0;
[L6436]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s435 != _to_s435 && ((_value_s435 > balances_BasicToken[this][_from_s435] || _value_s435 > allowed_StandardToken[this][_from_s435][msgsender_MSG]) || balances_BasicToken[this][_to_s435] + _value_s435 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s435 >= 0) && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s435] >= 0) && balances_BasicToken[this][_to_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s435] >= 0) && balances_BasicToken[this][_from_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s435][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s435][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L800]               havoc __exception;
[L801]               revert := false;
[L802]   COND FALSE  !(__exception)
[L826]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L3083]  COND TRUE   !(_value_s435 <= balances_BasicToken[this][_from_s435])
[L3084]              revert := true;
[L826]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L827]               assume !revert && gas >= 0;
[L6436]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L6521]  RET         call CorralChoice_XNC(this);

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND FALSE  !(choice == 13)
[L6425]  COND FALSE  !(choice == 12)
[L6431]  COND TRUE   choice == 11
[L6432]              gas := gas - 21000;
[L6433]  COND TRUE   gas >= 0
[L6434]              assume _value_s435 >= 0 && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6435]              assume msgvalue_MSG == 0;
[L6436]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s435 != _to_s435 && ((_value_s435 > balances_BasicToken[this][_from_s435] || _value_s435 > allowed_StandardToken[this][_from_s435][msgsender_MSG]) || balances_BasicToken[this][_to_s435] + _value_s435 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s435 >= 0) && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s435] >= 0) && balances_BasicToken[this][_to_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s435] >= 0) && balances_BasicToken[this][_from_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s435][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s435][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L800]               havoc __exception;
[L801]               revert := false;
[L802]   COND FALSE  !(__exception)
[L826]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L3083]  COND TRUE   !(_value_s435 <= balances_BasicToken[this][_from_s435])
[L3084]              revert := true;
[L826]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L827]               assume !revert && gas >= 0;
[L6436]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:27:06,271 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:27:06,271 INFO  L82        PathProgramCache]: Analyzing trace with hash -645940803, now seen corresponding path program 1 times
[2020-11-25 09:27:06,272 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:27:06,280 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:27:06,302 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:27:06,302 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:27:06,302 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:27:06,303 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:27:06,303 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:27:06,303 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:27:06,303 INFO  L87              Difference]: Start difference. First operand 2882 states and 3290 transitions. cyclomatic complexity: 410 Second operand 3 states.
[2020-11-25 09:27:06,369 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:27:06,369 INFO  L93              Difference]: Finished difference Result 3594 states and 4060 transitions.
[2020-11-25 09:27:06,369 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:27:06,369 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3594 states and 4060 transitions.
[2020-11-25 09:27:06,382 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:27:06,395 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3594 states to 3594 states and 4060 transitions.
[2020-11-25 09:27:06,395 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 916
[2020-11-25 09:27:06,396 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 916
[2020-11-25 09:27:06,396 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3594 states and 4060 transitions.
[2020-11-25 09:27:06,401 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:27:06,401 INFO  L728         BuchiCegarLoop]: Abstraction has 3594 states and 4060 transitions.
[2020-11-25 09:27:06,404 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3594 states and 4060 transitions.
[2020-11-25 09:27:06,435 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3594 to 3186.
[2020-11-25 09:27:06,435 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3186 states.
[2020-11-25 09:27:06,439 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3186 states to 3186 states and 3565 transitions.
[2020-11-25 09:27:06,439 INFO  L751         BuchiCegarLoop]: Abstraction has 3186 states and 3565 transitions.
[2020-11-25 09:27:06,439 INFO  L631         BuchiCegarLoop]: Abstraction has 3186 states and 3565 transitions.
[2020-11-25 09:27:06,439 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 09:27:06,440 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3186 states and 3565 transitions.
[2020-11-25 09:27:06,445 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:27:06,445 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:27:06,445 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:27:06,450 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:27:06,450 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_StandardToken0 := false;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND TRUE   !(_cap_s704 > 0)
[L3424]              revert := true;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND TRUE   revert
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND TRUE   revert
[L1557]  RET         call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND FALSE  !(choice == 13)
[L6425]  COND FALSE  !(choice == 12)
[L6431]  COND TRUE   choice == 11
[L6432]              gas := gas - 21000;
[L6433]  COND TRUE   gas >= 0
[L6434]              assume _value_s435 >= 0 && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6435]              assume msgvalue_MSG == 0;
[L6436]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s435 != _to_s435 && ((_value_s435 > balances_BasicToken[this][_from_s435] || _value_s435 > allowed_StandardToken[this][_from_s435][msgsender_MSG]) || balances_BasicToken[this][_to_s435] + _value_s435 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s435 >= 0) && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s435] >= 0) && balances_BasicToken[this][_to_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s435] >= 0) && balances_BasicToken[this][_from_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s435][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s435][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L800]               havoc __exception;
[L801]               revert := false;
[L802]   COND FALSE  !(__exception)
[L826]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L3083]  COND TRUE   !(_value_s435 <= balances_BasicToken[this][_from_s435])
[L3084]              revert := true;
[L826]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L827]               assume !revert && gas >= 0;
[L6436]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L6521]  RET         call CorralChoice_XNC(this);

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND FALSE  !(choice == 13)
[L6425]  COND FALSE  !(choice == 12)
[L6431]  COND TRUE   choice == 11
[L6432]              gas := gas - 21000;
[L6433]  COND TRUE   gas >= 0
[L6434]              assume _value_s435 >= 0 && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6435]              assume msgvalue_MSG == 0;
[L6436]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s435 != _to_s435 && ((_value_s435 > balances_BasicToken[this][_from_s435] || _value_s435 > allowed_StandardToken[this][_from_s435][msgsender_MSG]) || balances_BasicToken[this][_to_s435] + _value_s435 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s435 >= 0) && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s435] >= 0) && balances_BasicToken[this][_to_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s435] >= 0) && balances_BasicToken[this][_from_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s435][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s435][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L800]               havoc __exception;
[L801]               revert := false;
[L802]   COND FALSE  !(__exception)
[L826]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L3083]  COND TRUE   !(_value_s435 <= balances_BasicToken[this][_from_s435])
[L3084]              revert := true;
[L826]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L827]               assume !revert && gas >= 0;
[L6436]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:27:06,457 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:27:06,457 INFO  L82        PathProgramCache]: Analyzing trace with hash -2009890992, now seen corresponding path program 1 times
[2020-11-25 09:27:06,458 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:27:06,483 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:27:06,732 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3875 trivial. 0 not checked.
[2020-11-25 09:27:06,732 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:27:06,732 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:27:06,733 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:27:06,733 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:27:06,734 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:27:06,734 INFO  L87              Difference]: Start difference. First operand 3186 states and 3565 transitions. cyclomatic complexity: 381 Second operand 3 states.
[2020-11-25 09:27:06,783 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:27:06,783 INFO  L93              Difference]: Finished difference Result 3594 states and 3994 transitions.
[2020-11-25 09:27:06,783 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:27:06,783 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3594 states and 3994 transitions.
[2020-11-25 09:27:06,793 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:27:06,803 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3594 states to 3428 states and 3806 transitions.
[2020-11-25 09:27:06,804 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 863
[2020-11-25 09:27:06,804 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 878
[2020-11-25 09:27:06,804 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3428 states and 3806 transitions.
[2020-11-25 09:27:06,808 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:27:06,808 INFO  L728         BuchiCegarLoop]: Abstraction has 3428 states and 3806 transitions.
[2020-11-25 09:27:06,811 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3428 states and 3806 transitions.
[2020-11-25 09:27:06,836 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3428 to 3080.
[2020-11-25 09:27:06,836 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3080 states.
[2020-11-25 09:27:06,839 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3080 states to 3080 states and 3371 transitions.
[2020-11-25 09:27:06,839 INFO  L751         BuchiCegarLoop]: Abstraction has 3080 states and 3371 transitions.
[2020-11-25 09:27:06,839 INFO  L631         BuchiCegarLoop]: Abstraction has 3080 states and 3371 transitions.
[2020-11-25 09:27:06,839 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 09:27:06,839 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3080 states and 3371 transitions.
[2020-11-25 09:27:06,842 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:27:06,843 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:27:06,843 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:27:06,845 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:27:06,846 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_StandardToken0 := false;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_XNC[this] := 410647391;
[L3583]              symbol_XNC[this] := 1087999494;
[L3584]              decimals_XNC[this] := 18;
[L3654]  RET         call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND FALSE  !(choice == 13)
[L6425]  COND FALSE  !(choice == 12)
[L6431]  COND TRUE   choice == 11
[L6432]              gas := gas - 21000;
[L6433]  COND TRUE   gas >= 0
[L6434]              assume _value_s435 >= 0 && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6435]              assume msgvalue_MSG == 0;
[L6436]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s435 != _to_s435 && ((_value_s435 > balances_BasicToken[this][_from_s435] || _value_s435 > allowed_StandardToken[this][_from_s435][msgsender_MSG]) || balances_BasicToken[this][_to_s435] + _value_s435 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s435 >= 0) && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s435] >= 0) && balances_BasicToken[this][_to_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s435] >= 0) && balances_BasicToken[this][_from_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s435][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s435][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L800]               havoc __exception;
[L801]               revert := false;
[L802]   COND FALSE  !(__exception)
[L826]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L3083]  COND FALSE  !(!(_value_s435 <= balances_BasicToken[this][_from_s435]))
[L3087]  COND FALSE  !(!(_value_s435 <= allowed_StandardToken[this][_from_s435][msgsender_MSG]))
[L3091]              __var_6 := null;
[L3092]  COND FALSE  !(!(_to_s435 != null))
[L3096]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3096]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L3097]  COND FALSE  !(revert)
[L3100]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s435];
[L3101]              balances_BasicToken[this][_from_s435] := __var_7;
[L3102]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s435];
[L3103]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3103]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L3104]  COND FALSE  !(revert)
[L3107]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s435];
[L3108]              balances_BasicToken[this][_to_s435] := __var_8;
[L3109]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s435];
[L3110]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3110]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L3111]  COND FALSE  !(revert)
[L3114]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] - allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3115]              allowed_StandardToken[this][_from_s435][msgsender_MSG] := __var_9;
[L3116]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] + allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3117]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3118]              __ret_0_ := true;
[L826]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L827]               assume !revert && gas >= 0;
[L6436]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L6521]  RET         call CorralChoice_XNC(this);

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND FALSE  !(choice == 13)
[L6425]  COND FALSE  !(choice == 12)
[L6431]  COND TRUE   choice == 11
[L6432]              gas := gas - 21000;
[L6433]  COND TRUE   gas >= 0
[L6434]              assume _value_s435 >= 0 && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6435]              assume msgvalue_MSG == 0;
[L6436]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s435 != _to_s435 && ((_value_s435 > balances_BasicToken[this][_from_s435] || _value_s435 > allowed_StandardToken[this][_from_s435][msgsender_MSG]) || balances_BasicToken[this][_to_s435] + _value_s435 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s435 >= 0) && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s435] >= 0) && balances_BasicToken[this][_to_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s435] >= 0) && balances_BasicToken[this][_from_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s435][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s435][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L800]               havoc __exception;
[L801]               revert := false;
[L802]   COND FALSE  !(__exception)
[L826]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L3083]  COND FALSE  !(!(_value_s435 <= balances_BasicToken[this][_from_s435]))
[L3087]  COND FALSE  !(!(_value_s435 <= allowed_StandardToken[this][_from_s435][msgsender_MSG]))
[L3091]              __var_6 := null;
[L3092]  COND FALSE  !(!(_to_s435 != null))
[L3096]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3096]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L3097]  COND FALSE  !(revert)
[L3100]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s435];
[L3101]              balances_BasicToken[this][_from_s435] := __var_7;
[L3102]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s435];
[L3103]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3103]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L3104]  COND FALSE  !(revert)
[L3107]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s435];
[L3108]              balances_BasicToken[this][_to_s435] := __var_8;
[L3109]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s435];
[L3110]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3110]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L3111]  COND FALSE  !(revert)
[L3114]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] - allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3115]              allowed_StandardToken[this][_from_s435][msgsender_MSG] := __var_9;
[L3116]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] + allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3117]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3118]              __ret_0_ := true;
[L826]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L827]               assume !revert && gas >= 0;
[L6436]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:27:06,853 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:27:06,853 INFO  L82        PathProgramCache]: Analyzing trace with hash 175025616, now seen corresponding path program 1 times
[2020-11-25 09:27:06,853 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:27:06,881 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:27:07,276 INFO  L134       CoverageAnalysis]: Checked inductivity of 3879 backedges. 87 proven. 3 refuted. 0 times theorem prover too weak. 3789 trivial. 0 not checked.
[2020-11-25 09:27:07,276 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:27:07,277 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [16] total 16
[2020-11-25 09:27:07,279 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:27:07,279 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 09:27:07,279 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=240, Unknown=0, NotChecked=0, Total=272
[2020-11-25 09:27:07,279 INFO  L87              Difference]: Start difference. First operand 3080 states and 3371 transitions. cyclomatic complexity: 293 Second operand 17 states.
[2020-11-25 09:27:09,442 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:27:09,442 INFO  L93              Difference]: Finished difference Result 3179 states and 3482 transitions.
[2020-11-25 09:27:09,442 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 09:27:09,442 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3179 states and 3482 transitions.
[2020-11-25 09:27:09,448 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:27:09,457 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3179 states to 3179 states and 3482 transitions.
[2020-11-25 09:27:09,458 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 837
[2020-11-25 09:27:09,458 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 837
[2020-11-25 09:27:09,458 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3179 states and 3482 transitions.
[2020-11-25 09:27:09,461 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:27:09,461 INFO  L728         BuchiCegarLoop]: Abstraction has 3179 states and 3482 transitions.
[2020-11-25 09:27:09,463 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3179 states and 3482 transitions.
[2020-11-25 09:27:09,481 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3179 to 2988.
[2020-11-25 09:27:09,481 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2988 states.
[2020-11-25 09:27:09,485 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2988 states to 2988 states and 3246 transitions.
[2020-11-25 09:27:09,485 INFO  L751         BuchiCegarLoop]: Abstraction has 2988 states and 3246 transitions.
[2020-11-25 09:27:09,485 INFO  L631         BuchiCegarLoop]: Abstraction has 2988 states and 3246 transitions.
[2020-11-25 09:27:09,485 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 09:27:09,485 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2988 states and 3246 transitions.
[2020-11-25 09:27:09,488 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:27:09,488 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:27:09,488 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:27:09,491 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:27:09,491 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_StandardToken0 := false;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND TRUE   __exception
[L1534]              __tmp__Balance := Balance;
[L1535]              __tmp__DType := DType;
[L1536]              __tmp__Alloc := Alloc;
[L1537]              __tmp__balance_ADDR := balance_ADDR;
[L1538]              __tmp__M_Ref_int := M_Ref_int;
[L1539]              __tmp__sum_balances0 := sum_balances0;
[L1540]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1541]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1542]              __tmp__sum_allowed1 := sum_allowed1;
[L1543]              __tmp__Length := Length;
[L1544]              __tmp__now := now;
[L1545]              __tmp__owner_Ownable := owner_Ownable;
[L1546]              __tmp__balances_BasicToken := balances_BasicToken;
[L1547]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1548]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1549]              __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L1550]              __tmp__cap_CappedToken := cap_CappedToken;
[L1551]              __tmp__name_XNC := name_XNC;
[L1552]              __tmp__symbol_XNC := symbol_XNC;
[L1553]              __tmp__decimals_XNC := decimals_XNC;
[L1554]  CALL        call XNC_XNC__fail(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3590]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L3590]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3591]  COND FALSE  !(revert)
[L3594]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2816]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L2816]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2801]              assume msgsender_MSG != null;
[L2802]              __tmp__Balance[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3594]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3595]  COND FALSE  !(revert)
[L3598]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2862]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L2862]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2863]  COND FALSE  !(revert)
[L2866]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2841]              assume msgsender_MSG != null;
[L2842]              __tmp__Balance[this] := 0;
[L2843]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L2844]              __tmp__sum_balances0[this] := 0;
[L2845]              __tmp__totalSupply__BasicToken[this] := 0;
[L2866]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2867]  COND FALSE  !(revert)
[L3598]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3599]  COND FALSE  !(revert)
[L3602]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L2995]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2996]  COND FALSE  !(revert)
[L2999]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2816]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L2816]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2801]              assume msgsender_MSG != null;
[L2802]              __tmp__Balance[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L2999]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3003]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2862]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L2862]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2863]  COND FALSE  !(revert)
[L2866]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2841]              assume msgsender_MSG != null;
[L2842]              __tmp__Balance[this] := 0;
[L2843]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L2844]              __tmp__sum_balances0[this] := 0;
[L2845]              __tmp__totalSupply__BasicToken[this] := 0;
[L2866]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2867]  COND FALSE  !(revert)
[L3003]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3004]  COND FALSE  !(revert)
[L3007]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2976]              assume msgsender_MSG != null;
[L2977]              __tmp__Balance[this] := 0;
[L2978]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L2979]              __tmp__sum_allowed1[this] := 0;
[L3007]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3008]  COND FALSE  !(revert)
[L3602]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3603]  COND FALSE  !(revert)
[L3606]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2632]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2613]              assume msgsender_MSG != null;
[L2614]              __tmp__Balance[this] := 0;
[L2615]              __tmp__owner_Ownable[this] := null;
[L2617]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2632]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2633]  COND FALSE  !(revert)
[L3606]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3607]  COND FALSE  !(revert)
[L3610]  CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3247]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L3247]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3251]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2816]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L2816]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2801]              assume msgsender_MSG != null;
[L2802]              __tmp__Balance[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3251]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3252]  COND FALSE  !(revert)
[L3255]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2862]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L2862]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2863]  COND FALSE  !(revert)
[L2866]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2841]              assume msgsender_MSG != null;
[L2842]              __tmp__Balance[this] := 0;
[L2843]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L2844]              __tmp__sum_balances0[this] := 0;
[L2845]              __tmp__totalSupply__BasicToken[this] := 0;
[L2866]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2867]  COND FALSE  !(revert)
[L3255]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L2995]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2996]  COND FALSE  !(revert)
[L2999]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2816]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L2816]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2801]              assume msgsender_MSG != null;
[L2802]              __tmp__Balance[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L2999]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3003]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2862]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L2862]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2863]  COND FALSE  !(revert)
[L2866]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2841]              assume msgsender_MSG != null;
[L2842]              __tmp__Balance[this] := 0;
[L2843]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L2844]              __tmp__sum_balances0[this] := 0;
[L2845]              __tmp__totalSupply__BasicToken[this] := 0;
[L2866]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2867]  COND FALSE  !(revert)
[L3003]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3004]  COND FALSE  !(revert)
[L3007]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2976]              assume msgsender_MSG != null;
[L2977]              __tmp__Balance[this] := 0;
[L2978]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L2979]              __tmp__sum_allowed1[this] := 0;
[L3007]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3008]  COND FALSE  !(revert)
[L3259]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2632]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2613]              assume msgsender_MSG != null;
[L2614]              __tmp__Balance[this] := 0;
[L2615]              __tmp__owner_Ownable[this] := null;
[L2617]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2632]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2633]  COND FALSE  !(revert)
[L3263]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L3267]  CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              __tmp__Balance[this] := 0;
[L3232]              __tmp__mintingFinished_MintableToken[this] := false;
[L3267]  RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3268]  COND FALSE  !(revert)
[L3610]  RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3611]  COND FALSE  !(revert)
[L3614]  CALL        call CappedToken_CappedToken__fail(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3432]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L3432]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3433]  COND FALSE  !(revert)
[L3436]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2816]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L2816]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2801]              assume msgsender_MSG != null;
[L2802]              __tmp__Balance[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3436]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3437]  COND FALSE  !(revert)
[L3440]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2862]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L2862]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2863]  COND FALSE  !(revert)
[L2866]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2841]              assume msgsender_MSG != null;
[L2842]              __tmp__Balance[this] := 0;
[L2843]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L2844]              __tmp__sum_balances0[this] := 0;
[L2845]              __tmp__totalSupply__BasicToken[this] := 0;
[L2866]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2867]  COND FALSE  !(revert)
[L3440]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3441]  COND FALSE  !(revert)
[L3444]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L2995]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2996]  COND FALSE  !(revert)
[L2999]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2816]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L2816]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2801]              assume msgsender_MSG != null;
[L2802]              __tmp__Balance[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L2999]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3003]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2862]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L2862]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2863]  COND FALSE  !(revert)
[L2866]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2841]              assume msgsender_MSG != null;
[L2842]              __tmp__Balance[this] := 0;
[L2843]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L2844]              __tmp__sum_balances0[this] := 0;
[L2845]              __tmp__totalSupply__BasicToken[this] := 0;
[L2866]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2867]  COND FALSE  !(revert)
[L3003]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3004]  COND FALSE  !(revert)
[L3007]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2976]              assume msgsender_MSG != null;
[L2977]              __tmp__Balance[this] := 0;
[L2978]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L2979]              __tmp__sum_allowed1[this] := 0;
[L3007]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3008]  COND FALSE  !(revert)
[L3444]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3445]  COND FALSE  !(revert)
[L3448]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2632]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2613]              assume msgsender_MSG != null;
[L2614]              __tmp__Balance[this] := 0;
[L2615]              __tmp__owner_Ownable[this] := null;
[L2617]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2632]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2633]  COND FALSE  !(revert)
[L3448]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3449]  COND FALSE  !(revert)
[L3452]  CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3247]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L3247]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3251]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2816]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L2816]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2801]              assume msgsender_MSG != null;
[L2802]              __tmp__Balance[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L3251]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3252]  COND FALSE  !(revert)
[L3255]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2862]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L2862]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2863]  COND FALSE  !(revert)
[L2866]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2841]              assume msgsender_MSG != null;
[L2842]              __tmp__Balance[this] := 0;
[L2843]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L2844]              __tmp__sum_balances0[this] := 0;
[L2845]              __tmp__totalSupply__BasicToken[this] := 0;
[L2866]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2867]  COND FALSE  !(revert)
[L3255]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2995]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L2995]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2996]  COND FALSE  !(revert)
[L2999]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2816]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L2816]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2817]  COND FALSE  !(revert)
[L2820]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2801]              assume msgsender_MSG != null;
[L2802]              __tmp__Balance[this] := 0;
[L2820]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2821]  COND FALSE  !(revert)
[L2999]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3003]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2862]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2784]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]              assume msgsender_MSG != null;
[L2770]              __tmp__Balance[this] := 0;
[L2784]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  COND FALSE  !(revert)
[L2862]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2863]  COND FALSE  !(revert)
[L2866]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2841]              assume msgsender_MSG != null;
[L2842]              __tmp__Balance[this] := 0;
[L2843]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L2844]              __tmp__sum_balances0[this] := 0;
[L2845]              __tmp__totalSupply__BasicToken[this] := 0;
[L2866]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2867]  COND FALSE  !(revert)
[L3003]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3004]  COND FALSE  !(revert)
[L3007]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2976]              assume msgsender_MSG != null;
[L2977]              __tmp__Balance[this] := 0;
[L2978]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L2979]              __tmp__sum_allowed1[this] := 0;
[L3007]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3008]  COND FALSE  !(revert)
[L3259]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2632]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2613]              assume msgsender_MSG != null;
[L2614]              __tmp__Balance[this] := 0;
[L2615]              __tmp__owner_Ownable[this] := null;
[L2617]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2632]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2633]  COND FALSE  !(revert)
[L3263]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L3267]  CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              __tmp__Balance[this] := 0;
[L3232]              __tmp__mintingFinished_MintableToken[this] := false;
[L3267]  RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3268]  COND FALSE  !(revert)
[L3452]  RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3453]  COND FALSE  !(revert)
[L3456]  CALL        call CappedToken_CappedToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3405]              assume msgsender_MSG != null;
[L3406]              __tmp__Balance[this] := 0;
[L3407]              __tmp__cap_CappedToken[this] := 0;
[L3409]  COND FALSE  !(!(_cap_s704 > 0))
[L3413]              __tmp__cap_CappedToken[this] := _cap_s704;
[L3456]  RET         call CappedToken_CappedToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3457]  COND FALSE  !(revert)
[L3614]  RET         call CappedToken_CappedToken__fail(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3615]  COND FALSE  !(revert)
[L3618]  CALL        call XNC_XNC_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3569]              assume msgsender_MSG != null;
[L3570]              __tmp__Balance[this] := 0;
[L3571]              __tmp__name_XNC[this] := 410647391;
[L3572]              __tmp__symbol_XNC[this] := 1087999494;
[L3573]              __tmp__decimals_XNC[this] := 18;
[L3618]  RET         call XNC_XNC_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3619]  COND FALSE  !(revert)
[L1554]  RET         call XNC_XNC__fail(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1555]              assume revert || gas < 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND FALSE  !(choice == 13)
[L6425]  COND FALSE  !(choice == 12)
[L6431]  COND TRUE   choice == 11
[L6432]              gas := gas - 21000;
[L6433]  COND TRUE   gas >= 0
[L6434]              assume _value_s435 >= 0 && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6435]              assume msgvalue_MSG == 0;
[L6436]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s435 != _to_s435 && ((_value_s435 > balances_BasicToken[this][_from_s435] || _value_s435 > allowed_StandardToken[this][_from_s435][msgsender_MSG]) || balances_BasicToken[this][_to_s435] + _value_s435 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s435 >= 0) && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s435] >= 0) && balances_BasicToken[this][_to_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s435] >= 0) && balances_BasicToken[this][_from_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s435][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s435][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L800]               havoc __exception;
[L801]               revert := false;
[L802]   COND FALSE  !(__exception)
[L826]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L3083]  COND FALSE  !(!(_value_s435 <= balances_BasicToken[this][_from_s435]))
[L3087]  COND FALSE  !(!(_value_s435 <= allowed_StandardToken[this][_from_s435][msgsender_MSG]))
[L3091]              __var_6 := null;
[L3092]  COND FALSE  !(!(_to_s435 != null))
[L3096]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3096]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L3097]  COND FALSE  !(revert)
[L3100]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s435];
[L3101]              balances_BasicToken[this][_from_s435] := __var_7;
[L3102]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s435];
[L3103]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3103]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L3104]  COND FALSE  !(revert)
[L3107]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s435];
[L3108]              balances_BasicToken[this][_to_s435] := __var_8;
[L3109]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s435];
[L3110]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3110]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L3111]  COND FALSE  !(revert)
[L3114]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] - allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3115]              allowed_StandardToken[this][_from_s435][msgsender_MSG] := __var_9;
[L3116]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] + allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3117]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3118]              __ret_0_ := true;
[L826]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L827]               assume !revert && gas >= 0;
[L6436]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L6521]  RET         call CorralChoice_XNC(this);

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND FALSE  !(choice == 13)
[L6425]  COND FALSE  !(choice == 12)
[L6431]  COND TRUE   choice == 11
[L6432]              gas := gas - 21000;
[L6433]  COND TRUE   gas >= 0
[L6434]              assume _value_s435 >= 0 && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6435]              assume msgvalue_MSG == 0;
[L6436]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s435 != _to_s435 && ((_value_s435 > balances_BasicToken[this][_from_s435] || _value_s435 > allowed_StandardToken[this][_from_s435][msgsender_MSG]) || balances_BasicToken[this][_to_s435] + _value_s435 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s435 >= 0) && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s435] >= 0) && balances_BasicToken[this][_to_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s435] >= 0) && balances_BasicToken[this][_from_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s435][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s435][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L800]               havoc __exception;
[L801]               revert := false;
[L802]   COND FALSE  !(__exception)
[L826]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L3083]  COND FALSE  !(!(_value_s435 <= balances_BasicToken[this][_from_s435]))
[L3087]  COND FALSE  !(!(_value_s435 <= allowed_StandardToken[this][_from_s435][msgsender_MSG]))
[L3091]              __var_6 := null;
[L3092]  COND FALSE  !(!(_to_s435 != null))
[L3096]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3096]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L3097]  COND FALSE  !(revert)
[L3100]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s435];
[L3101]              balances_BasicToken[this][_from_s435] := __var_7;
[L3102]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s435];
[L3103]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3103]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L3104]  COND FALSE  !(revert)
[L3107]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s435];
[L3108]              balances_BasicToken[this][_to_s435] := __var_8;
[L3109]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s435];
[L3110]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3110]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L3111]  COND FALSE  !(revert)
[L3114]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] - allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3115]              allowed_StandardToken[this][_from_s435][msgsender_MSG] := __var_9;
[L3116]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] + allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3117]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3118]              __ret_0_ := true;
[L826]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L827]               assume !revert && gas >= 0;
[L6436]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:27:09,498 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:27:09,498 INFO  L82        PathProgramCache]: Analyzing trace with hash -1452986184, now seen corresponding path program 1 times
[2020-11-25 09:27:09,499 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:27:09,520 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:27:09,767 INFO  L134       CoverageAnalysis]: Checked inductivity of 3879 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3879 trivial. 0 not checked.
[2020-11-25 09:27:09,768 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:27:09,768 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:27:09,768 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:27:09,768 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:27:09,768 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:27:09,769 INFO  L87              Difference]: Start difference. First operand 2988 states and 3246 transitions. cyclomatic complexity: 261 Second operand 4 states.
[2020-11-25 09:27:09,921 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:27:09,921 INFO  L93              Difference]: Finished difference Result 3767 states and 4229 transitions.
[2020-11-25 09:27:09,921 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 09:27:09,922 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3767 states and 4229 transitions.
[2020-11-25 09:27:09,939 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 09:27:09,949 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3767 states to 3553 states and 3999 transitions.
[2020-11-25 09:27:09,950 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 945
[2020-11-25 09:27:09,950 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 945
[2020-11-25 09:27:09,950 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3553 states and 3999 transitions.
[2020-11-25 09:27:09,953 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:27:09,953 INFO  L728         BuchiCegarLoop]: Abstraction has 3553 states and 3999 transitions.
[2020-11-25 09:27:09,956 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3553 states and 3999 transitions.
[2020-11-25 09:27:09,972 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3553 to 2774.
[2020-11-25 09:27:09,972 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2774 states.
[2020-11-25 09:27:09,975 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2774 states to 2774 states and 3015 transitions.
[2020-11-25 09:27:09,975 INFO  L751         BuchiCegarLoop]: Abstraction has 2774 states and 3015 transitions.
[2020-11-25 09:27:09,975 INFO  L631         BuchiCegarLoop]: Abstraction has 2774 states and 3015 transitions.
[2020-11-25 09:27:09,975 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 09:27:09,975 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2774 states and 3015 transitions.
[2020-11-25 09:27:09,978 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:27:09,978 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:27:09,978 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:27:09,980 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:27:09,980 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_StandardToken0 := false;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_XNC[this] := 410647391;
[L3583]              symbol_XNC[this] := 1087999494;
[L3584]              decimals_XNC[this] := 18;
[L3654]  RET         call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L617]               havoc __exception;
[L618]               revert := false;
[L619]   COND FALSE  !(__exception)
[L643]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2933]  COND FALSE  !(!(_value_s326 <= balances_BasicToken[this][msgsender_MSG]))
[L2937]              __var_3 := null;
[L2938]  COND FALSE  !(!(_to_s326 != null))
[L2942]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2942]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2943]  COND FALSE  !(revert)
[L2946]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2947]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2948]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2949]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s326], _value_s326);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2949]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s326], _value_s326);
[L2950]  COND FALSE  !(revert)
[L2953]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s326];
[L2954]              balances_BasicToken[this][_to_s326] := __var_5;
[L2955]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s326];
[L2956]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2957]              __ret_0_ := true;
[L643]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L644]               assume !revert && gas >= 0;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L6521]  RET         call CorralChoice_XNC(this);
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND FALSE  !(choice == 13)
[L6425]  COND FALSE  !(choice == 12)
[L6431]  COND TRUE   choice == 11
[L6432]              gas := gas - 21000;
[L6433]  COND TRUE   gas >= 0
[L6434]              assume _value_s435 >= 0 && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6435]              assume msgvalue_MSG == 0;
[L6436]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s435 != _to_s435 && ((_value_s435 > balances_BasicToken[this][_from_s435] || _value_s435 > allowed_StandardToken[this][_from_s435][msgsender_MSG]) || balances_BasicToken[this][_to_s435] + _value_s435 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s435 >= 0) && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s435] >= 0) && balances_BasicToken[this][_to_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s435] >= 0) && balances_BasicToken[this][_from_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s435][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s435][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L800]               havoc __exception;
[L801]               revert := false;
[L802]   COND FALSE  !(__exception)
[L826]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L3083]  COND FALSE  !(!(_value_s435 <= balances_BasicToken[this][_from_s435]))
[L3087]  COND FALSE  !(!(_value_s435 <= allowed_StandardToken[this][_from_s435][msgsender_MSG]))
[L3091]              __var_6 := null;
[L3092]  COND FALSE  !(!(_to_s435 != null))
[L3096]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3096]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L3097]  COND FALSE  !(revert)
[L3100]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s435];
[L3101]              balances_BasicToken[this][_from_s435] := __var_7;
[L3102]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s435];
[L3103]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3103]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L3104]  COND FALSE  !(revert)
[L3107]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s435];
[L3108]              balances_BasicToken[this][_to_s435] := __var_8;
[L3109]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s435];
[L3110]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3110]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L3111]  COND FALSE  !(revert)
[L3114]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] - allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3115]              allowed_StandardToken[this][_from_s435][msgsender_MSG] := __var_9;
[L3116]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] + allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3117]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3118]              __ret_0_ := true;
[L826]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L827]               assume !revert && gas >= 0;
[L6436]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L6521]  RET         call CorralChoice_XNC(this);

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND TRUE   choice == 18
[L6389]              gas := gas - 21000;
[L6390]  COND FALSE  !(gas >= 0)
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:27:09,987 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:27:09,987 INFO  L82        PathProgramCache]: Analyzing trace with hash -682036859, now seen corresponding path program 1 times
[2020-11-25 09:27:09,988 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:27:10,012 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:27:10,395 INFO  L134       CoverageAnalysis]: Checked inductivity of 3942 backedges. 34 proven. 0 refuted. 0 times theorem prover too weak. 3908 trivial. 0 not checked.
[2020-11-25 09:27:10,396 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:27:10,396 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 09:27:10,396 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:27:10,396 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 09:27:10,396 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=210, Unknown=0, NotChecked=0, Total=240
[2020-11-25 09:27:10,397 INFO  L87              Difference]: Start difference. First operand 2774 states and 3015 transitions. cyclomatic complexity: 244 Second operand 16 states.
[2020-11-25 09:27:11,913 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:27:11,913 INFO  L93              Difference]: Finished difference Result 2855 states and 3109 transitions.
[2020-11-25 09:27:11,913 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 09:27:11,913 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2855 states and 3109 transitions.
[2020-11-25 09:27:11,918 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:27:11,925 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2855 states to 2855 states and 3109 transitions.
[2020-11-25 09:27:11,925 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 775
[2020-11-25 09:27:11,925 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 775
[2020-11-25 09:27:11,925 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2855 states and 3109 transitions.
[2020-11-25 09:27:11,928 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:27:11,928 INFO  L728         BuchiCegarLoop]: Abstraction has 2855 states and 3109 transitions.
[2020-11-25 09:27:11,930 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2855 states and 3109 transitions.
[2020-11-25 09:27:11,944 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2855 to 2812.
[2020-11-25 09:27:11,944 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2812 states.
[2020-11-25 09:27:11,946 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2812 states to 2812 states and 3065 transitions.
[2020-11-25 09:27:11,946 INFO  L751         BuchiCegarLoop]: Abstraction has 2812 states and 3065 transitions.
[2020-11-25 09:27:11,946 INFO  L631         BuchiCegarLoop]: Abstraction has 2812 states and 3065 transitions.
[2020-11-25 09:27:11,946 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 09:27:11,946 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2812 states and 3065 transitions.
[2020-11-25 09:27:11,949 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:27:11,949 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:27:11,949 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:27:11,951 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:27:11,951 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_StandardToken0 := false;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_XNC[this] := 410647391;
[L3583]              symbol_XNC[this] := 1087999494;
[L3584]              decimals_XNC[this] := 18;
[L3654]  RET         call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND FALSE  !(choice == 13)
[L6425]  COND FALSE  !(choice == 12)
[L6431]  COND TRUE   choice == 11
[L6432]              gas := gas - 21000;
[L6433]  COND TRUE   gas >= 0
[L6434]              assume _value_s435 >= 0 && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6435]              assume msgvalue_MSG == 0;
[L6436]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((_from_s435 != _to_s435 && ((_value_s435 > balances_BasicToken[this][_from_s435] || _value_s435 > allowed_StandardToken[this][_from_s435][msgsender_MSG]) || balances_BasicToken[this][_to_s435] + _value_s435 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s435 >= 0) && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s435] >= 0) && balances_BasicToken[this][_to_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s435] >= 0) && balances_BasicToken[this][_from_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s435][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s435][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L800]               havoc __exception;
[L801]               revert := false;
[L802]   COND FALSE  !(__exception)
[L826]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L3083]  COND FALSE  !(!(_value_s435 <= balances_BasicToken[this][_from_s435]))
[L3087]  COND FALSE  !(!(_value_s435 <= allowed_StandardToken[this][_from_s435][msgsender_MSG]))
[L3091]              __var_6 := null;
[L3092]  COND FALSE  !(!(_to_s435 != null))
[L3096]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3096]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L3097]  COND FALSE  !(revert)
[L3100]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s435];
[L3101]              balances_BasicToken[this][_from_s435] := __var_7;
[L3102]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s435];
[L3103]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3103]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L3104]  COND FALSE  !(revert)
[L3107]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s435];
[L3108]              balances_BasicToken[this][_to_s435] := __var_8;
[L3109]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s435];
[L3110]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3110]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L3111]  COND FALSE  !(revert)
[L3114]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] - allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3115]              allowed_StandardToken[this][_from_s435][msgsender_MSG] := __var_9;
[L3116]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] + allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3117]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3118]              __ret_0_ := true;
[L826]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L827]               assume !revert && gas >= 0;
[L6436]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L6521]  RET         call CorralChoice_XNC(this);
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND FALSE  !(choice == 13)
[L6425]  COND FALSE  !(choice == 12)
[L6431]  COND TRUE   choice == 11
[L6432]              gas := gas - 21000;
[L6433]  COND TRUE   gas >= 0
[L6434]              assume _value_s435 >= 0 && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6435]              assume msgvalue_MSG == 0;
[L6436]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s435 != _to_s435 && ((_value_s435 > balances_BasicToken[this][_from_s435] || _value_s435 > allowed_StandardToken[this][_from_s435][msgsender_MSG]) || balances_BasicToken[this][_to_s435] + _value_s435 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s435 >= 0) && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s435] >= 0) && balances_BasicToken[this][_to_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s435] >= 0) && balances_BasicToken[this][_from_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s435][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s435][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L800]               havoc __exception;
[L801]               revert := false;
[L802]   COND FALSE  !(__exception)
[L826]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L3083]  COND FALSE  !(!(_value_s435 <= balances_BasicToken[this][_from_s435]))
[L3087]  COND FALSE  !(!(_value_s435 <= allowed_StandardToken[this][_from_s435][msgsender_MSG]))
[L3091]              __var_6 := null;
[L3092]  COND FALSE  !(!(_to_s435 != null))
[L3096]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3096]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L3097]  COND FALSE  !(revert)
[L3100]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s435];
[L3101]              balances_BasicToken[this][_from_s435] := __var_7;
[L3102]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s435];
[L3103]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3103]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L3104]  COND FALSE  !(revert)
[L3107]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s435];
[L3108]              balances_BasicToken[this][_to_s435] := __var_8;
[L3109]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s435];
[L3110]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3110]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L3111]  COND FALSE  !(revert)
[L3114]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] - allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3115]              allowed_StandardToken[this][_from_s435][msgsender_MSG] := __var_9;
[L3116]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] + allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3117]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3118]              __ret_0_ := true;
[L826]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L827]               assume !revert && gas >= 0;
[L6436]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L6521]  RET         call CorralChoice_XNC(this);

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND FALSE  !(choice == 13)
[L6425]  COND FALSE  !(choice == 12)
[L6431]  COND TRUE   choice == 11
[L6432]              gas := gas - 21000;
[L6433]  COND TRUE   gas >= 0
[L6434]              assume _value_s435 >= 0 && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6435]              assume msgvalue_MSG == 0;
[L6436]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s435 != _to_s435 && ((_value_s435 > balances_BasicToken[this][_from_s435] || _value_s435 > allowed_StandardToken[this][_from_s435][msgsender_MSG]) || balances_BasicToken[this][_to_s435] + _value_s435 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s435 >= 0) && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s435] >= 0) && balances_BasicToken[this][_to_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_from_s435] >= 0) && balances_BasicToken[this][_from_s435] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_StandardToken[this][_from_s435][msgsender_MSG] >= 0) && allowed_StandardToken[this][_from_s435][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_StandardToken0 := true;
[L2]                 call_transferFrom_StandardToken0 := false;
[L2]                 revert := revert_hold;
[L800]               havoc __exception;
[L801]               revert := false;
[L802]   COND FALSE  !(__exception)
[L826]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L3083]  COND FALSE  !(!(_value_s435 <= balances_BasicToken[this][_from_s435]))
[L3087]  COND FALSE  !(!(_value_s435 <= allowed_StandardToken[this][_from_s435][msgsender_MSG]))
[L3091]              __var_6 := null;
[L3092]  COND FALSE  !(!(_to_s435 != null))
[L3096]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3096]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L3097]  COND FALSE  !(revert)
[L3100]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s435];
[L3101]              balances_BasicToken[this][_from_s435] := __var_7;
[L3102]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s435];
[L3103]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3103]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L3104]  COND FALSE  !(revert)
[L3107]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s435];
[L3108]              balances_BasicToken[this][_to_s435] := __var_8;
[L3109]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s435];
[L3110]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3110]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L3111]  COND FALSE  !(revert)
[L3114]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] - allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3115]              allowed_StandardToken[this][_from_s435][msgsender_MSG] := __var_9;
[L3116]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] + allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3117]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3118]              __ret_0_ := true;
[L826]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L827]               assume !revert && gas >= 0;
[L6436]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:27:11,957 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:27:11,957 INFO  L82        PathProgramCache]: Analyzing trace with hash 781836699, now seen corresponding path program 1 times
[2020-11-25 09:27:11,958 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:27:12,017 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:27:12,487 INFO  L134       CoverageAnalysis]: Checked inductivity of 3957 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3957 trivial. 0 not checked.
[2020-11-25 09:27:12,487 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:27:12,488 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 09:27:12,488 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:27:12,488 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 09:27:12,489 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=128, Unknown=0, NotChecked=0, Total=156
[2020-11-25 09:27:12,489 INFO  L87              Difference]: Start difference. First operand 2812 states and 3065 transitions. cyclomatic complexity: 258 Second operand 13 states.
[2020-11-25 09:27:14,079 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:27:14,079 INFO  L93              Difference]: Finished difference Result 1649 states and 1794 transitions.
[2020-11-25 09:27:14,079 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 09:27:14,079 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1649 states and 1794 transitions.
[2020-11-25 09:27:14,082 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:27:14,082 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1649 states to 0 states and 0 transitions.
[2020-11-25 09:27:14,082 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 09:27:14,082 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 09:27:14,082 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 09:27:14,082 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:27:14,082 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:27:14,082 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:27:14,083 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:27:14,083 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 09:27:14,083 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 09:27:14,083 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:27:14,083 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 09:27:14,085 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:27:14 BasicIcfg
[2020-11-25 09:27:14,086 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 09:27:14,086 INFO  L168              Benchmark]: Toolchain (without parser) took 12367.15 ms. Allocated memory was 1.0 GB in the beginning and 2.3 GB in the end (delta: 1.3 GB). Free memory was 929.8 MB in the beginning and 1.2 GB in the end (delta: -319.0 MB). Peak memory consumption was 946.7 MB. Max. memory is 15.3 GB.
[2020-11-25 09:27:14,087 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:27:14,087 INFO  L168              Benchmark]: Boogie Preprocessor took 137.86 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 09:27:14,087 INFO  L168              Benchmark]: UtopiaSpecLang took 67.12 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 09:27:14,087 INFO  L168              Benchmark]: Boogie Printer took 25.61 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:27:14,088 INFO  L168              Benchmark]: RCFGBuilder took 1025.60 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 59.8 MB). Free memory was 903.0 MB in the beginning and 997.4 MB in the end (delta: -94.4 MB). Peak memory consumption was 190.3 MB. Max. memory is 15.3 GB.
[2020-11-25 09:27:14,088 INFO  L168              Benchmark]: UtopiaLTL2Aut took 40.48 ms. Allocated memory is still 1.1 GB. Free memory was 997.4 MB in the beginning and 984.3 MB in the end (delta: 13.0 MB). Peak memory consumption was 13.0 MB. Max. memory is 15.3 GB.
[2020-11-25 09:27:14,088 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1868.92 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 164.6 MB). Free memory was 984.3 MB in the beginning and 869.5 MB in the end (delta: 114.8 MB). Peak memory consumption was 486.7 MB. Max. memory is 15.3 GB.
[2020-11-25 09:27:14,089 INFO  L168              Benchmark]: BlockEncodingV2 took 174.76 ms. Allocated memory is still 1.3 GB. Free memory was 869.5 MB in the beginning and 765.1 MB in the end (delta: 104.4 MB). Peak memory consumption was 104.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:27:14,089 INFO  L168              Benchmark]: BuchiAutomizer took 9023.69 ms. Allocated memory was 1.3 GB in the beginning and 2.3 GB in the end (delta: 1.0 GB). Free memory was 765.1 MB in the beginning and 1.2 GB in the end (delta: -483.7 MB). Peak memory consumption was 557.5 MB. Max. memory is 15.3 GB.
[2020-11-25 09:27:14,092 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5814 locations, 10614 edges
  - StatisticsResult: Encoded RCFG
    5724 locations, 10398 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 137.86 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 67.12 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 25.61 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1025.60 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 59.8 MB). Free memory was 903.0 MB in the beginning and 997.4 MB in the end (delta: -94.4 MB). Peak memory consumption was 190.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 40.48 ms. Allocated memory is still 1.1 GB. Free memory was 997.4 MB in the beginning and 984.3 MB in the end (delta: 13.0 MB). Peak memory consumption was 13.0 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1868.92 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 164.6 MB). Free memory was 984.3 MB in the beginning and 869.5 MB in the end (delta: 114.8 MB). Peak memory consumption was 486.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 174.76 ms. Allocated memory is still 1.3 GB. Free memory was 869.5 MB in the beginning and 765.1 MB in the end (delta: 104.4 MB). Peak memory consumption was 104.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 9023.69 ms. Allocated memory was 1.3 GB in the beginning and 2.3 GB in the end (delta: 1.0 GB). Free memory was 765.1 MB in the beginning and 1.2 GB in the end (delta: -483.7 MB). Peak memory consumption was 557.5 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2301 locations, 3213 edges
  - StatisticsResult: BuchiProgram size
    5814 locations, 10614 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 17 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 8.9s and 8 iterations.  TraceHistogramMax:24. Analysis of lassos took 2.4s. Construction of modules took 4.3s. BÃ¼chi inclusion checks took 1.6s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 6 MinimizatonAttempts, 1769 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3186 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 20522 SDtfs, 16618 SDslu, 35843 SDs, 0 SdLazy, 72400 SolverSat, 2888 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 4.3s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_StandardToken0) ==> ( <>(fail_transferFrom_StandardToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
