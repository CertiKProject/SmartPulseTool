This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 06:17:36,672 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 06:17:36,674 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 06:17:36,684 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 06:17:36,684 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 06:17:36,685 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 06:17:36,686 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 06:17:36,687 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 06:17:36,688 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 06:17:36,689 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 06:17:36,690 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 06:17:36,690 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 06:17:36,690 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 06:17:36,691 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 06:17:36,692 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 06:17:36,693 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 06:17:36,693 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 06:17:36,694 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 06:17:36,695 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 06:17:36,697 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 06:17:36,697 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 06:17:36,698 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 06:17:36,700 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 06:17:36,700 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 06:17:36,700 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 06:17:36,700 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 06:17:36,701 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 06:17:36,701 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 06:17:36,702 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 06:17:36,702 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 06:17:36,702 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 06:17:36,703 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 06:17:36,703 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 06:17:36,704 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 06:17:36,704 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 06:17:36,704 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 06:17:36,705 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 06:17:36,705 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 06:17:36,705 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 06:17:36,706 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 06:17:36,706 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 06:17:36,706 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 06:17:36,714 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 06:17:36,714 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 06:17:36,715 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 06:17:36,715 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 06:17:36,715 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 06:17:36,715 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 06:17:36,715 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 06:17:36,715 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 06:17:36,715 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 06:17:36,715 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 06:17:36,715 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 06:17:36,716 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 06:17:36,716 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 06:17:36,716 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 06:17:36,716 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 06:17:36,716 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 06:17:36,716 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 06:17:36,716 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 06:17:36,716 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 06:17:36,716 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 06:17:36,716 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 06:17:36,717 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 06:17:36,717 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 06:17:36,717 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 06:17:36,717 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 06:17:36,717 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 06:17:36,740 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 06:17:36,753 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 06:17:36,756 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 06:17:36,757 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 06:17:36,757 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 06:17:36,758 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-fail.bpl
[2020-11-25 06:17:36,758 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-fail.bpl'
[2020-11-25 06:17:36,829 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 06:17:36,831 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 06:17:36,831 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 06:17:36,831 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 06:17:36,831 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 06:17:36,847 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:17:36" (1/1) ...
[2020-11-25 06:17:36,848 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:17:36" (1/1) ...
[2020-11-25 06:17:36,875 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:17:36" (1/1) ...
[2020-11-25 06:17:36,875 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:17:36" (1/1) ...
[2020-11-25 06:17:36,892 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:17:36" (1/1) ...
[2020-11-25 06:17:36,899 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:17:36" (1/1) ...
[2020-11-25 06:17:36,905 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:17:36" (1/1) ...
[2020-11-25 06:17:36,912 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 06:17:36,913 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 06:17:36,913 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 06:17:36,914 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 06:17:36,918 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:17:36" (1/1) ...
[2020-11-25 06:17:36,935 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(TokenERC20.transferFrom(from, to, value), from != to && (value > balanceOf_TokenERC20[this][from] || value > allowance_TokenERC20[this][from][msg.sender] || balanceOf_TokenERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transferFrom)))
[2020-11-25 06:17:36,941 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(TokenERC20.transferFrom(from, to, value), from != to && (value > balanceOf_TokenERC20[this][from] || value > allowance_TokenERC20[this][from][msg.sender] || balanceOf_TokenERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transferFrom)))
[2020-11-25 06:17:36,948 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(TokenERC20.transferFrom(from, to, value), from != to && (value > balanceOf_TokenERC20[this][from] || value > allowance_TokenERC20[this][from][msg.sender] || balanceOf_TokenERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transferFrom)))
[2020-11-25 06:17:36,954 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( _from_s376!=_to_s376 && ( ( _value_s376>balanceOf_TokenERC20[this][_from_s376] || _value_s376>allowance_TokenERC20[this][_from_s376][msg.sender] ) || ( balanceOf_TokenERC20[this][_to_s376] + _value_s376 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && _value_s376>=0 ) && _value_s376<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][_to_s376]>=0 ) && balanceOf_TokenERC20[this][_to_s376]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][_from_s376]>=0 ) && balanceOf_TokenERC20[this][_from_s376]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowance_TokenERC20[this][_from_s376][msg.sender]>=0 ) && allowance_TokenERC20[this][_from_s376][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[_from_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IdentifierExpression[_to_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPGT,IdentifierExpression[_value_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IdentifierExpression[_value_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s376,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 06:17:36,959 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(TokenERC20.transferFrom(from, to, value), from != to && (value > balanceOf_TokenERC20[this][from] || value > allowance_TokenERC20[this][from][msg.sender] || balanceOf_TokenERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transferFrom)))
[2020-11-25 06:17:36,959 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_TokenERC200) ==> ( <>AP(fail_transferFrom_TokenERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 06:17:36,966 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:17:36 PropertyContainer
[2020-11-25 06:17:36,966 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 06:17:36,966 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 06:17:36,966 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 06:17:36,966 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 06:17:36,967 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:17:36" (1/2) ...
[2020-11-25 06:17:36,967 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 06:17:36,967 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 06:17:36,978 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:17:36" (2/2) ...
[2020-11-25 06:17:36,978 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 06:17:36,978 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 06:17:36,979 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 06:17:36,979 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 06:17:36,979 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:17:36" (1/2) ...
[2020-11-25 06:17:37,030 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 06:17:37,031 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 06:17:37,031 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient
[2020-11-25 06:17:37,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient
[2020-11-25 06:17:37,031 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_tokenRecipient
[2020-11-25 06:17:37,031 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 06:17:37,031 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20
[2020-11-25 06:17:37,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20
[2020-11-25 06:17:37,031 INFO  L130     BoogieDeclarations]: Found specification of procedure toggleLockIn_TokenERC20
[2020-11-25 06:17:37,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure toggleLockIn_TokenERC20
[2020-11-25 06:17:37,031 INFO  L130     BoogieDeclarations]: Found specification of procedure addToWhitelist~address_TokenERC20
[2020-11-25 06:17:37,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToWhitelist~address_TokenERC20
[2020-11-25 06:17:37,032 INFO  L130     BoogieDeclarations]: Found specification of procedure removeFromWhitelist~address_TokenERC20
[2020-11-25 06:17:37,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeFromWhitelist~address_TokenERC20
[2020-11-25 06:17:37,032 INFO  L130     BoogieDeclarations]: Found specification of procedure addToAdmin~address_TokenERC20
[2020-11-25 06:17:37,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToAdmin~address_TokenERC20
[2020-11-25 06:17:37,032 INFO  L130     BoogieDeclarations]: Found specification of procedure removeFromAdmin~address_TokenERC20
[2020-11-25 06:17:37,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeFromAdmin~address_TokenERC20
[2020-11-25 06:17:37,032 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 06:17:37,032 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20
[2020-11-25 06:17:37,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20
[2020-11-25 06:17:37,033 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 06:17:37,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 06:17:37,033 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20
[2020-11-25 06:17:37,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20
[2020-11-25 06:17:37,033 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 06:17:37,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 06:17:37,033 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20
[2020-11-25 06:17:37,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20
[2020-11-25 06:17:37,033 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 06:17:37,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 06:17:37,033 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20
[2020-11-25 06:17:37,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20
[2020-11-25 06:17:37,034 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20
[2020-11-25 06:17:37,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20
[2020-11-25 06:17:37,034 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20
[2020-11-25 06:17:37,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20
[2020-11-25 06:17:37,034 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_TokenERC20
[2020-11-25 06:17:37,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_TokenERC20
[2020-11-25 06:17:37,034 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20
[2020-11-25 06:17:37,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20
[2020-11-25 06:17:37,034 INFO  L130     BoogieDeclarations]: Found specification of procedure lockIn_TokenERC20
[2020-11-25 06:17:37,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockIn_TokenERC20
[2020-11-25 06:17:37,034 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20
[2020-11-25 06:17:37,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20
[2020-11-25 06:17:37,034 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20
[2020-11-25 06:17:37,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20
[2020-11-25 06:17:37,035 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 06:17:37,035 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 06:17:37,035 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 06:17:37,035 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_tokenRecipient
[2020-11-25 06:17:37,035 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_tokenRecipient
[2020-11-25 06:17:37,035 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TokenERC20
[2020-11-25 06:17:37,035 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 06:17:37,035 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 06:17:37,035 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 06:17:37,035 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 06:17:37,035 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 06:17:37,035 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 06:17:37,036 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__success
[2020-11-25 06:17:37,036 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__fail
[2020-11-25 06:17:37,036 INFO  L130     BoogieDeclarations]: Found specification of procedure toggleLockIn_TokenERC20__success
[2020-11-25 06:17:37,036 INFO  L130     BoogieDeclarations]: Found specification of procedure toggleLockIn_TokenERC20__fail
[2020-11-25 06:17:37,036 INFO  L130     BoogieDeclarations]: Found specification of procedure addToWhitelist~address_TokenERC20__success
[2020-11-25 06:17:37,036 INFO  L130     BoogieDeclarations]: Found specification of procedure addToWhitelist~address_TokenERC20__fail
[2020-11-25 06:17:37,036 INFO  L130     BoogieDeclarations]: Found specification of procedure removeFromWhitelist~address_TokenERC20__success
[2020-11-25 06:17:37,036 INFO  L130     BoogieDeclarations]: Found specification of procedure removeFromWhitelist~address_TokenERC20__fail
[2020-11-25 06:17:37,036 INFO  L130     BoogieDeclarations]: Found specification of procedure addToAdmin~address_TokenERC20__success
[2020-11-25 06:17:37,036 INFO  L130     BoogieDeclarations]: Found specification of procedure addToAdmin~address_TokenERC20__fail
[2020-11-25 06:17:37,036 INFO  L130     BoogieDeclarations]: Found specification of procedure removeFromAdmin~address_TokenERC20__success
[2020-11-25 06:17:37,036 INFO  L130     BoogieDeclarations]: Found specification of procedure removeFromAdmin~address_TokenERC20__fail
[2020-11-25 06:17:37,036 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 06:17:37,037 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 06:17:37,037 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 06:17:37,037 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 06:17:37,037 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 06:17:37,037 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 06:17:37,037 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 06:17:37,037 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 06:17:37,037 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 06:17:37,037 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__success
[2020-11-25 06:17:37,037 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__fail
[2020-11-25 06:17:37,037 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 06:17:37,037 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 06:17:37,037 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__success
[2020-11-25 06:17:37,038 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__fail
[2020-11-25 06:17:37,038 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__success
[2020-11-25 06:17:37,038 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__fail
[2020-11-25 06:17:37,038 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__success
[2020-11-25 06:17:37,038 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__fail
[2020-11-25 06:17:37,038 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_TokenERC20__success
[2020-11-25 06:17:37,038 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_TokenERC20__fail
[2020-11-25 06:17:37,038 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__success
[2020-11-25 06:17:37,038 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__fail
[2020-11-25 06:17:37,038 INFO  L130     BoogieDeclarations]: Found specification of procedure lockIn_TokenERC20__success
[2020-11-25 06:17:37,038 INFO  L130     BoogieDeclarations]: Found specification of procedure lockIn_TokenERC20__fail
[2020-11-25 06:17:37,039 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__success
[2020-11-25 06:17:37,039 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 06:17:37,039 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__success
[2020-11-25 06:17:37,039 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 06:17:37,039 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 06:17:37,039 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 06:17:37,039 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 06:17:37,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 06:17:37,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 06:17:37,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 06:17:37,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 06:17:37,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 06:17:37,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 06:17:37,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 06:17:37,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 06:17:37,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__fail
[2020-11-25 06:17:37,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__success
[2020-11-25 06:17:37,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure toggleLockIn_TokenERC20__fail
[2020-11-25 06:17:37,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure toggleLockIn_TokenERC20__success
[2020-11-25 06:17:37,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToWhitelist~address_TokenERC20__fail
[2020-11-25 06:17:37,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToWhitelist~address_TokenERC20__success
[2020-11-25 06:17:37,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeFromWhitelist~address_TokenERC20__fail
[2020-11-25 06:17:37,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeFromWhitelist~address_TokenERC20__success
[2020-11-25 06:17:37,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToAdmin~address_TokenERC20__fail
[2020-11-25 06:17:37,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToAdmin~address_TokenERC20__success
[2020-11-25 06:17:37,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeFromAdmin~address_TokenERC20__fail
[2020-11-25 06:17:37,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeFromAdmin~address_TokenERC20__success
[2020-11-25 06:17:37,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 06:17:37,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 06:17:37,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 06:17:37,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 06:17:37,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 06:17:37,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 06:17:37,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 06:17:37,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 06:17:37,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 06:17:37,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 06:17:37,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__fail
[2020-11-25 06:17:37,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__success
[2020-11-25 06:17:37,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 06:17:37,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 06:17:37,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__fail
[2020-11-25 06:17:37,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__success
[2020-11-25 06:17:37,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__fail
[2020-11-25 06:17:37,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__success
[2020-11-25 06:17:37,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__fail
[2020-11-25 06:17:37,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__success
[2020-11-25 06:17:37,042 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_TokenERC20__fail
[2020-11-25 06:17:37,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_TokenERC20__success
[2020-11-25 06:17:37,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__fail
[2020-11-25 06:17:37,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__success
[2020-11-25 06:17:37,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockIn_TokenERC20__fail
[2020-11-25 06:17:37,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockIn_TokenERC20__success
[2020-11-25 06:17:37,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 06:17:37,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__success
[2020-11-25 06:17:37,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 06:17:37,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__success
[2020-11-25 06:17:37,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 06:17:37,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 06:17:37,043 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 06:17:37,044 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 06:17:37,044 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 06:17:37,044 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 06:17:37,044 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_tokenRecipient
[2020-11-25 06:17:37,044 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_tokenRecipient
[2020-11-25 06:17:37,044 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TokenERC20
[2020-11-25 06:17:37,044 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 06:17:37,044 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 06:17:37,044 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 06:17:37,483 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:17:37,483 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:17:37,626 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 06:17:37,626 INFO  L286             CfgBuilder]: Removed 2 assue(true) statements.
[2020-11-25 06:17:37,628 INFO  L202        PluginConnector]: Adding new model TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:17:37 BoogieIcfgContainer
[2020-11-25 06:17:37,629 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:17:36" (2/2) ...
[2020-11-25 06:17:37,629 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 06:17:37,629 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@77867b0b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:17:37, skipping insertion in model container
[2020-11-25 06:17:37,629 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 06:17:37,629 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 06:17:37,629 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 06:17:37,631 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 06:17:37,631 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:17:36" (1/3) ...
[2020-11-25 06:17:37,631 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@124654ab and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:17:37, skipping insertion in model container
[2020-11-25 06:17:37,632 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:17:36" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 06:17:37,670 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:17:37 NWAContainer
[2020-11-25 06:17:37,670 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 06:17:37,671 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 06:17:37,671 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 06:17:37,671 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 06:17:37,672 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:17:37" (3/4) ...
[2020-11-25 06:17:37,673 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@63b8fb55 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:17:37, skipping insertion in model container
[2020-11-25 06:17:37,673 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:17:37" (4/4) ...
[2020-11-25 06:17:37,676 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 06:17:37,680 INFO  L110   BuchiProductObserver]: Initial RCFG 1291 locations, 1550 edges
[2020-11-25 06:17:37,680 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 06:17:37,690 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 06:17:38,849 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 06:17:38,853 INFO  L110   BuchiProductObserver]: BuchiProgram size 2960 locations, 4949 edges
[2020-11-25 06:17:38,853 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:17:38 BoogieIcfgContainer
[2020-11-25 06:17:38,853 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 06:17:38,853 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 06:17:38,853 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 06:17:38,855 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 06:17:38,855 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:17:38" (1/1) ...
[2020-11-25 06:17:38,992 INFO  L313           BlockEncoder]: Initial Icfg 2960 locations, 4949 edges
[2020-11-25 06:17:38,993 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 06:17:38,993 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 06:17:38,993 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 06:17:38,994 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 06:17:39,003 INFO  L70    emoveInfeasibleEdges]: Removed 30 edges and 7 locations because of local infeasibility
[2020-11-25 06:17:39,016 INFO  L70        RemoveSinkStates]: Removed 54 edges and 27 locations by removing sink states
[2020-11-25 06:17:39,026 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 06:17:39,030 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 06:17:39,033 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 06:17:39,033 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 06:17:39,038 INFO  L313           BlockEncoder]: Encoded RCFG 2914 locations, 4848 edges
[2020-11-25 06:17:39,038 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:17:39 BasicIcfg
[2020-11-25 06:17:39,038 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 06:17:39,039 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 06:17:39,039 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 06:17:39,041 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 06:17:39,041 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:17:39,042 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:17:36" (1/6) ...
[2020-11-25 06:17:39,043 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6265587e and model type TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:17:39, skipping insertion in model container
[2020-11-25 06:17:39,043 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:17:39,043 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:17:36" (2/6) ...
[2020-11-25 06:17:39,044 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6265587e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:17:39, skipping insertion in model container
[2020-11-25 06:17:39,044 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:17:39,044 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:17:37" (3/6) ...
[2020-11-25 06:17:39,044 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6265587e and model type TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:17:39, skipping insertion in model container
[2020-11-25 06:17:39,044 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:17:39,044 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:17:37" (4/6) ...
[2020-11-25 06:17:39,044 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6265587e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:17:39, skipping insertion in model container
[2020-11-25 06:17:39,045 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:17:39,045 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:17:38" (5/6) ...
[2020-11-25 06:17:39,045 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6265587e and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 06:17:39, skipping insertion in model container
[2020-11-25 06:17:39,045 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:17:39,045 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:17:39" (6/6) ...
[2020-11-25 06:17:39,046 INFO  L404   chiAutomizerObserver]: Analyzing ICFG TokenERC20_0x97e989FD773745f7E1678c2004057F1378591A71_transferfrom-fail.bpl_BEv2
[2020-11-25 06:17:39,087 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 06:17:39,087 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 06:17:39,087 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 06:17:39,087 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 06:17:39,087 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 06:17:39,087 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 06:17:39,088 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 06:17:39,088 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 06:17:39,088 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 06:17:39,119 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2914 states.
[2020-11-25 06:17:39,170 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:17:39,170 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:17:39,170 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:17:39,180 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:17:39,180 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:17:39,180 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 06:17:39,180 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2914 states.
[2020-11-25 06:17:39,199 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:17:39,199 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:17:39,199 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:17:39,201 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:17:39,201 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L3321]              assume null == 0;
[L3322]  CALL        call this := FreshRefGenerator__success();
[L1843]              havoc newRef;
[L1844]              assume Alloc[newRef] == false;
[L1845]              Alloc[newRef] := true;
[L1846]              assume newRef != null;
[L3322]  RET         call this := FreshRefGenerator__success();
[L3323]              assume now >= 0;
[L3324]              assume DType[this] == TokenERC20;
[L3325]              assume msgvalue_MSG == 0;
[L3326]              gas := gas - 53000;
[L3327]  CALL        call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L176]               havoc __exception;
[L177]               revert := false;
[L178]   COND FALSE  !(__exception)
[L206]   CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1959]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1918]              assume msgsender_MSG != null;
[L1919]              Balance[this] := 0;
[L1920]              name_TokenERC20[this] := 846149099;
[L1921]              symbol_TokenERC20[this] := 846149099;
[L1922]              decimals_TokenERC20[this] := 8;
[L1923]              owner_TokenERC20[this] := null;
[L1924]              totalSupply_TokenERC20[this] := 0;
[L1925]              lockIn_TokenERC20[this] := false;
[L1926]              whitelisted_TokenERC20[this] := zeroRefboolArr();
[L1927]              admin_TokenERC20[this] := zeroRefboolArr();
[L1928]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L1929]              sum_balanceOf2[this] := 0;
[L1930]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L1931]              sum_allowance3[this] := 0;
[L1933]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1934]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s130, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1935]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1936]              balanceOf_TokenERC20[this][crowdsaleOwner_s130] := totalSupply_TokenERC20[this];
[L1937]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1938]              name_TokenERC20[this] := tokenName_s130;
[L1939]              symbol_TokenERC20[this] := tokenSymbol_s130;
[L1940]              lockIn_TokenERC20[this] := false;
[L1941]              admin_TokenERC20[this][msgsender_MSG] := true;
[L1942]              whitelisted_TokenERC20[this][msgsender_MSG] := true;
[L1943]              owner_TokenERC20[this] := crowdsaleOwner_s130;
[L1944]              admin_TokenERC20[this][crowdsaleOwner_s130] := true;
[L1959]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1960]  COND FALSE  !(revert)
[L206]   RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L207]               assume !revert && gas >= 0;
[L3327]  RET         call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L3328]              assume !revert && gas >= 0;

Loop:
[L3331]  CALL        call CorralChoice_TokenERC20(this);
[L3139]              havoc msgsender_MSG;
[L3140]              havoc msgvalue_MSG;
[L3141]              havoc choice;
[L3142]              havoc __ret_0_name;
[L3143]              havoc __ret_0_symbol;
[L3144]              havoc __ret_0_decimals;
[L3145]              havoc __ret_0_owner;
[L3146]              havoc __ret_0_totalSupply;
[L3147]              havoc __ret_0_lockIn;
[L3148]              havoc arg536_s0;
[L3149]              havoc __ret_0_balanceOf;
[L3150]              havoc arg537_s0;
[L3151]              havoc arg538_s0;
[L3152]              havoc __ret_0_allowance;
[L3153]              havoc initialSupply_s130;
[L3154]              havoc tokenName_s130;
[L3155]              havoc tokenSymbol_s130;
[L3156]              havoc crowdsaleOwner_s130;
[L3157]              havoc newAddress_s165;
[L3158]              havoc oldaddress_s190;
[L3159]              havoc newAddress_s209;
[L3160]              havoc oldAddress_s234;
[L3161]              havoc _to_s336;
[L3162]              havoc _value_s336;
[L3163]              havoc _from_s376;
[L3164]              havoc _to_s376;
[L3165]              havoc _value_s376;
[L3166]              havoc success_s376;
[L3167]              havoc _spender_s404;
[L3168]              havoc _value_s404;
[L3169]              havoc success_s404;
[L3170]              havoc _spender_s442;
[L3171]              havoc _value_s442;
[L3172]              havoc _extraData_s442;
[L3173]              havoc success_s442;
[L3174]              havoc _value_s478;
[L3175]              havoc success_s478;
[L3176]              havoc _from_s533;
[L3177]              havoc _value_s533;
[L3178]              havoc success_s533;
[L3179]              havoc tmpNow;
[L3180]              havoc gas;
[L3181]              assume gas > 4000000 && gas <= 8000000;
[L3182]              tmpNow := now;
[L3183]              havoc now;
[L3184]              assume now > tmpNow;
[L3185]              assume msgsender_MSG != null;
[L3186]              assume DType[msgsender_MSG] != tokenRecipient;
[L3187]              assume DType[msgsender_MSG] != TokenERC20;
[L3188]              Alloc[msgsender_MSG] := true;
[L3189]  COND TRUE   choice == 19
[L3190]              gas := gas - 21000;
[L3191]  COND FALSE  !(gas >= 0)
[L3331]  RET         call CorralChoice_TokenERC20(this);

[2020-11-25 06:17:39,219 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:17:39,219 INFO  L82        PathProgramCache]: Analyzing trace with hash 1685621611, now seen corresponding path program 1 times
[2020-11-25 06:17:39,223 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:17:39,244 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:17:39,288 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:17:39,290 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:17:39,290 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 06:17:39,294 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:17:39,429 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 06:17:39,430 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 06:17:39,431 INFO  L87              Difference]: Start difference. First operand 2914 states. Second operand 3 states.
[2020-11-25 06:17:39,631 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:17:39,631 INFO  L93              Difference]: Finished difference Result 2433 states and 2641 transitions.
[2020-11-25 06:17:39,632 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 06:17:39,633 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2433 states and 2641 transitions.
[2020-11-25 06:17:39,647 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:17:39,669 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2433 states to 2431 states and 2637 transitions.
[2020-11-25 06:17:39,671 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 06:17:39,673 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1130
[2020-11-25 06:17:39,674 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2431 states and 2637 transitions.
[2020-11-25 06:17:39,681 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:17:39,681 INFO  L728         BuchiCegarLoop]: Abstraction has 2431 states and 2637 transitions.
[2020-11-25 06:17:39,699 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2431 states and 2637 transitions.
[2020-11-25 06:17:39,741 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2431 to 2431.
[2020-11-25 06:17:39,742 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2431 states.
[2020-11-25 06:17:39,747 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2431 states to 2431 states and 2637 transitions.
[2020-11-25 06:17:39,748 INFO  L751         BuchiCegarLoop]: Abstraction has 2431 states and 2637 transitions.
[2020-11-25 06:17:39,748 INFO  L631         BuchiCegarLoop]: Abstraction has 2431 states and 2637 transitions.
[2020-11-25 06:17:39,748 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 06:17:39,748 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2431 states and 2637 transitions.
[2020-11-25 06:17:39,757 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:17:39,757 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:17:39,757 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:17:39,760 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:17:39,760 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L3321]              assume null == 0;
[L3322]  CALL        call this := FreshRefGenerator__success();
[L1843]              havoc newRef;
[L1844]              assume Alloc[newRef] == false;
[L1845]              Alloc[newRef] := true;
[L1846]              assume newRef != null;
[L3322]  RET         call this := FreshRefGenerator__success();
[L3323]              assume now >= 0;
[L3324]              assume DType[this] == TokenERC20;
[L3325]              assume msgvalue_MSG == 0;
[L3326]              gas := gas - 53000;
[L3327]  CALL        call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L176]               havoc __exception;
[L177]               revert := false;
[L178]   COND FALSE  !(__exception)
[L206]   CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1959]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1918]              assume msgsender_MSG != null;
[L1919]              Balance[this] := 0;
[L1920]              name_TokenERC20[this] := 846149099;
[L1921]              symbol_TokenERC20[this] := 846149099;
[L1922]              decimals_TokenERC20[this] := 8;
[L1923]              owner_TokenERC20[this] := null;
[L1924]              totalSupply_TokenERC20[this] := 0;
[L1925]              lockIn_TokenERC20[this] := false;
[L1926]              whitelisted_TokenERC20[this] := zeroRefboolArr();
[L1927]              admin_TokenERC20[this] := zeroRefboolArr();
[L1928]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L1929]              sum_balanceOf2[this] := 0;
[L1930]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L1931]              sum_allowance3[this] := 0;
[L1933]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1934]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s130, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1935]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1936]              balanceOf_TokenERC20[this][crowdsaleOwner_s130] := totalSupply_TokenERC20[this];
[L1937]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1938]              name_TokenERC20[this] := tokenName_s130;
[L1939]              symbol_TokenERC20[this] := tokenSymbol_s130;
[L1940]              lockIn_TokenERC20[this] := false;
[L1941]              admin_TokenERC20[this][msgsender_MSG] := true;
[L1942]              whitelisted_TokenERC20[this][msgsender_MSG] := true;
[L1943]              owner_TokenERC20[this] := crowdsaleOwner_s130;
[L1944]              admin_TokenERC20[this][crowdsaleOwner_s130] := true;
[L1959]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1960]  COND FALSE  !(revert)
[L206]   RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L207]               assume !revert && gas >= 0;
[L3327]  RET         call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L3328]              assume !revert && gas >= 0;
[L3331]  CALL        call CorralChoice_TokenERC20(this);
[L3139]              havoc msgsender_MSG;
[L3140]              havoc msgvalue_MSG;
[L3141]              havoc choice;
[L3142]              havoc __ret_0_name;
[L3143]              havoc __ret_0_symbol;
[L3144]              havoc __ret_0_decimals;
[L3145]              havoc __ret_0_owner;
[L3146]              havoc __ret_0_totalSupply;
[L3147]              havoc __ret_0_lockIn;
[L3148]              havoc arg536_s0;
[L3149]              havoc __ret_0_balanceOf;
[L3150]              havoc arg537_s0;
[L3151]              havoc arg538_s0;
[L3152]              havoc __ret_0_allowance;
[L3153]              havoc initialSupply_s130;
[L3154]              havoc tokenName_s130;
[L3155]              havoc tokenSymbol_s130;
[L3156]              havoc crowdsaleOwner_s130;
[L3157]              havoc newAddress_s165;
[L3158]              havoc oldaddress_s190;
[L3159]              havoc newAddress_s209;
[L3160]              havoc oldAddress_s234;
[L3161]              havoc _to_s336;
[L3162]              havoc _value_s336;
[L3163]              havoc _from_s376;
[L3164]              havoc _to_s376;
[L3165]              havoc _value_s376;
[L3166]              havoc success_s376;
[L3167]              havoc _spender_s404;
[L3168]              havoc _value_s404;
[L3169]              havoc success_s404;
[L3170]              havoc _spender_s442;
[L3171]              havoc _value_s442;
[L3172]              havoc _extraData_s442;
[L3173]              havoc success_s442;
[L3174]              havoc _value_s478;
[L3175]              havoc success_s478;
[L3176]              havoc _from_s533;
[L3177]              havoc _value_s533;
[L3178]              havoc success_s533;
[L3179]              havoc tmpNow;
[L3180]              havoc gas;
[L3181]              assume gas > 4000000 && gas <= 8000000;
[L3182]              tmpNow := now;
[L3183]              havoc now;
[L3184]              assume now > tmpNow;
[L3185]              assume msgsender_MSG != null;
[L3186]              assume DType[msgsender_MSG] != tokenRecipient;
[L3187]              assume DType[msgsender_MSG] != TokenERC20;
[L3188]              Alloc[msgsender_MSG] := true;
[L3189]  COND FALSE  !(choice == 19)
[L3195]  COND FALSE  !(choice == 18)
[L3201]  COND FALSE  !(choice == 17)
[L3207]  COND FALSE  !(choice == 16)
[L3213]  COND FALSE  !(choice == 15)
[L3219]  COND FALSE  !(choice == 14)
[L3225]  COND FALSE  !(choice == 13)
[L3231]  COND FALSE  !(choice == 12)
[L3237]  COND FALSE  !(choice == 11)
[L3243]  COND FALSE  !(choice == 10)
[L3249]  COND FALSE  !(choice == 9)
[L3255]  COND FALSE  !(choice == 8)
[L3261]  COND FALSE  !(choice == 7)
[L3267]  COND FALSE  !(choice == 6)
[L3274]  COND TRUE   choice == 5
[L3275]              gas := gas - 21000;
[L3276]  COND TRUE   gas >= 0
[L3277]              assume _value_s376 >= 0 && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3278]              assume msgvalue_MSG == 0;
[L3279]  CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s376 != _to_s376 && ((_value_s376 > balanceOf_TokenERC20[this][_from_s376] || _value_s376 > allowance_TokenERC20[this][_from_s376][msgsender_MSG]) || balanceOf_TokenERC20[this][_to_s376] + _value_s376 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s376 >= 0) && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s376] >= 0) && balanceOf_TokenERC20[this][_to_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s376] >= 0) && balanceOf_TokenERC20[this][_from_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L639]               havoc __exception;
[L640]               revert := false;
[L641]   COND FALSE  !(__exception)
[L669]   CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2172]  COND TRUE   !(_value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG])
[L2173]              revert := true;
[L669]   RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L670]               assume !revert && gas >= 0;
[L3279]  RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3331]  RET         call CorralChoice_TokenERC20(this);

Loop:
[L3331]  CALL        call CorralChoice_TokenERC20(this);
[L3139]              havoc msgsender_MSG;
[L3140]              havoc msgvalue_MSG;
[L3141]              havoc choice;
[L3142]              havoc __ret_0_name;
[L3143]              havoc __ret_0_symbol;
[L3144]              havoc __ret_0_decimals;
[L3145]              havoc __ret_0_owner;
[L3146]              havoc __ret_0_totalSupply;
[L3147]              havoc __ret_0_lockIn;
[L3148]              havoc arg536_s0;
[L3149]              havoc __ret_0_balanceOf;
[L3150]              havoc arg537_s0;
[L3151]              havoc arg538_s0;
[L3152]              havoc __ret_0_allowance;
[L3153]              havoc initialSupply_s130;
[L3154]              havoc tokenName_s130;
[L3155]              havoc tokenSymbol_s130;
[L3156]              havoc crowdsaleOwner_s130;
[L3157]              havoc newAddress_s165;
[L3158]              havoc oldaddress_s190;
[L3159]              havoc newAddress_s209;
[L3160]              havoc oldAddress_s234;
[L3161]              havoc _to_s336;
[L3162]              havoc _value_s336;
[L3163]              havoc _from_s376;
[L3164]              havoc _to_s376;
[L3165]              havoc _value_s376;
[L3166]              havoc success_s376;
[L3167]              havoc _spender_s404;
[L3168]              havoc _value_s404;
[L3169]              havoc success_s404;
[L3170]              havoc _spender_s442;
[L3171]              havoc _value_s442;
[L3172]              havoc _extraData_s442;
[L3173]              havoc success_s442;
[L3174]              havoc _value_s478;
[L3175]              havoc success_s478;
[L3176]              havoc _from_s533;
[L3177]              havoc _value_s533;
[L3178]              havoc success_s533;
[L3179]              havoc tmpNow;
[L3180]              havoc gas;
[L3181]              assume gas > 4000000 && gas <= 8000000;
[L3182]              tmpNow := now;
[L3183]              havoc now;
[L3184]              assume now > tmpNow;
[L3185]              assume msgsender_MSG != null;
[L3186]              assume DType[msgsender_MSG] != tokenRecipient;
[L3187]              assume DType[msgsender_MSG] != TokenERC20;
[L3188]              Alloc[msgsender_MSG] := true;
[L3189]  COND FALSE  !(choice == 19)
[L3195]  COND FALSE  !(choice == 18)
[L3201]  COND FALSE  !(choice == 17)
[L3207]  COND FALSE  !(choice == 16)
[L3213]  COND FALSE  !(choice == 15)
[L3219]  COND FALSE  !(choice == 14)
[L3225]  COND FALSE  !(choice == 13)
[L3231]  COND FALSE  !(choice == 12)
[L3237]  COND FALSE  !(choice == 11)
[L3243]  COND FALSE  !(choice == 10)
[L3249]  COND FALSE  !(choice == 9)
[L3255]  COND FALSE  !(choice == 8)
[L3261]  COND FALSE  !(choice == 7)
[L3267]  COND FALSE  !(choice == 6)
[L3274]  COND TRUE   choice == 5
[L3275]              gas := gas - 21000;
[L3276]  COND TRUE   gas >= 0
[L3277]              assume _value_s376 >= 0 && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3278]              assume msgvalue_MSG == 0;
[L3279]  CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s376 != _to_s376 && ((_value_s376 > balanceOf_TokenERC20[this][_from_s376] || _value_s376 > allowance_TokenERC20[this][_from_s376][msgsender_MSG]) || balanceOf_TokenERC20[this][_to_s376] + _value_s376 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s376 >= 0) && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s376] >= 0) && balanceOf_TokenERC20[this][_to_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s376] >= 0) && balanceOf_TokenERC20[this][_from_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L639]               havoc __exception;
[L640]               revert := false;
[L641]   COND FALSE  !(__exception)
[L669]   CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2172]  COND TRUE   !(_value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG])
[L2173]              revert := true;
[L669]   RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L670]               assume !revert && gas >= 0;
[L3279]  RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3331]  RET         call CorralChoice_TokenERC20(this);

[2020-11-25 06:17:39,766 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:17:39,766 INFO  L82        PathProgramCache]: Analyzing trace with hash 794788973, now seen corresponding path program 1 times
[2020-11-25 06:17:39,767 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:17:39,789 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:17:39,823 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:17:39,823 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:17:39,823 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 06:17:39,825 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:17:39,825 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 06:17:39,825 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 06:17:39,825 INFO  L87              Difference]: Start difference. First operand 2431 states and 2637 transitions. cyclomatic complexity: 208 Second operand 3 states.
[2020-11-25 06:17:39,899 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:17:39,900 INFO  L93              Difference]: Finished difference Result 3104 states and 3430 transitions.
[2020-11-25 06:17:39,900 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 06:17:39,900 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3104 states and 3430 transitions.
[2020-11-25 06:17:39,918 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 06:17:39,935 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3104 states to 2970 states and 3278 transitions.
[2020-11-25 06:17:39,935 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1395
[2020-11-25 06:17:39,936 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1395
[2020-11-25 06:17:39,936 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2970 states and 3278 transitions.
[2020-11-25 06:17:39,942 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:17:39,942 INFO  L728         BuchiCegarLoop]: Abstraction has 2970 states and 3278 transitions.
[2020-11-25 06:17:39,945 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2970 states and 3278 transitions.
[2020-11-25 06:17:39,975 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2970 to 2586.
[2020-11-25 06:17:39,975 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2586 states.
[2020-11-25 06:17:39,980 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2586 states to 2586 states and 2795 transitions.
[2020-11-25 06:17:39,980 INFO  L751         BuchiCegarLoop]: Abstraction has 2586 states and 2795 transitions.
[2020-11-25 06:17:39,980 INFO  L631         BuchiCegarLoop]: Abstraction has 2586 states and 2795 transitions.
[2020-11-25 06:17:39,980 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 06:17:39,981 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2586 states and 2795 transitions.
[2020-11-25 06:17:39,989 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 06:17:39,989 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:17:39,989 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:17:39,991 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:17:39,991 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L3321]              assume null == 0;
[L3322]  CALL        call this := FreshRefGenerator__success();
[L1843]              havoc newRef;
[L1844]              assume Alloc[newRef] == false;
[L1845]              Alloc[newRef] := true;
[L1846]              assume newRef != null;
[L3322]  RET         call this := FreshRefGenerator__success();
[L3323]              assume now >= 0;
[L3324]              assume DType[this] == TokenERC20;
[L3325]              assume msgvalue_MSG == 0;
[L3326]              gas := gas - 53000;
[L3327]  CALL        call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L176]               havoc __exception;
[L177]               revert := false;
[L178]   COND FALSE  !(__exception)
[L206]   CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1959]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1918]              assume msgsender_MSG != null;
[L1919]              Balance[this] := 0;
[L1920]              name_TokenERC20[this] := 846149099;
[L1921]              symbol_TokenERC20[this] := 846149099;
[L1922]              decimals_TokenERC20[this] := 8;
[L1923]              owner_TokenERC20[this] := null;
[L1924]              totalSupply_TokenERC20[this] := 0;
[L1925]              lockIn_TokenERC20[this] := false;
[L1926]              whitelisted_TokenERC20[this] := zeroRefboolArr();
[L1927]              admin_TokenERC20[this] := zeroRefboolArr();
[L1928]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L1929]              sum_balanceOf2[this] := 0;
[L1930]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L1931]              sum_allowance3[this] := 0;
[L1933]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1934]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s130, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1935]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1936]              balanceOf_TokenERC20[this][crowdsaleOwner_s130] := totalSupply_TokenERC20[this];
[L1937]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1938]              name_TokenERC20[this] := tokenName_s130;
[L1939]              symbol_TokenERC20[this] := tokenSymbol_s130;
[L1940]              lockIn_TokenERC20[this] := false;
[L1941]              admin_TokenERC20[this][msgsender_MSG] := true;
[L1942]              whitelisted_TokenERC20[this][msgsender_MSG] := true;
[L1943]              owner_TokenERC20[this] := crowdsaleOwner_s130;
[L1944]              admin_TokenERC20[this][crowdsaleOwner_s130] := true;
[L1959]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1960]  COND FALSE  !(revert)
[L206]   RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L207]               assume !revert && gas >= 0;
[L3327]  RET         call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L3328]              assume !revert && gas >= 0;
[L3331]  CALL        call CorralChoice_TokenERC20(this);
[L3139]              havoc msgsender_MSG;
[L3140]              havoc msgvalue_MSG;
[L3141]              havoc choice;
[L3142]              havoc __ret_0_name;
[L3143]              havoc __ret_0_symbol;
[L3144]              havoc __ret_0_decimals;
[L3145]              havoc __ret_0_owner;
[L3146]              havoc __ret_0_totalSupply;
[L3147]              havoc __ret_0_lockIn;
[L3148]              havoc arg536_s0;
[L3149]              havoc __ret_0_balanceOf;
[L3150]              havoc arg537_s0;
[L3151]              havoc arg538_s0;
[L3152]              havoc __ret_0_allowance;
[L3153]              havoc initialSupply_s130;
[L3154]              havoc tokenName_s130;
[L3155]              havoc tokenSymbol_s130;
[L3156]              havoc crowdsaleOwner_s130;
[L3157]              havoc newAddress_s165;
[L3158]              havoc oldaddress_s190;
[L3159]              havoc newAddress_s209;
[L3160]              havoc oldAddress_s234;
[L3161]              havoc _to_s336;
[L3162]              havoc _value_s336;
[L3163]              havoc _from_s376;
[L3164]              havoc _to_s376;
[L3165]              havoc _value_s376;
[L3166]              havoc success_s376;
[L3167]              havoc _spender_s404;
[L3168]              havoc _value_s404;
[L3169]              havoc success_s404;
[L3170]              havoc _spender_s442;
[L3171]              havoc _value_s442;
[L3172]              havoc _extraData_s442;
[L3173]              havoc success_s442;
[L3174]              havoc _value_s478;
[L3175]              havoc success_s478;
[L3176]              havoc _from_s533;
[L3177]              havoc _value_s533;
[L3178]              havoc success_s533;
[L3179]              havoc tmpNow;
[L3180]              havoc gas;
[L3181]              assume gas > 4000000 && gas <= 8000000;
[L3182]              tmpNow := now;
[L3183]              havoc now;
[L3184]              assume now > tmpNow;
[L3185]              assume msgsender_MSG != null;
[L3186]              assume DType[msgsender_MSG] != tokenRecipient;
[L3187]              assume DType[msgsender_MSG] != TokenERC20;
[L3188]              Alloc[msgsender_MSG] := true;
[L3189]  COND FALSE  !(choice == 19)
[L3195]  COND FALSE  !(choice == 18)
[L3201]  COND FALSE  !(choice == 17)
[L3207]  COND FALSE  !(choice == 16)
[L3213]  COND FALSE  !(choice == 15)
[L3219]  COND FALSE  !(choice == 14)
[L3225]  COND FALSE  !(choice == 13)
[L3231]  COND FALSE  !(choice == 12)
[L3237]  COND FALSE  !(choice == 11)
[L3243]  COND FALSE  !(choice == 10)
[L3249]  COND FALSE  !(choice == 9)
[L3255]  COND FALSE  !(choice == 8)
[L3261]  COND FALSE  !(choice == 7)
[L3267]  COND FALSE  !(choice == 6)
[L3274]  COND TRUE   choice == 5
[L3275]              gas := gas - 21000;
[L3276]  COND TRUE   gas >= 0
[L3277]              assume _value_s376 >= 0 && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3278]              assume msgvalue_MSG == 0;
[L3279]  CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s376 != _to_s376 && ((_value_s376 > balanceOf_TokenERC20[this][_from_s376] || _value_s376 > allowance_TokenERC20[this][_from_s376][msgsender_MSG]) || balanceOf_TokenERC20[this][_to_s376] + _value_s376 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s376 >= 0) && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s376] >= 0) && balanceOf_TokenERC20[this][_to_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s376] >= 0) && balanceOf_TokenERC20[this][_from_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L639]               havoc __exception;
[L640]               revert := false;
[L641]   COND FALSE  !(__exception)
[L669]   CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2172]  COND FALSE  !(!(_value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG]))
[L2176]              sum_allowance3[_from_s376] := sum_allowance3[_from_s376] - allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2177]              allowance_TokenERC20[this][_from_s376][msgsender_MSG] := (allowance_TokenERC20[this][_from_s376][msgsender_MSG] - _value_s376) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2178]              sum_allowance3[_from_s376] := sum_allowance3[_from_s376] + allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2179]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2107]  COND FALSE  !(lockIn_TokenERC20[this])
[L2113]              __var_2 := null;
[L2114]  COND FALSE  !(!(_to_s321 != null))
[L2118]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s321] >= _value_s321))
[L2122]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s321] + _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_TokenERC20[this][_to_s321]))
[L2126]              previousBalances_s321 := (balanceOf_TokenERC20[this][_from_s321] + balanceOf_TokenERC20[this][_to_s321]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][_from_s321];
[L2128]              balanceOf_TokenERC20[this][_from_s321] := (balanceOf_TokenERC20[this][_from_s321] - _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2129]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][_from_s321];
[L2130]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][_to_s321];
[L2131]              balanceOf_TokenERC20[this][_to_s321] := (balanceOf_TokenERC20[this][_to_s321] + _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2132]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][_to_s321];
[L2133]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L2134]              assert (balanceOf_TokenERC20[this][_from_s321] + balanceOf_TokenERC20[this][_to_s321]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s321;
[L2179]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2180]  COND FALSE  !(revert)
[L2183]              success_s376 := true;
[L669]   RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L670]               assume !revert && gas >= 0;
[L3279]  RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3331]  RET         call CorralChoice_TokenERC20(this);

Loop:
[L3331]  CALL        call CorralChoice_TokenERC20(this);
[L3139]              havoc msgsender_MSG;
[L3140]              havoc msgvalue_MSG;
[L3141]              havoc choice;
[L3142]              havoc __ret_0_name;
[L3143]              havoc __ret_0_symbol;
[L3144]              havoc __ret_0_decimals;
[L3145]              havoc __ret_0_owner;
[L3146]              havoc __ret_0_totalSupply;
[L3147]              havoc __ret_0_lockIn;
[L3148]              havoc arg536_s0;
[L3149]              havoc __ret_0_balanceOf;
[L3150]              havoc arg537_s0;
[L3151]              havoc arg538_s0;
[L3152]              havoc __ret_0_allowance;
[L3153]              havoc initialSupply_s130;
[L3154]              havoc tokenName_s130;
[L3155]              havoc tokenSymbol_s130;
[L3156]              havoc crowdsaleOwner_s130;
[L3157]              havoc newAddress_s165;
[L3158]              havoc oldaddress_s190;
[L3159]              havoc newAddress_s209;
[L3160]              havoc oldAddress_s234;
[L3161]              havoc _to_s336;
[L3162]              havoc _value_s336;
[L3163]              havoc _from_s376;
[L3164]              havoc _to_s376;
[L3165]              havoc _value_s376;
[L3166]              havoc success_s376;
[L3167]              havoc _spender_s404;
[L3168]              havoc _value_s404;
[L3169]              havoc success_s404;
[L3170]              havoc _spender_s442;
[L3171]              havoc _value_s442;
[L3172]              havoc _extraData_s442;
[L3173]              havoc success_s442;
[L3174]              havoc _value_s478;
[L3175]              havoc success_s478;
[L3176]              havoc _from_s533;
[L3177]              havoc _value_s533;
[L3178]              havoc success_s533;
[L3179]              havoc tmpNow;
[L3180]              havoc gas;
[L3181]              assume gas > 4000000 && gas <= 8000000;
[L3182]              tmpNow := now;
[L3183]              havoc now;
[L3184]              assume now > tmpNow;
[L3185]              assume msgsender_MSG != null;
[L3186]              assume DType[msgsender_MSG] != tokenRecipient;
[L3187]              assume DType[msgsender_MSG] != TokenERC20;
[L3188]              Alloc[msgsender_MSG] := true;
[L3189]  COND FALSE  !(choice == 19)
[L3195]  COND FALSE  !(choice == 18)
[L3201]  COND FALSE  !(choice == 17)
[L3207]  COND FALSE  !(choice == 16)
[L3213]  COND FALSE  !(choice == 15)
[L3219]  COND FALSE  !(choice == 14)
[L3225]  COND FALSE  !(choice == 13)
[L3231]  COND FALSE  !(choice == 12)
[L3237]  COND FALSE  !(choice == 11)
[L3243]  COND FALSE  !(choice == 10)
[L3249]  COND FALSE  !(choice == 9)
[L3255]  COND FALSE  !(choice == 8)
[L3261]  COND FALSE  !(choice == 7)
[L3267]  COND FALSE  !(choice == 6)
[L3274]  COND TRUE   choice == 5
[L3275]              gas := gas - 21000;
[L3276]  COND TRUE   gas >= 0
[L3277]              assume _value_s376 >= 0 && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3278]              assume msgvalue_MSG == 0;
[L3279]  CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s376 != _to_s376 && ((_value_s376 > balanceOf_TokenERC20[this][_from_s376] || _value_s376 > allowance_TokenERC20[this][_from_s376][msgsender_MSG]) || balanceOf_TokenERC20[this][_to_s376] + _value_s376 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s376 >= 0) && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s376] >= 0) && balanceOf_TokenERC20[this][_to_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s376] >= 0) && balanceOf_TokenERC20[this][_from_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L639]               havoc __exception;
[L640]               revert := false;
[L641]   COND FALSE  !(__exception)
[L669]   CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2172]  COND FALSE  !(!(_value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG]))
[L2176]              sum_allowance3[_from_s376] := sum_allowance3[_from_s376] - allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2177]              allowance_TokenERC20[this][_from_s376][msgsender_MSG] := (allowance_TokenERC20[this][_from_s376][msgsender_MSG] - _value_s376) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2178]              sum_allowance3[_from_s376] := sum_allowance3[_from_s376] + allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2179]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2107]  COND FALSE  !(lockIn_TokenERC20[this])
[L2113]              __var_2 := null;
[L2114]  COND FALSE  !(!(_to_s321 != null))
[L2118]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s321] >= _value_s321))
[L2122]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s321] + _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_TokenERC20[this][_to_s321]))
[L2126]              previousBalances_s321 := (balanceOf_TokenERC20[this][_from_s321] + balanceOf_TokenERC20[this][_to_s321]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][_from_s321];
[L2128]              balanceOf_TokenERC20[this][_from_s321] := (balanceOf_TokenERC20[this][_from_s321] - _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2129]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][_from_s321];
[L2130]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][_to_s321];
[L2131]              balanceOf_TokenERC20[this][_to_s321] := (balanceOf_TokenERC20[this][_to_s321] + _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2132]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][_to_s321];
[L2133]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L2134]              assert (balanceOf_TokenERC20[this][_from_s321] + balanceOf_TokenERC20[this][_to_s321]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s321;
[L2179]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2180]  COND FALSE  !(revert)
[L2183]              success_s376 := true;
[L669]   RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L670]               assume !revert && gas >= 0;
[L3279]  RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3331]  RET         call CorralChoice_TokenERC20(this);

[2020-11-25 06:17:39,995 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:17:39,995 INFO  L82        PathProgramCache]: Analyzing trace with hash 1928308137, now seen corresponding path program 1 times
[2020-11-25 06:17:39,996 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:17:40,019 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:17:40,188 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:17:40,189 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:17:40,189 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 06:17:40,189 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:17:40,189 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 06:17:40,190 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=46, Invalid=260, Unknown=0, NotChecked=0, Total=306
[2020-11-25 06:17:40,190 INFO  L87              Difference]: Start difference. First operand 2586 states and 2795 transitions. cyclomatic complexity: 211 Second operand 18 states.
[2020-11-25 06:17:42,250 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:17:42,250 INFO  L93              Difference]: Finished difference Result 2701 states and 2940 transitions.
[2020-11-25 06:17:42,251 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 06:17:42,251 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2701 states and 2940 transitions.
[2020-11-25 06:17:42,257 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 06:17:42,265 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2701 states to 2701 states and 2940 transitions.
[2020-11-25 06:17:42,265 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1327
[2020-11-25 06:17:42,266 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1327
[2020-11-25 06:17:42,266 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2701 states and 2940 transitions.
[2020-11-25 06:17:42,268 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:17:42,268 INFO  L728         BuchiCegarLoop]: Abstraction has 2701 states and 2940 transitions.
[2020-11-25 06:17:42,270 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2701 states and 2940 transitions.
[2020-11-25 06:17:42,287 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2701 to 2455.
[2020-11-25 06:17:42,287 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2455 states.
[2020-11-25 06:17:42,289 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2455 states to 2455 states and 2629 transitions.
[2020-11-25 06:17:42,289 INFO  L751         BuchiCegarLoop]: Abstraction has 2455 states and 2629 transitions.
[2020-11-25 06:17:42,289 INFO  L631         BuchiCegarLoop]: Abstraction has 2455 states and 2629 transitions.
[2020-11-25 06:17:42,289 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 06:17:42,289 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2455 states and 2629 transitions.
[2020-11-25 06:17:42,293 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:17:42,293 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:17:42,293 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:17:42,295 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:17:42,295 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L3321]              assume null == 0;
[L3322]  CALL        call this := FreshRefGenerator__success();
[L1843]              havoc newRef;
[L1844]              assume Alloc[newRef] == false;
[L1845]              Alloc[newRef] := true;
[L1846]              assume newRef != null;
[L3322]  RET         call this := FreshRefGenerator__success();
[L3323]              assume now >= 0;
[L3324]              assume DType[this] == TokenERC20;
[L3325]              assume msgvalue_MSG == 0;
[L3326]              gas := gas - 53000;
[L3327]  CALL        call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L176]               havoc __exception;
[L177]               revert := false;
[L178]   COND TRUE   __exception
[L179]               __tmp__Balance := Balance;
[L180]               __tmp__DType := DType;
[L181]               __tmp__Alloc := Alloc;
[L182]               __tmp__balance_ADDR := balance_ADDR;
[L183]               __tmp__M_Ref_bool := M_Ref_bool;
[L184]               __tmp__sum_whitelisted0 := sum_whitelisted0;
[L185]               __tmp__sum_admin1 := sum_admin1;
[L186]               __tmp__M_Ref_int := M_Ref_int;
[L187]               __tmp__sum_balanceOf2 := sum_balanceOf2;
[L188]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L189]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L190]               __tmp__sum_allowance3 := sum_allowance3;
[L191]               __tmp__Length := Length;
[L192]               __tmp__now := now;
[L193]               __tmp__name_TokenERC20 := name_TokenERC20;
[L194]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L195]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L196]               __tmp__owner_TokenERC20 := owner_TokenERC20;
[L197]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L198]               __tmp__lockIn_TokenERC20 := lockIn_TokenERC20;
[L199]               __tmp__whitelisted_TokenERC20 := whitelisted_TokenERC20;
[L200]               __tmp__admin_TokenERC20 := admin_TokenERC20;
[L201]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L202]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L203]   CALL        call TokenERC20_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1950]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1885]              assume msgsender_MSG != null;
[L1886]              __tmp__Balance[this] := 0;
[L1887]              __tmp__name_TokenERC20[this] := 846149099;
[L1888]              __tmp__symbol_TokenERC20[this] := 846149099;
[L1889]              __tmp__decimals_TokenERC20[this] := 8;
[L1890]              __tmp__owner_TokenERC20[this] := null;
[L1891]              __tmp__totalSupply_TokenERC20[this] := 0;
[L1892]              __tmp__lockIn_TokenERC20[this] := false;
[L1893]              __tmp__whitelisted_TokenERC20[this] := zeroRefboolArr();
[L1894]              __tmp__admin_TokenERC20[this] := zeroRefboolArr();
[L1895]              __tmp__balanceOf_TokenERC20[this] := zeroRefintArr();
[L1896]              __tmp__sum_balanceOf2[this] := 0;
[L1897]              __tmp__allowance_TokenERC20[this] := zeroRefRefintArr();
[L1898]              __tmp__sum_allowance3[this] := 0;
[L1900]              __var_1 := __tmp__decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1901]              __tmp__totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s130, nonlinearPow(10, __tmp__decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1902]              __tmp__sum_balanceOf2[this] := __tmp__sum_balanceOf2[this] - __tmp__balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1903]              __tmp__balanceOf_TokenERC20[this][crowdsaleOwner_s130] := __tmp__totalSupply_TokenERC20[this];
[L1904]              __tmp__sum_balanceOf2[this] := __tmp__sum_balanceOf2[this] + __tmp__balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1905]              __tmp__name_TokenERC20[this] := tokenName_s130;
[L1906]              __tmp__symbol_TokenERC20[this] := tokenSymbol_s130;
[L1907]              __tmp__lockIn_TokenERC20[this] := false;
[L1908]              __tmp__admin_TokenERC20[this][msgsender_MSG] := true;
[L1909]              __tmp__whitelisted_TokenERC20[this][msgsender_MSG] := true;
[L1910]              __tmp__owner_TokenERC20[this] := crowdsaleOwner_s130;
[L1911]              __tmp__admin_TokenERC20[this][crowdsaleOwner_s130] := true;
[L1950]  RET         call TokenERC20_TokenERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1951]  COND FALSE  !(revert)
[L203]   RET         call TokenERC20_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L204]               assume revert || gas < 0;
[L3327]  RET         call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L3328]              assume !revert && gas >= 0;
[L3331]  CALL        call CorralChoice_TokenERC20(this);
[L3139]              havoc msgsender_MSG;
[L3140]              havoc msgvalue_MSG;
[L3141]              havoc choice;
[L3142]              havoc __ret_0_name;
[L3143]              havoc __ret_0_symbol;
[L3144]              havoc __ret_0_decimals;
[L3145]              havoc __ret_0_owner;
[L3146]              havoc __ret_0_totalSupply;
[L3147]              havoc __ret_0_lockIn;
[L3148]              havoc arg536_s0;
[L3149]              havoc __ret_0_balanceOf;
[L3150]              havoc arg537_s0;
[L3151]              havoc arg538_s0;
[L3152]              havoc __ret_0_allowance;
[L3153]              havoc initialSupply_s130;
[L3154]              havoc tokenName_s130;
[L3155]              havoc tokenSymbol_s130;
[L3156]              havoc crowdsaleOwner_s130;
[L3157]              havoc newAddress_s165;
[L3158]              havoc oldaddress_s190;
[L3159]              havoc newAddress_s209;
[L3160]              havoc oldAddress_s234;
[L3161]              havoc _to_s336;
[L3162]              havoc _value_s336;
[L3163]              havoc _from_s376;
[L3164]              havoc _to_s376;
[L3165]              havoc _value_s376;
[L3166]              havoc success_s376;
[L3167]              havoc _spender_s404;
[L3168]              havoc _value_s404;
[L3169]              havoc success_s404;
[L3170]              havoc _spender_s442;
[L3171]              havoc _value_s442;
[L3172]              havoc _extraData_s442;
[L3173]              havoc success_s442;
[L3174]              havoc _value_s478;
[L3175]              havoc success_s478;
[L3176]              havoc _from_s533;
[L3177]              havoc _value_s533;
[L3178]              havoc success_s533;
[L3179]              havoc tmpNow;
[L3180]              havoc gas;
[L3181]              assume gas > 4000000 && gas <= 8000000;
[L3182]              tmpNow := now;
[L3183]              havoc now;
[L3184]              assume now > tmpNow;
[L3185]              assume msgsender_MSG != null;
[L3186]              assume DType[msgsender_MSG] != tokenRecipient;
[L3187]              assume DType[msgsender_MSG] != TokenERC20;
[L3188]              Alloc[msgsender_MSG] := true;
[L3189]  COND FALSE  !(choice == 19)
[L3195]  COND FALSE  !(choice == 18)
[L3201]  COND FALSE  !(choice == 17)
[L3207]  COND FALSE  !(choice == 16)
[L3213]  COND FALSE  !(choice == 15)
[L3219]  COND FALSE  !(choice == 14)
[L3225]  COND FALSE  !(choice == 13)
[L3231]  COND FALSE  !(choice == 12)
[L3237]  COND FALSE  !(choice == 11)
[L3243]  COND FALSE  !(choice == 10)
[L3249]  COND FALSE  !(choice == 9)
[L3255]  COND FALSE  !(choice == 8)
[L3261]  COND FALSE  !(choice == 7)
[L3267]  COND FALSE  !(choice == 6)
[L3274]  COND TRUE   choice == 5
[L3275]              gas := gas - 21000;
[L3276]  COND TRUE   gas >= 0
[L3277]              assume _value_s376 >= 0 && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3278]              assume msgvalue_MSG == 0;
[L3279]  CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s376 != _to_s376 && ((_value_s376 > balanceOf_TokenERC20[this][_from_s376] || _value_s376 > allowance_TokenERC20[this][_from_s376][msgsender_MSG]) || balanceOf_TokenERC20[this][_to_s376] + _value_s376 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s376 >= 0) && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s376] >= 0) && balanceOf_TokenERC20[this][_to_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s376] >= 0) && balanceOf_TokenERC20[this][_from_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L639]               havoc __exception;
[L640]               revert := false;
[L641]   COND FALSE  !(__exception)
[L669]   CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2172]  COND FALSE  !(!(_value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG]))
[L2176]              sum_allowance3[_from_s376] := sum_allowance3[_from_s376] - allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2177]              allowance_TokenERC20[this][_from_s376][msgsender_MSG] := (allowance_TokenERC20[this][_from_s376][msgsender_MSG] - _value_s376) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2178]              sum_allowance3[_from_s376] := sum_allowance3[_from_s376] + allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2179]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2107]  COND FALSE  !(lockIn_TokenERC20[this])
[L2113]              __var_2 := null;
[L2114]  COND FALSE  !(!(_to_s321 != null))
[L2118]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s321] >= _value_s321))
[L2122]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s321] + _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_TokenERC20[this][_to_s321]))
[L2126]              previousBalances_s321 := (balanceOf_TokenERC20[this][_from_s321] + balanceOf_TokenERC20[this][_to_s321]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][_from_s321];
[L2128]              balanceOf_TokenERC20[this][_from_s321] := (balanceOf_TokenERC20[this][_from_s321] - _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2129]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][_from_s321];
[L2130]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][_to_s321];
[L2131]              balanceOf_TokenERC20[this][_to_s321] := (balanceOf_TokenERC20[this][_to_s321] + _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2132]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][_to_s321];
[L2133]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L2134]              assert (balanceOf_TokenERC20[this][_from_s321] + balanceOf_TokenERC20[this][_to_s321]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s321;
[L2179]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2180]  COND FALSE  !(revert)
[L2183]              success_s376 := true;
[L669]   RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L670]               assume !revert && gas >= 0;
[L3279]  RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3331]  RET         call CorralChoice_TokenERC20(this);

Loop:
[L3331]  CALL        call CorralChoice_TokenERC20(this);
[L3139]              havoc msgsender_MSG;
[L3140]              havoc msgvalue_MSG;
[L3141]              havoc choice;
[L3142]              havoc __ret_0_name;
[L3143]              havoc __ret_0_symbol;
[L3144]              havoc __ret_0_decimals;
[L3145]              havoc __ret_0_owner;
[L3146]              havoc __ret_0_totalSupply;
[L3147]              havoc __ret_0_lockIn;
[L3148]              havoc arg536_s0;
[L3149]              havoc __ret_0_balanceOf;
[L3150]              havoc arg537_s0;
[L3151]              havoc arg538_s0;
[L3152]              havoc __ret_0_allowance;
[L3153]              havoc initialSupply_s130;
[L3154]              havoc tokenName_s130;
[L3155]              havoc tokenSymbol_s130;
[L3156]              havoc crowdsaleOwner_s130;
[L3157]              havoc newAddress_s165;
[L3158]              havoc oldaddress_s190;
[L3159]              havoc newAddress_s209;
[L3160]              havoc oldAddress_s234;
[L3161]              havoc _to_s336;
[L3162]              havoc _value_s336;
[L3163]              havoc _from_s376;
[L3164]              havoc _to_s376;
[L3165]              havoc _value_s376;
[L3166]              havoc success_s376;
[L3167]              havoc _spender_s404;
[L3168]              havoc _value_s404;
[L3169]              havoc success_s404;
[L3170]              havoc _spender_s442;
[L3171]              havoc _value_s442;
[L3172]              havoc _extraData_s442;
[L3173]              havoc success_s442;
[L3174]              havoc _value_s478;
[L3175]              havoc success_s478;
[L3176]              havoc _from_s533;
[L3177]              havoc _value_s533;
[L3178]              havoc success_s533;
[L3179]              havoc tmpNow;
[L3180]              havoc gas;
[L3181]              assume gas > 4000000 && gas <= 8000000;
[L3182]              tmpNow := now;
[L3183]              havoc now;
[L3184]              assume now > tmpNow;
[L3185]              assume msgsender_MSG != null;
[L3186]              assume DType[msgsender_MSG] != tokenRecipient;
[L3187]              assume DType[msgsender_MSG] != TokenERC20;
[L3188]              Alloc[msgsender_MSG] := true;
[L3189]  COND FALSE  !(choice == 19)
[L3195]  COND FALSE  !(choice == 18)
[L3201]  COND FALSE  !(choice == 17)
[L3207]  COND FALSE  !(choice == 16)
[L3213]  COND FALSE  !(choice == 15)
[L3219]  COND FALSE  !(choice == 14)
[L3225]  COND FALSE  !(choice == 13)
[L3231]  COND FALSE  !(choice == 12)
[L3237]  COND FALSE  !(choice == 11)
[L3243]  COND FALSE  !(choice == 10)
[L3249]  COND FALSE  !(choice == 9)
[L3255]  COND FALSE  !(choice == 8)
[L3261]  COND FALSE  !(choice == 7)
[L3267]  COND FALSE  !(choice == 6)
[L3274]  COND TRUE   choice == 5
[L3275]              gas := gas - 21000;
[L3276]  COND TRUE   gas >= 0
[L3277]              assume _value_s376 >= 0 && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3278]              assume msgvalue_MSG == 0;
[L3279]  CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s376 != _to_s376 && ((_value_s376 > balanceOf_TokenERC20[this][_from_s376] || _value_s376 > allowance_TokenERC20[this][_from_s376][msgsender_MSG]) || balanceOf_TokenERC20[this][_to_s376] + _value_s376 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s376 >= 0) && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s376] >= 0) && balanceOf_TokenERC20[this][_to_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s376] >= 0) && balanceOf_TokenERC20[this][_from_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L639]               havoc __exception;
[L640]               revert := false;
[L641]   COND FALSE  !(__exception)
[L669]   CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2172]  COND FALSE  !(!(_value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG]))
[L2176]              sum_allowance3[_from_s376] := sum_allowance3[_from_s376] - allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2177]              allowance_TokenERC20[this][_from_s376][msgsender_MSG] := (allowance_TokenERC20[this][_from_s376][msgsender_MSG] - _value_s376) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2178]              sum_allowance3[_from_s376] := sum_allowance3[_from_s376] + allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2179]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2107]  COND FALSE  !(lockIn_TokenERC20[this])
[L2113]              __var_2 := null;
[L2114]  COND FALSE  !(!(_to_s321 != null))
[L2118]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s321] >= _value_s321))
[L2122]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s321] + _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_TokenERC20[this][_to_s321]))
[L2126]              previousBalances_s321 := (balanceOf_TokenERC20[this][_from_s321] + balanceOf_TokenERC20[this][_to_s321]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][_from_s321];
[L2128]              balanceOf_TokenERC20[this][_from_s321] := (balanceOf_TokenERC20[this][_from_s321] - _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2129]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][_from_s321];
[L2130]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][_to_s321];
[L2131]              balanceOf_TokenERC20[this][_to_s321] := (balanceOf_TokenERC20[this][_to_s321] + _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2132]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][_to_s321];
[L2133]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L2134]              assert (balanceOf_TokenERC20[this][_from_s321] + balanceOf_TokenERC20[this][_to_s321]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s321;
[L2179]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2180]  COND FALSE  !(revert)
[L2183]              success_s376 := true;
[L669]   RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L670]               assume !revert && gas >= 0;
[L3279]  RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3331]  RET         call CorralChoice_TokenERC20(this);

[2020-11-25 06:17:42,298 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:17:42,298 INFO  L82        PathProgramCache]: Analyzing trace with hash -406321868, now seen corresponding path program 1 times
[2020-11-25 06:17:42,299 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:17:42,306 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:17:42,329 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:17:42,329 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:17:42,329 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 06:17:42,329 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:17:42,330 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 06:17:42,330 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 06:17:42,330 INFO  L87              Difference]: Start difference. First operand 2455 states and 2629 transitions. cyclomatic complexity: 177 Second operand 4 states.
[2020-11-25 06:17:42,508 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:17:42,508 INFO  L93              Difference]: Finished difference Result 3216 states and 3590 transitions.
[2020-11-25 06:17:42,509 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 06:17:42,509 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3216 states and 3590 transitions.
[2020-11-25 06:17:42,517 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 06:17:42,526 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3216 states to 3150 states and 3524 transitions.
[2020-11-25 06:17:42,526 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1501
[2020-11-25 06:17:42,527 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1501
[2020-11-25 06:17:42,527 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3150 states and 3524 transitions.
[2020-11-25 06:17:42,530 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:17:42,530 INFO  L728         BuchiCegarLoop]: Abstraction has 3150 states and 3524 transitions.
[2020-11-25 06:17:42,532 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3150 states and 3524 transitions.
[2020-11-25 06:17:42,549 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3150 to 2404.
[2020-11-25 06:17:42,550 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2404 states.
[2020-11-25 06:17:42,552 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2404 states to 2404 states and 2577 transitions.
[2020-11-25 06:17:42,552 INFO  L751         BuchiCegarLoop]: Abstraction has 2404 states and 2577 transitions.
[2020-11-25 06:17:42,552 INFO  L631         BuchiCegarLoop]: Abstraction has 2404 states and 2577 transitions.
[2020-11-25 06:17:42,552 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 06:17:42,552 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2404 states and 2577 transitions.
[2020-11-25 06:17:42,555 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:17:42,555 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:17:42,555 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:17:42,556 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:17:42,556 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L3321]              assume null == 0;
[L3322]  CALL        call this := FreshRefGenerator__success();
[L1843]              havoc newRef;
[L1844]              assume Alloc[newRef] == false;
[L1845]              Alloc[newRef] := true;
[L1846]              assume newRef != null;
[L3322]  RET         call this := FreshRefGenerator__success();
[L3323]              assume now >= 0;
[L3324]              assume DType[this] == TokenERC20;
[L3325]              assume msgvalue_MSG == 0;
[L3326]              gas := gas - 53000;
[L3327]  CALL        call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L176]               havoc __exception;
[L177]               revert := false;
[L178]   COND FALSE  !(__exception)
[L206]   CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1959]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1918]              assume msgsender_MSG != null;
[L1919]              Balance[this] := 0;
[L1920]              name_TokenERC20[this] := 846149099;
[L1921]              symbol_TokenERC20[this] := 846149099;
[L1922]              decimals_TokenERC20[this] := 8;
[L1923]              owner_TokenERC20[this] := null;
[L1924]              totalSupply_TokenERC20[this] := 0;
[L1925]              lockIn_TokenERC20[this] := false;
[L1926]              whitelisted_TokenERC20[this] := zeroRefboolArr();
[L1927]              admin_TokenERC20[this] := zeroRefboolArr();
[L1928]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L1929]              sum_balanceOf2[this] := 0;
[L1930]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L1931]              sum_allowance3[this] := 0;
[L1933]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1934]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s130, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1935]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1936]              balanceOf_TokenERC20[this][crowdsaleOwner_s130] := totalSupply_TokenERC20[this];
[L1937]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1938]              name_TokenERC20[this] := tokenName_s130;
[L1939]              symbol_TokenERC20[this] := tokenSymbol_s130;
[L1940]              lockIn_TokenERC20[this] := false;
[L1941]              admin_TokenERC20[this][msgsender_MSG] := true;
[L1942]              whitelisted_TokenERC20[this][msgsender_MSG] := true;
[L1943]              owner_TokenERC20[this] := crowdsaleOwner_s130;
[L1944]              admin_TokenERC20[this][crowdsaleOwner_s130] := true;
[L1959]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1960]  COND FALSE  !(revert)
[L206]   RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L207]               assume !revert && gas >= 0;
[L3327]  RET         call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L3328]              assume !revert && gas >= 0;
[L3331]  CALL        call CorralChoice_TokenERC20(this);
[L3139]              havoc msgsender_MSG;
[L3140]              havoc msgvalue_MSG;
[L3141]              havoc choice;
[L3142]              havoc __ret_0_name;
[L3143]              havoc __ret_0_symbol;
[L3144]              havoc __ret_0_decimals;
[L3145]              havoc __ret_0_owner;
[L3146]              havoc __ret_0_totalSupply;
[L3147]              havoc __ret_0_lockIn;
[L3148]              havoc arg536_s0;
[L3149]              havoc __ret_0_balanceOf;
[L3150]              havoc arg537_s0;
[L3151]              havoc arg538_s0;
[L3152]              havoc __ret_0_allowance;
[L3153]              havoc initialSupply_s130;
[L3154]              havoc tokenName_s130;
[L3155]              havoc tokenSymbol_s130;
[L3156]              havoc crowdsaleOwner_s130;
[L3157]              havoc newAddress_s165;
[L3158]              havoc oldaddress_s190;
[L3159]              havoc newAddress_s209;
[L3160]              havoc oldAddress_s234;
[L3161]              havoc _to_s336;
[L3162]              havoc _value_s336;
[L3163]              havoc _from_s376;
[L3164]              havoc _to_s376;
[L3165]              havoc _value_s376;
[L3166]              havoc success_s376;
[L3167]              havoc _spender_s404;
[L3168]              havoc _value_s404;
[L3169]              havoc success_s404;
[L3170]              havoc _spender_s442;
[L3171]              havoc _value_s442;
[L3172]              havoc _extraData_s442;
[L3173]              havoc success_s442;
[L3174]              havoc _value_s478;
[L3175]              havoc success_s478;
[L3176]              havoc _from_s533;
[L3177]              havoc _value_s533;
[L3178]              havoc success_s533;
[L3179]              havoc tmpNow;
[L3180]              havoc gas;
[L3181]              assume gas > 4000000 && gas <= 8000000;
[L3182]              tmpNow := now;
[L3183]              havoc now;
[L3184]              assume now > tmpNow;
[L3185]              assume msgsender_MSG != null;
[L3186]              assume DType[msgsender_MSG] != tokenRecipient;
[L3187]              assume DType[msgsender_MSG] != TokenERC20;
[L3188]              Alloc[msgsender_MSG] := true;
[L3189]  COND FALSE  !(choice == 19)
[L3195]  COND FALSE  !(choice == 18)
[L3201]  COND FALSE  !(choice == 17)
[L3207]  COND FALSE  !(choice == 16)
[L3213]  COND FALSE  !(choice == 15)
[L3219]  COND FALSE  !(choice == 14)
[L3225]  COND FALSE  !(choice == 13)
[L3231]  COND FALSE  !(choice == 12)
[L3237]  COND FALSE  !(choice == 11)
[L3243]  COND FALSE  !(choice == 10)
[L3249]  COND FALSE  !(choice == 9)
[L3255]  COND FALSE  !(choice == 8)
[L3261]  COND FALSE  !(choice == 7)
[L3267]  COND FALSE  !(choice == 6)
[L3274]  COND FALSE  !(choice == 5)
[L3281]  COND TRUE   choice == 4
[L3282]              gas := gas - 21000;
[L3283]  COND TRUE   gas >= 0
[L3284]              assume _value_s404 >= 0 && _value_s404 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3285]              assume msgvalue_MSG == 0;
[L3286]  CALL        call success_s404 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _spender_s404, _value_s404);
[L705]               havoc __exception;
[L706]               revert := false;
[L707]   COND FALSE  !(__exception)
[L735]   CALL        call success_s404 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _spender_s404, _value_s404);
[L2198]              sum_allowance3[msgsender_MSG] := sum_allowance3[msgsender_MSG] - allowance_TokenERC20[this][msgsender_MSG][_spender_s404];
[L2199]              allowance_TokenERC20[this][msgsender_MSG][_spender_s404] := _value_s404;
[L2200]              sum_allowance3[msgsender_MSG] := sum_allowance3[msgsender_MSG] + allowance_TokenERC20[this][msgsender_MSG][_spender_s404];
[L2201]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L2202]              success_s404 := true;
[L735]   RET         call success_s404 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _spender_s404, _value_s404);
[L736]               assume !revert && gas >= 0;
[L3286]  RET         call success_s404 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _spender_s404, _value_s404);
[L3331]  RET         call CorralChoice_TokenERC20(this);
[L3331]  CALL        call CorralChoice_TokenERC20(this);
[L3139]              havoc msgsender_MSG;
[L3140]              havoc msgvalue_MSG;
[L3141]              havoc choice;
[L3142]              havoc __ret_0_name;
[L3143]              havoc __ret_0_symbol;
[L3144]              havoc __ret_0_decimals;
[L3145]              havoc __ret_0_owner;
[L3146]              havoc __ret_0_totalSupply;
[L3147]              havoc __ret_0_lockIn;
[L3148]              havoc arg536_s0;
[L3149]              havoc __ret_0_balanceOf;
[L3150]              havoc arg537_s0;
[L3151]              havoc arg538_s0;
[L3152]              havoc __ret_0_allowance;
[L3153]              havoc initialSupply_s130;
[L3154]              havoc tokenName_s130;
[L3155]              havoc tokenSymbol_s130;
[L3156]              havoc crowdsaleOwner_s130;
[L3157]              havoc newAddress_s165;
[L3158]              havoc oldaddress_s190;
[L3159]              havoc newAddress_s209;
[L3160]              havoc oldAddress_s234;
[L3161]              havoc _to_s336;
[L3162]              havoc _value_s336;
[L3163]              havoc _from_s376;
[L3164]              havoc _to_s376;
[L3165]              havoc _value_s376;
[L3166]              havoc success_s376;
[L3167]              havoc _spender_s404;
[L3168]              havoc _value_s404;
[L3169]              havoc success_s404;
[L3170]              havoc _spender_s442;
[L3171]              havoc _value_s442;
[L3172]              havoc _extraData_s442;
[L3173]              havoc success_s442;
[L3174]              havoc _value_s478;
[L3175]              havoc success_s478;
[L3176]              havoc _from_s533;
[L3177]              havoc _value_s533;
[L3178]              havoc success_s533;
[L3179]              havoc tmpNow;
[L3180]              havoc gas;
[L3181]              assume gas > 4000000 && gas <= 8000000;
[L3182]              tmpNow := now;
[L3183]              havoc now;
[L3184]              assume now > tmpNow;
[L3185]              assume msgsender_MSG != null;
[L3186]              assume DType[msgsender_MSG] != tokenRecipient;
[L3187]              assume DType[msgsender_MSG] != TokenERC20;
[L3188]              Alloc[msgsender_MSG] := true;
[L3189]  COND FALSE  !(choice == 19)
[L3195]  COND FALSE  !(choice == 18)
[L3201]  COND FALSE  !(choice == 17)
[L3207]  COND FALSE  !(choice == 16)
[L3213]  COND FALSE  !(choice == 15)
[L3219]  COND FALSE  !(choice == 14)
[L3225]  COND FALSE  !(choice == 13)
[L3231]  COND FALSE  !(choice == 12)
[L3237]  COND FALSE  !(choice == 11)
[L3243]  COND FALSE  !(choice == 10)
[L3249]  COND FALSE  !(choice == 9)
[L3255]  COND FALSE  !(choice == 8)
[L3261]  COND FALSE  !(choice == 7)
[L3267]  COND FALSE  !(choice == 6)
[L3274]  COND TRUE   choice == 5
[L3275]              gas := gas - 21000;
[L3276]  COND TRUE   gas >= 0
[L3277]              assume _value_s376 >= 0 && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3278]              assume msgvalue_MSG == 0;
[L3279]  CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s376 != _to_s376 && ((_value_s376 > balanceOf_TokenERC20[this][_from_s376] || _value_s376 > allowance_TokenERC20[this][_from_s376][msgsender_MSG]) || balanceOf_TokenERC20[this][_to_s376] + _value_s376 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s376 >= 0) && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s376] >= 0) && balanceOf_TokenERC20[this][_to_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s376] >= 0) && balanceOf_TokenERC20[this][_from_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L639]               havoc __exception;
[L640]               revert := false;
[L641]   COND FALSE  !(__exception)
[L669]   CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2172]  COND FALSE  !(!(_value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG]))
[L2176]              sum_allowance3[_from_s376] := sum_allowance3[_from_s376] - allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2177]              allowance_TokenERC20[this][_from_s376][msgsender_MSG] := (allowance_TokenERC20[this][_from_s376][msgsender_MSG] - _value_s376) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2178]              sum_allowance3[_from_s376] := sum_allowance3[_from_s376] + allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2179]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2107]  COND FALSE  !(lockIn_TokenERC20[this])
[L2113]              __var_2 := null;
[L2114]  COND FALSE  !(!(_to_s321 != null))
[L2118]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s321] >= _value_s321))
[L2122]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s321] + _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_TokenERC20[this][_to_s321]))
[L2126]              previousBalances_s321 := (balanceOf_TokenERC20[this][_from_s321] + balanceOf_TokenERC20[this][_to_s321]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][_from_s321];
[L2128]              balanceOf_TokenERC20[this][_from_s321] := (balanceOf_TokenERC20[this][_from_s321] - _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2129]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][_from_s321];
[L2130]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][_to_s321];
[L2131]              balanceOf_TokenERC20[this][_to_s321] := (balanceOf_TokenERC20[this][_to_s321] + _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2132]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][_to_s321];
[L2133]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L2134]              assert (balanceOf_TokenERC20[this][_from_s321] + balanceOf_TokenERC20[this][_to_s321]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s321;
[L2179]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2180]  COND FALSE  !(revert)
[L2183]              success_s376 := true;
[L669]   RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L670]               assume !revert && gas >= 0;
[L3279]  RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3331]  RET         call CorralChoice_TokenERC20(this);

Loop:
[L3331]  CALL        call CorralChoice_TokenERC20(this);
[L3139]              havoc msgsender_MSG;
[L3140]              havoc msgvalue_MSG;
[L3141]              havoc choice;
[L3142]              havoc __ret_0_name;
[L3143]              havoc __ret_0_symbol;
[L3144]              havoc __ret_0_decimals;
[L3145]              havoc __ret_0_owner;
[L3146]              havoc __ret_0_totalSupply;
[L3147]              havoc __ret_0_lockIn;
[L3148]              havoc arg536_s0;
[L3149]              havoc __ret_0_balanceOf;
[L3150]              havoc arg537_s0;
[L3151]              havoc arg538_s0;
[L3152]              havoc __ret_0_allowance;
[L3153]              havoc initialSupply_s130;
[L3154]              havoc tokenName_s130;
[L3155]              havoc tokenSymbol_s130;
[L3156]              havoc crowdsaleOwner_s130;
[L3157]              havoc newAddress_s165;
[L3158]              havoc oldaddress_s190;
[L3159]              havoc newAddress_s209;
[L3160]              havoc oldAddress_s234;
[L3161]              havoc _to_s336;
[L3162]              havoc _value_s336;
[L3163]              havoc _from_s376;
[L3164]              havoc _to_s376;
[L3165]              havoc _value_s376;
[L3166]              havoc success_s376;
[L3167]              havoc _spender_s404;
[L3168]              havoc _value_s404;
[L3169]              havoc success_s404;
[L3170]              havoc _spender_s442;
[L3171]              havoc _value_s442;
[L3172]              havoc _extraData_s442;
[L3173]              havoc success_s442;
[L3174]              havoc _value_s478;
[L3175]              havoc success_s478;
[L3176]              havoc _from_s533;
[L3177]              havoc _value_s533;
[L3178]              havoc success_s533;
[L3179]              havoc tmpNow;
[L3180]              havoc gas;
[L3181]              assume gas > 4000000 && gas <= 8000000;
[L3182]              tmpNow := now;
[L3183]              havoc now;
[L3184]              assume now > tmpNow;
[L3185]              assume msgsender_MSG != null;
[L3186]              assume DType[msgsender_MSG] != tokenRecipient;
[L3187]              assume DType[msgsender_MSG] != TokenERC20;
[L3188]              Alloc[msgsender_MSG] := true;
[L3189]  COND FALSE  !(choice == 19)
[L3195]  COND FALSE  !(choice == 18)
[L3201]  COND FALSE  !(choice == 17)
[L3207]  COND FALSE  !(choice == 16)
[L3213]  COND FALSE  !(choice == 15)
[L3219]  COND FALSE  !(choice == 14)
[L3225]  COND FALSE  !(choice == 13)
[L3231]  COND FALSE  !(choice == 12)
[L3237]  COND FALSE  !(choice == 11)
[L3243]  COND FALSE  !(choice == 10)
[L3249]  COND FALSE  !(choice == 9)
[L3255]  COND FALSE  !(choice == 8)
[L3261]  COND FALSE  !(choice == 7)
[L3267]  COND FALSE  !(choice == 6)
[L3274]  COND TRUE   choice == 5
[L3275]              gas := gas - 21000;
[L3276]  COND TRUE   gas >= 0
[L3277]              assume _value_s376 >= 0 && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3278]              assume msgvalue_MSG == 0;
[L3279]  CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s376 != _to_s376 && ((_value_s376 > balanceOf_TokenERC20[this][_from_s376] || _value_s376 > allowance_TokenERC20[this][_from_s376][msgsender_MSG]) || balanceOf_TokenERC20[this][_to_s376] + _value_s376 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s376 >= 0) && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s376] >= 0) && balanceOf_TokenERC20[this][_to_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s376] >= 0) && balanceOf_TokenERC20[this][_from_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L639]               havoc __exception;
[L640]               revert := false;
[L641]   COND FALSE  !(__exception)
[L669]   CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2172]  COND FALSE  !(!(_value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG]))
[L2176]              sum_allowance3[_from_s376] := sum_allowance3[_from_s376] - allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2177]              allowance_TokenERC20[this][_from_s376][msgsender_MSG] := (allowance_TokenERC20[this][_from_s376][msgsender_MSG] - _value_s376) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2178]              sum_allowance3[_from_s376] := sum_allowance3[_from_s376] + allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2179]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2107]  COND FALSE  !(lockIn_TokenERC20[this])
[L2113]              __var_2 := null;
[L2114]  COND FALSE  !(!(_to_s321 != null))
[L2118]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s321] >= _value_s321))
[L2122]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s321] + _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_TokenERC20[this][_to_s321]))
[L2126]              previousBalances_s321 := (balanceOf_TokenERC20[this][_from_s321] + balanceOf_TokenERC20[this][_to_s321]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][_from_s321];
[L2128]              balanceOf_TokenERC20[this][_from_s321] := (balanceOf_TokenERC20[this][_from_s321] - _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2129]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][_from_s321];
[L2130]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][_to_s321];
[L2131]              balanceOf_TokenERC20[this][_to_s321] := (balanceOf_TokenERC20[this][_to_s321] + _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2132]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][_to_s321];
[L2133]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L2134]              assert (balanceOf_TokenERC20[this][_from_s321] + balanceOf_TokenERC20[this][_to_s321]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s321;
[L2179]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2180]  COND FALSE  !(revert)
[L2183]              success_s376 := true;
[L669]   RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L670]               assume !revert && gas >= 0;
[L3279]  RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3331]  RET         call CorralChoice_TokenERC20(this);

[2020-11-25 06:17:42,560 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:17:42,560 INFO  L82        PathProgramCache]: Analyzing trace with hash -1805679816, now seen corresponding path program 1 times
[2020-11-25 06:17:42,560 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:17:42,576 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:17:42,768 INFO  L134       CoverageAnalysis]: Checked inductivity of 67 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 67 trivial. 0 not checked.
[2020-11-25 06:17:42,768 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:17:42,769 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 06:17:42,769 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:17:42,769 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 06:17:42,769 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=39, Invalid=233, Unknown=0, NotChecked=0, Total=272
[2020-11-25 06:17:42,769 INFO  L87              Difference]: Start difference. First operand 2404 states and 2577 transitions. cyclomatic complexity: 176 Second operand 17 states.
[2020-11-25 06:17:44,450 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:17:44,450 INFO  L93              Difference]: Finished difference Result 2471 states and 2655 transitions.
[2020-11-25 06:17:44,450 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 06:17:44,450 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2471 states and 2655 transitions.
[2020-11-25 06:17:44,454 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:17:44,459 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2471 states to 2471 states and 2655 transitions.
[2020-11-25 06:17:44,459 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1150
[2020-11-25 06:17:44,460 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1150
[2020-11-25 06:17:44,460 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2471 states and 2655 transitions.
[2020-11-25 06:17:44,462 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:17:44,462 INFO  L728         BuchiCegarLoop]: Abstraction has 2471 states and 2655 transitions.
[2020-11-25 06:17:44,464 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2471 states and 2655 transitions.
[2020-11-25 06:17:44,475 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2471 to 2418.
[2020-11-25 06:17:44,475 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2418 states.
[2020-11-25 06:17:44,477 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2418 states to 2418 states and 2601 transitions.
[2020-11-25 06:17:44,477 INFO  L751         BuchiCegarLoop]: Abstraction has 2418 states and 2601 transitions.
[2020-11-25 06:17:44,477 INFO  L631         BuchiCegarLoop]: Abstraction has 2418 states and 2601 transitions.
[2020-11-25 06:17:44,477 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 06:17:44,477 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2418 states and 2601 transitions.
[2020-11-25 06:17:44,479 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:17:44,480 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:17:44,480 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:17:44,481 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:17:44,481 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_TokenERC200 := false;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]     CALL        call main();
[L3321]              assume null == 0;
[L3322]  CALL        call this := FreshRefGenerator__success();
[L1843]              havoc newRef;
[L1844]              assume Alloc[newRef] == false;
[L1845]              Alloc[newRef] := true;
[L1846]              assume newRef != null;
[L3322]  RET         call this := FreshRefGenerator__success();
[L3323]              assume now >= 0;
[L3324]              assume DType[this] == TokenERC20;
[L3325]              assume msgvalue_MSG == 0;
[L3326]              gas := gas - 53000;
[L3327]  CALL        call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L176]               havoc __exception;
[L177]               revert := false;
[L178]   COND FALSE  !(__exception)
[L206]   CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1959]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1918]              assume msgsender_MSG != null;
[L1919]              Balance[this] := 0;
[L1920]              name_TokenERC20[this] := 846149099;
[L1921]              symbol_TokenERC20[this] := 846149099;
[L1922]              decimals_TokenERC20[this] := 8;
[L1923]              owner_TokenERC20[this] := null;
[L1924]              totalSupply_TokenERC20[this] := 0;
[L1925]              lockIn_TokenERC20[this] := false;
[L1926]              whitelisted_TokenERC20[this] := zeroRefboolArr();
[L1927]              admin_TokenERC20[this] := zeroRefboolArr();
[L1928]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L1929]              sum_balanceOf2[this] := 0;
[L1930]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L1931]              sum_allowance3[this] := 0;
[L1933]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1934]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s130, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1935]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1936]              balanceOf_TokenERC20[this][crowdsaleOwner_s130] := totalSupply_TokenERC20[this];
[L1937]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][crowdsaleOwner_s130];
[L1938]              name_TokenERC20[this] := tokenName_s130;
[L1939]              symbol_TokenERC20[this] := tokenSymbol_s130;
[L1940]              lockIn_TokenERC20[this] := false;
[L1941]              admin_TokenERC20[this][msgsender_MSG] := true;
[L1942]              whitelisted_TokenERC20[this][msgsender_MSG] := true;
[L1943]              owner_TokenERC20[this] := crowdsaleOwner_s130;
[L1944]              admin_TokenERC20[this][crowdsaleOwner_s130] := true;
[L1959]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L1960]  COND FALSE  !(revert)
[L206]   RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L207]               assume !revert && gas >= 0;
[L3327]  RET         call TokenERC20_TokenERC20(this, msgsender_MSG, msgvalue_MSG, initialSupply_s130, tokenName_s130, tokenSymbol_s130, crowdsaleOwner_s130);
[L3328]              assume !revert && gas >= 0;
[L3331]  CALL        call CorralChoice_TokenERC20(this);
[L3139]              havoc msgsender_MSG;
[L3140]              havoc msgvalue_MSG;
[L3141]              havoc choice;
[L3142]              havoc __ret_0_name;
[L3143]              havoc __ret_0_symbol;
[L3144]              havoc __ret_0_decimals;
[L3145]              havoc __ret_0_owner;
[L3146]              havoc __ret_0_totalSupply;
[L3147]              havoc __ret_0_lockIn;
[L3148]              havoc arg536_s0;
[L3149]              havoc __ret_0_balanceOf;
[L3150]              havoc arg537_s0;
[L3151]              havoc arg538_s0;
[L3152]              havoc __ret_0_allowance;
[L3153]              havoc initialSupply_s130;
[L3154]              havoc tokenName_s130;
[L3155]              havoc tokenSymbol_s130;
[L3156]              havoc crowdsaleOwner_s130;
[L3157]              havoc newAddress_s165;
[L3158]              havoc oldaddress_s190;
[L3159]              havoc newAddress_s209;
[L3160]              havoc oldAddress_s234;
[L3161]              havoc _to_s336;
[L3162]              havoc _value_s336;
[L3163]              havoc _from_s376;
[L3164]              havoc _to_s376;
[L3165]              havoc _value_s376;
[L3166]              havoc success_s376;
[L3167]              havoc _spender_s404;
[L3168]              havoc _value_s404;
[L3169]              havoc success_s404;
[L3170]              havoc _spender_s442;
[L3171]              havoc _value_s442;
[L3172]              havoc _extraData_s442;
[L3173]              havoc success_s442;
[L3174]              havoc _value_s478;
[L3175]              havoc success_s478;
[L3176]              havoc _from_s533;
[L3177]              havoc _value_s533;
[L3178]              havoc success_s533;
[L3179]              havoc tmpNow;
[L3180]              havoc gas;
[L3181]              assume gas > 4000000 && gas <= 8000000;
[L3182]              tmpNow := now;
[L3183]              havoc now;
[L3184]              assume now > tmpNow;
[L3185]              assume msgsender_MSG != null;
[L3186]              assume DType[msgsender_MSG] != tokenRecipient;
[L3187]              assume DType[msgsender_MSG] != TokenERC20;
[L3188]              Alloc[msgsender_MSG] := true;
[L3189]  COND FALSE  !(choice == 19)
[L3195]  COND FALSE  !(choice == 18)
[L3201]  COND FALSE  !(choice == 17)
[L3207]  COND FALSE  !(choice == 16)
[L3213]  COND FALSE  !(choice == 15)
[L3219]  COND FALSE  !(choice == 14)
[L3225]  COND FALSE  !(choice == 13)
[L3231]  COND FALSE  !(choice == 12)
[L3237]  COND FALSE  !(choice == 11)
[L3243]  COND FALSE  !(choice == 10)
[L3249]  COND FALSE  !(choice == 9)
[L3255]  COND FALSE  !(choice == 8)
[L3261]  COND FALSE  !(choice == 7)
[L3267]  COND FALSE  !(choice == 6)
[L3274]  COND FALSE  !(choice == 5)
[L3281]  COND FALSE  !(choice == 4)
[L3288]  COND FALSE  !(choice == 3)
[L3295]  COND FALSE  !(choice == 2)
[L3302]  COND TRUE   choice == 1
[L3303]              gas := gas - 21000;
[L3304]  COND TRUE   gas >= 0
[L3305]              assume _value_s533 >= 0 && _value_s533 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3306]              assume msgvalue_MSG == 0;
[L3307]  CALL        call success_s533 := burnFrom~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s533, _value_s533);
[L907]               havoc __exception;
[L908]               revert := false;
[L909]   COND FALSE  !(__exception)
[L937]   CALL        call success_s533 := burnFrom~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s533, _value_s533);
[L2298]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s533] >= _value_s533))
[L2302]  COND FALSE  !(!(_value_s533 <= allowance_TokenERC20[this][_from_s533][msgsender_MSG]))
[L2306]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][_from_s533];
[L2307]              balanceOf_TokenERC20[this][_from_s533] := (balanceOf_TokenERC20[this][_from_s533] - _value_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2308]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][_from_s533];
[L2309]              sum_allowance3[_from_s533] := sum_allowance3[_from_s533] - allowance_TokenERC20[this][_from_s533][msgsender_MSG];
[L2310]              allowance_TokenERC20[this][_from_s533][msgsender_MSG] := (allowance_TokenERC20[this][_from_s533][msgsender_MSG] - _value_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2311]              sum_allowance3[_from_s533] := sum_allowance3[_from_s533] + allowance_TokenERC20[this][_from_s533][msgsender_MSG];
[L2312]              totalSupply_TokenERC20[this] := (totalSupply_TokenERC20[this] - _value_s533) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2313]              assert { :EventEmitted "Burn_TokenERC20" } true;
[L2314]              success_s533 := true;
[L937]   RET         call success_s533 := burnFrom~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s533, _value_s533);
[L938]               assume !revert && gas >= 0;
[L3307]  RET         call success_s533 := burnFrom~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s533, _value_s533);
[L3331]  RET         call CorralChoice_TokenERC20(this);
[L3331]  CALL        call CorralChoice_TokenERC20(this);
[L3139]              havoc msgsender_MSG;
[L3140]              havoc msgvalue_MSG;
[L3141]              havoc choice;
[L3142]              havoc __ret_0_name;
[L3143]              havoc __ret_0_symbol;
[L3144]              havoc __ret_0_decimals;
[L3145]              havoc __ret_0_owner;
[L3146]              havoc __ret_0_totalSupply;
[L3147]              havoc __ret_0_lockIn;
[L3148]              havoc arg536_s0;
[L3149]              havoc __ret_0_balanceOf;
[L3150]              havoc arg537_s0;
[L3151]              havoc arg538_s0;
[L3152]              havoc __ret_0_allowance;
[L3153]              havoc initialSupply_s130;
[L3154]              havoc tokenName_s130;
[L3155]              havoc tokenSymbol_s130;
[L3156]              havoc crowdsaleOwner_s130;
[L3157]              havoc newAddress_s165;
[L3158]              havoc oldaddress_s190;
[L3159]              havoc newAddress_s209;
[L3160]              havoc oldAddress_s234;
[L3161]              havoc _to_s336;
[L3162]              havoc _value_s336;
[L3163]              havoc _from_s376;
[L3164]              havoc _to_s376;
[L3165]              havoc _value_s376;
[L3166]              havoc success_s376;
[L3167]              havoc _spender_s404;
[L3168]              havoc _value_s404;
[L3169]              havoc success_s404;
[L3170]              havoc _spender_s442;
[L3171]              havoc _value_s442;
[L3172]              havoc _extraData_s442;
[L3173]              havoc success_s442;
[L3174]              havoc _value_s478;
[L3175]              havoc success_s478;
[L3176]              havoc _from_s533;
[L3177]              havoc _value_s533;
[L3178]              havoc success_s533;
[L3179]              havoc tmpNow;
[L3180]              havoc gas;
[L3181]              assume gas > 4000000 && gas <= 8000000;
[L3182]              tmpNow := now;
[L3183]              havoc now;
[L3184]              assume now > tmpNow;
[L3185]              assume msgsender_MSG != null;
[L3186]              assume DType[msgsender_MSG] != tokenRecipient;
[L3187]              assume DType[msgsender_MSG] != TokenERC20;
[L3188]              Alloc[msgsender_MSG] := true;
[L3189]  COND FALSE  !(choice == 19)
[L3195]  COND FALSE  !(choice == 18)
[L3201]  COND FALSE  !(choice == 17)
[L3207]  COND FALSE  !(choice == 16)
[L3213]  COND FALSE  !(choice == 15)
[L3219]  COND FALSE  !(choice == 14)
[L3225]  COND FALSE  !(choice == 13)
[L3231]  COND FALSE  !(choice == 12)
[L3237]  COND FALSE  !(choice == 11)
[L3243]  COND FALSE  !(choice == 10)
[L3249]  COND FALSE  !(choice == 9)
[L3255]  COND FALSE  !(choice == 8)
[L3261]  COND FALSE  !(choice == 7)
[L3267]  COND FALSE  !(choice == 6)
[L3274]  COND TRUE   choice == 5
[L3275]              gas := gas - 21000;
[L3276]  COND TRUE   gas >= 0
[L3277]              assume _value_s376 >= 0 && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3278]              assume msgvalue_MSG == 0;
[L3279]  CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s376 != _to_s376 && ((_value_s376 > balanceOf_TokenERC20[this][_from_s376] || _value_s376 > allowance_TokenERC20[this][_from_s376][msgsender_MSG]) || balanceOf_TokenERC20[this][_to_s376] + _value_s376 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s376 >= 0) && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s376] >= 0) && balanceOf_TokenERC20[this][_to_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s376] >= 0) && balanceOf_TokenERC20[this][_from_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L639]               havoc __exception;
[L640]               revert := false;
[L641]   COND FALSE  !(__exception)
[L669]   CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2172]  COND FALSE  !(!(_value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG]))
[L2176]              sum_allowance3[_from_s376] := sum_allowance3[_from_s376] - allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2177]              allowance_TokenERC20[this][_from_s376][msgsender_MSG] := (allowance_TokenERC20[this][_from_s376][msgsender_MSG] - _value_s376) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2178]              sum_allowance3[_from_s376] := sum_allowance3[_from_s376] + allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2179]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2107]  COND FALSE  !(lockIn_TokenERC20[this])
[L2113]              __var_2 := null;
[L2114]  COND FALSE  !(!(_to_s321 != null))
[L2118]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s321] >= _value_s321))
[L2122]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s321] + _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_TokenERC20[this][_to_s321]))
[L2126]              previousBalances_s321 := (balanceOf_TokenERC20[this][_from_s321] + balanceOf_TokenERC20[this][_to_s321]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][_from_s321];
[L2128]              balanceOf_TokenERC20[this][_from_s321] := (balanceOf_TokenERC20[this][_from_s321] - _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2129]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][_from_s321];
[L2130]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][_to_s321];
[L2131]              balanceOf_TokenERC20[this][_to_s321] := (balanceOf_TokenERC20[this][_to_s321] + _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2132]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][_to_s321];
[L2133]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L2134]              assert (balanceOf_TokenERC20[this][_from_s321] + balanceOf_TokenERC20[this][_to_s321]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s321;
[L2179]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2180]  COND FALSE  !(revert)
[L2183]              success_s376 := true;
[L669]   RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L670]               assume !revert && gas >= 0;
[L3279]  RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3331]  RET         call CorralChoice_TokenERC20(this);

Loop:
[L3331]  CALL        call CorralChoice_TokenERC20(this);
[L3139]              havoc msgsender_MSG;
[L3140]              havoc msgvalue_MSG;
[L3141]              havoc choice;
[L3142]              havoc __ret_0_name;
[L3143]              havoc __ret_0_symbol;
[L3144]              havoc __ret_0_decimals;
[L3145]              havoc __ret_0_owner;
[L3146]              havoc __ret_0_totalSupply;
[L3147]              havoc __ret_0_lockIn;
[L3148]              havoc arg536_s0;
[L3149]              havoc __ret_0_balanceOf;
[L3150]              havoc arg537_s0;
[L3151]              havoc arg538_s0;
[L3152]              havoc __ret_0_allowance;
[L3153]              havoc initialSupply_s130;
[L3154]              havoc tokenName_s130;
[L3155]              havoc tokenSymbol_s130;
[L3156]              havoc crowdsaleOwner_s130;
[L3157]              havoc newAddress_s165;
[L3158]              havoc oldaddress_s190;
[L3159]              havoc newAddress_s209;
[L3160]              havoc oldAddress_s234;
[L3161]              havoc _to_s336;
[L3162]              havoc _value_s336;
[L3163]              havoc _from_s376;
[L3164]              havoc _to_s376;
[L3165]              havoc _value_s376;
[L3166]              havoc success_s376;
[L3167]              havoc _spender_s404;
[L3168]              havoc _value_s404;
[L3169]              havoc success_s404;
[L3170]              havoc _spender_s442;
[L3171]              havoc _value_s442;
[L3172]              havoc _extraData_s442;
[L3173]              havoc success_s442;
[L3174]              havoc _value_s478;
[L3175]              havoc success_s478;
[L3176]              havoc _from_s533;
[L3177]              havoc _value_s533;
[L3178]              havoc success_s533;
[L3179]              havoc tmpNow;
[L3180]              havoc gas;
[L3181]              assume gas > 4000000 && gas <= 8000000;
[L3182]              tmpNow := now;
[L3183]              havoc now;
[L3184]              assume now > tmpNow;
[L3185]              assume msgsender_MSG != null;
[L3186]              assume DType[msgsender_MSG] != tokenRecipient;
[L3187]              assume DType[msgsender_MSG] != TokenERC20;
[L3188]              Alloc[msgsender_MSG] := true;
[L3189]  COND FALSE  !(choice == 19)
[L3195]  COND FALSE  !(choice == 18)
[L3201]  COND FALSE  !(choice == 17)
[L3207]  COND FALSE  !(choice == 16)
[L3213]  COND FALSE  !(choice == 15)
[L3219]  COND FALSE  !(choice == 14)
[L3225]  COND FALSE  !(choice == 13)
[L3231]  COND FALSE  !(choice == 12)
[L3237]  COND FALSE  !(choice == 11)
[L3243]  COND FALSE  !(choice == 10)
[L3249]  COND FALSE  !(choice == 9)
[L3255]  COND FALSE  !(choice == 8)
[L3261]  COND FALSE  !(choice == 7)
[L3267]  COND FALSE  !(choice == 6)
[L3274]  COND TRUE   choice == 5
[L3275]              gas := gas - 21000;
[L3276]  COND TRUE   gas >= 0
[L3277]              assume _value_s376 >= 0 && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3278]              assume msgvalue_MSG == 0;
[L3279]  CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s376 != _to_s376 && ((_value_s376 > balanceOf_TokenERC20[this][_from_s376] || _value_s376 > allowance_TokenERC20[this][_from_s376][msgsender_MSG]) || balanceOf_TokenERC20[this][_to_s376] + _value_s376 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s376 >= 0) && _value_s376 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s376] >= 0) && balanceOf_TokenERC20[this][_to_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s376] >= 0) && balanceOf_TokenERC20[this][_from_s376] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s376][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_TokenERC200 := true;
[L2]                 call_transferFrom_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L639]               havoc __exception;
[L640]               revert := false;
[L641]   COND FALSE  !(__exception)
[L669]   CALL        call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2172]  COND FALSE  !(!(_value_s376 <= allowance_TokenERC20[this][_from_s376][msgsender_MSG]))
[L2176]              sum_allowance3[_from_s376] := sum_allowance3[_from_s376] - allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2177]              allowance_TokenERC20[this][_from_s376][msgsender_MSG] := (allowance_TokenERC20[this][_from_s376][msgsender_MSG] - _value_s376) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2178]              sum_allowance3[_from_s376] := sum_allowance3[_from_s376] + allowance_TokenERC20[this][_from_s376][msgsender_MSG];
[L2179]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2107]  COND FALSE  !(lockIn_TokenERC20[this])
[L2113]              __var_2 := null;
[L2114]  COND FALSE  !(!(_to_s321 != null))
[L2118]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s321] >= _value_s321))
[L2122]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s321] + _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_TokenERC20[this][_to_s321]))
[L2126]              previousBalances_s321 := (balanceOf_TokenERC20[this][_from_s321] + balanceOf_TokenERC20[this][_to_s321]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2127]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][_from_s321];
[L2128]              balanceOf_TokenERC20[this][_from_s321] := (balanceOf_TokenERC20[this][_from_s321] - _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2129]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][_from_s321];
[L2130]              sum_balanceOf2[this] := sum_balanceOf2[this] - balanceOf_TokenERC20[this][_to_s321];
[L2131]              balanceOf_TokenERC20[this][_to_s321] := (balanceOf_TokenERC20[this][_to_s321] + _value_s321) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2132]              sum_balanceOf2[this] := sum_balanceOf2[this] + balanceOf_TokenERC20[this][_to_s321];
[L2133]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L2134]              assert (balanceOf_TokenERC20[this][_from_s321] + balanceOf_TokenERC20[this][_to_s321]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s321;
[L2179]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L2180]  COND FALSE  !(revert)
[L2183]              success_s376 := true;
[L669]   RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L670]               assume !revert && gas >= 0;
[L3279]  RET         call success_s376 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s376, _to_s376, _value_s376);
[L3331]  RET         call CorralChoice_TokenERC20(this);

[2020-11-25 06:17:44,485 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:17:44,485 INFO  L82        PathProgramCache]: Analyzing trace with hash -1341391653, now seen corresponding path program 1 times
[2020-11-25 06:17:44,486 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:17:44,508 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:17:44,595 INFO  L134       CoverageAnalysis]: Checked inductivity of 67 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 67 trivial. 0 not checked.
[2020-11-25 06:17:44,595 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:17:44,596 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 06:17:44,596 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:17:44,596 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 06:17:44,596 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=82, Unknown=0, NotChecked=0, Total=110
[2020-11-25 06:17:44,596 INFO  L87              Difference]: Start difference. First operand 2418 states and 2601 transitions. cyclomatic complexity: 188 Second operand 11 states.
[2020-11-25 06:17:45,204 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:17:45,204 INFO  L93              Difference]: Finished difference Result 1349 states and 1451 transitions.
[2020-11-25 06:17:45,204 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 06:17:45,204 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1349 states and 1451 transitions.
[2020-11-25 06:17:45,206 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 06:17:45,206 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1349 states to 0 states and 0 transitions.
[2020-11-25 06:17:45,206 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 06:17:45,206 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 06:17:45,206 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 06:17:45,206 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:17:45,206 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 06:17:45,206 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 06:17:45,206 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 06:17:45,207 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 06:17:45,207 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 06:17:45,207 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 06:17:45,207 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 06:17:45,209 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:17:45 BasicIcfg
[2020-11-25 06:17:45,209 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 06:17:45,210 INFO  L168              Benchmark]: Toolchain (without parser) took 8380.12 ms. Allocated memory was 1.0 GB in the beginning and 1.8 GB in the end (delta: 758.6 MB). Free memory was 945.9 MB in the beginning and 1.4 GB in the end (delta: -432.4 MB). Peak memory consumption was 326.2 MB. Max. memory is 15.3 GB.
[2020-11-25 06:17:45,211 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 06:17:45,211 INFO  L168              Benchmark]: Boogie Preprocessor took 81.27 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 929.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 06:17:45,211 INFO  L168              Benchmark]: UtopiaSpecLang took 53.42 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 06:17:45,212 INFO  L168              Benchmark]: Boogie Printer took 12.14 ms. Allocated memory is still 1.0 GB. Free memory is still 924.5 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 06:17:45,212 INFO  L168              Benchmark]: RCFGBuilder took 650.65 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 833.2 MB in the end (delta: 91.3 MB). Peak memory consumption was 91.3 MB. Max. memory is 15.3 GB.
[2020-11-25 06:17:45,212 INFO  L168              Benchmark]: UtopiaLTL2Aut took 41.10 ms. Allocated memory is still 1.0 GB. Free memory was 833.2 MB in the beginning and 829.6 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 06:17:45,212 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1182.45 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 57.1 MB). Free memory was 829.6 MB in the beginning and 709.1 MB in the end (delta: 120.5 MB). Peak memory consumption was 177.6 MB. Max. memory is 15.3 GB.
[2020-11-25 06:17:45,213 INFO  L168              Benchmark]: BlockEncodingV2 took 185.14 ms. Allocated memory was 1.1 GB in the beginning and 1.2 GB in the end (delta: 139.5 MB). Free memory was 709.1 MB in the beginning and 1.1 GB in the end (delta: -411.3 MB). Peak memory consumption was 25.2 MB. Max. memory is 15.3 GB.
[2020-11-25 06:17:45,213 INFO  L168              Benchmark]: BuchiAutomizer took 6170.73 ms. Allocated memory was 1.2 GB in the beginning and 1.8 GB in the end (delta: 562.0 MB). Free memory was 1.1 GB in the beginning and 1.4 GB in the end (delta: -258.0 MB). Peak memory consumption was 304.0 MB. Max. memory is 15.3 GB.
[2020-11-25 06:17:45,217 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2960 locations, 4949 edges
  - StatisticsResult: Encoded RCFG
    2914 locations, 4848 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 81.27 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 929.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 53.42 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 12.14 ms. Allocated memory is still 1.0 GB. Free memory is still 924.5 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 650.65 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 833.2 MB in the end (delta: 91.3 MB). Peak memory consumption was 91.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 41.10 ms. Allocated memory is still 1.0 GB. Free memory was 833.2 MB in the beginning and 829.6 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1182.45 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 57.1 MB). Free memory was 829.6 MB in the beginning and 709.1 MB in the end (delta: 120.5 MB). Peak memory consumption was 177.6 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 185.14 ms. Allocated memory was 1.1 GB in the beginning and 1.2 GB in the end (delta: 139.5 MB). Free memory was 709.1 MB in the beginning and 1.1 GB in the end (delta: -411.3 MB). Peak memory consumption was 25.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 6170.73 ms. Allocated memory was 1.2 GB in the beginning and 1.8 GB in the end (delta: 562.0 MB). Free memory was 1.1 GB in the beginning and 1.4 GB in the end (delta: -258.0 MB). Peak memory consumption was 304.0 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1291 locations, 1550 edges
  - StatisticsResult: BuchiProgram size
    2960 locations, 4949 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic). 6 modules have a trivial ranking function, the largest among these consists of 18 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 6.1s and 7 iterations.  TraceHistogramMax:2. Analysis of lassos took 0.7s. Construction of modules took 3.5s. BÃ¼chi inclusion checks took 1.3s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 5 MinimizatonAttempts, 1429 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2586 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 14590 SDtfs, 15897 SDslu, 23175 SDs, 0 SdLazy, 56806 SolverSat, 2376 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 3.5s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_TokenERC200) ==> ( <>(fail_transferFrom_TokenERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
