This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 01:03:30,495 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 01:03:30,497 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 01:03:30,507 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 01:03:30,507 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 01:03:30,508 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 01:03:30,509 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 01:03:30,510 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 01:03:30,512 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 01:03:30,512 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 01:03:30,513 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 01:03:30,513 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 01:03:30,514 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 01:03:30,515 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 01:03:30,516 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 01:03:30,516 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 01:03:30,517 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 01:03:30,518 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 01:03:30,519 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 01:03:30,520 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 01:03:30,521 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 01:03:30,521 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 01:03:30,523 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 01:03:30,523 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 01:03:30,523 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 01:03:30,524 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 01:03:30,524 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 01:03:30,525 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 01:03:30,525 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 01:03:30,525 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 01:03:30,526 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 01:03:30,526 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 01:03:30,527 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 01:03:30,527 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 01:03:30,528 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 01:03:30,528 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 01:03:30,528 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 01:03:30,529 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 01:03:30,529 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 01:03:30,529 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 01:03:30,530 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 01:03:30,530 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 01:03:30,538 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 01:03:30,538 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 01:03:30,539 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 01:03:30,539 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 01:03:30,539 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 01:03:30,539 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 01:03:30,539 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 01:03:30,539 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 01:03:30,539 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 01:03:30,540 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 01:03:30,540 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 01:03:30,540 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 01:03:30,540 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 01:03:30,540 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 01:03:30,540 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 01:03:30,540 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 01:03:30,540 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 01:03:30,540 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 01:03:30,540 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 01:03:30,541 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 01:03:30,541 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 01:03:30,541 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 01:03:30,541 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 01:03:30,541 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 01:03:30,541 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 01:03:30,541 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 01:03:30,571 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 01:03:30,583 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 01:03:30,586 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 01:03:30,587 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 01:03:30,587 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 01:03:30,588 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-normal.bpl
[2020-11-25 01:03:30,588 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-normal.bpl'
[2020-11-25 01:03:30,742 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 01:03:30,743 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 01:03:30,744 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 01:03:30,744 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 01:03:30,744 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 01:03:30,761 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:03:30" (1/1) ...
[2020-11-25 01:03:30,763 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:03:30" (1/1) ...
[2020-11-25 01:03:30,811 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:03:30" (1/1) ...
[2020-11-25 01:03:30,812 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:03:30" (1/1) ...
[2020-11-25 01:03:30,850 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:03:30" (1/1) ...
[2020-11-25 01:03:30,879 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:03:30" (1/1) ...
[2020-11-25 01:03:30,897 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:03:30" (1/1) ...
[2020-11-25 01:03:30,919 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 01:03:30,920 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 01:03:30,920 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 01:03:30,922 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 01:03:30,926 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:03:30" (1/1) ...
[2020-11-25 01:03:30,955 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(BLY.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_HxERC20[this][from] && value <= _allowed_HxERC20[this][from][msg.sender] && _balances_HxERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][from] >= 0 &&  _balances_HxERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_HxERC20[this][from][msg.sender] >= 0 && _allowed_HxERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BLY.transferFrom(from, to, value), return == true && _balances_HxERC20[this][from] == old(_balances_HxERC20[this][from]) - value && _balances_HxERC20[this][to] == old(_balances_HxERC20[this][to]) + value && _allowed_HxERC20[this][from][msg.sender] == old(_allowed_HxERC20[this][from][msg.sender]) - value && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _balances_HxERC20[this][p1] == old(_balances_HxERC20[this][p1]) && _allowed_HxERC20[this][p2][p3] == old(_allowed_HxERC20[this][p2][p3]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 01:03:30,961 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(BLY.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_HxERC20[this][from] && value <= _allowed_HxERC20[this][from][msg.sender] && _balances_HxERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][from] >= 0 &&  _balances_HxERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_HxERC20[this][from][msg.sender] >= 0 && _allowed_HxERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BLY.transferFrom(from, to, value), return == true && _balances_HxERC20[this][from] == old(_balances_HxERC20[this][from]) - value && _balances_HxERC20[this][to] == old(_balances_HxERC20[this][to]) + value && _allowed_HxERC20[this][from][msg.sender] == old(_allowed_HxERC20[this][from][msg.sender]) - value && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _balances_HxERC20[this][p1] == old(_balances_HxERC20[this][p1]) && _allowed_HxERC20[this][p2][p3] == old(_allowed_HxERC20[this][p2][p3]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 01:03:30,970 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(BLY.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_HxERC20[this][from] && value <= _allowed_HxERC20[this][from][msg.sender] && _balances_HxERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][from] >= 0 &&  _balances_HxERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_HxERC20[this][from][msg.sender] >= 0 && _allowed_HxERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BLY.transferFrom(from, to, value), return == true && _balances_HxERC20[this][from] == old(_balances_HxERC20[this][from]) - value && _balances_HxERC20[this][to] == old(_balances_HxERC20[this][to]) + value && _allowed_HxERC20[this][from][msg.sender] == old(_allowed_HxERC20[this][from][msg.sender]) - value && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _balances_HxERC20[this][p1] == old(_balances_HxERC20[this][p1]) && _allowed_HxERC20[this][p2][p3] == old(_allowed_HxERC20[this][p2][p3]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 01:03:30,983 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s1322 && p1!=to_s1322 ) && ( p2!=from_s1322 || p3!=msg.sender ) ) && from_s1322!=to_s1322 ) && value_s1322<=_balances_HxERC20[this][from_s1322] ) && value_s1322<=_allowed_HxERC20[this][from_s1322][msg.sender] ) && ( _balances_HxERC20[this][to_s1322] + value_s1322 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && value_s1322>=0 ) && value_s1322<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_HxERC20[this][to_s1322]>=0 ) && _balances_HxERC20[this][to_s1322]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_HxERC20[this][from_s1322]>=0 ) && _balances_HxERC20[this][from_s1322]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_HxERC20[this][from_s1322][msg.sender]>=0 ) && _allowed_HxERC20[this][from_s1322][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>],IdentifierExpression[to_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[to_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[to_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[to_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 01:03:30,989 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _balances_HxERC20[this][from_s1322]==( ( old(_balances_HxERC20[this][from_s1322]) ) - value_s1322 ) ) && _balances_HxERC20[this][to_s1322]==( ( old(_balances_HxERC20[this][to_s1322]) ) + value_s1322 ) ) && _allowed_HxERC20[this][from_s1322][msg.sender]==( ( old(_allowed_HxERC20[this][from_s1322][msg.sender]) ) - value_s1322 ) ) && _totalSupply_HxERC20[this]==( old(_totalSupply_HxERC20[this]) ) ) && _balances_HxERC20[this][p1]==( old(_balances_HxERC20[this][p1]) ) ) && _allowed_HxERC20[this][p2][p3]==( old(_allowed_HxERC20[this][p2][p3]) ) ) && implementation_BLY[this]==( old(implementation_BLY[this]) ) ) && M_Ref_Ref[timelockList_BLY[this]]==( old(M_Ref_Ref[timelockList_BLY[this]]) ) ) && frozenAccount_BLY[this]==( old(frozenAccount_BLY[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _pausers_PauserRole[this]==( old(_pausers_PauserRole[this]) ) ) && owner_HxOwnable[this]==( old(owner_HxOwnable[this]) ) ) && newOwner_HxOwnable[this]==( old(newOwner_HxOwnable[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_BLY>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]],IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[to_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[to_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]],IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]],IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[implementation_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[implementation_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[frozenAccount_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[frozenAccount_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BLY>]]]]]]
[2020-11-25 01:03:30,997 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(BLY.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_HxERC20[this][from] && value <= _allowed_HxERC20[this][from][msg.sender] && _balances_HxERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][from] >= 0 &&  _balances_HxERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_HxERC20[this][from][msg.sender] >= 0 && _allowed_HxERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BLY.transferFrom(from, to, value), return == true && _balances_HxERC20[this][from] == old(_balances_HxERC20[this][from]) - value && _balances_HxERC20[this][to] == old(_balances_HxERC20[this][to]) + value && _allowed_HxERC20[this][from][msg.sender] == old(_allowed_HxERC20[this][from][msg.sender]) - value && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _balances_HxERC20[this][p1] == old(_balances_HxERC20[this][p1]) && _allowed_HxERC20[this][p2][p3] == old(_allowed_HxERC20[this][p2][p3]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 01:03:30,997 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_BLY0) ==> ( <>AP(success_transferFrom_BLY0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 01:03:31,023 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:03:31 PropertyContainer
[2020-11-25 01:03:31,023 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 01:03:31,023 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 01:03:31,023 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 01:03:31,024 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 01:03:31,024 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:03:30" (1/2) ...
[2020-11-25 01:03:31,025 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 01:03:31,025 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 01:03:31,054 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:03:31" (2/2) ...
[2020-11-25 01:03:31,054 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 01:03:31,055 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 01:03:31,055 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 01:03:31,055 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 01:03:31,056 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:03:30" (1/2) ...
[2020-11-25 01:03:31,115 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 01:03:31,115 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 01:03:31,115 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY.LockInfo_ctor__success
[2020-11-25 01:03:31,115 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath_NoBaseCtor__success
[2020-11-25 01:03:31,115 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath
[2020-11-25 01:03:31,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath
[2020-11-25 01:03:31,116 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_HxSafeMath__success
[2020-11-25 01:03:31,116 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_HxSafeMath__success
[2020-11-25 01:03:31,116 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_HxSafeMath__success
[2020-11-25 01:03:31,116 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_HxSafeMath__success
[2020-11-25 01:03:31,116 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_HxSafeMath__success
[2020-11-25 01:03:31,116 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 01:03:31,116 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 01:03:31,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 01:03:31,117 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 01:03:31,117 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 01:03:31,117 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 01:03:31,117 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable_NoBaseCtor__success
[2020-11-25 01:03:31,117 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable
[2020-11-25 01:03:31,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable
[2020-11-25 01:03:31,117 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable
[2020-11-25 01:03:31,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable
[2020-11-25 01:03:31,118 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable
[2020-11-25 01:03:31,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable
[2020-11-25 01:03:31,118 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable
[2020-11-25 01:03:31,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable
[2020-11-25 01:03:31,118 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable
[2020-11-25 01:03:31,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable
[2020-11-25 01:03:31,118 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable
[2020-11-25 01:03:31,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable
[2020-11-25 01:03:31,118 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 01:03:31,119 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 01:03:31,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 01:03:31,119 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 01:03:31,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 01:03:31,119 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 01:03:31,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 01:03:31,119 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole
[2020-11-25 01:03:31,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole
[2020-11-25 01:03:31,119 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 01:03:31,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 01:03:31,120 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 01:03:31,120 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 01:03:31,120 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 01:03:31,120 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 01:03:31,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 01:03:31,120 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 01:03:31,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 01:03:31,120 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 01:03:31,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 01:03:31,120 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 01:03:31,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 01:03:31,121 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 01:03:31,121 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 01:03:31,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 01:03:31,121 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 01:03:31,121 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 01:03:31,121 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 01:03:31,121 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 01:03:31,121 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 01:03:31,121 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 01:03:31,121 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20_NoBaseCtor__success
[2020-11-25 01:03:31,122 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20
[2020-11-25 01:03:31,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20
[2020-11-25 01:03:31,122 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20
[2020-11-25 01:03:31,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20
[2020-11-25 01:03:31,122 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20
[2020-11-25 01:03:31,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20
[2020-11-25 01:03:31,122 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20
[2020-11-25 01:03:31,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20
[2020-11-25 01:03:31,122 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20
[2020-11-25 01:03:31,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20
[2020-11-25 01:03:31,122 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20
[2020-11-25 01:03:31,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20
[2020-11-25 01:03:31,123 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20
[2020-11-25 01:03:31,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20
[2020-11-25 01:03:31,123 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20
[2020-11-25 01:03:31,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20
[2020-11-25 01:03:31,123 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20
[2020-11-25 01:03:31,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20
[2020-11-25 01:03:31,123 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_HxERC20__success
[2020-11-25 01:03:31,123 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_HxERC20__success
[2020-11-25 01:03:31,124 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_HxERC20__success
[2020-11-25 01:03:31,124 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_HxERC20__success
[2020-11-25 01:03:31,124 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 01:03:31,124 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 01:03:31,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 01:03:31,124 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 01:03:31,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 01:03:31,124 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 01:03:31,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 01:03:31,124 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 01:03:31,124 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 01:03:31,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 01:03:31,125 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 01:03:31,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 01:03:31,125 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 01:03:31,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 01:03:31,125 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 01:03:31,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 01:03:31,125 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY_NoBaseCtor__success
[2020-11-25 01:03:31,125 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY
[2020-11-25 01:03:31,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY
[2020-11-25 01:03:31,126 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY
[2020-11-25 01:03:31,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY
[2020-11-25 01:03:31,126 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY
[2020-11-25 01:03:31,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY
[2020-11-25 01:03:31,126 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY
[2020-11-25 01:03:31,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY
[2020-11-25 01:03:31,126 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY
[2020-11-25 01:03:31,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY
[2020-11-25 01:03:31,126 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY
[2020-11-25 01:03:31,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY
[2020-11-25 01:03:31,127 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY
[2020-11-25 01:03:31,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY
[2020-11-25 01:03:31,127 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY
[2020-11-25 01:03:31,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY
[2020-11-25 01:03:31,127 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY
[2020-11-25 01:03:31,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY
[2020-11-25 01:03:31,127 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY
[2020-11-25 01:03:31,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY
[2020-11-25 01:03:31,127 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_BLY__success
[2020-11-25 01:03:31,127 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_BLY__success
[2020-11-25 01:03:31,128 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_BLY__success
[2020-11-25 01:03:31,128 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_BLY__success
[2020-11-25 01:03:31,128 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BLY__success
[2020-11-25 01:03:31,128 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY
[2020-11-25 01:03:31,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY
[2020-11-25 01:03:31,128 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY
[2020-11-25 01:03:31,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY
[2020-11-25 01:03:31,128 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY
[2020-11-25 01:03:31,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY
[2020-11-25 01:03:31,129 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 01:03:31,129 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 01:03:31,129 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 01:03:31,129 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 01:03:31,129 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__success
[2020-11-25 01:03:31,129 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 01:03:31,129 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 01:03:31,129 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 01:03:31,129 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__success
[2020-11-25 01:03:31,129 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxSafeMath
[2020-11-25 01:03:31,130 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxSafeMath
[2020-11-25 01:03:31,130 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 01:03:31,130 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 01:03:31,130 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxOwnable
[2020-11-25 01:03:31,130 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxOwnable
[2020-11-25 01:03:31,130 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 01:03:31,130 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 01:03:31,130 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 01:03:31,130 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 01:03:31,131 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 01:03:31,131 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 01:03:31,131 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxERC20
[2020-11-25 01:03:31,131 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxERC20
[2020-11-25 01:03:31,131 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 01:03:31,131 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 01:03:31,131 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 01:03:31,131 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 01:03:31,131 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BLY
[2020-11-25 01:03:31,131 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 01:03:31,131 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 01:03:31,132 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 01:03:31,132 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY.LockInfo_ctor__fail
[2020-11-25 01:03:31,132 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath_NoBaseCtor__fail
[2020-11-25 01:03:31,132 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath__success
[2020-11-25 01:03:31,132 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath__fail
[2020-11-25 01:03:31,132 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:03:31,132 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:03:31,132 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:03:31,132 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:03:31,132 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:03:31,133 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 01:03:31,133 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 01:03:31,133 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 01:03:31,133 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 01:03:31,133 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 01:03:31,133 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 01:03:31,133 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable_NoBaseCtor__fail
[2020-11-25 01:03:31,133 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable__success
[2020-11-25 01:03:31,133 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable__fail
[2020-11-25 01:03:31,133 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable__success
[2020-11-25 01:03:31,133 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable__fail
[2020-11-25 01:03:31,133 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable__success
[2020-11-25 01:03:31,134 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable__fail
[2020-11-25 01:03:31,134 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable__success
[2020-11-25 01:03:31,134 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable__fail
[2020-11-25 01:03:31,134 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable__success
[2020-11-25 01:03:31,134 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable__fail
[2020-11-25 01:03:31,134 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable__success
[2020-11-25 01:03:31,134 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable__fail
[2020-11-25 01:03:31,134 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 01:03:31,134 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 01:03:31,134 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 01:03:31,134 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 01:03:31,134 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 01:03:31,135 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 01:03:31,135 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 01:03:31,135 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__success
[2020-11-25 01:03:31,135 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__fail
[2020-11-25 01:03:31,135 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 01:03:31,135 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 01:03:31,135 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 01:03:31,135 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 01:03:31,135 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 01:03:31,135 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 01:03:31,135 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 01:03:31,136 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 01:03:31,136 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 01:03:31,136 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 01:03:31,136 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 01:03:31,136 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 01:03:31,136 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 01:03:31,136 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 01:03:31,136 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 01:03:31,136 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 01:03:31,136 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20_NoBaseCtor__fail
[2020-11-25 01:03:31,136 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20__success
[2020-11-25 01:03:31,136 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20__fail
[2020-11-25 01:03:31,137 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20__success
[2020-11-25 01:03:31,137 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20__fail
[2020-11-25 01:03:31,137 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20__success
[2020-11-25 01:03:31,137 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20__fail
[2020-11-25 01:03:31,137 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20__success
[2020-11-25 01:03:31,137 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20__fail
[2020-11-25 01:03:31,137 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20__success
[2020-11-25 01:03:31,137 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20__fail
[2020-11-25 01:03:31,137 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20__success
[2020-11-25 01:03:31,137 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20__fail
[2020-11-25 01:03:31,137 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20__success
[2020-11-25 01:03:31,138 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20__fail
[2020-11-25 01:03:31,138 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20__success
[2020-11-25 01:03:31,138 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 01:03:31,138 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20__success
[2020-11-25 01:03:31,138 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 01:03:31,138 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_HxERC20__fail
[2020-11-25 01:03:31,138 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_HxERC20__fail
[2020-11-25 01:03:31,138 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_HxERC20__fail
[2020-11-25 01:03:31,138 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_HxERC20__fail
[2020-11-25 01:03:31,138 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 01:03:31,138 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 01:03:31,138 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 01:03:31,139 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 01:03:31,139 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 01:03:31,139 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 01:03:31,139 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 01:03:31,139 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 01:03:31,139 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 01:03:31,139 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 01:03:31,139 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 01:03:31,139 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 01:03:31,139 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 01:03:31,139 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 01:03:31,139 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 01:03:31,140 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 01:03:31,140 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY_NoBaseCtor__fail
[2020-11-25 01:03:31,140 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY__success
[2020-11-25 01:03:31,140 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY__fail
[2020-11-25 01:03:31,140 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY__success
[2020-11-25 01:03:31,140 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY__fail
[2020-11-25 01:03:31,140 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY__success
[2020-11-25 01:03:31,140 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY__fail
[2020-11-25 01:03:31,140 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY__success
[2020-11-25 01:03:31,140 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY__fail
[2020-11-25 01:03:31,140 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY__success
[2020-11-25 01:03:31,140 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY__fail
[2020-11-25 01:03:31,141 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY__success
[2020-11-25 01:03:31,141 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY__fail
[2020-11-25 01:03:31,141 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY__success
[2020-11-25 01:03:31,141 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY__fail
[2020-11-25 01:03:31,141 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY__success
[2020-11-25 01:03:31,141 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY__fail
[2020-11-25 01:03:31,141 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY__success
[2020-11-25 01:03:31,141 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY__fail
[2020-11-25 01:03:31,141 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY__success
[2020-11-25 01:03:31,141 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY__fail
[2020-11-25 01:03:31,141 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_BLY__fail
[2020-11-25 01:03:31,142 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_BLY__fail
[2020-11-25 01:03:31,142 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_BLY__fail
[2020-11-25 01:03:31,142 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_BLY__fail
[2020-11-25 01:03:31,142 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BLY__fail
[2020-11-25 01:03:31,142 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY__success
[2020-11-25 01:03:31,142 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY__fail
[2020-11-25 01:03:31,142 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY__success
[2020-11-25 01:03:31,142 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY__fail
[2020-11-25 01:03:31,142 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY__success
[2020-11-25 01:03:31,142 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY__fail
[2020-11-25 01:03:31,142 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 01:03:31,143 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 01:03:31,143 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 01:03:31,143 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 01:03:31,143 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__fail
[2020-11-25 01:03:31,143 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 01:03:31,143 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 01:03:31,143 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 01:03:31,143 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__fail
[2020-11-25 01:03:31,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 01:03:31,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 01:03:31,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 01:03:31,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 01:03:31,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY.LockInfo_ctor__fail
[2020-11-25 01:03:31,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY.LockInfo_ctor__success
[2020-11-25 01:03:31,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath_NoBaseCtor__fail
[2020-11-25 01:03:31,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath_NoBaseCtor__success
[2020-11-25 01:03:31,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath__fail
[2020-11-25 01:03:31,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath__success
[2020-11-25 01:03:31,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:03:31,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_HxSafeMath__success
[2020-11-25 01:03:31,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:03:31,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_HxSafeMath__success
[2020-11-25 01:03:31,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:03:31,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_HxSafeMath__success
[2020-11-25 01:03:31,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:03:31,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_HxSafeMath__success
[2020-11-25 01:03:31,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_HxSafeMath__fail
[2020-11-25 01:03:31,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_HxSafeMath__success
[2020-11-25 01:03:31,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 01:03:31,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 01:03:31,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 01:03:31,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 01:03:31,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 01:03:31,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 01:03:31,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 01:03:31,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 01:03:31,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 01:03:31,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 01:03:31,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable_NoBaseCtor__fail
[2020-11-25 01:03:31,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable_NoBaseCtor__success
[2020-11-25 01:03:31,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable__fail
[2020-11-25 01:03:31,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable__success
[2020-11-25 01:03:31,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable__fail
[2020-11-25 01:03:31,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable__success
[2020-11-25 01:03:31,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable__fail
[2020-11-25 01:03:31,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable__success
[2020-11-25 01:03:31,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable__fail
[2020-11-25 01:03:31,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable__success
[2020-11-25 01:03:31,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable__fail
[2020-11-25 01:03:31,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable__success
[2020-11-25 01:03:31,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable__fail
[2020-11-25 01:03:31,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable__success
[2020-11-25 01:03:31,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 01:03:31,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 01:03:31,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 01:03:31,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 01:03:31,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 01:03:31,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 01:03:31,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 01:03:31,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 01:03:31,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__fail
[2020-11-25 01:03:31,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__success
[2020-11-25 01:03:31,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 01:03:31,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 01:03:31,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 01:03:31,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 01:03:31,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 01:03:31,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 01:03:31,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 01:03:31,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 01:03:31,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 01:03:31,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 01:03:31,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 01:03:31,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 01:03:31,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 01:03:31,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 01:03:31,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 01:03:31,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 01:03:31,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 01:03:31,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 01:03:31,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 01:03:31,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 01:03:31,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20_NoBaseCtor__fail
[2020-11-25 01:03:31,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20_NoBaseCtor__success
[2020-11-25 01:03:31,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20__fail
[2020-11-25 01:03:31,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20__success
[2020-11-25 01:03:31,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20__fail
[2020-11-25 01:03:31,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20__success
[2020-11-25 01:03:31,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20__fail
[2020-11-25 01:03:31,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20__success
[2020-11-25 01:03:31,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20__fail
[2020-11-25 01:03:31,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20__success
[2020-11-25 01:03:31,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20__fail
[2020-11-25 01:03:31,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20__success
[2020-11-25 01:03:31,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20__fail
[2020-11-25 01:03:31,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20__success
[2020-11-25 01:03:31,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20__fail
[2020-11-25 01:03:31,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20__success
[2020-11-25 01:03:31,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 01:03:31,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20__success
[2020-11-25 01:03:31,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 01:03:31,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20__success
[2020-11-25 01:03:31,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_HxERC20__fail
[2020-11-25 01:03:31,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_HxERC20__success
[2020-11-25 01:03:31,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_HxERC20__fail
[2020-11-25 01:03:31,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_HxERC20__success
[2020-11-25 01:03:31,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_HxERC20__fail
[2020-11-25 01:03:31,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_HxERC20__success
[2020-11-25 01:03:31,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_HxERC20__fail
[2020-11-25 01:03:31,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_HxERC20__success
[2020-11-25 01:03:31,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 01:03:31,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 01:03:31,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 01:03:31,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 01:03:31,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 01:03:31,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 01:03:31,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 01:03:31,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 01:03:31,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 01:03:31,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 01:03:31,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 01:03:31,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 01:03:31,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 01:03:31,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 01:03:31,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 01:03:31,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 01:03:31,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 01:03:31,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 01:03:31,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY_NoBaseCtor__fail
[2020-11-25 01:03:31,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY_NoBaseCtor__success
[2020-11-25 01:03:31,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY__fail
[2020-11-25 01:03:31,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY__success
[2020-11-25 01:03:31,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY__fail
[2020-11-25 01:03:31,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY__success
[2020-11-25 01:03:31,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY__fail
[2020-11-25 01:03:31,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY__success
[2020-11-25 01:03:31,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY__fail
[2020-11-25 01:03:31,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY__success
[2020-11-25 01:03:31,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY__fail
[2020-11-25 01:03:31,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY__success
[2020-11-25 01:03:31,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY__fail
[2020-11-25 01:03:31,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY__success
[2020-11-25 01:03:31,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY__fail
[2020-11-25 01:03:31,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY__success
[2020-11-25 01:03:31,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY__fail
[2020-11-25 01:03:31,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY__success
[2020-11-25 01:03:31,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY__fail
[2020-11-25 01:03:31,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY__success
[2020-11-25 01:03:31,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY__fail
[2020-11-25 01:03:31,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY__success
[2020-11-25 01:03:31,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_BLY__fail
[2020-11-25 01:03:31,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_BLY__success
[2020-11-25 01:03:31,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_BLY__fail
[2020-11-25 01:03:31,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_BLY__success
[2020-11-25 01:03:31,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_BLY__fail
[2020-11-25 01:03:31,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_BLY__success
[2020-11-25 01:03:31,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_BLY__fail
[2020-11-25 01:03:31,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_BLY__success
[2020-11-25 01:03:31,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BLY__fail
[2020-11-25 01:03:31,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BLY__success
[2020-11-25 01:03:31,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY__fail
[2020-11-25 01:03:31,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY__success
[2020-11-25 01:03:31,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY__fail
[2020-11-25 01:03:31,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY__success
[2020-11-25 01:03:31,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY__fail
[2020-11-25 01:03:31,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY__success
[2020-11-25 01:03:31,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 01:03:31,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 01:03:31,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 01:03:31,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 01:03:31,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 01:03:31,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 01:03:31,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 01:03:31,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 01:03:31,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__fail
[2020-11-25 01:03:31,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__success
[2020-11-25 01:03:31,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 01:03:31,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 01:03:31,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 01:03:31,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 01:03:31,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 01:03:31,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 01:03:31,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__fail
[2020-11-25 01:03:31,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__success
[2020-11-25 01:03:31,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxSafeMath
[2020-11-25 01:03:31,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxSafeMath
[2020-11-25 01:03:31,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 01:03:31,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 01:03:31,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxOwnable
[2020-11-25 01:03:31,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxOwnable
[2020-11-25 01:03:31,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 01:03:31,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 01:03:31,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 01:03:31,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 01:03:31,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 01:03:31,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 01:03:31,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxERC20
[2020-11-25 01:03:31,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxERC20
[2020-11-25 01:03:31,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 01:03:31,159 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 01:03:31,159 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 01:03:31,159 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 01:03:31,159 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BLY
[2020-11-25 01:03:31,159 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 01:03:31,159 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 01:03:31,159 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 01:03:31,518 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:03:31,518 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:03:31,518 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:03:32,188 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:03:32,480 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 01:03:32,480 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 01:03:32,483 INFO  L202        PluginConnector]: Adding new model BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:03:32 BoogieIcfgContainer
[2020-11-25 01:03:32,483 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:03:31" (2/2) ...
[2020-11-25 01:03:32,483 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 01:03:32,483 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@49dce9b2 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:03:32, skipping insertion in model container
[2020-11-25 01:03:32,483 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 01:03:32,484 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 01:03:32,484 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 01:03:32,485 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 01:03:32,485 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:03:30" (1/3) ...
[2020-11-25 01:03:32,485 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@5f1bc437 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:03:32, skipping insertion in model container
[2020-11-25 01:03:32,485 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:03:31" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 01:03:32,516 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:03:32 NWAContainer
[2020-11-25 01:03:32,517 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 01:03:32,517 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 01:03:32,517 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 01:03:32,517 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 01:03:32,518 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:03:32" (3/4) ...
[2020-11-25 01:03:32,518 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@5331570 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:03:32, skipping insertion in model container
[2020-11-25 01:03:32,518 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:03:32" (4/4) ...
[2020-11-25 01:03:32,520 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 01:03:32,533 INFO  L110   BuchiProductObserver]: Initial RCFG 4608 locations, 6371 edges
[2020-11-25 01:03:32,534 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 01:03:32,551 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 01:03:35,990 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 01:03:36,003 INFO  L110   BuchiProductObserver]: BuchiProgram size 11440 locations, 20727 edges
[2020-11-25 01:03:36,004 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:03:36 BoogieIcfgContainer
[2020-11-25 01:03:36,004 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 01:03:36,004 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 01:03:36,004 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 01:03:36,005 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 01:03:36,006 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:03:36" (1/1) ...
[2020-11-25 01:03:36,193 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 01:03:36,197 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 01:03:36,215 INFO  L313           BlockEncoder]: Initial Icfg 11440 locations, 20727 edges
[2020-11-25 01:03:36,215 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 01:03:36,215 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 01:03:36,216 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 01:03:36,216 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 01:03:36,237 INFO  L70    emoveInfeasibleEdges]: Removed 213 edges and 23 locations because of local infeasibility
[2020-11-25 01:03:36,256 INFO  L70        RemoveSinkStates]: Removed 98 edges and 65 locations by removing sink states
[2020-11-25 01:03:36,278 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 01:03:36,285 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 01:03:36,291 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 01:03:36,292 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 01:03:36,297 INFO  L313           BlockEncoder]: Encoded RCFG 11298 locations, 20336 edges
[2020-11-25 01:03:36,297 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:03:36 BasicIcfg
[2020-11-25 01:03:36,297 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 01:03:36,297 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 01:03:36,297 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 01:03:36,299 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 01:03:36,299 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:03:36,299 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:03:30" (1/6) ...
[2020-11-25 01:03:36,300 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7232ee91 and model type BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:03:36, skipping insertion in model container
[2020-11-25 01:03:36,301 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:03:36,301 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:03:31" (2/6) ...
[2020-11-25 01:03:36,301 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7232ee91 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:03:36, skipping insertion in model container
[2020-11-25 01:03:36,301 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:03:36,301 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:03:32" (3/6) ...
[2020-11-25 01:03:36,301 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7232ee91 and model type BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:03:36, skipping insertion in model container
[2020-11-25 01:03:36,301 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:03:36,301 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:03:32" (4/6) ...
[2020-11-25 01:03:36,301 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7232ee91 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:03:36, skipping insertion in model container
[2020-11-25 01:03:36,301 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:03:36,302 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:03:36" (5/6) ...
[2020-11-25 01:03:36,302 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7232ee91 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:03:36, skipping insertion in model container
[2020-11-25 01:03:36,302 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:03:36,302 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:03:36" (6/6) ...
[2020-11-25 01:03:36,303 INFO  L404   chiAutomizerObserver]: Analyzing ICFG BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transferfrom-normal.bpl_BEv2
[2020-11-25 01:03:36,330 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 01:03:36,330 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 01:03:36,331 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 01:03:36,331 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 01:03:36,331 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 01:03:36,331 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 01:03:36,331 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 01:03:36,331 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 01:03:36,331 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 01:03:36,407 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11298 states.
[2020-11-25 01:03:36,534 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:03:36,534 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:03:36,534 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:03:36,542 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:03:36,542 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:03:36,542 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 01:03:36,542 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11298 states.
[2020-11-25 01:03:36,579 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:03:36,579 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:03:36,579 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:03:36,582 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:03:36,582 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND TRUE   revert
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND TRUE   choice == 32
[L11979]              gas := gas - 21000;
[L11980]  COND FALSE  !(gas >= 0)
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:03:36,596 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:03:36,596 INFO  L82        PathProgramCache]: Analyzing trace with hash -1523552397, now seen corresponding path program 1 times
[2020-11-25 01:03:36,600 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:03:36,617 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:03:36,646 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:03:36,647 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:03:36,648 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:03:37,083 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:03:37,098 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:03:37,098 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:03:37,100 INFO  L87              Difference]: Start difference. First operand 11298 states. Second operand 3 states.
[2020-11-25 01:03:37,581 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:03:37,581 INFO  L93              Difference]: Finished difference Result 7168 states and 8392 transitions.
[2020-11-25 01:03:37,582 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:03:37,583 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7168 states and 8392 transitions.
[2020-11-25 01:03:37,615 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:03:37,661 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7168 states to 7168 states and 8392 transitions.
[2020-11-25 01:03:37,661 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 01:03:37,664 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1329
[2020-11-25 01:03:37,665 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7168 states and 8392 transitions.
[2020-11-25 01:03:37,681 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:03:37,682 INFO  L728         BuchiCegarLoop]: Abstraction has 7168 states and 8392 transitions.
[2020-11-25 01:03:37,703 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7168 states and 8392 transitions.
[2020-11-25 01:03:37,792 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7168 to 7168.
[2020-11-25 01:03:37,792 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7168 states.
[2020-11-25 01:03:37,803 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7168 states to 7168 states and 8392 transitions.
[2020-11-25 01:03:37,804 INFO  L751         BuchiCegarLoop]: Abstraction has 7168 states and 8392 transitions.
[2020-11-25 01:03:37,804 INFO  L631         BuchiCegarLoop]: Abstraction has 7168 states and 8392 transitions.
[2020-11-25 01:03:37,804 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 01:03:37,804 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7168 states and 8392 transitions.
[2020-11-25 01:03:37,815 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:03:37,815 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:03:37,815 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:03:37,818 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:03:37,818 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND TRUE   revert
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7640]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10783]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7640]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7641]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((((__ret_0_ == true && _balances_HxERC20[this][from_s1322] == old(_balances_HxERC20[this][from_s1322]) - value_s1322) && _balances_HxERC20[this][to_s1322] == old(_balances_HxERC20[this][to_s1322]) + value_s1322) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] == old(_allowed_HxERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this][p1] == old(_balances_HxERC20[this][p1])) && _allowed_HxERC20[this][p2][p3] == old(_allowed_HxERC20[this][p2][p3])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7640]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10783]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7640]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7641]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((((__ret_0_ == true && _balances_HxERC20[this][from_s1322] == old(_balances_HxERC20[this][from_s1322]) - value_s1322) && _balances_HxERC20[this][to_s1322] == old(_balances_HxERC20[this][to_s1322]) + value_s1322) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] == old(_allowed_HxERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this][p1] == old(_balances_HxERC20[this][p1])) && _allowed_HxERC20[this][p2][p3] == old(_allowed_HxERC20[this][p2][p3])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:03:37,823 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:03:37,823 INFO  L82        PathProgramCache]: Analyzing trace with hash 1833471991, now seen corresponding path program 1 times
[2020-11-25 01:03:37,824 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:03:37,838 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:03:37,871 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:03:37,871 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:03:37,871 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:03:37,873 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:03:37,873 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:03:37,873 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:03:37,873 INFO  L87              Difference]: Start difference. First operand 7168 states and 8392 transitions. cyclomatic complexity: 1234 Second operand 3 states.
[2020-11-25 01:03:38,072 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:03:38,072 INFO  L93              Difference]: Finished difference Result 9122 states and 10655 transitions.
[2020-11-25 01:03:38,072 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:03:38,073 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9122 states and 10655 transitions.
[2020-11-25 01:03:38,098 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:03:38,136 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9122 states to 9122 states and 10655 transitions.
[2020-11-25 01:03:38,136 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1850
[2020-11-25 01:03:38,138 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1850
[2020-11-25 01:03:38,138 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9122 states and 10655 transitions.
[2020-11-25 01:03:38,148 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:03:38,148 INFO  L728         BuchiCegarLoop]: Abstraction has 9122 states and 10655 transitions.
[2020-11-25 01:03:38,156 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9122 states and 10655 transitions.
[2020-11-25 01:03:38,242 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9122 to 7970.
[2020-11-25 01:03:38,243 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7970 states.
[2020-11-25 01:03:38,253 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7970 states to 7970 states and 9261 transitions.
[2020-11-25 01:03:38,254 INFO  L751         BuchiCegarLoop]: Abstraction has 7970 states and 9261 transitions.
[2020-11-25 01:03:38,254 INFO  L631         BuchiCegarLoop]: Abstraction has 7970 states and 9261 transitions.
[2020-11-25 01:03:38,254 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 01:03:38,254 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7970 states and 9261 transitions.
[2020-11-25 01:03:38,265 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:03:38,265 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:03:38,265 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:03:38,268 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:03:38,268 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND TRUE   !(account_s164 != null)
[L5740]               revert := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND TRUE   revert
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND TRUE   revert
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND TRUE   revert
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND TRUE   revert
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7640]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10783]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10784]              revert := true;
[L7640]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7641]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((((__ret_0_ == true && _balances_HxERC20[this][from_s1322] == old(_balances_HxERC20[this][from_s1322]) - value_s1322) && _balances_HxERC20[this][to_s1322] == old(_balances_HxERC20[this][to_s1322]) + value_s1322) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] == old(_allowed_HxERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this][p1] == old(_balances_HxERC20[this][p1])) && _allowed_HxERC20[this][p2][p3] == old(_allowed_HxERC20[this][p2][p3])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7640]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10783]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10784]              revert := true;
[L7640]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7641]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((((__ret_0_ == true && _balances_HxERC20[this][from_s1322] == old(_balances_HxERC20[this][from_s1322]) - value_s1322) && _balances_HxERC20[this][to_s1322] == old(_balances_HxERC20[this][to_s1322]) + value_s1322) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] == old(_allowed_HxERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this][p1] == old(_balances_HxERC20[this][p1])) && _allowed_HxERC20[this][p2][p3] == old(_allowed_HxERC20[this][p2][p3])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:03:38,272 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:03:38,272 INFO  L82        PathProgramCache]: Analyzing trace with hash -1961965956, now seen corresponding path program 1 times
[2020-11-25 01:03:38,273 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:03:38,286 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:03:38,366 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 01:03:38,366 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:03:38,366 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 01:03:38,367 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:03:38,367 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 01:03:38,367 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 01:03:38,367 INFO  L87              Difference]: Start difference. First operand 7970 states and 9261 transitions. cyclomatic complexity: 1301 Second operand 9 states.
[2020-11-25 01:03:38,487 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:03:38,487 INFO  L93              Difference]: Finished difference Result 8016 states and 9336 transitions.
[2020-11-25 01:03:38,487 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 01:03:38,487 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8016 states and 9336 transitions.
[2020-11-25 01:03:38,508 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:03:38,537 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8016 states to 8016 states and 9336 transitions.
[2020-11-25 01:03:38,537 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1546
[2020-11-25 01:03:38,538 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1546
[2020-11-25 01:03:38,538 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8016 states and 9336 transitions.
[2020-11-25 01:03:38,546 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:03:38,546 INFO  L728         BuchiCegarLoop]: Abstraction has 8016 states and 9336 transitions.
[2020-11-25 01:03:38,554 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8016 states and 9336 transitions.
[2020-11-25 01:03:38,619 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8016 to 8007.
[2020-11-25 01:03:38,619 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8007 states.
[2020-11-25 01:03:38,629 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8007 states to 8007 states and 9320 transitions.
[2020-11-25 01:03:38,629 INFO  L751         BuchiCegarLoop]: Abstraction has 8007 states and 9320 transitions.
[2020-11-25 01:03:38,629 INFO  L631         BuchiCegarLoop]: Abstraction has 8007 states and 9320 transitions.
[2020-11-25 01:03:38,629 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 01:03:38,629 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8007 states and 9320 transitions.
[2020-11-25 01:03:38,640 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:03:38,640 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:03:38,640 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:03:38,642 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:03:38,643 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND TRUE   !(account_s218 != null)
[L5811]               revert := true;
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND TRUE   revert
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND TRUE   revert
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND TRUE   revert
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND TRUE   revert
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND TRUE   revert
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7640]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10783]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10784]              revert := true;
[L7640]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7641]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((((__ret_0_ == true && _balances_HxERC20[this][from_s1322] == old(_balances_HxERC20[this][from_s1322]) - value_s1322) && _balances_HxERC20[this][to_s1322] == old(_balances_HxERC20[this][to_s1322]) + value_s1322) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] == old(_allowed_HxERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this][p1] == old(_balances_HxERC20[this][p1])) && _allowed_HxERC20[this][p2][p3] == old(_allowed_HxERC20[this][p2][p3])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7640]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10783]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10784]              revert := true;
[L7640]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7641]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((((__ret_0_ == true && _balances_HxERC20[this][from_s1322] == old(_balances_HxERC20[this][from_s1322]) - value_s1322) && _balances_HxERC20[this][to_s1322] == old(_balances_HxERC20[this][to_s1322]) + value_s1322) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] == old(_allowed_HxERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this][p1] == old(_balances_HxERC20[this][p1])) && _allowed_HxERC20[this][p2][p3] == old(_allowed_HxERC20[this][p2][p3])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:03:38,647 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:03:38,647 INFO  L82        PathProgramCache]: Analyzing trace with hash -405158063, now seen corresponding path program 1 times
[2020-11-25 01:03:38,648 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:03:38,658 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:03:38,754 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 01:03:38,754 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:03:38,755 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 01:03:38,755 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:03:38,755 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 01:03:38,755 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 01:03:38,756 INFO  L87              Difference]: Start difference. First operand 8007 states and 9320 transitions. cyclomatic complexity: 1323 Second operand 10 states.
[2020-11-25 01:03:38,903 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:03:38,903 INFO  L93              Difference]: Finished difference Result 8067 states and 9411 transitions.
[2020-11-25 01:03:38,903 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 01:03:38,903 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8067 states and 9411 transitions.
[2020-11-25 01:03:38,925 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:03:38,959 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8067 states to 8067 states and 9411 transitions.
[2020-11-25 01:03:38,959 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1553
[2020-11-25 01:03:38,961 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1553
[2020-11-25 01:03:38,961 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8067 states and 9411 transitions.
[2020-11-25 01:03:38,969 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:03:38,969 INFO  L728         BuchiCegarLoop]: Abstraction has 8067 states and 9411 transitions.
[2020-11-25 01:03:38,980 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8067 states and 9411 transitions.
[2020-11-25 01:03:39,074 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8067 to 8014.
[2020-11-25 01:03:39,075 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8014 states.
[2020-11-25 01:03:39,087 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8014 states to 8014 states and 9328 transitions.
[2020-11-25 01:03:39,087 INFO  L751         BuchiCegarLoop]: Abstraction has 8014 states and 9328 transitions.
[2020-11-25 01:03:39,088 INFO  L631         BuchiCegarLoop]: Abstraction has 8014 states and 9328 transitions.
[2020-11-25 01:03:39,088 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 01:03:39,088 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8014 states and 9328 transitions.
[2020-11-25 01:03:39,101 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:03:39,101 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:03:39,101 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:03:39,104 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:03:39,105 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND TRUE   !!__var_2
[L5748]               revert := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND TRUE   revert
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND TRUE   revert
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND TRUE   revert
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND TRUE   revert
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7640]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10783]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10784]              revert := true;
[L7640]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7641]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((((__ret_0_ == true && _balances_HxERC20[this][from_s1322] == old(_balances_HxERC20[this][from_s1322]) - value_s1322) && _balances_HxERC20[this][to_s1322] == old(_balances_HxERC20[this][to_s1322]) + value_s1322) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] == old(_allowed_HxERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this][p1] == old(_balances_HxERC20[this][p1])) && _allowed_HxERC20[this][p2][p3] == old(_allowed_HxERC20[this][p2][p3])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7640]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10783]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10784]              revert := true;
[L7640]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7641]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((((__ret_0_ == true && _balances_HxERC20[this][from_s1322] == old(_balances_HxERC20[this][from_s1322]) - value_s1322) && _balances_HxERC20[this][to_s1322] == old(_balances_HxERC20[this][to_s1322]) + value_s1322) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] == old(_allowed_HxERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this][p1] == old(_balances_HxERC20[this][p1])) && _allowed_HxERC20[this][p2][p3] == old(_allowed_HxERC20[this][p2][p3])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:03:39,111 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:03:39,112 INFO  L82        PathProgramCache]: Analyzing trace with hash -113874004, now seen corresponding path program 1 times
[2020-11-25 01:03:39,113 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:03:39,127 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:03:39,183 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 51 trivial. 0 not checked.
[2020-11-25 01:03:39,183 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:03:39,183 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:03:39,183 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:03:39,184 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:03:39,184 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:03:39,184 INFO  L87              Difference]: Start difference. First operand 8014 states and 9328 transitions. cyclomatic complexity: 1324 Second operand 3 states.
[2020-11-25 01:03:39,324 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:03:39,324 INFO  L93              Difference]: Finished difference Result 9142 states and 10343 transitions.
[2020-11-25 01:03:39,324 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:03:39,325 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9142 states and 10343 transitions.
[2020-11-25 01:03:39,344 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:03:39,365 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9142 states to 8464 states and 9539 transitions.
[2020-11-25 01:03:39,365 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1652
[2020-11-25 01:03:39,366 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1734
[2020-11-25 01:03:39,366 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8464 states and 9539 transitions.
[2020-11-25 01:03:39,372 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:03:39,372 INFO  L728         BuchiCegarLoop]: Abstraction has 8464 states and 9539 transitions.
[2020-11-25 01:03:39,378 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8464 states and 9539 transitions.
[2020-11-25 01:03:39,418 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8464 to 7480.
[2020-11-25 01:03:39,418 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7480 states.
[2020-11-25 01:03:39,425 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7480 states to 7480 states and 8313 transitions.
[2020-11-25 01:03:39,425 INFO  L751         BuchiCegarLoop]: Abstraction has 7480 states and 8313 transitions.
[2020-11-25 01:03:39,425 INFO  L631         BuchiCegarLoop]: Abstraction has 7480 states and 8313 transitions.
[2020-11-25 01:03:39,425 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 01:03:39,426 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7480 states and 8313 transitions.
[2020-11-25 01:03:39,433 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:03:39,433 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:03:39,433 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:03:39,438 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:03:39,438 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:03:39,444 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:03:39,445 INFO  L82        PathProgramCache]: Analyzing trace with hash -272914949, now seen corresponding path program 1 times
[2020-11-25 01:03:39,446 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:03:39,466 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:03:39,655 INFO  L134       CoverageAnalysis]: Checked inductivity of 942 backedges. 0 proven. 27 refuted. 0 times theorem prover too weak. 915 trivial. 0 not checked.
[2020-11-25 01:03:39,655 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:03:39,655 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 01:03:39,656 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:03:39,656 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:03:39,656 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:03:39,656 INFO  L87              Difference]: Start difference. First operand 7480 states and 8313 transitions. cyclomatic complexity: 843 Second operand 7 states.
[2020-11-25 01:03:39,833 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:03:39,833 INFO  L93              Difference]: Finished difference Result 7503 states and 8340 transitions.
[2020-11-25 01:03:39,833 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:03:39,833 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7503 states and 8340 transitions.
[2020-11-25 01:03:39,851 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:03:39,872 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7503 states to 7486 states and 8320 transitions.
[2020-11-25 01:03:39,872 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1499
[2020-11-25 01:03:39,873 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1499
[2020-11-25 01:03:39,873 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7486 states and 8320 transitions.
[2020-11-25 01:03:39,878 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:03:39,878 INFO  L728         BuchiCegarLoop]: Abstraction has 7486 states and 8320 transitions.
[2020-11-25 01:03:39,885 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7486 states and 8320 transitions.
[2020-11-25 01:03:39,931 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7486 to 7486.
[2020-11-25 01:03:39,932 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7486 states.
[2020-11-25 01:03:39,942 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7486 states to 7486 states and 8320 transitions.
[2020-11-25 01:03:39,942 INFO  L751         BuchiCegarLoop]: Abstraction has 7486 states and 8320 transitions.
[2020-11-25 01:03:39,942 INFO  L631         BuchiCegarLoop]: Abstraction has 7486 states and 8320 transitions.
[2020-11-25 01:03:39,942 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 01:03:39,942 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7486 states and 8320 transitions.
[2020-11-25 01:03:39,953 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:03:39,953 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:03:39,953 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:03:39,956 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:03:39,957 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND TRUE   DType[this] == ERC20Pausable
[L6022]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6022]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6023]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND TRUE   DType[this] == ERC20Pausable
[L6022]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6022]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6023]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND TRUE   DType[this] == ERC20Pausable
[L6022]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6022]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6023]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND TRUE   DType[this] == ERC20Pausable
[L6022]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6022]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6023]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:03:39,965 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:03:39,965 INFO  L82        PathProgramCache]: Analyzing trace with hash -628997973, now seen corresponding path program 1 times
[2020-11-25 01:03:39,966 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:03:39,985 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:03:40,224 INFO  L134       CoverageAnalysis]: Checked inductivity of 936 backedges. 0 proven. 27 refuted. 0 times theorem prover too weak. 909 trivial. 0 not checked.
[2020-11-25 01:03:40,224 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:03:40,224 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 01:03:40,225 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:03:40,225 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:03:40,225 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:03:40,225 INFO  L87              Difference]: Start difference. First operand 7486 states and 8320 transitions. cyclomatic complexity: 844 Second operand 7 states.
[2020-11-25 01:03:40,337 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:03:40,337 INFO  L93              Difference]: Finished difference Result 7509 states and 8347 transitions.
[2020-11-25 01:03:40,337 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:03:40,337 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7509 states and 8347 transitions.
[2020-11-25 01:03:40,349 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:03:40,363 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7509 states to 7492 states and 8327 transitions.
[2020-11-25 01:03:40,363 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1499
[2020-11-25 01:03:40,364 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1499
[2020-11-25 01:03:40,364 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7492 states and 8327 transitions.
[2020-11-25 01:03:40,368 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:03:40,368 INFO  L728         BuchiCegarLoop]: Abstraction has 7492 states and 8327 transitions.
[2020-11-25 01:03:40,374 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7492 states and 8327 transitions.
[2020-11-25 01:03:40,407 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7492 to 7486.
[2020-11-25 01:03:40,407 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7486 states.
[2020-11-25 01:03:40,414 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7486 states to 7486 states and 8320 transitions.
[2020-11-25 01:03:40,415 INFO  L751         BuchiCegarLoop]: Abstraction has 7486 states and 8320 transitions.
[2020-11-25 01:03:40,415 INFO  L631         BuchiCegarLoop]: Abstraction has 7486 states and 8320 transitions.
[2020-11-25 01:03:40,415 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 01:03:40,415 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7486 states and 8320 transitions.
[2020-11-25 01:03:40,423 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:03:40,423 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:03:40,423 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:03:40,424 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:03:40,425 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:03:40,430 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:03:40,430 INFO  L82        PathProgramCache]: Analyzing trace with hash -642557013, now seen corresponding path program 1 times
[2020-11-25 01:03:40,431 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:03:40,443 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:03:40,667 INFO  L134       CoverageAnalysis]: Checked inductivity of 948 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 912 trivial. 0 not checked.
[2020-11-25 01:03:40,667 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:03:40,667 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 01:03:40,668 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:03:40,668 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:03:40,668 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:03:40,668 INFO  L87              Difference]: Start difference. First operand 7486 states and 8320 transitions. cyclomatic complexity: 844 Second operand 7 states.
[2020-11-25 01:03:40,777 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:03:40,778 INFO  L93              Difference]: Finished difference Result 7509 states and 8347 transitions.
[2020-11-25 01:03:40,778 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:03:40,778 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7509 states and 8347 transitions.
[2020-11-25 01:03:40,789 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:03:40,802 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7509 states to 7492 states and 8327 transitions.
[2020-11-25 01:03:40,802 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1499
[2020-11-25 01:03:40,803 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1499
[2020-11-25 01:03:40,803 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7492 states and 8327 transitions.
[2020-11-25 01:03:40,806 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:03:40,806 INFO  L728         BuchiCegarLoop]: Abstraction has 7492 states and 8327 transitions.
[2020-11-25 01:03:40,812 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7492 states and 8327 transitions.
[2020-11-25 01:03:40,842 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7492 to 7486.
[2020-11-25 01:03:40,842 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7486 states.
[2020-11-25 01:03:40,849 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7486 states to 7486 states and 8320 transitions.
[2020-11-25 01:03:40,849 INFO  L751         BuchiCegarLoop]: Abstraction has 7486 states and 8320 transitions.
[2020-11-25 01:03:40,849 INFO  L631         BuchiCegarLoop]: Abstraction has 7486 states and 8320 transitions.
[2020-11-25 01:03:40,849 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 01:03:40,849 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7486 states and 8320 transitions.
[2020-11-25 01:03:40,856 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:03:40,857 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:03:40,857 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:03:40,858 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:03:40,858 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:03:40,864 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:03:40,864 INFO  L82        PathProgramCache]: Analyzing trace with hash -106691561, now seen corresponding path program 1 times
[2020-11-25 01:03:40,865 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:03:40,885 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:03:41,045 INFO  L134       CoverageAnalysis]: Checked inductivity of 924 backedges. 6 proven. 25 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 01:03:41,045 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:03:41,045 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 01:03:41,045 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:03:41,046 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:03:41,046 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:03:41,046 INFO  L87              Difference]: Start difference. First operand 7486 states and 8320 transitions. cyclomatic complexity: 844 Second operand 8 states.
[2020-11-25 01:03:41,186 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:03:41,187 INFO  L93              Difference]: Finished difference Result 7513 states and 8351 transitions.
[2020-11-25 01:03:41,187 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:03:41,187 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7513 states and 8351 transitions.
[2020-11-25 01:03:41,198 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:03:41,211 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7513 states to 7499 states and 8335 transitions.
[2020-11-25 01:03:41,211 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1499
[2020-11-25 01:03:41,211 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1499
[2020-11-25 01:03:41,211 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7499 states and 8335 transitions.
[2020-11-25 01:03:41,215 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:03:41,215 INFO  L728         BuchiCegarLoop]: Abstraction has 7499 states and 8335 transitions.
[2020-11-25 01:03:41,221 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7499 states and 8335 transitions.
[2020-11-25 01:03:41,254 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7499 to 7499.
[2020-11-25 01:03:41,254 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7499 states.
[2020-11-25 01:03:41,261 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7499 states to 7499 states and 8335 transitions.
[2020-11-25 01:03:41,261 INFO  L751         BuchiCegarLoop]: Abstraction has 7499 states and 8335 transitions.
[2020-11-25 01:03:41,261 INFO  L631         BuchiCegarLoop]: Abstraction has 7499 states and 8335 transitions.
[2020-11-25 01:03:41,261 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 01:03:41,261 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7499 states and 8335 transitions.
[2020-11-25 01:03:41,268 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:03:41,268 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:03:41,268 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:03:41,270 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:03:41,270 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND TRUE   __exception
[L3018]               __tmp__Balance := Balance;
[L3019]               __tmp__DType := DType;
[L3020]               __tmp__Alloc := Alloc;
[L3021]               __tmp__balance_ADDR := balance_ADDR;
[L3022]               __tmp__M_Ref_bool := M_Ref_bool;
[L3023]               __tmp__sum := sum;
[L3024]               __tmp__M_Ref_int := M_Ref_int;
[L3025]               __tmp__sum__balances0 := sum__balances0;
[L3026]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3027]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3028]               __tmp__sum__allowed1 := sum__allowed1;
[L3029]               __tmp__M_int_Ref := M_int_Ref;
[L3030]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3031]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3032]               __tmp__Length := Length;
[L3033]               __tmp__now := now;
[L3034]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3035]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3036]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3037]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3038]               __tmp___paused_Pausable := _paused_Pausable;
[L3039]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3040]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3041]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3042]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3043]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3044]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3045]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3046]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3047]               __tmp__implementation_BLY := implementation_BLY;
[L3048]               __tmp__timelockList_BLY := timelockList_BLY;
[L3049]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3050]   CALL        call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L7307]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L7307]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7308]   COND FALSE  !(revert)
[L7311]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7177]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L7177]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7150]               assume msgsender_MSG != null;
[L7151]               __tmp__Balance[this] := 0;
[L7152]               __tmp___name_ERC20Detailed[this] := -1412326813;
[L7153]               __tmp___symbol_ERC20Detailed[this] := -1412326813;
[L7154]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7156]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7157]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7158]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7181]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7182]   COND FALSE  !(revert)
[L7311]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7312]   COND FALSE  !(revert)
[L7315]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6479]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6480]   COND FALSE  !(revert)
[L6483]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6454]               assume msgsender_MSG != null;
[L6455]               __tmp__Balance[this] := 0;
[L6456]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6457]               __tmp__sum__balances0[this] := 0;
[L6458]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6459]               __tmp__sum__allowed1[this] := 0;
[L6460]               __tmp___totalSupply_HxERC20[this] := 0;
[L6483]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6484]   COND FALSE  !(revert)
[L7315]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7316]   COND FALSE  !(revert)
[L7319]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L7319]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7320]   COND FALSE  !(revert)
[L7323]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND TRUE   __tmp__DType[this] == BLY
[L5979]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5979]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5980]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L7323]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7324]   COND FALSE  !(revert)
[L7327]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6323]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6327]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND TRUE   __tmp__DType[this] == BLY
[L5979]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5979]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5980]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L6327]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6328]   COND FALSE  !(revert)
[L6331]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6304]               assume msgsender_MSG != null;
[L6305]               __tmp__Balance[this] := 0;
[L6306]               __tmp___paused_Pausable[this] := false;
[L6308]               __tmp___paused_Pausable[this] := false;
[L6331]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6332]   COND FALSE  !(revert)
[L7327]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7328]   COND FALSE  !(revert)
[L7331]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6993]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6994]   COND FALSE  !(revert)
[L6997]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6479]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6480]   COND FALSE  !(revert)
[L6483]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6454]               assume msgsender_MSG != null;
[L6455]               __tmp__Balance[this] := 0;
[L6456]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6457]               __tmp__sum__balances0[this] := 0;
[L6458]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6459]               __tmp__sum__allowed1[this] := 0;
[L6460]               __tmp___totalSupply_HxERC20[this] := 0;
[L6483]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6484]   COND FALSE  !(revert)
[L6997]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6998]   COND FALSE  !(revert)
[L7001]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L7001]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7002]   COND FALSE  !(revert)
[L7005]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND TRUE   __tmp__DType[this] == BLY
[L5979]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5979]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5980]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L7005]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7006]   COND FALSE  !(revert)
[L7009]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6323]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6327]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND TRUE   __tmp__DType[this] == BLY
[L5979]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5979]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5980]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L6327]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6328]   COND FALSE  !(revert)
[L6331]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6304]               assume msgsender_MSG != null;
[L6305]               __tmp__Balance[this] := 0;
[L6306]               __tmp___paused_Pausable[this] := false;
[L6308]               __tmp___paused_Pausable[this] := false;
[L6331]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6332]   COND FALSE  !(revert)
[L7009]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7010]   COND FALSE  !(revert)
[L7013]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6978]               assume msgsender_MSG != null;
[L6979]               __tmp__Balance[this] := 0;
[L7013]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7014]   COND FALSE  !(revert)
[L7331]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7332]   COND FALSE  !(revert)
[L7335]   CALL        call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7240]               assume msgsender_MSG != null;
[L7241]               __tmp__Balance[this] := 0;
[L7242]               __tmp__implementation_BLY[this] := null;
[L7244]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7244]   RET         call __var_36 := FreshRefGenerator__fail();
[L7245]   COND FALSE  !(revert)
[L7248]               __tmp__timelockList_BLY[this] := __var_36;
[L7250]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]] := zeroRefboolArr();
[L7251]               __tmp__frozenAccount_BLY[this] := zeroRefboolArr();
[L7254]               assume __tmp__Balance[msgsender_MSG] >= msgvalue_MSG;
[L7255]               __tmp__Balance[msgsender_MSG] := __tmp__Balance[msgsender_MSG] - msgvalue_MSG;
[L7256]               __tmp__Balance[this] := __tmp__Balance[this] + msgvalue_MSG;
[L7258]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7259]   COND TRUE   __tmp__DType[this] == BLY
[L7260]   CALL        call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6821]               __var_23 := null;
[L6822]   COND FALSE  !(!(account_s946 != null))
[L6826]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L5641]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5642]   COND FALSE  !(!(c_s106 >= a_s106))
[L5646]               __ret_0_ := c_s106;
[L6826]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L6827]   COND FALSE  !(revert)
[L6830]               __tmp___totalSupply_HxERC20[this] := __var_24;
[L6831]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L5641]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5642]   COND FALSE  !(!(c_s106 >= a_s106))
[L5646]               __ret_0_ := c_s106;
[L6831]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L6832]   COND FALSE  !(revert)
[L6835]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][account_s946];
[L6836]               __tmp___balances_HxERC20[this][account_s946] := __var_25;
[L6837]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][account_s946];
[L7260]   RET         call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7261]   COND FALSE  !(revert)
[L7335]   RET         call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7336]   COND FALSE  !(revert)
[L3050]   RET         call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L3051]               assume revert || gas < 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:03:41,276 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:03:41,276 INFO  L82        PathProgramCache]: Analyzing trace with hash -525917263, now seen corresponding path program 1 times
[2020-11-25 01:03:41,276 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:03:41,298 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:03:41,455 INFO  L134       CoverageAnalysis]: Checked inductivity of 894 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 894 trivial. 0 not checked.
[2020-11-25 01:03:41,455 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:03:41,455 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:03:41,456 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:03:41,456 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:03:41,456 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:03:41,456 INFO  L87              Difference]: Start difference. First operand 7499 states and 8335 transitions. cyclomatic complexity: 846 Second operand 4 states.
[2020-11-25 01:03:41,850 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:03:41,850 INFO  L93              Difference]: Finished difference Result 9649 states and 10906 transitions.
[2020-11-25 01:03:41,850 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 01:03:41,851 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9649 states and 10906 transitions.
[2020-11-25 01:03:41,871 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 01:03:41,889 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9649 states to 9105 states and 10311 transitions.
[2020-11-25 01:03:41,889 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1953
[2020-11-25 01:03:41,890 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1972
[2020-11-25 01:03:41,890 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9105 states and 10311 transitions.
[2020-11-25 01:03:41,896 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:03:41,896 INFO  L728         BuchiCegarLoop]: Abstraction has 9105 states and 10311 transitions.
[2020-11-25 01:03:41,902 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9105 states and 10311 transitions.
[2020-11-25 01:03:41,949 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9105 to 7995.
[2020-11-25 01:03:41,949 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7995 states.
[2020-11-25 01:03:41,958 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7995 states to 7995 states and 8932 transitions.
[2020-11-25 01:03:41,958 INFO  L751         BuchiCegarLoop]: Abstraction has 7995 states and 8932 transitions.
[2020-11-25 01:03:41,958 INFO  L631         BuchiCegarLoop]: Abstraction has 7995 states and 8932 transitions.
[2020-11-25 01:03:41,958 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 01:03:41,958 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7995 states and 8932 transitions.
[2020-11-25 01:03:41,967 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:03:41,967 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:03:41,967 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:03:41,970 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:03:41,970 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND TRUE   DType[this] == ERC20Pausable
[L6022]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6022]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6023]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND TRUE   DType[this] == Pausable
[L6027]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6027]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6028]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND TRUE   DType[this] == ERC20Pausable
[L6022]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6022]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6023]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:03:41,975 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:03:41,975 INFO  L82        PathProgramCache]: Analyzing trace with hash -1374206573, now seen corresponding path program 1 times
[2020-11-25 01:03:41,976 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:03:41,990 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:03:42,244 INFO  L134       CoverageAnalysis]: Checked inductivity of 913 backedges. 6 proven. 22 refuted. 0 times theorem prover too weak. 885 trivial. 0 not checked.
[2020-11-25 01:03:42,244 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:03:42,244 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 01:03:42,245 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:03:42,245 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:03:42,245 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:03:42,245 INFO  L87              Difference]: Start difference. First operand 7995 states and 8932 transitions. cyclomatic complexity: 947 Second operand 8 states.
[2020-11-25 01:03:42,377 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:03:42,378 INFO  L93              Difference]: Finished difference Result 8022 states and 8963 transitions.
[2020-11-25 01:03:42,378 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:03:42,378 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8022 states and 8963 transitions.
[2020-11-25 01:03:42,392 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:03:42,405 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8022 states to 8008 states and 8947 transitions.
[2020-11-25 01:03:42,405 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1863
[2020-11-25 01:03:42,406 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1863
[2020-11-25 01:03:42,406 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8008 states and 8947 transitions.
[2020-11-25 01:03:42,409 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:03:42,409 INFO  L728         BuchiCegarLoop]: Abstraction has 8008 states and 8947 transitions.
[2020-11-25 01:03:42,415 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8008 states and 8947 transitions.
[2020-11-25 01:03:42,450 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8008 to 7995.
[2020-11-25 01:03:42,450 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7995 states.
[2020-11-25 01:03:42,457 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7995 states to 7995 states and 8932 transitions.
[2020-11-25 01:03:42,457 INFO  L751         BuchiCegarLoop]: Abstraction has 7995 states and 8932 transitions.
[2020-11-25 01:03:42,457 INFO  L631         BuchiCegarLoop]: Abstraction has 7995 states and 8932 transitions.
[2020-11-25 01:03:42,457 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 01:03:42,457 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7995 states and 8932 transitions.
[2020-11-25 01:03:42,465 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:03:42,465 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:03:42,465 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:03:42,467 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:03:42,467 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:03:42,471 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:03:42,471 INFO  L82        PathProgramCache]: Analyzing trace with hash -1483681118, now seen corresponding path program 1 times
[2020-11-25 01:03:42,472 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:03:42,486 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:03:42,642 INFO  L134       CoverageAnalysis]: Checked inductivity of 927 backedges. 6 proven. 31 refuted. 0 times theorem prover too weak. 890 trivial. 0 not checked.
[2020-11-25 01:03:42,642 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:03:42,642 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 01:03:42,643 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:03:42,643 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:03:42,643 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:03:42,643 INFO  L87              Difference]: Start difference. First operand 7995 states and 8932 transitions. cyclomatic complexity: 947 Second operand 8 states.
[2020-11-25 01:03:42,766 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:03:42,766 INFO  L93              Difference]: Finished difference Result 8016 states and 8956 transitions.
[2020-11-25 01:03:42,766 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:03:42,767 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8016 states and 8956 transitions.
[2020-11-25 01:03:42,779 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:03:42,792 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8016 states to 8002 states and 8940 transitions.
[2020-11-25 01:03:42,792 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1863
[2020-11-25 01:03:42,793 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1863
[2020-11-25 01:03:42,793 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8002 states and 8940 transitions.
[2020-11-25 01:03:42,797 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:03:42,797 INFO  L728         BuchiCegarLoop]: Abstraction has 8002 states and 8940 transitions.
[2020-11-25 01:03:42,802 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8002 states and 8940 transitions.
[2020-11-25 01:03:42,838 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8002 to 7989.
[2020-11-25 01:03:42,838 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7989 states.
[2020-11-25 01:03:42,846 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7989 states to 7989 states and 8925 transitions.
[2020-11-25 01:03:42,846 INFO  L751         BuchiCegarLoop]: Abstraction has 7989 states and 8925 transitions.
[2020-11-25 01:03:42,846 INFO  L631         BuchiCegarLoop]: Abstraction has 7989 states and 8925 transitions.
[2020-11-25 01:03:42,846 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 01:03:42,846 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7989 states and 8925 transitions.
[2020-11-25 01:03:42,855 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:03:42,855 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:03:42,855 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:03:42,856 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:03:42,856 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:03:42,861 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:03:42,861 INFO  L82        PathProgramCache]: Analyzing trace with hash 2063187903, now seen corresponding path program 2 times
[2020-11-25 01:03:42,862 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:03:42,876 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:03:43,051 INFO  L134       CoverageAnalysis]: Checked inductivity of 917 backedges. 12 proven. 12 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 01:03:43,052 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:03:43,052 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 01:03:43,052 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:03:43,052 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 01:03:43,052 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 01:03:43,053 INFO  L87              Difference]: Start difference. First operand 7989 states and 8925 transitions. cyclomatic complexity: 946 Second operand 8 states.
[2020-11-25 01:03:43,170 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:03:43,170 INFO  L93              Difference]: Finished difference Result 8010 states and 8949 transitions.
[2020-11-25 01:03:43,170 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:03:43,170 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8010 states and 8949 transitions.
[2020-11-25 01:03:43,182 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:03:43,194 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8010 states to 7989 states and 8924 transitions.
[2020-11-25 01:03:43,194 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1863
[2020-11-25 01:03:43,195 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1863
[2020-11-25 01:03:43,195 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7989 states and 8924 transitions.
[2020-11-25 01:03:43,198 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:03:43,198 INFO  L728         BuchiCegarLoop]: Abstraction has 7989 states and 8924 transitions.
[2020-11-25 01:03:43,203 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7989 states and 8924 transitions.
[2020-11-25 01:03:43,232 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7989 to 7989.
[2020-11-25 01:03:43,232 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7989 states.
[2020-11-25 01:03:43,239 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7989 states to 7989 states and 8924 transitions.
[2020-11-25 01:03:43,239 INFO  L751         BuchiCegarLoop]: Abstraction has 7989 states and 8924 transitions.
[2020-11-25 01:03:43,239 INFO  L631         BuchiCegarLoop]: Abstraction has 7989 states and 8924 transitions.
[2020-11-25 01:03:43,239 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 01:03:43,239 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7989 states and 8924 transitions.
[2020-11-25 01:03:43,246 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:03:43,247 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:03:43,247 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:03:43,248 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:03:43,248 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:03:43,252 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:03:43,252 INFO  L82        PathProgramCache]: Analyzing trace with hash -44487820, now seen corresponding path program 3 times
[2020-11-25 01:03:43,253 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:03:43,271 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:03:43,431 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 01:03:43,431 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:03:43,431 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 01:03:43,431 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:03:43,431 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 01:03:43,431 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 01:03:43,432 INFO  L87              Difference]: Start difference. First operand 7989 states and 8924 transitions. cyclomatic complexity: 945 Second operand 9 states.
[2020-11-25 01:03:43,563 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:03:43,563 INFO  L93              Difference]: Finished difference Result 8007 states and 8943 transitions.
[2020-11-25 01:03:43,563 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 01:03:43,563 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8007 states and 8943 transitions.
[2020-11-25 01:03:43,576 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:03:43,587 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8007 states to 7961 states and 8889 transitions.
[2020-11-25 01:03:43,587 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1863
[2020-11-25 01:03:43,588 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1863
[2020-11-25 01:03:43,588 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7961 states and 8889 transitions.
[2020-11-25 01:03:43,591 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:03:43,591 INFO  L728         BuchiCegarLoop]: Abstraction has 7961 states and 8889 transitions.
[2020-11-25 01:03:43,596 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7961 states and 8889 transitions.
[2020-11-25 01:03:43,625 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7961 to 7961.
[2020-11-25 01:03:43,625 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7961 states.
[2020-11-25 01:03:43,632 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7961 states to 7961 states and 8889 transitions.
[2020-11-25 01:03:43,632 INFO  L751         BuchiCegarLoop]: Abstraction has 7961 states and 8889 transitions.
[2020-11-25 01:03:43,632 INFO  L631         BuchiCegarLoop]: Abstraction has 7961 states and 8889 transitions.
[2020-11-25 01:03:43,632 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 01:03:43,632 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7961 states and 8889 transitions.
[2020-11-25 01:03:43,639 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:03:43,639 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:03:43,639 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:03:43,641 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:03:43,641 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10776]              revert := true;
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:03:43,645 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:03:43,645 INFO  L82        PathProgramCache]: Analyzing trace with hash -1255875077, now seen corresponding path program 1 times
[2020-11-25 01:03:43,646 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:03:43,665 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:03:43,951 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 01:03:43,952 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:03:43,952 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 01:03:43,952 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:03:43,952 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 01:03:43,952 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 01:03:43,952 INFO  L87              Difference]: Start difference. First operand 7961 states and 8889 transitions. cyclomatic complexity: 938 Second operand 12 states.
[2020-11-25 01:03:49,860 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:03:49,860 INFO  L93              Difference]: Finished difference Result 12974 states and 14542 transitions.
[2020-11-25 01:03:49,860 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 01:03:49,861 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12974 states and 14542 transitions.
[2020-11-25 01:03:49,886 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 01:03:49,908 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12974 states to 12974 states and 14542 transitions.
[2020-11-25 01:03:49,909 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2849
[2020-11-25 01:03:49,910 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2849
[2020-11-25 01:03:49,910 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12974 states and 14542 transitions.
[2020-11-25 01:03:49,915 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:03:49,916 INFO  L728         BuchiCegarLoop]: Abstraction has 12974 states and 14542 transitions.
[2020-11-25 01:03:49,922 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12974 states and 14542 transitions.
[2020-11-25 01:03:49,974 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12974 to 10910.
[2020-11-25 01:03:49,974 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10910 states.
[2020-11-25 01:03:49,987 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10910 states to 10910 states and 12478 transitions.
[2020-11-25 01:03:49,987 INFO  L751         BuchiCegarLoop]: Abstraction has 10910 states and 12478 transitions.
[2020-11-25 01:03:49,987 INFO  L631         BuchiCegarLoop]: Abstraction has 10910 states and 12478 transitions.
[2020-11-25 01:03:49,987 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 01:03:49,987 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10910 states and 12478 transitions.
[2020-11-25 01:03:49,999 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 01:03:50,000 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:03:50,000 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:03:50,001 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:03:50,001 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10744]              revert := true;
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:03:50,006 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:03:50,006 INFO  L82        PathProgramCache]: Analyzing trace with hash -1489426436, now seen corresponding path program 1 times
[2020-11-25 01:03:50,007 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:03:50,024 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:03:50,307 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 924 trivial. 0 not checked.
[2020-11-25 01:03:50,307 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:03:50,307 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 01:03:50,308 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:03:50,308 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 01:03:50,308 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=183, Unknown=0, NotChecked=0, Total=210
[2020-11-25 01:03:50,308 INFO  L87              Difference]: Start difference. First operand 10910 states and 12478 transitions. cyclomatic complexity: 1584 Second operand 15 states.
[2020-11-25 01:03:58,688 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:03:58,689 INFO  L93              Difference]: Finished difference Result 18172 states and 21283 transitions.
[2020-11-25 01:03:58,689 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 01:03:58,689 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18172 states and 21283 transitions.
[2020-11-25 01:03:58,729 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 64
[2020-11-25 01:03:58,773 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18172 states to 18172 states and 21283 transitions.
[2020-11-25 01:03:58,773 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3914
[2020-11-25 01:03:58,774 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3914
[2020-11-25 01:03:58,775 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 18172 states and 21283 transitions.
[2020-11-25 01:03:58,785 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:03:58,785 INFO  L728         BuchiCegarLoop]: Abstraction has 18172 states and 21283 transitions.
[2020-11-25 01:03:58,792 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 18172 states and 21283 transitions.
[2020-11-25 01:03:58,885 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 18172 to 16776.
[2020-11-25 01:03:58,885 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 16776 states.
[2020-11-25 01:03:58,909 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 16776 states to 16776 states and 19887 transitions.
[2020-11-25 01:03:58,910 INFO  L751         BuchiCegarLoop]: Abstraction has 16776 states and 19887 transitions.
[2020-11-25 01:03:58,910 INFO  L631         BuchiCegarLoop]: Abstraction has 16776 states and 19887 transitions.
[2020-11-25 01:03:58,910 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 01:03:58,910 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 16776 states and 19887 transitions.
[2020-11-25 01:03:58,928 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 64
[2020-11-25 01:03:58,928 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:03:58,928 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:03:58,930 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:03:58,930 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND FALSE  !(revert)
[L7105]   COND TRUE   __tmp__DType[this] == BLY
[L7106]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6619]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5617]   COND TRUE   !(b_s82 <= a_s82)
[L5618]               revert := true;
[L6619]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6620]   COND TRUE   revert
[L7106]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7107]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false)
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND FALSE  !(revert)
[L7105]   COND TRUE   __tmp__DType[this] == BLY
[L7106]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6619]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5617]   COND TRUE   !(b_s82 <= a_s82)
[L5618]               revert := true;
[L6619]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6620]   COND TRUE   revert
[L7106]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7107]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:03:58,934 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:03:58,935 INFO  L82        PathProgramCache]: Analyzing trace with hash 463610893, now seen corresponding path program 1 times
[2020-11-25 01:03:58,935 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:03:58,953 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:03:59,206 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 01:03:59,207 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:03:59,207 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 01:03:59,207 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:03:59,207 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 01:03:59,207 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=38, Invalid=268, Unknown=0, NotChecked=0, Total=306
[2020-11-25 01:03:59,207 INFO  L87              Difference]: Start difference. First operand 16776 states and 19887 transitions. cyclomatic complexity: 3141 Second operand 18 states.
[2020-11-25 01:04:06,696 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:04:06,696 INFO  L93              Difference]: Finished difference Result 19920 states and 24759 transitions.
[2020-11-25 01:04:06,696 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 01:04:06,696 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19920 states and 24759 transitions.
[2020-11-25 01:04:06,773 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 01:04:06,861 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19920 states to 19920 states and 24759 transitions.
[2020-11-25 01:04:06,861 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4434
[2020-11-25 01:04:06,865 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4441
[2020-11-25 01:04:06,865 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19920 states and 24759 transitions.
[2020-11-25 01:04:06,885 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:04:06,886 INFO  L728         BuchiCegarLoop]: Abstraction has 19920 states and 24759 transitions.
[2020-11-25 01:04:06,895 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19920 states and 24759 transitions.
[2020-11-25 01:04:07,061 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19920 to 19288.
[2020-11-25 01:04:07,061 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19288 states.
[2020-11-25 01:04:07,096 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19288 states to 19288 states and 23617 transitions.
[2020-11-25 01:04:07,096 INFO  L751         BuchiCegarLoop]: Abstraction has 19288 states and 23617 transitions.
[2020-11-25 01:04:07,096 INFO  L631         BuchiCegarLoop]: Abstraction has 19288 states and 23617 transitions.
[2020-11-25 01:04:07,096 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 01:04:07,096 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19288 states and 23617 transitions.
[2020-11-25 01:04:07,118 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 96
[2020-11-25 01:04:07,118 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:04:07,118 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:04:07,120 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:04:07,120 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false
[L7606]   CALL        call __var_45 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7606]   RET         call __var_45 := FreshRefGenerator__fail();
[L7607]   COND FALSE  !(revert)
[L7610]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7611]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] := true;
[L7612]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7613]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322] == __var_45;
[L7614]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND FALSE  !(revert)
[L7105]   COND FALSE  !(__tmp__DType[this] == BLY)
[L7110]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L7111]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6619]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5617]   COND TRUE   !(b_s82 <= a_s82)
[L5618]               revert := true;
[L6619]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6620]   COND TRUE   revert
[L7111]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7112]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false
[L7606]   CALL        call __var_45 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7606]   RET         call __var_45 := FreshRefGenerator__fail();
[L7607]   COND FALSE  !(revert)
[L7610]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7611]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] := true;
[L7612]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7613]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322] == __var_45;
[L7614]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND FALSE  !(revert)
[L7105]   COND FALSE  !(__tmp__DType[this] == BLY)
[L7110]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L7111]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6619]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5617]   COND TRUE   !(b_s82 <= a_s82)
[L5618]               revert := true;
[L6619]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6620]   COND TRUE   revert
[L7111]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7112]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:04:07,124 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:04:07,124 INFO  L82        PathProgramCache]: Analyzing trace with hash -1325447743, now seen corresponding path program 1 times
[2020-11-25 01:04:07,125 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:04:07,143 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:04:07,305 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 01:04:07,305 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:04:07,305 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:04:07,305 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:04:07,306 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:04:07,306 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:04:07,306 INFO  L87              Difference]: Start difference. First operand 19288 states and 23617 transitions. cyclomatic complexity: 4387 Second operand 4 states.
[2020-11-25 01:04:07,398 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:04:07,399 INFO  L93              Difference]: Finished difference Result 19336 states and 23649 transitions.
[2020-11-25 01:04:07,399 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:04:07,399 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19336 states and 23649 transitions.
[2020-11-25 01:04:07,446 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 96
[2020-11-25 01:04:07,501 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19336 states to 19240 states and 23545 transitions.
[2020-11-25 01:04:07,502 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4377
[2020-11-25 01:04:07,504 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4377
[2020-11-25 01:04:07,504 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19240 states and 23545 transitions.
[2020-11-25 01:04:07,519 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:04:07,519 INFO  L728         BuchiCegarLoop]: Abstraction has 19240 states and 23545 transitions.
[2020-11-25 01:04:07,526 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19240 states and 23545 transitions.
[2020-11-25 01:04:07,649 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19240 to 19232.
[2020-11-25 01:04:07,649 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19232 states.
[2020-11-25 01:04:07,682 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19232 states to 19232 states and 23537 transitions.
[2020-11-25 01:04:07,682 INFO  L751         BuchiCegarLoop]: Abstraction has 19232 states and 23537 transitions.
[2020-11-25 01:04:07,682 INFO  L631         BuchiCegarLoop]: Abstraction has 19232 states and 23537 transitions.
[2020-11-25 01:04:07,682 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 01:04:07,682 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19232 states and 23537 transitions.
[2020-11-25 01:04:07,704 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 96
[2020-11-25 01:04:07,705 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:04:07,705 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:04:07,706 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:04:07,706 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false
[L7606]   CALL        call __var_45 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7606]   RET         call __var_45 := FreshRefGenerator__fail();
[L7607]   COND FALSE  !(revert)
[L7610]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7611]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] := true;
[L7612]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7613]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322] == __var_45;
[L7614]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND FALSE  !(revert)
[L7105]   COND TRUE   __tmp__DType[this] == BLY
[L7106]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6619]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5617]   COND TRUE   !(b_s82 <= a_s82)
[L5618]               revert := true;
[L6619]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6620]   COND TRUE   revert
[L7106]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7107]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND TRUE   choice == 32
[L11979]              gas := gas - 21000;
[L11980]  COND FALSE  !(gas >= 0)
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:04:07,710 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:04:07,710 INFO  L82        PathProgramCache]: Analyzing trace with hash -1198046985, now seen corresponding path program 1 times
[2020-11-25 01:04:07,711 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:04:07,730 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:04:07,956 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 01:04:07,956 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:04:07,956 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 01:04:07,956 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:04:07,956 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 01:04:07,957 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 01:04:07,957 INFO  L87              Difference]: Start difference. First operand 19232 states and 23537 transitions. cyclomatic complexity: 4363 Second operand 9 states.
[2020-11-25 01:04:10,544 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:04:10,544 INFO  L93              Difference]: Finished difference Result 19504 states and 24102 transitions.
[2020-11-25 01:04:10,544 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 01:04:10,545 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19504 states and 24102 transitions.
[2020-11-25 01:04:10,613 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 01:04:10,679 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19504 states to 19504 states and 24102 transitions.
[2020-11-25 01:04:10,679 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4465
[2020-11-25 01:04:10,682 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4465
[2020-11-25 01:04:10,682 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19504 states and 24102 transitions.
[2020-11-25 01:04:10,698 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:04:10,698 INFO  L728         BuchiCegarLoop]: Abstraction has 19504 states and 24102 transitions.
[2020-11-25 01:04:10,707 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19504 states and 24102 transitions.
[2020-11-25 01:04:10,841 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19504 to 19422.
[2020-11-25 01:04:10,841 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19422 states.
[2020-11-25 01:04:10,875 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19422 states to 19422 states and 23772 transitions.
[2020-11-25 01:04:10,875 INFO  L751         BuchiCegarLoop]: Abstraction has 19422 states and 23772 transitions.
[2020-11-25 01:04:10,875 INFO  L631         BuchiCegarLoop]: Abstraction has 19422 states and 23772 transitions.
[2020-11-25 01:04:10,875 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 01:04:10,875 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19422 states and 23772 transitions.
[2020-11-25 01:04:10,898 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 96
[2020-11-25 01:04:10,898 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:04:10,898 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:04:10,899 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:04:10,899 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_BLY0 := false;
[L3]                  call_transferFrom_BLY0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND FALSE  !(choice == 19)
[L12064]  COND TRUE   choice == 18
[L12065]              gas := gas - 21000;
[L12066]  COND TRUE   gas >= 0
[L12067]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12068]              assume msgvalue_MSG == 0;
[L12069]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false
[L7606]   CALL        call __var_45 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7606]   RET         call __var_45 := FreshRefGenerator__fail();
[L7607]   COND FALSE  !(revert)
[L7610]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7611]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] := true;
[L7612]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7613]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322] == __var_45;
[L7614]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND FALSE  !(revert)
[L7105]   COND TRUE   __tmp__DType[this] == BLY
[L7106]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6619]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5617]   COND FALSE  !(!(b_s82 <= a_s82))
[L5621]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5622]               __ret_0_ := c_s82;
[L6619]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6620]   COND FALSE  !(revert)
[L6623]               __tmp__sum__allowed1[from_s760] := __tmp__sum__allowed1[from_s760] - __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6624]               __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6625]               __tmp__sum__allowed1[from_s760] := __tmp__sum__allowed1[from_s760] + __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6626]   COND TRUE   __tmp__DType[this] == BLY
[L6627]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6768]               __var_20 := null;
[L6769]   COND TRUE   !(to_s904 != null)
[L6770]               revert := true;
[L6627]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6628]   COND TRUE   revert
[L7106]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7107]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND TRUE   choice == 29
[L11997]              gas := gas - 21000;
[L11998]  COND TRUE   gas >= 0
[L11999]              assume msgvalue_MSG == 0;
[L12000]  CALL        call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L453]                havoc __exception;
[L454]                revert := false;
[L455]    COND TRUE   __exception
[L456]                __tmp__Balance := Balance;
[L457]                __tmp__DType := DType;
[L458]                __tmp__Alloc := Alloc;
[L459]                __tmp__balance_ADDR := balance_ADDR;
[L460]                __tmp__M_Ref_bool := M_Ref_bool;
[L461]                __tmp__sum := sum;
[L462]                __tmp__M_Ref_int := M_Ref_int;
[L463]                __tmp__sum__balances0 := sum__balances0;
[L464]                __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L465]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L466]                __tmp__sum__allowed1 := sum__allowed1;
[L467]                __tmp__M_int_Ref := M_int_Ref;
[L468]                __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L469]                __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L470]                __tmp__Length := Length;
[L471]                __tmp__now := now;
[L472]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L473]                __tmp__owner_HxOwnable := owner_HxOwnable;
[L474]                __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L475]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L476]                __tmp___paused_Pausable := _paused_Pausable;
[L477]                __tmp___balances_HxERC20 := _balances_HxERC20;
[L478]                __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L479]                __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L480]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L481]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L482]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L483]                __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L484]                __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L485]                __tmp__implementation_BLY := implementation_BLY;
[L486]                __tmp__timelockList_BLY := timelockList_BLY;
[L487]                __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L488]    CALL        call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5889]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10587]  COND TRUE   !(msgsender_MSG == __tmp__owner_HxOwnable[this])
[L10588]              revert := true;
[L5889]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5890]   COND TRUE   revert
[L488]    RET         call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L489]                assume revert || gas < 0;
[L12000]  RET         call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:04:10,904 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:04:10,904 INFO  L82        PathProgramCache]: Analyzing trace with hash -1706593566, now seen corresponding path program 1 times
[2020-11-25 01:04:10,905 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:04:10,952 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:04:10,996 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:04:11,160 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:04:11,160 INFO  L82        PathProgramCache]: Analyzing trace with hash -1054454003, now seen corresponding path program 1 times
[2020-11-25 01:04:11,161 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:04:11,165 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:04:11,170 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:04:11,183 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:04:11,183 INFO  L82        PathProgramCache]: Analyzing trace with hash 294221678, now seen corresponding path program 1 times
[2020-11-25 01:04:11,184 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:04:11,215 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:04:11,260 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 3517 to 7027
[2020-11-25 01:04:11,664 WARN  L188               SmtUtils]: Spent 117.00 ms on a formula simplification. DAG size of input: 285 DAG size of output: 275
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
[2020-11-25 01:04:11,817 WARN  L188               SmtUtils]: Spent 124.00 ms on a formula simplification that was a NOOP. DAG size: 414
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.002s / 0.003s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.003s / 0.006s total
Resizing node table from 10513 to 21023
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 8053 to 16103
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 01:04:12,026 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-25 01:04:12,828 WARN  L188               SmtUtils]: Spent 132.00 ms on a formula simplification. DAG size of input: 231 DAG size of output: 217
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2503 to 5003
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 01:04:13,239 WARN  L188               SmtUtils]: Spent 227.00 ms on a formula simplification. DAG size of input: 125 DAG size of output: 121
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 01:04:15,157 WARN  L188               SmtUtils]: Spent 1.79 s on a formula simplification. DAG size of input: 455 DAG size of output: 429
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 9883 to 19763
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 01:04:15,364 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification that was a NOOP. DAG size: 260
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-25 01:04:15,641 WARN  L188               SmtUtils]: Spent 187.00 ms on a formula simplification. DAG size of input: 225 DAG size of output: 224
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 01:04:15,982 WARN  L188               SmtUtils]: Spent 282.00 ms on a formula simplification that was a NOOP. DAG size: 423
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 01:04:16,211 WARN  L188               SmtUtils]: Spent 223.00 ms on a formula simplification that was a NOOP. DAG size: 383
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
[2020-11-25 01:04:16,593 WARN  L188               SmtUtils]: Spent 104.00 ms on a formula simplification. DAG size of input: 142 DAG size of output: 137
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 01:04:16,998 WARN  L188               SmtUtils]: Spent 276.00 ms on a formula simplification. DAG size of input: 269 DAG size of output: 260
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #8: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
[2020-11-25 01:04:17,435 WARN  L188               SmtUtils]: Spent 419.00 ms on a formula simplification. DAG size of input: 197 DAG size of output: 191
[2020-11-25 01:04:17,882 WARN  L188               SmtUtils]: Spent 445.00 ms on a formula simplification that was a NOOP. DAG size: 422
Garbage collection #1: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #2: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #3: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #4: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #5: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #6: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #7: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
[2020-11-25 01:04:19,768 WARN  L188               SmtUtils]: Spent 1.87 s on a formula simplification. DAG size of input: 352 DAG size of output: 352
[2020-11-25 01:04:22,178 WARN  L188               SmtUtils]: Spent 2.41 s on a formula simplification. DAG size of input: 450 DAG size of output: 405
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9181 to 18353
Garbage collection #8: 18353 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 18353 to 36697
Garbage collection #9: 36697 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 36697 to 73387
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #8: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #9: 24137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 24137 to 48271
[2020-11-25 01:04:23,832 WARN  L188               SmtUtils]: Spent 1.61 s on a formula simplification. DAG size of input: 285 DAG size of output: 268
[2020-11-25 01:04:25,030 WARN  L188               SmtUtils]: Spent 1.20 s on a formula simplification that was a NOOP. DAG size: 522
Garbage collection #1: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #2: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #3: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #4: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #5: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #6: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #7: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
Garbage collection #8: 25073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 25073 to 50131
[2020-11-25 01:04:27,676 WARN  L188               SmtUtils]: Spent 2.62 s on a formula simplification. DAG size of input: 435 DAG size of output: 423
[2020-11-25 01:04:33,803 WARN  L188               SmtUtils]: Spent 6.12 s on a formula simplification. DAG size of input: 762 DAG size of output: 739
Garbage collection #1: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #2: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #3: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #4: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #5: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #6: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
Garbage collection #7: 17419 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17419 to 34819
Garbage collection #8: 34819 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 34819 to 69623
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 15859 to 31699
[2020-11-25 01:04:39,683 WARN  L188               SmtUtils]: Spent 5.81 s on a formula simplification. DAG size of input: 457 DAG size of output: 402
[2020-11-25 01:04:42,050 WARN  L188               SmtUtils]: Spent 2.33 s on a formula simplification that was a NOOP. DAG size: 569
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
Garbage collection #8: 17419 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17419 to 34819
Garbage collection #9: 34819 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 34819 to 69623
[2020-11-25 01:04:48,786 WARN  L188               SmtUtils]: Spent 6.60 s on a formula simplification. DAG size of input: 548 DAG size of output: 402
[2020-11-25 01:04:53,293 WARN  L188               SmtUtils]: Spent 4.51 s on a formula simplification. DAG size of input: 571 DAG size of output: 570
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #8: 26597 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 26597 to 53189
Garbage collection #9: 53189 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 53189 to 103183
Garbage collection #10: 103183 nodes / 0 free / 0.002s / 0.003s total
Resizing node table from 103183 to 153151
Garbage collection #11: 153151 nodes / 0 free / 0.003s / 0.006s total
Resizing node table from 153151 to 203141
[2020-11-25 01:05:14,658 WARN  L188               SmtUtils]: Spent 21.28 s on a formula simplification. DAG size of input: 712 DAG size of output: 597
[2020-11-25 01:05:14,685 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:05:14,718 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:05:14,731 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:05:14 BasicIcfg
[2020-11-25 01:05:14,731 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 01:05:14,731 INFO  L168              Benchmark]: Toolchain (without parser) took 103988.48 ms. Allocated memory was 1.0 GB in the beginning and 5.6 GB in the end (delta: 4.5 GB). Free memory was 919.1 MB in the beginning and 3.7 GB in the end (delta: -2.7 GB). Peak memory consumption was 4.7 GB. Max. memory is 15.3 GB.
[2020-11-25 01:05:14,732 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 01:05:14,732 INFO  L168              Benchmark]: Boogie Preprocessor took 175.42 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.2 MB in the end (delta: 26.9 MB). Peak memory consumption was 26.9 MB. Max. memory is 15.3 GB.
[2020-11-25 01:05:14,732 INFO  L168              Benchmark]: UtopiaSpecLang took 103.47 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 876.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 01:05:14,733 INFO  L168              Benchmark]: Boogie Printer took 30.91 ms. Allocated memory is still 1.0 GB. Free memory was 876.1 MB in the beginning and 870.7 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
[2020-11-25 01:05:14,733 INFO  L168              Benchmark]: RCFGBuilder took 1428.86 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 75.5 MB). Free memory was 870.7 MB in the beginning and 759.4 MB in the end (delta: 111.3 MB). Peak memory consumption was 186.8 MB. Max. memory is 15.3 GB.
[2020-11-25 01:05:14,733 INFO  L168              Benchmark]: UtopiaLTL2Aut took 33.01 ms. Allocated memory is still 1.1 GB. Free memory was 759.4 MB in the beginning and 755.8 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
[2020-11-25 01:05:14,734 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3487.09 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 457.7 MB). Free memory was 755.8 MB in the beginning and 865.3 MB in the end (delta: -109.5 MB). Peak memory consumption was 348.2 MB. Max. memory is 15.3 GB.
[2020-11-25 01:05:14,734 INFO  L168              Benchmark]: BlockEncodingV2 took 293.11 ms. Allocated memory is still 1.6 GB. Free memory was 865.3 MB in the beginning and 711.8 MB in the end (delta: 153.6 MB). Peak memory consumption was 153.6 MB. Max. memory is 15.3 GB.
[2020-11-25 01:05:14,734 INFO  L168              Benchmark]: BuchiAutomizer took 98433.42 ms. Allocated memory was 1.6 GB in the beginning and 5.6 GB in the end (delta: 4.0 GB). Free memory was 711.8 MB in the beginning and 3.7 GB in the end (delta: -2.9 GB). Peak memory consumption was 4.0 GB. Max. memory is 15.3 GB.
[2020-11-25 01:05:14,737 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    11440 locations, 20727 edges
  - StatisticsResult: Encoded RCFG
    11298 locations, 20336 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 175.42 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.2 MB in the end (delta: 26.9 MB). Peak memory consumption was 26.9 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 103.47 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 876.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 30.91 ms. Allocated memory is still 1.0 GB. Free memory was 876.1 MB in the beginning and 870.7 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1428.86 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 75.5 MB). Free memory was 870.7 MB in the beginning and 759.4 MB in the end (delta: 111.3 MB). Peak memory consumption was 186.8 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 33.01 ms. Allocated memory is still 1.1 GB. Free memory was 759.4 MB in the beginning and 755.8 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3487.09 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 457.7 MB). Free memory was 755.8 MB in the beginning and 865.3 MB in the end (delta: -109.5 MB). Peak memory consumption was 348.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 293.11 ms. Allocated memory is still 1.6 GB. Free memory was 865.3 MB in the beginning and 711.8 MB in the end (delta: 153.6 MB). Peak memory consumption was 153.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 98433.42 ms. Allocated memory was 1.6 GB in the beginning and 5.6 GB in the end (delta: 4.0 GB). Free memory was 711.8 MB in the beginning and 3.7 GB in the end (delta: -2.9 GB). Peak memory consumption was 4.0 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4608 locations, 6371 edges
  - StatisticsResult: BuchiProgram size
    11440 locations, 20727 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 19 terminating modules (19 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.19 modules have a trivial ranking function, the largest among these consists of 18 locations. The remainder module has 19422 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 98.3s and 20 iterations.  TraceHistogramMax:8. Analysis of lassos took 67.9s. Construction of modules took 19.6s. BÃ¼chi inclusion checks took 7.3s. Highest rank in rank-based complementation 0. Minimization of det autom 19. Minimization of nondet autom 0. Automata minimization 1.6s AutomataMinimizationTime, 19 MinimizatonAttempts, 7528 StatesRemovedByMinimization, 14 NontrivialMinimizations. Non-live state removal took 1.0s Buchi closure took 0.0s. Biggest automaton had 19422 states and ocurred in iteration 19.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 155754 SDtfs, 81228 SDslu, 567789 SDs, 0 SdLazy, 308162 SolverSat, 16318 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 19.6s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU19 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1000000000000000000000000034) = (new BLY)({from : 1000000000000000000000000026});
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
BLY(1000000000000000000000000034).transferFrom~address~address~uint256.gas(3979002)({from : 1000000000000000000000000009, from : 1000000000000000000000000035, to : 0, value : 0});
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1322 && p1 != to_s1322) && (p2 != from_s1322 || p3 != msgsender_MSG)) && from_s1322 != to_s1322) && value_s1322 <= _balances_HxERC20[this][from_s1322]) && value_s1322 <= _allowed_HxERC20[this][from_s1322][msgsender_MSG]) && _balances_HxERC20[this][to_s1322] + value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1322] >= 0) && _balances_HxERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][from_s1322] >= 0) && _balances_HxERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_HxERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_BLY0 := true;
[L3]                  call_transferFrom_BLY0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3292]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3296]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3297]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3302]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3303]               __tmp__implementation_BLY := implementation_BLY;
[L3304]               __tmp__timelockList_BLY := timelockList_BLY;
[L3305]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7601]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10775]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7601]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7602]   COND FALSE  !(revert)
[L7605]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] == false
[L7606]   CALL        call __var_45 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7606]   RET         call __var_45 := FreshRefGenerator__fail();
[L7607]   COND FALSE  !(revert)
[L7610]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7611]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][from_s1322] := true;
[L7612]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7613]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322] == __var_45;
[L7614]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] == 0;
[L7616]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][from_s1322]] > 0)
[L7622]   COND TRUE   __tmp__DType[this] == BLY
[L7623]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7101]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10743]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7101]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7102]   COND FALSE  !(revert)
[L7105]   COND TRUE   __tmp__DType[this] == BLY
[L7106]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6619]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5617]   COND FALSE  !(!(b_s82 <= a_s82))
[L5621]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5622]               __ret_0_ := c_s82;
[L6619]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6620]   COND FALSE  !(revert)
[L6623]               __tmp__sum__allowed1[from_s760] := __tmp__sum__allowed1[from_s760] - __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6624]               __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6625]               __tmp__sum__allowed1[from_s760] := __tmp__sum__allowed1[from_s760] + __tmp___allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6626]   COND TRUE   __tmp__DType[this] == BLY
[L6627]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6768]               __var_20 := null;
[L6769]   COND TRUE   !(to_s904 != null)
[L6770]               revert := true;
[L6627]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6628]   COND TRUE   revert
[L7106]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7107]   COND TRUE   revert
[L7623]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7624]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12069]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);

Loop:
HxOwnable(1000000000000000000000000034).transferOwnership~address.gas(3979001)({from : 1000000000000000000000000021, _newOwner : 1000000000000000000000000014});
[L453]               havoc __exception;
[L454]               revert := false;
[L455]    COND TRUE  __exception
[L456]               __tmp__Balance := Balance;
[L457]               __tmp__DType := DType;
[L458]               __tmp__Alloc := Alloc;
[L459]               __tmp__balance_ADDR := balance_ADDR;
[L460]               __tmp__M_Ref_bool := M_Ref_bool;
[L461]               __tmp__sum := sum;
[L462]               __tmp__M_Ref_int := M_Ref_int;
[L463]               __tmp__sum__balances0 := sum__balances0;
[L464]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L465]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L466]               __tmp__sum__allowed1 := sum__allowed1;
[L467]               __tmp__M_int_Ref := M_int_Ref;
[L468]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L469]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L470]               __tmp__Length := Length;
[L471]               __tmp__now := now;
[L472]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L473]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L474]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L475]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L476]               __tmp___paused_Pausable := _paused_Pausable;
[L477]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L478]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L479]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L480]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L481]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L482]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L483]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L484]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L485]               __tmp__implementation_BLY := implementation_BLY;
[L486]               __tmp__timelockList_BLY := timelockList_BLY;
[L487]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L488]    CALL       call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5889]   CALL       call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10587]  COND TRUE  !(msgsender_MSG == __tmp__owner_HxOwnable[this])
[L10588]             revert := true;
[L5889]   RET        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5890]   COND TRUE  revert
[L488]    RET        call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L489]               assume revert || gas < 0;
[L12000]  RET        call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
