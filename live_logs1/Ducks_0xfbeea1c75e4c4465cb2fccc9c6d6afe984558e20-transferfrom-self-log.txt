This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 14:44:59,152 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 14:44:59,153 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 14:44:59,160 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 14:44:59,160 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 14:44:59,161 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 14:44:59,162 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 14:44:59,163 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 14:44:59,164 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 14:44:59,164 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 14:44:59,165 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 14:44:59,165 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 14:44:59,165 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 14:44:59,166 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 14:44:59,167 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 14:44:59,167 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 14:44:59,167 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 14:44:59,168 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 14:44:59,169 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 14:44:59,170 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 14:44:59,170 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 14:44:59,171 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 14:44:59,172 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 14:44:59,172 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 14:44:59,173 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 14:44:59,173 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 14:44:59,173 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 14:44:59,174 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 14:44:59,174 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 14:44:59,174 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 14:44:59,174 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 14:44:59,175 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 14:44:59,175 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 14:44:59,175 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 14:44:59,176 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 14:44:59,176 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 14:44:59,176 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 14:44:59,176 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 14:44:59,177 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 14:44:59,177 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 14:44:59,177 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 14:44:59,177 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 14:44:59,183 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 14:44:59,183 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 14:44:59,184 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 14:44:59,184 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 14:44:59,184 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 14:44:59,184 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 14:44:59,184 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 14:44:59,184 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 14:44:59,184 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 14:44:59,184 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 14:44:59,184 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 14:44:59,184 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 14:44:59,184 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 14:44:59,185 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 14:44:59,185 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 14:44:59,185 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 14:44:59,185 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 14:44:59,185 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 14:44:59,185 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 14:44:59,185 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 14:44:59,185 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 14:44:59,185 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 14:44:59,185 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 14:44:59,185 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 14:44:59,185 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 14:44:59,185 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 14:44:59,204 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 14:44:59,217 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 14:44:59,219 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 14:44:59,220 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 14:44:59,221 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 14:44:59,221 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl
[2020-11-25 14:44:59,221 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl'
[2020-11-25 14:44:59,289 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 14:44:59,291 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 14:44:59,291 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 14:44:59,291 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 14:44:59,291 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 14:44:59,308 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:59" (1/1) ...
[2020-11-25 14:44:59,309 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:59" (1/1) ...
[2020-11-25 14:44:59,333 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:59" (1/1) ...
[2020-11-25 14:44:59,334 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:59" (1/1) ...
[2020-11-25 14:44:59,349 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:59" (1/1) ...
[2020-11-25 14:44:59,357 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:59" (1/1) ...
[2020-11-25 14:44:59,362 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:59" (1/1) ...
[2020-11-25 14:44:59,369 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 14:44:59,370 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 14:44:59,370 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 14:44:59,372 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 14:44:59,375 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:59" (1/1) ...
[2020-11-25 14:44:59,390 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(Ducks.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_Ducks[this][from] && value <= allowed_Ducks[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][from] >= 0 &&  balances_Ducks[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Ducks[this][from][msg.sender] >= 0 && allowed_Ducks[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Ducks.transferFrom(from, to, value), return == true && allowed_Ducks[this][from][msg.sender] == old(allowed_Ducks[this][from][msg.sender]) - value && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this]) && balances_Ducks[this] == old(balances_Ducks[this]) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2]) && name_Ducks[this] == old(name_Ducks[this]) && symbol_Ducks[this] == old(symbol_Ducks[this]) && decimals_Ducks[this] == old(decimals_Ducks[this]))))
[2020-11-25 14:44:59,395 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(Ducks.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_Ducks[this][from] && value <= allowed_Ducks[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][from] >= 0 &&  balances_Ducks[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Ducks[this][from][msg.sender] >= 0 && allowed_Ducks[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Ducks.transferFrom(from, to, value), return == true && allowed_Ducks[this][from][msg.sender] == old(allowed_Ducks[this][from][msg.sender]) - value && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this]) && balances_Ducks[this] == old(balances_Ducks[this]) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2]) && name_Ducks[this] == old(name_Ducks[this]) && symbol_Ducks[this] == old(symbol_Ducks[this]) && decimals_Ducks[this] == old(decimals_Ducks[this]))))
[2020-11-25 14:44:59,403 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(Ducks.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_Ducks[this][from] && value <= allowed_Ducks[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][from] >= 0 &&  balances_Ducks[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Ducks[this][from][msg.sender] >= 0 && allowed_Ducks[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Ducks.transferFrom(from, to, value), return == true && allowed_Ducks[this][from][msg.sender] == old(allowed_Ducks[this][from][msg.sender]) - value && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this]) && balances_Ducks[this] == old(balances_Ducks[this]) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2]) && name_Ducks[this] == old(name_Ducks[this]) && symbol_Ducks[this] == old(symbol_Ducks[this]) && decimals_Ducks[this] == old(decimals_Ducks[this]))))
[2020-11-25 14:44:59,411 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s393 || p2!=msg.sender ) && from_s393==to_s393 ) && tokens_s393<=balances_Ducks[this][from_s393] ) && tokens_s393<=allowed_Ducks[this][from_s393][msg.sender] ) && tokens_s393>=0 ) && tokens_s393<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_Ducks[this][to_s393]>=0 ) && balances_Ducks[this][to_s393]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_Ducks[this][from_s393]>=0 ) && balances_Ducks[this][from_s393]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_Ducks[this][from_s393][msg.sender]>=0 ) && allowed_Ducks[this][from_s393][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],BinaryExpression[COMPEQ,IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>],IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 14:44:59,413 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( success_s393==true && allowed_Ducks[this][from_s393][msg.sender]==( ( old(allowed_Ducks[this][from_s393][msg.sender]) ) - tokens_s393 ) ) && _totalSupply_Ducks[this]==( old(_totalSupply_Ducks[this]) ) ) && balances_Ducks[this]==( old(balances_Ducks[this]) ) ) && allowed_Ducks[this][p1][p2]==( old(allowed_Ducks[this][p1][p2]) ) ) && name_Ducks[this]==( old(name_Ducks[this]) ) ) && symbol_Ducks[this]==( old(symbol_Ducks[this]) ) ) && decimals_Ducks[this]==( old(decimals_Ducks[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s393,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_Ducks>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]],IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]]]]
[2020-11-25 14:44:59,417 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(Ducks.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_Ducks[this][from] && value <= allowed_Ducks[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][from] >= 0 &&  balances_Ducks[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Ducks[this][from][msg.sender] >= 0 && allowed_Ducks[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Ducks.transferFrom(from, to, value), return == true && allowed_Ducks[this][from][msg.sender] == old(allowed_Ducks[this][from][msg.sender]) - value && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this]) && balances_Ducks[this] == old(balances_Ducks[this]) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2]) && name_Ducks[this] == old(name_Ducks[this]) && symbol_Ducks[this] == old(symbol_Ducks[this]) && decimals_Ducks[this] == old(decimals_Ducks[this]))))
[2020-11-25 14:44:59,417 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_Ducks0) ==> ( <>AP(success_transferFrom_Ducks0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 14:44:59,424 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:44:59 PropertyContainer
[2020-11-25 14:44:59,424 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 14:44:59,424 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 14:44:59,424 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 14:44:59,424 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 14:44:59,425 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:59" (1/2) ...
[2020-11-25 14:44:59,425 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 14:44:59,425 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 14:44:59,436 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:44:59" (2/2) ...
[2020-11-25 14:44:59,437 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 14:44:59,437 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 14:44:59,437 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 14:44:59,438 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 14:44:59,439 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:59" (1/2) ...
[2020-11-25 14:44:59,494 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 14:44:59,494 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 14:44:59,494 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 14:44:59,494 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 14:44:59,494 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 14:44:59,494 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 14:44:59,495 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 14:44:59,495 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 14:44:59,495 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 14:44:59,495 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 14:44:59,495 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:44:59,495 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 14:44:59,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 14:44:59,495 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 14:44:59,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 14:44:59,495 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 14:44:59,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 14:44:59,496 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 14:44:59,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 14:44:59,496 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 14:44:59,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 14:44:59,496 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks_NoBaseCtor__success
[2020-11-25 14:44:59,496 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks
[2020-11-25 14:44:59,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks
[2020-11-25 14:44:59,496 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Ducks
[2020-11-25 14:44:59,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Ducks
[2020-11-25 14:44:59,497 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Ducks
[2020-11-25 14:44:59,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Ducks
[2020-11-25 14:44:59,497 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Ducks
[2020-11-25 14:44:59,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Ducks
[2020-11-25 14:44:59,497 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Ducks
[2020-11-25 14:44:59,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Ducks
[2020-11-25 14:44:59,497 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Ducks
[2020-11-25 14:44:59,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Ducks
[2020-11-25 14:44:59,497 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Ducks
[2020-11-25 14:44:59,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Ducks
[2020-11-25 14:44:59,497 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Ducks
[2020-11-25 14:44:59,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Ducks
[2020-11-25 14:44:59,497 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Ducks
[2020-11-25 14:44:59,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Ducks
[2020-11-25 14:44:59,498 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Ducks
[2020-11-25 14:44:59,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Ducks
[2020-11-25 14:44:59,498 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Ducks
[2020-11-25 14:44:59,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Ducks
[2020-11-25 14:44:59,498 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 14:44:59,498 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 14:44:59,498 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 14:44:59,498 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 14:44:59,498 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 14:44:59,498 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 14:44:59,498 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 14:44:59,498 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ducks
[2020-11-25 14:44:59,498 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 14:44:59,499 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 14:44:59,499 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 14:44:59,499 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 14:44:59,499 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 14:44:59,499 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:44:59,499 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 14:44:59,499 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 14:44:59,499 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 14:44:59,499 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 14:44:59,499 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 14:44:59,499 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 14:44:59,499 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 14:44:59,499 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 14:44:59,500 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 14:44:59,500 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 14:44:59,500 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks_NoBaseCtor__fail
[2020-11-25 14:44:59,500 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks__success
[2020-11-25 14:44:59,500 INFO  L130     BoogieDeclarations]: Found specification of procedure Ducks_Ducks__fail
[2020-11-25 14:44:59,500 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Ducks__success
[2020-11-25 14:44:59,500 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Ducks__fail
[2020-11-25 14:44:59,500 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Ducks__success
[2020-11-25 14:44:59,500 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Ducks__fail
[2020-11-25 14:44:59,500 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Ducks__success
[2020-11-25 14:44:59,500 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Ducks__fail
[2020-11-25 14:44:59,500 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Ducks__success
[2020-11-25 14:44:59,500 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Ducks__fail
[2020-11-25 14:44:59,501 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Ducks__success
[2020-11-25 14:44:59,501 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Ducks__fail
[2020-11-25 14:44:59,501 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Ducks__success
[2020-11-25 14:44:59,501 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Ducks__fail
[2020-11-25 14:44:59,501 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Ducks__success
[2020-11-25 14:44:59,501 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Ducks__fail
[2020-11-25 14:44:59,501 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Ducks__success
[2020-11-25 14:44:59,501 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Ducks__fail
[2020-11-25 14:44:59,501 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Ducks__success
[2020-11-25 14:44:59,501 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Ducks__fail
[2020-11-25 14:44:59,501 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Ducks__success
[2020-11-25 14:44:59,501 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Ducks__fail
[2020-11-25 14:44:59,502 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 14:44:59,502 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 14:44:59,502 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 14:44:59,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 14:44:59,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 14:44:59,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 14:44:59,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 14:44:59,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 14:44:59,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 14:44:59,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:44:59,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:44:59,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 14:44:59,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 14:44:59,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 14:44:59,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 14:44:59,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 14:44:59,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 14:44:59,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 14:44:59,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 14:44:59,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 14:44:59,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 14:44:59,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks_NoBaseCtor__fail
[2020-11-25 14:44:59,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks_NoBaseCtor__success
[2020-11-25 14:44:59,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks__fail
[2020-11-25 14:44:59,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ducks_Ducks__success
[2020-11-25 14:44:59,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Ducks__fail
[2020-11-25 14:44:59,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Ducks__success
[2020-11-25 14:44:59,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Ducks__fail
[2020-11-25 14:44:59,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Ducks__success
[2020-11-25 14:44:59,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Ducks__fail
[2020-11-25 14:44:59,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Ducks__success
[2020-11-25 14:44:59,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Ducks__fail
[2020-11-25 14:44:59,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Ducks__success
[2020-11-25 14:44:59,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Ducks__fail
[2020-11-25 14:44:59,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Ducks__success
[2020-11-25 14:44:59,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Ducks__fail
[2020-11-25 14:44:59,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Ducks__success
[2020-11-25 14:44:59,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Ducks__fail
[2020-11-25 14:44:59,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Ducks__success
[2020-11-25 14:44:59,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Ducks__fail
[2020-11-25 14:44:59,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Ducks__success
[2020-11-25 14:44:59,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Ducks__fail
[2020-11-25 14:44:59,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Ducks__success
[2020-11-25 14:44:59,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Ducks__fail
[2020-11-25 14:44:59,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Ducks__success
[2020-11-25 14:44:59,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 14:44:59,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 14:44:59,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 14:44:59,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 14:44:59,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 14:44:59,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 14:44:59,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 14:44:59,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 14:44:59,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 14:44:59,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 14:44:59,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ducks
[2020-11-25 14:44:59,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 14:44:59,506 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 14:44:59,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 14:44:59,638 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:44:59,663 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:44:59,663 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:44:59,664 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:44:59,962 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 14:44:59,962 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-25 14:44:59,964 INFO  L202        PluginConnector]: Adding new model Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:44:59 BoogieIcfgContainer
[2020-11-25 14:44:59,964 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:44:59" (2/2) ...
[2020-11-25 14:44:59,964 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 14:44:59,965 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@575e2295 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:44:59, skipping insertion in model container
[2020-11-25 14:44:59,965 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 14:44:59,965 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 14:44:59,965 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 14:44:59,966 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 14:44:59,967 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:59" (1/3) ...
[2020-11-25 14:44:59,967 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@70bcdc02 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:44:59, skipping insertion in model container
[2020-11-25 14:44:59,967 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:44:59" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 14:45:00,002 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:45:00 NWAContainer
[2020-11-25 14:45:00,003 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 14:45:00,003 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 14:45:00,003 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 14:45:00,004 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 14:45:00,004 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:44:59" (3/4) ...
[2020-11-25 14:45:00,005 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@44178773 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:45:00, skipping insertion in model container
[2020-11-25 14:45:00,005 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:45:00" (4/4) ...
[2020-11-25 14:45:00,008 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 14:45:00,010 INFO  L110   BuchiProductObserver]: Initial RCFG 1051 locations, 1324 edges
[2020-11-25 14:45:00,011 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 14:45:00,020 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 14:45:01,004 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 14:45:01,007 INFO  L110   BuchiProductObserver]: BuchiProgram size 2492 locations, 4284 edges
[2020-11-25 14:45:01,008 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:45:01 BoogieIcfgContainer
[2020-11-25 14:45:01,008 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 14:45:01,008 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 14:45:01,008 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 14:45:01,010 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 14:45:01,010 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:45:01" (1/1) ...
[2020-11-25 14:45:01,085 INFO  L313           BlockEncoder]: Initial Icfg 2492 locations, 4284 edges
[2020-11-25 14:45:01,085 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 14:45:01,086 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 14:45:01,086 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 14:45:01,087 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 14:45:01,097 INFO  L70    emoveInfeasibleEdges]: Removed 66 edges and 9 locations because of local infeasibility
[2020-11-25 14:45:01,105 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-25 14:45:01,113 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 14:45:01,118 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 14:45:01,120 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 14:45:01,121 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 14:45:01,125 INFO  L313           BlockEncoder]: Encoded RCFG 2448 locations, 4166 edges
[2020-11-25 14:45:01,126 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:45:01 BasicIcfg
[2020-11-25 14:45:01,126 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 14:45:01,126 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 14:45:01,126 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 14:45:01,129 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 14:45:01,129 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:45:01,129 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:44:59" (1/6) ...
[2020-11-25 14:45:01,131 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7f418bff and model type Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:45:01, skipping insertion in model container
[2020-11-25 14:45:01,131 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:45:01,131 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:44:59" (2/6) ...
[2020-11-25 14:45:01,131 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7f418bff and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:45:01, skipping insertion in model container
[2020-11-25 14:45:01,132 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:45:01,132 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:44:59" (3/6) ...
[2020-11-25 14:45:01,132 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7f418bff and model type Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:45:01, skipping insertion in model container
[2020-11-25 14:45:01,132 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:45:01,132 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:45:00" (4/6) ...
[2020-11-25 14:45:01,132 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7f418bff and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:45:01, skipping insertion in model container
[2020-11-25 14:45:01,132 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:45:01,133 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:45:01" (5/6) ...
[2020-11-25 14:45:01,133 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7f418bff and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:45:01, skipping insertion in model container
[2020-11-25 14:45:01,133 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:45:01,133 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:45:01" (6/6) ...
[2020-11-25 14:45:01,134 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl_BEv2
[2020-11-25 14:45:01,174 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 14:45:01,174 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 14:45:01,175 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 14:45:01,175 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 14:45:01,175 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 14:45:01,175 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 14:45:01,175 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 14:45:01,175 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 14:45:01,175 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 14:45:01,238 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2448 states.
[2020-11-25 14:45:01,287 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:45:01,287 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:45:01,287 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:45:01,297 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:45:01,297 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:45:01,297 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 14:45:01,297 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2448 states.
[2020-11-25 14:45:01,313 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:45:01,313 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:45:01,313 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:45:01,315 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:45:01,315 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND TRUE   revert
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:45:01,337 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:45:01,338 INFO  L82        PathProgramCache]: Analyzing trace with hash 1133547337, now seen corresponding path program 1 times
[2020-11-25 14:45:01,342 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:45:01,361 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:45:01,402 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:45:01,404 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:45:01,404 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 14:45:01,408 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:45:01,519 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 14:45:01,520 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 14:45:01,521 INFO  L87              Difference]: Start difference. First operand 2448 states. Second operand 3 states.
[2020-11-25 14:45:01,651 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:45:01,651 INFO  L93              Difference]: Finished difference Result 1724 states and 1881 transitions.
[2020-11-25 14:45:01,651 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 14:45:01,653 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1724 states and 1881 transitions.
[2020-11-25 14:45:01,664 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:45:01,677 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1724 states to 1724 states and 1881 transitions.
[2020-11-25 14:45:01,678 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 14:45:01,680 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 603
[2020-11-25 14:45:01,680 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1724 states and 1881 transitions.
[2020-11-25 14:45:01,686 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:45:01,686 INFO  L728         BuchiCegarLoop]: Abstraction has 1724 states and 1881 transitions.
[2020-11-25 14:45:01,703 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1724 states and 1881 transitions.
[2020-11-25 14:45:01,741 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1724 to 1724.
[2020-11-25 14:45:01,742 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1724 states.
[2020-11-25 14:45:01,746 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1724 states to 1724 states and 1881 transitions.
[2020-11-25 14:45:01,747 INFO  L751         BuchiCegarLoop]: Abstraction has 1724 states and 1881 transitions.
[2020-11-25 14:45:01,747 INFO  L631         BuchiCegarLoop]: Abstraction has 1724 states and 1881 transitions.
[2020-11-25 14:45:01,748 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 14:45:01,748 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1724 states and 1881 transitions.
[2020-11-25 14:45:01,754 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:45:01,754 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:45:01,754 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:45:01,756 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:45:01,757 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND TRUE   revert
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND TRUE   !(b_s112 <= a_s112)
[L1350]              revert := true;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND TRUE   revert
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND TRUE   !(b_s112 <= a_s112)
[L1350]              revert := true;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND TRUE   revert
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:45:01,761 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:45:01,761 INFO  L82        PathProgramCache]: Analyzing trace with hash 1973947447, now seen corresponding path program 1 times
[2020-11-25 14:45:01,762 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:45:01,774 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:45:01,798 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:45:01,799 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:45:01,799 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:45:01,800 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:45:01,800 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:45:01,800 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:45:01,801 INFO  L87              Difference]: Start difference. First operand 1724 states and 1881 transitions. cyclomatic complexity: 159 Second operand 4 states.
[2020-11-25 14:45:02,148 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:45:02,149 INFO  L93              Difference]: Finished difference Result 2598 states and 2957 transitions.
[2020-11-25 14:45:02,149 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:45:02,149 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2598 states and 2957 transitions.
[2020-11-25 14:45:02,165 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 14:45:02,180 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2598 states to 2522 states and 2875 transitions.
[2020-11-25 14:45:02,181 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 855
[2020-11-25 14:45:02,182 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 860
[2020-11-25 14:45:02,182 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2522 states and 2875 transitions.
[2020-11-25 14:45:02,187 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:45:02,187 INFO  L728         BuchiCegarLoop]: Abstraction has 2522 states and 2875 transitions.
[2020-11-25 14:45:02,190 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2522 states and 2875 transitions.
[2020-11-25 14:45:02,216 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2522 to 1744.
[2020-11-25 14:45:02,216 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1744 states.
[2020-11-25 14:45:02,219 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1744 states to 1744 states and 1873 transitions.
[2020-11-25 14:45:02,220 INFO  L751         BuchiCegarLoop]: Abstraction has 1744 states and 1873 transitions.
[2020-11-25 14:45:02,220 INFO  L631         BuchiCegarLoop]: Abstraction has 1744 states and 1873 transitions.
[2020-11-25 14:45:02,220 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 14:45:02,220 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1744 states and 1873 transitions.
[2020-11-25 14:45:02,226 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:45:02,226 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:45:02,226 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:45:02,229 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:45:02,229 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_Ducks[this] := 560717954;
[L1421]              symbol_Ducks[this] := 560717954;
[L1422]              decimals_Ducks[this] := 0;
[L1423]              _totalSupply_Ducks[this] := 0;
[L1424]              balances_Ducks[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_Ducks[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_Ducks[this] := 1576131613;
[L1430]              symbol_Ducks[this] := -1943651461;
[L1431]              decimals_Ducks[this] := 18;
[L1432]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1434]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1465]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_Ducks := name_Ducks;
[L722]               __tmp__symbol_Ducks := symbol_Ducks;
[L723]               __tmp__decimals_Ducks := decimals_Ducks;
[L724]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L725]               __tmp__balances_Ducks := balances_Ducks;
[L726]               __tmp__allowed_Ducks := allowed_Ducks;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == Ducks
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1340]  COND TRUE   !(b_s112 <= a_s112)
[L1341]              revert := true;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1598]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_Ducks := name_Ducks;
[L722]               __tmp__symbol_Ducks := symbol_Ducks;
[L723]               __tmp__decimals_Ducks := decimals_Ducks;
[L724]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L725]               __tmp__balances_Ducks := balances_Ducks;
[L726]               __tmp__allowed_Ducks := allowed_Ducks;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == Ducks
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1340]  COND TRUE   !(b_s112 <= a_s112)
[L1341]              revert := true;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1598]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:45:02,233 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:45:02,233 INFO  L82        PathProgramCache]: Analyzing trace with hash -1774095656, now seen corresponding path program 1 times
[2020-11-25 14:45:02,234 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:45:02,251 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:45:02,317 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:45:02,317 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:45:02,317 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 14:45:02,318 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:45:02,318 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 14:45:02,318 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 14:45:02,318 INFO  L87              Difference]: Start difference. First operand 1744 states and 1873 transitions. cyclomatic complexity: 131 Second operand 7 states.
[2020-11-25 14:45:03,018 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:45:03,019 INFO  L93              Difference]: Finished difference Result 1902 states and 2045 transitions.
[2020-11-25 14:45:03,019 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 14:45:03,019 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1902 states and 2045 transitions.
[2020-11-25 14:45:03,030 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:45:03,040 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1902 states to 1902 states and 2045 transitions.
[2020-11-25 14:45:03,040 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 670
[2020-11-25 14:45:03,040 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 670
[2020-11-25 14:45:03,041 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1902 states and 2045 transitions.
[2020-11-25 14:45:03,043 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:45:03,043 INFO  L728         BuchiCegarLoop]: Abstraction has 1902 states and 2045 transitions.
[2020-11-25 14:45:03,046 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1902 states and 2045 transitions.
[2020-11-25 14:45:03,068 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1902 to 1796.
[2020-11-25 14:45:03,069 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1796 states.
[2020-11-25 14:45:03,072 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1796 states to 1796 states and 1929 transitions.
[2020-11-25 14:45:03,073 INFO  L751         BuchiCegarLoop]: Abstraction has 1796 states and 1929 transitions.
[2020-11-25 14:45:03,073 INFO  L631         BuchiCegarLoop]: Abstraction has 1796 states and 1929 transitions.
[2020-11-25 14:45:03,073 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 14:45:03,073 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1796 states and 1929 transitions.
[2020-11-25 14:45:03,083 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:45:03,083 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:45:03,083 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:45:03,089 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:45:03,089 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_Ducks[this] := 560717954;
[L1421]              symbol_Ducks[this] := 560717954;
[L1422]              decimals_Ducks[this] := 0;
[L1423]              _totalSupply_Ducks[this] := 0;
[L1424]              balances_Ducks[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_Ducks[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_Ducks[this] := 1576131613;
[L1430]              symbol_Ducks[this] := -1943651461;
[L1431]              decimals_Ducks[this] := 18;
[L1432]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1434]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1465]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1647]              balances_Ducks[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1649]  COND TRUE   DType[this] == Ducks
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1658]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == Ducks
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1669]              balances_Ducks[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1647]              balances_Ducks[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1649]  COND TRUE   DType[this] == Ducks
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1658]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == Ducks
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1669]              balances_Ducks[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:45:03,095 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:45:03,095 INFO  L82        PathProgramCache]: Analyzing trace with hash -1377181156, now seen corresponding path program 1 times
[2020-11-25 14:45:03,096 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:45:03,179 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:45:04,823 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 14:45:04,823 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:45:04,823 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 14:45:04,824 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:45:04,824 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 14:45:04,824 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=74, Invalid=918, Unknown=0, NotChecked=0, Total=992
[2020-11-25 14:45:04,824 INFO  L87              Difference]: Start difference. First operand 1796 states and 1929 transitions. cyclomatic complexity: 135 Second operand 32 states.
[2020-11-25 14:45:07,226 WARN  L188               SmtUtils]: Spent 104.00 ms on a formula simplification. DAG size of input: 119 DAG size of output: 74
[2020-11-25 14:45:11,937 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:45:11,937 INFO  L93              Difference]: Finished difference Result 1881 states and 2042 transitions.
[2020-11-25 14:45:11,938 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 14:45:11,938 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1881 states and 2042 transitions.
[2020-11-25 14:45:11,943 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 14:45:11,949 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1881 states to 1881 states and 2042 transitions.
[2020-11-25 14:45:11,949 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 650
[2020-11-25 14:45:11,950 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 650
[2020-11-25 14:45:11,950 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1881 states and 2042 transitions.
[2020-11-25 14:45:11,952 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:45:11,952 INFO  L728         BuchiCegarLoop]: Abstraction has 1881 states and 2042 transitions.
[2020-11-25 14:45:11,954 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1881 states and 2042 transitions.
[2020-11-25 14:45:11,969 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1881 to 1850.
[2020-11-25 14:45:11,969 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1850 states.
[2020-11-25 14:45:11,970 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1850 states to 1850 states and 1993 transitions.
[2020-11-25 14:45:11,971 INFO  L751         BuchiCegarLoop]: Abstraction has 1850 states and 1993 transitions.
[2020-11-25 14:45:11,971 INFO  L631         BuchiCegarLoop]: Abstraction has 1850 states and 1993 transitions.
[2020-11-25 14:45:11,971 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 14:45:11,971 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1850 states and 1993 transitions.
[2020-11-25 14:45:11,974 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:45:11,974 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:45:11,974 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:45:11,976 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:45:11,976 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_Ducks[this] := 560717954;
[L1421]              symbol_Ducks[this] := 560717954;
[L1422]              decimals_Ducks[this] := 0;
[L1423]              _totalSupply_Ducks[this] := 0;
[L1424]              balances_Ducks[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_Ducks[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_Ducks[this] := 1576131613;
[L1430]              symbol_Ducks[this] := -1943651461;
[L1431]              decimals_Ducks[this] := 18;
[L1432]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1434]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1465]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_Ducks := name_Ducks;
[L722]               __tmp__symbol_Ducks := symbol_Ducks;
[L723]               __tmp__decimals_Ducks := decimals_Ducks;
[L724]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L725]               __tmp__balances_Ducks := balances_Ducks;
[L726]               __tmp__allowed_Ducks := allowed_Ducks;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == Ducks
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][from_s393];
[L1605]              __tmp__balances_Ducks[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == Ducks
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND TRUE   !(b_s112 <= a_s112)
[L1341]              revert := true;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_Ducks := name_Ducks;
[L722]               __tmp__symbol_Ducks := symbol_Ducks;
[L723]               __tmp__decimals_Ducks := decimals_Ducks;
[L724]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L725]               __tmp__balances_Ducks := balances_Ducks;
[L726]               __tmp__allowed_Ducks := allowed_Ducks;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == Ducks
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][from_s393];
[L1605]              __tmp__balances_Ducks[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == Ducks
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND TRUE   !(b_s112 <= a_s112)
[L1341]              revert := true;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:45:11,978 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:45:11,979 INFO  L82        PathProgramCache]: Analyzing trace with hash 1492733983, now seen corresponding path program 1 times
[2020-11-25 14:45:11,979 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:45:11,986 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:45:12,015 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 14:45:12,015 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:45:12,015 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 14:45:12,016 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:45:12,016 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 14:45:12,016 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 14:45:12,016 INFO  L87              Difference]: Start difference. First operand 1850 states and 1993 transitions. cyclomatic complexity: 147 Second operand 7 states.
[2020-11-25 14:45:12,285 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:45:12,285 INFO  L93              Difference]: Finished difference Result 1934 states and 2093 transitions.
[2020-11-25 14:45:12,286 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 14:45:12,286 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1934 states and 2093 transitions.
[2020-11-25 14:45:12,294 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 14:45:12,302 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1934 states to 1934 states and 2093 transitions.
[2020-11-25 14:45:12,302 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 14:45:12,303 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 14:45:12,303 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1934 states and 2093 transitions.
[2020-11-25 14:45:12,306 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:45:12,306 INFO  L728         BuchiCegarLoop]: Abstraction has 1934 states and 2093 transitions.
[2020-11-25 14:45:12,308 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1934 states and 2093 transitions.
[2020-11-25 14:45:12,326 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1934 to 1885.
[2020-11-25 14:45:12,326 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1885 states.
[2020-11-25 14:45:12,330 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1885 states to 1885 states and 2029 transitions.
[2020-11-25 14:45:12,330 INFO  L751         BuchiCegarLoop]: Abstraction has 1885 states and 2029 transitions.
[2020-11-25 14:45:12,330 INFO  L631         BuchiCegarLoop]: Abstraction has 1885 states and 2029 transitions.
[2020-11-25 14:45:12,330 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 14:45:12,330 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1885 states and 2029 transitions.
[2020-11-25 14:45:12,335 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:45:12,335 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:45:12,335 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:45:12,336 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:45:12,336 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_Ducks[this] := 560717954;
[L1421]              symbol_Ducks[this] := 560717954;
[L1422]              decimals_Ducks[this] := 0;
[L1423]              _totalSupply_Ducks[this] := 0;
[L1424]              balances_Ducks[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_Ducks[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_Ducks[this] := 1576131613;
[L1430]              symbol_Ducks[this] := -1943651461;
[L1431]              decimals_Ducks[this] := 18;
[L1432]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1434]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1465]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_Ducks := name_Ducks;
[L722]               __tmp__symbol_Ducks := symbol_Ducks;
[L723]               __tmp__decimals_Ducks := decimals_Ducks;
[L724]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L725]               __tmp__balances_Ducks := balances_Ducks;
[L726]               __tmp__allowed_Ducks := allowed_Ducks;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == Ducks
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][from_s393];
[L1605]              __tmp__balances_Ducks[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == Ducks
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND FALSE  !(revert)
[L1615]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_Ducks[this][from_s393][msgsender_MSG];
[L1616]              __tmp__allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1617]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_Ducks[this][from_s393][msgsender_MSG];
[L1618]  COND TRUE   __tmp__DType[this] == Ducks
[L1619]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s393], tokens_s393);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND TRUE   !(c_s90 >= a_s90)
[L1324]              revert := true;
[L1619]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s393], tokens_s393);
[L1620]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:45:12,340 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:45:12,340 INFO  L82        PathProgramCache]: Analyzing trace with hash 414730185, now seen corresponding path program 1 times
[2020-11-25 14:45:12,341 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:45:12,353 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:45:12,496 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-25 14:45:12,496 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:45:12,496 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [16] total 16
[2020-11-25 14:45:12,496 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:45:12,496 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 14:45:12,497 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=240, Unknown=0, NotChecked=0, Total=272
[2020-11-25 14:45:12,497 INFO  L87              Difference]: Start difference. First operand 1885 states and 2029 transitions. cyclomatic complexity: 148 Second operand 17 states.
[2020-11-25 14:45:13,762 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:45:13,762 INFO  L93              Difference]: Finished difference Result 1928 states and 2103 transitions.
[2020-11-25 14:45:13,763 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 14:45:13,763 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1928 states and 2103 transitions.
[2020-11-25 14:45:13,767 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 14:45:13,772 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1928 states to 1928 states and 2103 transitions.
[2020-11-25 14:45:13,772 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 698
[2020-11-25 14:45:13,772 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 698
[2020-11-25 14:45:13,772 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1928 states and 2103 transitions.
[2020-11-25 14:45:13,774 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:45:13,774 INFO  L728         BuchiCegarLoop]: Abstraction has 1928 states and 2103 transitions.
[2020-11-25 14:45:13,776 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1928 states and 2103 transitions.
[2020-11-25 14:45:13,786 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1928 to 1911.
[2020-11-25 14:45:13,786 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1911 states.
[2020-11-25 14:45:13,788 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1911 states to 1911 states and 2072 transitions.
[2020-11-25 14:45:13,788 INFO  L751         BuchiCegarLoop]: Abstraction has 1911 states and 2072 transitions.
[2020-11-25 14:45:13,788 INFO  L631         BuchiCegarLoop]: Abstraction has 1911 states and 2072 transitions.
[2020-11-25 14:45:13,788 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 14:45:13,789 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1911 states and 2072 transitions.
[2020-11-25 14:45:13,790 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 14:45:13,791 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:45:13,791 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:45:13,792 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:45:13,792 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_Ducks[this] := 560717954;
[L1421]              symbol_Ducks[this] := 560717954;
[L1422]              decimals_Ducks[this] := 0;
[L1423]              _totalSupply_Ducks[this] := 0;
[L1424]              balances_Ducks[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_Ducks[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_Ducks[this] := 1576131613;
[L1430]              symbol_Ducks[this] := -1943651461;
[L1431]              decimals_Ducks[this] := 18;
[L1432]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1434]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1465]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_Ducks := name_Ducks;
[L722]               __tmp__symbol_Ducks := symbol_Ducks;
[L723]               __tmp__decimals_Ducks := decimals_Ducks;
[L724]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L725]               __tmp__balances_Ducks := balances_Ducks;
[L726]               __tmp__allowed_Ducks := allowed_Ducks;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == Ducks
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][from_s393];
[L1605]              __tmp__balances_Ducks[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == Ducks
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND FALSE  !(revert)
[L1615]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_Ducks[this][from_s393][msgsender_MSG];
[L1616]              __tmp__allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1617]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_Ducks[this][from_s393][msgsender_MSG];
[L1618]  COND TRUE   __tmp__DType[this] == Ducks
[L1619]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s393], tokens_s393);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND FALSE  !(!(c_s90 >= a_s90))
[L1619]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s393], tokens_s393);
[L1620]  COND FALSE  !(revert)
[L1626]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][to_s393];
[L1627]              __tmp__balances_Ducks[this][to_s393] := __var_6;
[L1628]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][to_s393];
[L1629]              success_s393 := true;
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_Ducks := name_Ducks;
[L722]               __tmp__symbol_Ducks := symbol_Ducks;
[L723]               __tmp__decimals_Ducks := decimals_Ducks;
[L724]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L725]               __tmp__balances_Ducks := balances_Ducks;
[L726]               __tmp__allowed_Ducks := allowed_Ducks;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == Ducks
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][from_s393];
[L1605]              __tmp__balances_Ducks[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == Ducks
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND FALSE  !(revert)
[L1615]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_Ducks[this][from_s393][msgsender_MSG];
[L1616]              __tmp__allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1617]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_Ducks[this][from_s393][msgsender_MSG];
[L1618]  COND TRUE   __tmp__DType[this] == Ducks
[L1619]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s393], tokens_s393);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND FALSE  !(!(c_s90 >= a_s90))
[L1619]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s393], tokens_s393);
[L1620]  COND FALSE  !(revert)
[L1626]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][to_s393];
[L1627]              __tmp__balances_Ducks[this][to_s393] := __var_6;
[L1628]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][to_s393];
[L1629]              success_s393 := true;
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:45:13,795 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:45:13,795 INFO  L82        PathProgramCache]: Analyzing trace with hash -1397050696, now seen corresponding path program 1 times
[2020-11-25 14:45:13,795 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:45:13,802 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:45:13,821 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-25 14:45:13,821 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:45:13,821 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 14:45:13,822 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:45:13,822 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 14:45:13,822 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 14:45:13,822 INFO  L87              Difference]: Start difference. First operand 1911 states and 2072 transitions. cyclomatic complexity: 167 Second operand 5 states.
[2020-11-25 14:45:14,032 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:45:14,032 INFO  L93              Difference]: Finished difference Result 2458 states and 2779 transitions.
[2020-11-25 14:45:14,033 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 14:45:14,033 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2458 states and 2779 transitions.
[2020-11-25 14:45:14,038 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 14:45:14,044 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2458 states to 1916 states and 2236 transitions.
[2020-11-25 14:45:14,044 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 561
[2020-11-25 14:45:14,045 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 561
[2020-11-25 14:45:14,045 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1916 states and 2236 transitions.
[2020-11-25 14:45:14,047 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:45:14,047 INFO  L728         BuchiCegarLoop]: Abstraction has 1916 states and 2236 transitions.
[2020-11-25 14:45:14,048 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1916 states and 2236 transitions.
[2020-11-25 14:45:14,058 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1916 to 1348.
[2020-11-25 14:45:14,058 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1348 states.
[2020-11-25 14:45:14,059 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1348 states to 1348 states and 1465 transitions.
[2020-11-25 14:45:14,060 INFO  L751         BuchiCegarLoop]: Abstraction has 1348 states and 1465 transitions.
[2020-11-25 14:45:14,060 INFO  L631         BuchiCegarLoop]: Abstraction has 1348 states and 1465 transitions.
[2020-11-25 14:45:14,060 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 14:45:14,060 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1348 states and 1465 transitions.
[2020-11-25 14:45:14,061 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:45:14,061 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:45:14,061 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:45:14,063 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:45:14,063 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_Ducks[this] := 560717954;
[L1421]              symbol_Ducks[this] := 560717954;
[L1422]              decimals_Ducks[this] := 0;
[L1423]              _totalSupply_Ducks[this] := 0;
[L1424]              balances_Ducks[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_Ducks[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_Ducks[this] := 1576131613;
[L1430]              symbol_Ducks[this] := -1943651461;
[L1431]              decimals_Ducks[this] := 18;
[L1432]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1434]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1465]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND TRUE   choice == 10
[L2777]              gas := gas - 21000;
[L2778]  COND TRUE   gas >= 0
[L2779]              assume tokens_s291 >= 0 && tokens_s291 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2780]              assume msgvalue_MSG == 0;
[L2781]  CALL        call success_s291 := approve~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L601]               havoc __exception;
[L602]               revert := false;
[L603]   COND FALSE  !(__exception)
[L624]   CALL        call success_s291 := approve~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L1522]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Ducks[this][msgsender_MSG][spender_s291];
[L1523]              allowed_Ducks[this][msgsender_MSG][spender_s291] := tokens_s291;
[L1524]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Ducks[this][msgsender_MSG][spender_s291];
[L1525]              assert { :EventEmitted "Approval_Ducks" } true;
[L1526]              success_s291 := true;
[L624]   RET         call success_s291 := approve~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L625]               assume !revert && gas >= 0;
[L2781]  RET         call success_s291 := approve~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L2864]  RET         call CorralChoice_Ducks(this);
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1647]              balances_Ducks[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1649]  COND TRUE   DType[this] == Ducks
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1658]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == Ducks
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1669]              balances_Ducks[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1647]              balances_Ducks[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1649]  COND TRUE   DType[this] == Ducks
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1658]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == Ducks
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1669]              balances_Ducks[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:45:14,066 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:45:14,066 INFO  L82        PathProgramCache]: Analyzing trace with hash -2075962233, now seen corresponding path program 1 times
[2020-11-25 14:45:14,067 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:45:14,104 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:45:15,257 INFO  L134       CoverageAnalysis]: Checked inductivity of 57 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 54 trivial. 0 not checked.
[2020-11-25 14:45:15,258 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:45:15,258 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-11-25 14:45:15,258 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:45:15,258 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-11-25 14:45:15,258 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=76, Invalid=980, Unknown=0, NotChecked=0, Total=1056
[2020-11-25 14:45:15,259 INFO  L87              Difference]: Start difference. First operand 1348 states and 1465 transitions. cyclomatic complexity: 121 Second operand 33 states.
[2020-11-25 14:45:18,150 WARN  L188               SmtUtils]: Spent 139.00 ms on a formula simplification. DAG size of input: 111 DAG size of output: 98
[2020-11-25 14:45:20,494 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:45:20,494 INFO  L93              Difference]: Finished difference Result 1367 states and 1496 transitions.
[2020-11-25 14:45:20,494 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-25 14:45:20,494 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1367 states and 1496 transitions.
[2020-11-25 14:45:20,496 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:45:20,499 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1367 states to 1367 states and 1496 transitions.
[2020-11-25 14:45:20,499 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 437
[2020-11-25 14:45:20,500 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 437
[2020-11-25 14:45:20,500 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1367 states and 1496 transitions.
[2020-11-25 14:45:20,501 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:45:20,501 INFO  L728         BuchiCegarLoop]: Abstraction has 1367 states and 1496 transitions.
[2020-11-25 14:45:20,502 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1367 states and 1496 transitions.
[2020-11-25 14:45:20,509 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1367 to 1362.
[2020-11-25 14:45:20,509 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1362 states.
[2020-11-25 14:45:20,510 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1362 states to 1362 states and 1490 transitions.
[2020-11-25 14:45:20,510 INFO  L751         BuchiCegarLoop]: Abstraction has 1362 states and 1490 transitions.
[2020-11-25 14:45:20,510 INFO  L631         BuchiCegarLoop]: Abstraction has 1362 states and 1490 transitions.
[2020-11-25 14:45:20,510 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 14:45:20,510 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1362 states and 1490 transitions.
[2020-11-25 14:45:20,511 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:45:20,511 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:45:20,512 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:45:20,512 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:45:20,512 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_Ducks[this] := 560717954;
[L1421]              symbol_Ducks[this] := 560717954;
[L1422]              decimals_Ducks[this] := 0;
[L1423]              _totalSupply_Ducks[this] := 0;
[L1424]              balances_Ducks[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_Ducks[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_Ducks[this] := 1576131613;
[L1430]              symbol_Ducks[this] := -1943651461;
[L1431]              decimals_Ducks[this] := 18;
[L1432]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1434]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1465]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND TRUE   choice == 10
[L2777]              gas := gas - 21000;
[L2778]  COND TRUE   gas >= 0
[L2779]              assume tokens_s291 >= 0 && tokens_s291 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2780]              assume msgvalue_MSG == 0;
[L2781]  CALL        call success_s291 := approve~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L601]               havoc __exception;
[L602]               revert := false;
[L603]   COND FALSE  !(__exception)
[L624]   CALL        call success_s291 := approve~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L1522]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Ducks[this][msgsender_MSG][spender_s291];
[L1523]              allowed_Ducks[this][msgsender_MSG][spender_s291] := tokens_s291;
[L1524]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Ducks[this][msgsender_MSG][spender_s291];
[L1525]              assert { :EventEmitted "Approval_Ducks" } true;
[L1526]              success_s291 := true;
[L624]   RET         call success_s291 := approve~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L625]               assume !revert && gas >= 0;
[L2781]  RET         call success_s291 := approve~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L2864]  RET         call CorralChoice_Ducks(this);
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND TRUE   __exception
[L710]               __tmp__Balance := Balance;
[L711]               __tmp__DType := DType;
[L712]               __tmp__Alloc := Alloc;
[L713]               __tmp__balance_ADDR := balance_ADDR;
[L714]               __tmp__M_Ref_int := M_Ref_int;
[L715]               __tmp__sum_balances0 := sum_balances0;
[L716]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L717]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L718]               __tmp__sum_allowed1 := sum_allowed1;
[L719]               __tmp__Length := Length;
[L720]               __tmp__now := now;
[L721]               __tmp__name_Ducks := name_Ducks;
[L722]               __tmp__symbol_Ducks := symbol_Ducks;
[L723]               __tmp__decimals_Ducks := decimals_Ducks;
[L724]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L725]               __tmp__balances_Ducks := balances_Ducks;
[L726]               __tmp__allowed_Ducks := allowed_Ducks;
[L727]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1596]  COND TRUE   __tmp__DType[this] == Ducks
[L1597]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1597]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L1598]  COND FALSE  !(revert)
[L1604]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][from_s393];
[L1605]              __tmp__balances_Ducks[this][from_s393] := __var_4;
[L1606]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][from_s393];
[L1607]  COND TRUE   __tmp__DType[this] == Ducks
[L1608]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1340]  COND FALSE  !(!(b_s112 <= a_s112))
[L1344]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1608]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1609]  COND FALSE  !(revert)
[L1615]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_Ducks[this][from_s393][msgsender_MSG];
[L1616]              __tmp__allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1617]              __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_Ducks[this][from_s393][msgsender_MSG];
[L1618]  COND TRUE   __tmp__DType[this] == Ducks
[L1619]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s393], tokens_s393);
[L1322]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1323]  COND TRUE   !(c_s90 >= a_s90)
[L1324]              revert := true;
[L1619]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s393], tokens_s393);
[L1620]  COND TRUE   revert
[L727]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L728]               assume revert || gas < 0;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:45:20,515 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:45:20,515 INFO  L82        PathProgramCache]: Analyzing trace with hash 630283710, now seen corresponding path program 1 times
[2020-11-25 14:45:20,516 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:45:20,527 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:45:20,597 INFO  L134       CoverageAnalysis]: Checked inductivity of 57 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 54 trivial. 0 not checked.
[2020-11-25 14:45:20,597 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:45:20,597 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 14:45:20,598 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:45:20,598 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 14:45:20,598 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-11-25 14:45:20,598 INFO  L87              Difference]: Start difference. First operand 1362 states and 1490 transitions. cyclomatic complexity: 134 Second operand 12 states.
[2020-11-25 14:45:21,022 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:45:21,023 INFO  L93              Difference]: Finished difference Result 1392 states and 1542 transitions.
[2020-11-25 14:45:21,023 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 14:45:21,023 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1392 states and 1542 transitions.
[2020-11-25 14:45:21,026 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:45:21,029 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1392 states to 1356 states and 1504 transitions.
[2020-11-25 14:45:21,029 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 446
[2020-11-25 14:45:21,029 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 446
[2020-11-25 14:45:21,030 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1356 states and 1504 transitions.
[2020-11-25 14:45:21,031 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:45:21,031 INFO  L728         BuchiCegarLoop]: Abstraction has 1356 states and 1504 transitions.
[2020-11-25 14:45:21,032 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1356 states and 1504 transitions.
[2020-11-25 14:45:21,037 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1356 to 1290.
[2020-11-25 14:45:21,038 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1290 states.
[2020-11-25 14:45:21,039 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1290 states to 1290 states and 1395 transitions.
[2020-11-25 14:45:21,039 INFO  L751         BuchiCegarLoop]: Abstraction has 1290 states and 1395 transitions.
[2020-11-25 14:45:21,039 INFO  L631         BuchiCegarLoop]: Abstraction has 1290 states and 1395 transitions.
[2020-11-25 14:45:21,039 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 14:45:21,039 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1290 states and 1395 transitions.
[2020-11-25 14:45:21,040 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:45:21,040 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:45:21,040 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:45:21,041 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:45:21,041 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_Ducks[this] := 560717954;
[L1421]              symbol_Ducks[this] := 560717954;
[L1422]              decimals_Ducks[this] := 0;
[L1423]              _totalSupply_Ducks[this] := 0;
[L1424]              balances_Ducks[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_Ducks[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_Ducks[this] := 1576131613;
[L1430]              symbol_Ducks[this] := -1943651461;
[L1431]              decimals_Ducks[this] := 18;
[L1432]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1434]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1465]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND TRUE   choice == 11
[L2770]              gas := gas - 21000;
[L2771]  COND TRUE   gas >= 0
[L2772]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2773]              assume msgvalue_MSG == 0;
[L2774]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L653]               havoc __exception;
[L654]               revert := false;
[L655]   COND FALSE  !(__exception)
[L676]   CALL        call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1564]  COND TRUE   DType[this] == Ducks
[L1565]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1565]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1566]  COND FALSE  !(revert)
[L1572]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1573]              balances_Ducks[this][msgsender_MSG] := __var_2;
[L1574]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1575]  COND TRUE   DType[this] == Ducks
[L1576]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1576]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1577]  COND FALSE  !(revert)
[L1583]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s334];
[L1584]              balances_Ducks[this][to_s334] := __var_3;
[L1585]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s334];
[L1586]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1587]              success_s334 := true;
[L676]   RET         call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L677]               assume !revert && gas >= 0;
[L2774]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2864]  RET         call CorralChoice_Ducks(this);
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1647]              balances_Ducks[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1649]  COND TRUE   DType[this] == Ducks
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1658]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == Ducks
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1669]              balances_Ducks[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1647]              balances_Ducks[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1649]  COND TRUE   DType[this] == Ducks
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1658]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == Ducks
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1669]              balances_Ducks[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:45:21,044 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:45:21,044 INFO  L82        PathProgramCache]: Analyzing trace with hash -178747711, now seen corresponding path program 1 times
[2020-11-25 14:45:21,045 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:45:21,083 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:45:21,419 INFO  L134       CoverageAnalysis]: Checked inductivity of 56 backedges. 52 proven. 2 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-25 14:45:21,419 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:45:21,420 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-11-25 14:45:21,420 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:45:21,420 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 14:45:21,420 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=59, Invalid=541, Unknown=0, NotChecked=0, Total=600
[2020-11-25 14:45:21,420 INFO  L87              Difference]: Start difference. First operand 1290 states and 1395 transitions. cyclomatic complexity: 108 Second operand 25 states.
[2020-11-25 14:45:23,711 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:45:23,711 INFO  L93              Difference]: Finished difference Result 1333 states and 1452 transitions.
[2020-11-25 14:45:23,711 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 14:45:23,711 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1333 states and 1452 transitions.
[2020-11-25 14:45:23,714 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:45:23,717 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1333 states to 1333 states and 1452 transitions.
[2020-11-25 14:45:23,717 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 426
[2020-11-25 14:45:23,717 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 426
[2020-11-25 14:45:23,717 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1333 states and 1452 transitions.
[2020-11-25 14:45:23,718 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:45:23,718 INFO  L728         BuchiCegarLoop]: Abstraction has 1333 states and 1452 transitions.
[2020-11-25 14:45:23,719 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1333 states and 1452 transitions.
[2020-11-25 14:45:23,725 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1333 to 1298.
[2020-11-25 14:45:23,725 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1298 states.
[2020-11-25 14:45:23,727 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1298 states to 1298 states and 1413 transitions.
[2020-11-25 14:45:23,727 INFO  L751         BuchiCegarLoop]: Abstraction has 1298 states and 1413 transitions.
[2020-11-25 14:45:23,727 INFO  L631         BuchiCegarLoop]: Abstraction has 1298 states and 1413 transitions.
[2020-11-25 14:45:23,727 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 14:45:23,727 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1298 states and 1413 transitions.
[2020-11-25 14:45:23,728 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:45:23,728 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:45:23,728 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:45:23,729 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:45:23,729 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_Ducks[this] := 560717954;
[L1421]              symbol_Ducks[this] := 560717954;
[L1422]              decimals_Ducks[this] := 0;
[L1423]              _totalSupply_Ducks[this] := 0;
[L1424]              balances_Ducks[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_Ducks[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_Ducks[this] := 1576131613;
[L1430]              symbol_Ducks[this] := -1943651461;
[L1431]              decimals_Ducks[this] := 18;
[L1432]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1434]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1465]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1647]              balances_Ducks[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1649]  COND TRUE   DType[this] == Ducks
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1658]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == Ducks
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1669]              balances_Ducks[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1647]              balances_Ducks[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1649]  COND TRUE   DType[this] == Ducks
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1658]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == Ducks
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1669]              balances_Ducks[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1647]              balances_Ducks[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1649]  COND TRUE   DType[this] == Ducks
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1658]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == Ducks
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1669]              balances_Ducks[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:45:23,732 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:45:23,733 INFO  L82        PathProgramCache]: Analyzing trace with hash -2116532847, now seen corresponding path program 1 times
[2020-11-25 14:45:23,733 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:45:23,800 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:45:24,431 INFO  L134       CoverageAnalysis]: Checked inductivity of 71 backedges. 1 proven. 65 refuted. 0 times theorem prover too weak. 5 trivial. 0 not checked.
[2020-11-25 14:45:24,431 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:45:24,432 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-11-25 14:45:24,432 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:45:24,432 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-11-25 14:45:24,432 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=83, Invalid=787, Unknown=0, NotChecked=0, Total=870
[2020-11-25 14:45:24,432 INFO  L87              Difference]: Start difference. First operand 1298 states and 1413 transitions. cyclomatic complexity: 120 Second operand 30 states.
[2020-11-25 14:45:27,057 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:45:27,057 INFO  L93              Difference]: Finished difference Result 1478 states and 1652 transitions.
[2020-11-25 14:45:27,058 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 14:45:27,058 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1478 states and 1652 transitions.
[2020-11-25 14:45:27,061 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:45:27,064 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1478 states to 1478 states and 1652 transitions.
[2020-11-25 14:45:27,064 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 520
[2020-11-25 14:45:27,065 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 520
[2020-11-25 14:45:27,065 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1478 states and 1652 transitions.
[2020-11-25 14:45:27,066 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:45:27,066 INFO  L728         BuchiCegarLoop]: Abstraction has 1478 states and 1652 transitions.
[2020-11-25 14:45:27,067 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1478 states and 1652 transitions.
[2020-11-25 14:45:27,074 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1478 to 1450.
[2020-11-25 14:45:27,074 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1450 states.
[2020-11-25 14:45:27,076 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1450 states to 1450 states and 1617 transitions.
[2020-11-25 14:45:27,076 INFO  L751         BuchiCegarLoop]: Abstraction has 1450 states and 1617 transitions.
[2020-11-25 14:45:27,076 INFO  L631         BuchiCegarLoop]: Abstraction has 1450 states and 1617 transitions.
[2020-11-25 14:45:27,076 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 14:45:27,076 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1450 states and 1617 transitions.
[2020-11-25 14:45:27,077 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:45:27,077 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:45:27,077 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:45:27,078 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:45:27,078 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_Ducks[this] := 560717954;
[L1421]              symbol_Ducks[this] := 560717954;
[L1422]              decimals_Ducks[this] := 0;
[L1423]              _totalSupply_Ducks[this] := 0;
[L1424]              balances_Ducks[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_Ducks[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_Ducks[this] := 1576131613;
[L1430]              symbol_Ducks[this] := -1943651461;
[L1431]              decimals_Ducks[this] := 18;
[L1432]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1434]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1465]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1647]              balances_Ducks[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1649]  COND TRUE   DType[this] == Ducks
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1658]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == Ducks
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1669]              balances_Ducks[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume ((((((success_s393 == true && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]);
[L3]                 success_transferFrom_Ducks0 := true;
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1647]              balances_Ducks[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1649]  COND TRUE   DType[this] == Ducks
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1658]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == Ducks
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1669]              balances_Ducks[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND TRUE   choice == 14
[L2752]              gas := gas - 21000;
[L2753]  COND FALSE  !(gas >= 0)
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:45:27,081 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:45:27,081 INFO  L82        PathProgramCache]: Analyzing trace with hash -176357876, now seen corresponding path program 1 times
[2020-11-25 14:45:27,082 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:45:27,121 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:45:27,670 WARN  L188               SmtUtils]: Spent 160.00 ms on a formula simplification. DAG size of input: 92 DAG size of output: 61
[2020-11-25 14:45:27,814 WARN  L188               SmtUtils]: Spent 107.00 ms on a formula simplification. DAG size of input: 106 DAG size of output: 71
[2020-11-25 14:45:28,327 INFO  L134       CoverageAnalysis]: Checked inductivity of 71 backedges. 7 proven. 4 refuted. 0 times theorem prover too weak. 60 trivial. 0 not checked.
[2020-11-25 14:45:28,327 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:45:28,327 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-11-25 14:45:28,328 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:45:28,328 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-11-25 14:45:28,328 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=104, Invalid=1086, Unknown=0, NotChecked=0, Total=1190
[2020-11-25 14:45:28,328 INFO  L87              Difference]: Start difference. First operand 1450 states and 1617 transitions. cyclomatic complexity: 174 Second operand 35 states.
[2020-11-25 14:45:33,466 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:45:33,466 INFO  L93              Difference]: Finished difference Result 1660 states and 1897 transitions.
[2020-11-25 14:45:33,466 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-11-25 14:45:33,467 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1660 states and 1897 transitions.
[2020-11-25 14:45:33,470 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 14:45:33,473 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1660 states to 1660 states and 1897 transitions.
[2020-11-25 14:45:33,473 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 607
[2020-11-25 14:45:33,474 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 607
[2020-11-25 14:45:33,474 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1660 states and 1897 transitions.
[2020-11-25 14:45:33,475 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:45:33,475 INFO  L728         BuchiCegarLoop]: Abstraction has 1660 states and 1897 transitions.
[2020-11-25 14:45:33,476 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1660 states and 1897 transitions.
[2020-11-25 14:45:33,483 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1660 to 1452.
[2020-11-25 14:45:33,483 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1452 states.
[2020-11-25 14:45:33,485 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1452 states to 1452 states and 1624 transitions.
[2020-11-25 14:45:33,485 INFO  L751         BuchiCegarLoop]: Abstraction has 1452 states and 1624 transitions.
[2020-11-25 14:45:33,485 INFO  L631         BuchiCegarLoop]: Abstraction has 1452 states and 1624 transitions.
[2020-11-25 14:45:33,485 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 14:45:33,485 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1452 states and 1624 transitions.
[2020-11-25 14:45:33,486 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:45:33,486 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:45:33,486 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:45:33,487 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:45:33,487 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2854]              assume null == 0;
[L2855]  CALL        call this := FreshRefGenerator__success();
[L1250]              havoc newRef;
[L1251]              assume Alloc[newRef] == false;
[L1252]              Alloc[newRef] := true;
[L1253]              assume newRef != null;
[L2855]  RET         call this := FreshRefGenerator__success();
[L2856]              assume now >= 0;
[L2857]              assume DType[this] == Ducks;
[L2858]              assume msgvalue_MSG == 0;
[L2859]              gas := gas - 53000;
[L2860]  CALL        call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L399]               havoc __exception;
[L400]               revert := false;
[L401]   COND FALSE  !(__exception)
[L422]   CALL        call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L1457]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1282]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1267]              assume msgsender_MSG != null;
[L1268]              Balance[this] := 0;
[L1282]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1283]  COND FALSE  !(revert)
[L1457]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1458]  COND FALSE  !(revert)
[L1461]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1314]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1299]              assume msgsender_MSG != null;
[L1300]              Balance[this] := 0;
[L1314]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1315]  COND FALSE  !(revert)
[L1461]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1462]  COND FALSE  !(revert)
[L1465]  CALL        call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              name_Ducks[this] := 560717954;
[L1421]              symbol_Ducks[this] := 560717954;
[L1422]              decimals_Ducks[this] := 0;
[L1423]              _totalSupply_Ducks[this] := 0;
[L1424]              balances_Ducks[this] := zeroRefintArr();
[L1425]              sum_balances0[this] := 0;
[L1426]              allowed_Ducks[this] := zeroRefRefintArr();
[L1427]              sum_allowed1[this] := 0;
[L1429]              name_Ducks[this] := 1576131613;
[L1430]              symbol_Ducks[this] := -1943651461;
[L1431]              decimals_Ducks[this] := 18;
[L1432]              _totalSupply_Ducks[this] := 1500000000000000000000000;
[L1433]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1434]              balances_Ducks[this][msgsender_MSG] := _totalSupply_Ducks[this];
[L1435]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1436]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1465]  RET         call Ducks_Ducks_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1466]  COND FALSE  !(revert)
[L422]   RET         call Ducks_Ducks__success(this, msgsender_MSG, msgvalue_MSG);
[L423]               assume !revert && gas >= 0;
[L2860]  RET         call Ducks_Ducks(this, msgsender_MSG, msgvalue_MSG);
[L2861]              assume !revert && gas >= 0;
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND TRUE   choice == 10
[L2777]              gas := gas - 21000;
[L2778]  COND TRUE   gas >= 0
[L2779]              assume tokens_s291 >= 0 && tokens_s291 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2780]              assume msgvalue_MSG == 0;
[L2781]  CALL        call success_s291 := approve~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L601]               havoc __exception;
[L602]               revert := false;
[L603]   COND FALSE  !(__exception)
[L624]   CALL        call success_s291 := approve~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L1522]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Ducks[this][msgsender_MSG][spender_s291];
[L1523]              allowed_Ducks[this][msgsender_MSG][spender_s291] := tokens_s291;
[L1524]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Ducks[this][msgsender_MSG][spender_s291];
[L1525]              assert { :EventEmitted "Approval_Ducks" } true;
[L1526]              success_s291 := true;
[L624]   RET         call success_s291 := approve~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L625]               assume !revert && gas >= 0;
[L2781]  RET         call success_s291 := approve~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, spender_s291, tokens_s291);
[L2864]  RET         call CorralChoice_Ducks(this);
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND TRUE   choice == 11
[L2770]              gas := gas - 21000;
[L2771]  COND TRUE   gas >= 0
[L2772]              assume tokens_s334 >= 0 && tokens_s334 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2773]              assume msgvalue_MSG == 0;
[L2774]  CALL        call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L653]               havoc __exception;
[L654]               revert := false;
[L655]   COND FALSE  !(__exception)
[L676]   CALL        call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L1564]  COND TRUE   DType[this] == Ducks
[L1565]  CALL        call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1565]  RET         call __var_2 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][msgsender_MSG], tokens_s334);
[L1566]  COND FALSE  !(revert)
[L1572]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][msgsender_MSG];
[L1573]              balances_Ducks[this][msgsender_MSG] := __var_2;
[L1574]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][msgsender_MSG];
[L1575]  COND TRUE   DType[this] == Ducks
[L1576]  CALL        call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1576]  RET         call __var_3 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s334], tokens_s334);
[L1577]  COND FALSE  !(revert)
[L1583]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s334];
[L1584]              balances_Ducks[this][to_s334] := __var_3;
[L1585]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s334];
[L1586]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1587]              success_s334 := true;
[L676]   RET         call success_s334 := transfer~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L677]               assume !revert && gas >= 0;
[L2774]  RET         call success_s334 := transfer~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, to_s334, tokens_s334);
[L2864]  RET         call CorralChoice_Ducks(this);
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1647]              balances_Ducks[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1649]  COND TRUE   DType[this] == Ducks
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1658]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == Ducks
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1669]              balances_Ducks[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

Loop:
[L2864]  CALL        call CorralChoice_Ducks(this);
[L2705]              havoc msgsender_MSG;
[L2706]              havoc msgvalue_MSG;
[L2707]              havoc choice;
[L2708]              havoc __ret_0_totalSupply;
[L2709]              havoc tokenOwner_s247;
[L2710]              havoc balance_s247;
[L2711]              havoc tokenOwner_s263;
[L2712]              havoc spender_s263;
[L2713]              havoc remaining_s263;
[L2714]              havoc to_s334;
[L2715]              havoc tokens_s334;
[L2716]              havoc success_s334;
[L2717]              havoc spender_s291;
[L2718]              havoc tokens_s291;
[L2719]              havoc success_s291;
[L2720]              havoc from_s393;
[L2721]              havoc to_s393;
[L2722]              havoc tokens_s393;
[L2723]              havoc success_s393;
[L2724]              havoc a_s90;
[L2725]              havoc b_s90;
[L2726]              havoc c_s90;
[L2727]              havoc a_s112;
[L2728]              havoc b_s112;
[L2729]              havoc c_s112;
[L2730]              havoc a_s140;
[L2731]              havoc b_s140;
[L2732]              havoc c_s140;
[L2733]              havoc a_s162;
[L2734]              havoc b_s162;
[L2735]              havoc c_s162;
[L2736]              havoc __ret_0_name;
[L2737]              havoc __ret_0_symbol;
[L2738]              havoc __ret_0_decimals;
[L2739]              havoc __ret_0__totalSupply;
[L2740]              havoc tmpNow;
[L2741]              havoc gas;
[L2742]              assume gas > 4000000 && gas <= 8000000;
[L2743]              tmpNow := now;
[L2744]              havoc now;
[L2745]              assume now > tmpNow;
[L2746]              assume msgsender_MSG != null;
[L2747]              assume DType[msgsender_MSG] != ERC20Interface;
[L2748]              assume DType[msgsender_MSG] != SafeMath;
[L2749]              assume DType[msgsender_MSG] != Ducks;
[L2750]              Alloc[msgsender_MSG] := true;
[L2751]  COND FALSE  !(choice == 14)
[L2757]  COND FALSE  !(choice == 13)
[L2763]  COND FALSE  !(choice == 12)
[L2769]  COND FALSE  !(choice == 11)
[L2776]  COND FALSE  !(choice == 10)
[L2783]  COND TRUE   choice == 9
[L2784]              gas := gas - 21000;
[L2785]  COND TRUE   gas >= 0
[L2786]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2787]              assume msgvalue_MSG == 0;
[L2788]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L707]               havoc __exception;
[L708]               revert := false;
[L709]   COND FALSE  !(__exception)
[L730]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1638]  COND TRUE   DType[this] == Ducks
[L1639]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1639]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L1640]  COND FALSE  !(revert)
[L1646]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L1647]              balances_Ducks[this][from_s393] := __var_4;
[L1648]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L1649]  COND TRUE   DType[this] == Ducks
[L1650]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1349]  COND FALSE  !(!(b_s112 <= a_s112))
[L1353]              c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1650]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L1651]  COND FALSE  !(revert)
[L1657]              sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L1658]              allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L1659]              sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L1660]  COND TRUE   DType[this] == Ducks
[L1661]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1331]              c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1332]  COND FALSE  !(!(c_s90 >= a_s90))
[L1661]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L1662]  COND FALSE  !(revert)
[L1668]              sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L1669]              balances_Ducks[this][to_s393] := __var_6;
[L1670]              sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L1671]              assert { :EventEmitted "Transfer_Ducks" } true;
[L1672]              success_s393 := true;
[L730]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L731]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L2788]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L2864]  RET         call CorralChoice_Ducks(this);

[2020-11-25 14:45:33,491 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:45:33,491 INFO  L82        PathProgramCache]: Analyzing trace with hash 282999926, now seen corresponding path program 1 times
[2020-11-25 14:45:33,492 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:45:33,590 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-25 14:59:58,043 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkStemFeasibility(LassoCheck.java:1080)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:994)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 14:59:58,044 INFO  L168              Benchmark]: Toolchain (without parser) took 898754.31 ms. Allocated memory was 1.0 GB in the beginning and 6.5 GB in the end (delta: 5.4 GB). Free memory was 940.6 MB in the beginning and 3.7 GB in the end (delta: -2.8 GB). Peak memory consumption was 6.1 GB. Max. memory is 15.3 GB.
[2020-11-25 14:59:58,045 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 14:59:58,045 INFO  L168              Benchmark]: Boogie Preprocessor took 78.23 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 14:59:58,045 INFO  L168              Benchmark]: UtopiaSpecLang took 54.18 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:59:58,046 INFO  L168              Benchmark]: Boogie Printer took 12.74 ms. Allocated memory is still 1.0 GB. Free memory is still 924.5 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 14:59:58,046 INFO  L168              Benchmark]: RCFGBuilder took 527.45 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 849.3 MB in the end (delta: 75.2 MB). Peak memory consumption was 75.2 MB. Max. memory is 15.3 GB.
[2020-11-25 14:59:58,046 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.75 ms. Allocated memory is still 1.0 GB. Free memory was 849.3 MB in the beginning and 840.4 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 14:59:58,047 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1005.15 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 48.2 MB). Free memory was 840.4 MB in the beginning and 750.3 MB in the end (delta: 90.1 MB). Peak memory consumption was 138.3 MB. Max. memory is 15.3 GB.
[2020-11-25 14:59:58,048 INFO  L168              Benchmark]: BlockEncodingV2 took 117.58 ms. Allocated memory is still 1.1 GB. Free memory was 750.3 MB in the beginning and 708.2 MB in the end (delta: 42.0 MB). Peak memory consumption was 42.0 MB. Max. memory is 15.3 GB.
[2020-11-25 14:59:58,048 INFO  L168              Benchmark]: BuchiAutomizer took 896917.80 ms. Allocated memory was 1.1 GB in the beginning and 6.5 GB in the end (delta: 5.4 GB). Free memory was 708.2 MB in the beginning and 3.7 GB in the end (delta: -3.0 GB). Peak memory consumption was 5.8 GB. Max. memory is 15.3 GB.
[2020-11-25 14:59:58,050 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2492 locations, 4284 edges
  - StatisticsResult: Encoded RCFG
    2448 locations, 4166 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 78.23 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 54.18 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 12.74 ms. Allocated memory is still 1.0 GB. Free memory is still 924.5 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 527.45 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 849.3 MB in the end (delta: 75.2 MB). Peak memory consumption was 75.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.75 ms. Allocated memory is still 1.0 GB. Free memory was 849.3 MB in the beginning and 840.4 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1005.15 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 48.2 MB). Free memory was 840.4 MB in the beginning and 750.3 MB in the end (delta: 90.1 MB). Peak memory consumption was 138.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 117.58 ms. Allocated memory is still 1.1 GB. Free memory was 750.3 MB in the beginning and 708.2 MB in the end (delta: 42.0 MB). Peak memory consumption was 42.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 896917.80 ms. Allocated memory was 1.1 GB in the beginning and 6.5 GB in the end (delta: 5.4 GB). Free memory was 708.2 MB in the beginning and 3.7 GB in the end (delta: -3.0 GB). Peak memory consumption was 5.8 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1051 locations, 1324 edges
  - StatisticsResult: BuchiProgram size
    2492 locations, 4284 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
