This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 03:30:09,672 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 03:30:09,675 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 03:30:09,687 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 03:30:09,687 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 03:30:09,688 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 03:30:09,689 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 03:30:09,690 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 03:30:09,692 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 03:30:09,692 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 03:30:09,693 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 03:30:09,693 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 03:30:09,694 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 03:30:09,695 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 03:30:09,696 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 03:30:09,696 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 03:30:09,697 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 03:30:09,698 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 03:30:09,700 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 03:30:09,701 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 03:30:09,702 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 03:30:09,702 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 03:30:09,704 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 03:30:09,704 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 03:30:09,704 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 03:30:09,705 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 03:30:09,705 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 03:30:09,706 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 03:30:09,706 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 03:30:09,706 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 03:30:09,707 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 03:30:09,707 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 03:30:09,708 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 03:30:09,708 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 03:30:09,709 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 03:30:09,709 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 03:30:09,709 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 03:30:09,710 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 03:30:09,710 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 03:30:09,710 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 03:30:09,711 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 03:30:09,711 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 03:30:09,718 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 03:30:09,719 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 03:30:09,719 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 03:30:09,720 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 03:30:09,720 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 03:30:09,720 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 03:30:09,720 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 03:30:09,720 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 03:30:09,720 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 03:30:09,720 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 03:30:09,720 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 03:30:09,721 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 03:30:09,721 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 03:30:09,721 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 03:30:09,721 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 03:30:09,721 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 03:30:09,721 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 03:30:09,721 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 03:30:09,721 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 03:30:09,722 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 03:30:09,722 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 03:30:09,722 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 03:30:09,722 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 03:30:09,722 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 03:30:09,722 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 03:30:09,722 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 03:30:09,742 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 03:30:09,753 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 03:30:09,756 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 03:30:09,757 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 03:30:09,757 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 03:30:09,758 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_approve.bpl
[2020-11-25 03:30:09,758 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_approve.bpl'
[2020-11-25 03:30:09,879 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 03:30:09,881 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 03:30:09,881 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 03:30:09,881 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 03:30:09,881 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 03:30:09,898 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:30:09" (1/1) ...
[2020-11-25 03:30:09,900 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:30:09" (1/1) ...
[2020-11-25 03:30:09,945 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:30:09" (1/1) ...
[2020-11-25 03:30:09,946 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:30:09" (1/1) ...
[2020-11-25 03:30:09,978 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:30:09" (1/1) ...
[2020-11-25 03:30:10,001 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:30:09" (1/1) ...
[2020-11-25 03:30:10,018 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:30:09" (1/1) ...
[2020-11-25 03:30:10,038 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 03:30:10,039 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 03:30:10,039 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 03:30:10,041 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 03:30:10,045 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:30:09" (1/1) ...
[2020-11-25 03:30:10,076 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && store_Governable[this] == old(store_Governable[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:30:10,082 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && store_Governable[this] == old(store_Governable[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:30:10,090 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && store_Governable[this] == old(store_Governable[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:30:10,097 INFO  L636   opiaSpecLangObserver]: Parsed ( p1!=msg.sender || p2!=spender_s347 ) to BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[spender_s347,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]
[2020-11-25 03:30:10,100 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _allowances_ERC20[this][msg.sender][spender_s347]==amount_s347 ) && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this][p1][p2]==( old(_allowances_ERC20[this][p1][p2]) ) ) && store_Governable[this]==( old(store_Governable[this]) ) ) && _cap_ERC20Capped[this]==( old(_cap_ERC20Capped[this]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,approve~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],[IdentifierExpression[spender_s347,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],IdentifierExpression[amount_s347,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[store_Governable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[store_Governable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Capped,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Capped,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]]
[2020-11-25 03:30:10,110 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && store_Governable[this] == old(store_Governable[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:30:10,111 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_approve_ERC200) ==> ( <>AP(success_approve_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 03:30:10,132 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:30:10 PropertyContainer
[2020-11-25 03:30:10,132 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 03:30:10,132 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 03:30:10,132 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 03:30:10,132 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 03:30:10,133 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:30:09" (1/2) ...
[2020-11-25 03:30:10,134 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 03:30:10,134 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 03:30:10,160 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:30:10" (2/2) ...
[2020-11-25 03:30:10,161 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 03:30:10,161 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 03:30:10,161 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 03:30:10,161 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 03:30:10,162 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:30:09" (1/2) ...
[2020-11-25 03:30:10,218 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 03:30:10,218 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 03:30:10,218 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:30:10,218 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 03:30:10,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 03:30:10,219 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 03:30:10,219 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 03:30:10,219 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 03:30:10,219 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 03:30:10,219 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 03:30:10,219 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 03:30:10,219 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 03:30:10,219 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 03:30:10,219 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 03:30:10,220 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 03:30:10,220 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:30:10,220 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 03:30:10,220 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 03:30:10,220 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:30:10,220 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 03:30:10,220 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:30:10,220 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 03:30:10,221 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 03:30:10,221 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 03:30:10,221 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 03:30:10,221 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:30:10,221 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 03:30:10,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 03:30:10,221 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 03:30:10,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 03:30:10,221 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 03:30:10,221 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 03:30:10,222 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 03:30:10,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 03:30:10,222 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 03:30:10,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 03:30:10,222 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 03:30:10,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 03:30:10,222 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:30:10,222 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:30:10,222 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:30:10,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:30:10,223 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:30:10,223 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:30:10,223 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:30:10,223 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:30:10,223 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:30:10,223 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 03:30:10,223 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:30:10,223 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 03:30:10,223 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 03:30:10,224 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 03:30:10,227 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 03:30:10,227 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 03:30:10,227 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 03:30:10,227 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 03:30:10,227 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 03:30:10,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 03:30:10,228 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 03:30:10,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 03:30:10,228 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 03:30:10,228 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 03:30:10,229 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 03:30:10,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 03:30:10,229 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 03:30:10,229 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 03:30:10,229 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 03:30:10,230 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 03:30:10,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 03:30:10,230 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 03:30:10,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 03:30:10,230 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 03:30:10,230 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped
[2020-11-25 03:30:10,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped
[2020-11-25 03:30:10,231 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped
[2020-11-25 03:30:10,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped
[2020-11-25 03:30:10,231 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 03:30:10,231 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 03:30:10,231 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 03:30:10,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 03:30:10,232 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 03:30:10,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 03:30:10,232 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 03:30:10,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 03:30:10,232 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 03:30:10,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 03:30:10,233 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 03:30:10,233 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 03:30:10,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 03:30:10,233 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 03:30:10,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 03:30:10,233 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-25 03:30:10,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-25 03:30:10,234 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-25 03:30:10,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-25 03:30:10,234 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 03:30:10,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 03:30:10,234 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 03:30:10,235 INFO  L130     BoogieDeclarations]: Found specification of procedure Storage_Storage_NoBaseCtor__success
[2020-11-25 03:30:10,235 INFO  L130     BoogieDeclarations]: Found specification of procedure Storage_Storage
[2020-11-25 03:30:10,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure Storage_Storage
[2020-11-25 03:30:10,235 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_Storage
[2020-11-25 03:30:10,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_Storage
[2020-11-25 03:30:10,235 INFO  L130     BoogieDeclarations]: Found specification of procedure setController~address_Storage
[2020-11-25 03:30:10,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure setController~address_Storage
[2020-11-25 03:30:10,236 INFO  L130     BoogieDeclarations]: Found specification of procedure isGovernance~address_Storage
[2020-11-25 03:30:10,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure isGovernance~address_Storage
[2020-11-25 03:30:10,236 INFO  L130     BoogieDeclarations]: Found specification of procedure isController~address_Storage
[2020-11-25 03:30:10,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure isController~address_Storage
[2020-11-25 03:30:10,236 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Storage
[2020-11-25 03:30:10,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Storage
[2020-11-25 03:30:10,237 INFO  L130     BoogieDeclarations]: Found specification of procedure controller_Storage
[2020-11-25 03:30:10,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure controller_Storage
[2020-11-25 03:30:10,237 INFO  L130     BoogieDeclarations]: Found specification of procedure Governable_Governable_NoBaseCtor__success
[2020-11-25 03:30:10,237 INFO  L130     BoogieDeclarations]: Found specification of procedure Governable_Governable
[2020-11-25 03:30:10,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure Governable_Governable
[2020-11-25 03:30:10,238 INFO  L130     BoogieDeclarations]: Found specification of procedure setStorage~address_Governable
[2020-11-25 03:30:10,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure setStorage~address_Governable
[2020-11-25 03:30:10,238 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Governable
[2020-11-25 03:30:10,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Governable
[2020-11-25 03:30:10,238 INFO  L130     BoogieDeclarations]: Found specification of procedure store_Governable
[2020-11-25 03:30:10,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure store_Governable
[2020-11-25 03:30:10,239 INFO  L130     BoogieDeclarations]: Found specification of procedure RewardToken_RewardToken_NoBaseCtor__success
[2020-11-25 03:30:10,239 INFO  L130     BoogieDeclarations]: Found specification of procedure RewardToken_RewardToken
[2020-11-25 03:30:10,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure RewardToken_RewardToken
[2020-11-25 03:30:10,239 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_RewardToken
[2020-11-25 03:30:10,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_RewardToken
[2020-11-25 03:30:10,239 INFO  L130     BoogieDeclarations]: Found specification of procedure HARD_CAP_RewardToken
[2020-11-25 03:30:10,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure HARD_CAP_RewardToken
[2020-11-25 03:30:10,240 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 03:30:10,240 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 03:30:10,240 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 03:30:10,241 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 03:30:10,241 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 03:30:10,241 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyGovernance_pre__success
[2020-11-25 03:30:10,241 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyStoreGovernance_pre__success
[2020-11-25 03:30:10,241 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 03:30:10,241 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 03:30:10,242 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 03:30:10,242 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 03:30:10,242 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 03:30:10,242 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 03:30:10,242 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 03:30:10,242 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 03:30:10,243 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 03:30:10,243 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 03:30:10,243 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 03:30:10,243 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 03:30:10,243 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 03:30:10,244 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 03:30:10,244 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Capped
[2020-11-25 03:30:10,244 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Capped
[2020-11-25 03:30:10,244 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 03:30:10,244 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 03:30:10,244 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 03:30:10,245 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 03:30:10,245 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Storage
[2020-11-25 03:30:10,245 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Storage
[2020-11-25 03:30:10,245 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Governable
[2020-11-25 03:30:10,245 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Governable
[2020-11-25 03:30:10,245 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_RewardToken
[2020-11-25 03:30:10,246 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 03:30:10,246 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 03:30:10,246 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 03:30:10,246 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:30:10,246 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 03:30:10,246 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 03:30:10,247 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 03:30:10,247 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 03:30:10,247 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 03:30:10,247 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 03:30:10,247 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:30:10,247 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 03:30:10,247 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 03:30:10,248 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:30:10,248 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:30:10,248 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:30:10,248 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 03:30:10,248 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:30:10,248 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 03:30:10,248 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:30:10,249 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:30:10,249 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 03:30:10,249 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 03:30:10,249 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 03:30:10,249 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 03:30:10,249 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 03:30:10,249 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:30:10,250 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:30:10,250 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:30:10,250 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 03:30:10,250 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:30:10,250 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:30:10,250 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:30:10,250 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:30:10,251 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:30:10,251 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:30:10,251 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:30:10,251 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:30:10,251 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:30:10,251 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:30:10,251 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:30:10,252 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:30:10,252 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 03:30:10,252 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:30:10,252 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 03:30:10,252 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 03:30:10,252 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 03:30:10,252 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 03:30:10,253 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 03:30:10,253 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 03:30:10,253 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 03:30:10,253 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 03:30:10,253 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 03:30:10,253 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 03:30:10,253 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 03:30:10,254 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 03:30:10,254 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 03:30:10,254 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 03:30:10,254 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 03:30:10,254 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 03:30:10,254 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 03:30:10,254 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 03:30:10,254 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 03:30:10,255 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 03:30:10,255 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 03:30:10,255 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 03:30:10,255 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 03:30:10,255 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 03:30:10,255 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 03:30:10,255 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__success
[2020-11-25 03:30:10,256 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__fail
[2020-11-25 03:30:10,256 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 03:30:10,256 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 03:30:10,256 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 03:30:10,256 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 03:30:10,256 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 03:30:10,257 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 03:30:10,257 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 03:30:10,257 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 03:30:10,257 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 03:30:10,257 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 03:30:10,257 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 03:30:10,257 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 03:30:10,258 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 03:30:10,258 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 03:30:10,258 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 03:30:10,258 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-25 03:30:10,258 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-25 03:30:10,258 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-25 03:30:10,258 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-25 03:30:10,259 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 03:30:10,259 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 03:30:10,259 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 03:30:10,259 INFO  L130     BoogieDeclarations]: Found specification of procedure Storage_Storage_NoBaseCtor__fail
[2020-11-25 03:30:10,259 INFO  L130     BoogieDeclarations]: Found specification of procedure Storage_Storage__success
[2020-11-25 03:30:10,259 INFO  L130     BoogieDeclarations]: Found specification of procedure Storage_Storage__fail
[2020-11-25 03:30:10,259 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_Storage__success
[2020-11-25 03:30:10,260 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_Storage__fail
[2020-11-25 03:30:10,260 INFO  L130     BoogieDeclarations]: Found specification of procedure setController~address_Storage__success
[2020-11-25 03:30:10,260 INFO  L130     BoogieDeclarations]: Found specification of procedure setController~address_Storage__fail
[2020-11-25 03:30:10,260 INFO  L130     BoogieDeclarations]: Found specification of procedure isGovernance~address_Storage__success
[2020-11-25 03:30:10,260 INFO  L130     BoogieDeclarations]: Found specification of procedure isGovernance~address_Storage__fail
[2020-11-25 03:30:10,260 INFO  L130     BoogieDeclarations]: Found specification of procedure isController~address_Storage__success
[2020-11-25 03:30:10,260 INFO  L130     BoogieDeclarations]: Found specification of procedure isController~address_Storage__fail
[2020-11-25 03:30:10,260 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Storage__success
[2020-11-25 03:30:10,261 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Storage__fail
[2020-11-25 03:30:10,261 INFO  L130     BoogieDeclarations]: Found specification of procedure controller_Storage__success
[2020-11-25 03:30:10,261 INFO  L130     BoogieDeclarations]: Found specification of procedure controller_Storage__fail
[2020-11-25 03:30:10,261 INFO  L130     BoogieDeclarations]: Found specification of procedure Governable_Governable_NoBaseCtor__fail
[2020-11-25 03:30:10,261 INFO  L130     BoogieDeclarations]: Found specification of procedure Governable_Governable__success
[2020-11-25 03:30:10,261 INFO  L130     BoogieDeclarations]: Found specification of procedure Governable_Governable__fail
[2020-11-25 03:30:10,262 INFO  L130     BoogieDeclarations]: Found specification of procedure setStorage~address_Governable__success
[2020-11-25 03:30:10,262 INFO  L130     BoogieDeclarations]: Found specification of procedure setStorage~address_Governable__fail
[2020-11-25 03:30:10,262 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Governable__success
[2020-11-25 03:30:10,262 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Governable__fail
[2020-11-25 03:30:10,262 INFO  L130     BoogieDeclarations]: Found specification of procedure store_Governable__success
[2020-11-25 03:30:10,262 INFO  L130     BoogieDeclarations]: Found specification of procedure store_Governable__fail
[2020-11-25 03:30:10,262 INFO  L130     BoogieDeclarations]: Found specification of procedure RewardToken_RewardToken_NoBaseCtor__fail
[2020-11-25 03:30:10,262 INFO  L130     BoogieDeclarations]: Found specification of procedure RewardToken_RewardToken__success
[2020-11-25 03:30:10,262 INFO  L130     BoogieDeclarations]: Found specification of procedure RewardToken_RewardToken__fail
[2020-11-25 03:30:10,262 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_RewardToken__success
[2020-11-25 03:30:10,262 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_RewardToken__fail
[2020-11-25 03:30:10,262 INFO  L130     BoogieDeclarations]: Found specification of procedure HARD_CAP_RewardToken__success
[2020-11-25 03:30:10,263 INFO  L130     BoogieDeclarations]: Found specification of procedure HARD_CAP_RewardToken__fail
[2020-11-25 03:30:10,263 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 03:30:10,263 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 03:30:10,263 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 03:30:10,263 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 03:30:10,263 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 03:30:10,263 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyGovernance_pre__fail
[2020-11-25 03:30:10,263 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyStoreGovernance_pre__fail
[2020-11-25 03:30:10,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 03:30:10,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 03:30:10,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 03:30:10,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 03:30:10,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:30:10,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:30:10,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 03:30:10,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 03:30:10,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 03:30:10,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 03:30:10,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 03:30:10,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 03:30:10,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 03:30:10,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 03:30:10,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:30:10,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:30:10,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 03:30:10,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 03:30:10,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:30:10,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:30:10,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:30:10,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 03:30:10,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:30:10,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:30:10,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 03:30:10,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 03:30:10,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:30:10,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 03:30:10,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 03:30:10,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 03:30:10,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:30:10,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 03:30:10,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:30:10,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:30:10,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 03:30:10,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 03:30:10,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 03:30:10,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 03:30:10,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:30:10,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 03:30:10,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:30:10,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:30:10,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:30:10,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 03:30:10,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:30:10,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:30:10,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:30:10,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:30:10,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:30:10,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:30:10,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:30:10,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:30:10,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:30:10,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:30:10,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:30:10,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:30:10,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:30:10,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:30:10,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 03:30:10,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 03:30:10,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:30:10,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:30:10,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 03:30:10,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 03:30:10,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 03:30:10,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 03:30:10,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 03:30:10,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 03:30:10,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 03:30:10,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 03:30:10,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 03:30:10,268 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 03:30:10,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 03:30:10,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 03:30:10,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 03:30:10,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 03:30:10,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 03:30:10,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 03:30:10,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 03:30:10,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 03:30:10,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 03:30:10,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 03:30:10,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 03:30:10,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 03:30:10,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 03:30:10,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 03:30:10,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 03:30:10,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 03:30:10,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 03:30:10,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 03:30:10,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 03:30:10,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 03:30:10,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 03:30:10,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 03:30:10,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 03:30:10,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 03:30:10,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__fail
[2020-11-25 03:30:10,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__success
[2020-11-25 03:30:10,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 03:30:10,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 03:30:10,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 03:30:10,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 03:30:10,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 03:30:10,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 03:30:10,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 03:30:10,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 03:30:10,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 03:30:10,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 03:30:10,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 03:30:10,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 03:30:10,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 03:30:10,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 03:30:10,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 03:30:10,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 03:30:10,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 03:30:10,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 03:30:10,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-25 03:30:10,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-25 03:30:10,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-25 03:30:10,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-25 03:30:10,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 03:30:10,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 03:30:10,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 03:30:10,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 03:30:10,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure Storage_Storage_NoBaseCtor__fail
[2020-11-25 03:30:10,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure Storage_Storage_NoBaseCtor__success
[2020-11-25 03:30:10,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure Storage_Storage__fail
[2020-11-25 03:30:10,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure Storage_Storage__success
[2020-11-25 03:30:10,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_Storage__fail
[2020-11-25 03:30:10,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_Storage__success
[2020-11-25 03:30:10,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure setController~address_Storage__fail
[2020-11-25 03:30:10,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure setController~address_Storage__success
[2020-11-25 03:30:10,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure isGovernance~address_Storage__fail
[2020-11-25 03:30:10,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure isGovernance~address_Storage__success
[2020-11-25 03:30:10,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure isController~address_Storage__fail
[2020-11-25 03:30:10,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure isController~address_Storage__success
[2020-11-25 03:30:10,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Storage__fail
[2020-11-25 03:30:10,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Storage__success
[2020-11-25 03:30:10,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure controller_Storage__fail
[2020-11-25 03:30:10,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure controller_Storage__success
[2020-11-25 03:30:10,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure Governable_Governable_NoBaseCtor__fail
[2020-11-25 03:30:10,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure Governable_Governable_NoBaseCtor__success
[2020-11-25 03:30:10,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure Governable_Governable__fail
[2020-11-25 03:30:10,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure Governable_Governable__success
[2020-11-25 03:30:10,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure setStorage~address_Governable__fail
[2020-11-25 03:30:10,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure setStorage~address_Governable__success
[2020-11-25 03:30:10,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Governable__fail
[2020-11-25 03:30:10,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Governable__success
[2020-11-25 03:30:10,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure store_Governable__fail
[2020-11-25 03:30:10,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure store_Governable__success
[2020-11-25 03:30:10,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure RewardToken_RewardToken_NoBaseCtor__fail
[2020-11-25 03:30:10,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure RewardToken_RewardToken_NoBaseCtor__success
[2020-11-25 03:30:10,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure RewardToken_RewardToken__fail
[2020-11-25 03:30:10,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure RewardToken_RewardToken__success
[2020-11-25 03:30:10,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_RewardToken__fail
[2020-11-25 03:30:10,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_RewardToken__success
[2020-11-25 03:30:10,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure HARD_CAP_RewardToken__fail
[2020-11-25 03:30:10,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure HARD_CAP_RewardToken__success
[2020-11-25 03:30:10,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 03:30:10,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 03:30:10,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 03:30:10,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 03:30:10,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 03:30:10,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 03:30:10,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 03:30:10,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 03:30:10,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 03:30:10,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 03:30:10,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyGovernance_pre__fail
[2020-11-25 03:30:10,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyGovernance_pre__success
[2020-11-25 03:30:10,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyStoreGovernance_pre__fail
[2020-11-25 03:30:10,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyStoreGovernance_pre__success
[2020-11-25 03:30:10,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 03:30:10,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 03:30:10,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 03:30:10,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 03:30:10,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 03:30:10,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 03:30:10,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 03:30:10,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 03:30:10,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 03:30:10,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 03:30:10,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 03:30:10,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 03:30:10,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 03:30:10,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 03:30:10,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Capped
[2020-11-25 03:30:10,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Capped
[2020-11-25 03:30:10,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 03:30:10,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 03:30:10,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 03:30:10,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 03:30:10,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Storage
[2020-11-25 03:30:10,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Storage
[2020-11-25 03:30:10,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Governable
[2020-11-25 03:30:10,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Governable
[2020-11-25 03:30:10,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_RewardToken
[2020-11-25 03:30:10,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 03:30:10,278 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 03:30:10,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 03:30:10,571 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:30:10,571 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:30:10,571 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:30:11,488 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:30:11,705 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 03:30:11,705 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-25 03:30:11,708 INFO  L202        PluginConnector]: Adding new model RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:30:11 BoogieIcfgContainer
[2020-11-25 03:30:11,708 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:30:10" (2/2) ...
[2020-11-25 03:30:11,708 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 03:30:11,708 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@30e7ccb8 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:30:11, skipping insertion in model container
[2020-11-25 03:30:11,708 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 03:30:11,708 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 03:30:11,708 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 03:30:11,709 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 03:30:11,709 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:30:09" (1/3) ...
[2020-11-25 03:30:11,710 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@3aafd213 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:30:11, skipping insertion in model container
[2020-11-25 03:30:11,710 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:30:10" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 03:30:11,740 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:30:11 NWAContainer
[2020-11-25 03:30:11,740 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 03:30:11,740 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 03:30:11,740 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 03:30:11,741 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 03:30:11,741 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:30:11" (3/4) ...
[2020-11-25 03:30:11,742 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@6a95c995 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:30:11, skipping insertion in model container
[2020-11-25 03:30:11,742 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:30:11" (4/4) ...
[2020-11-25 03:30:11,744 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 03:30:11,750 INFO  L110   BuchiProductObserver]: Initial RCFG 4293 locations, 6254 edges
[2020-11-25 03:30:11,750 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 03:30:11,762 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 03:30:15,088 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 03:30:15,101 INFO  L110   BuchiProductObserver]: BuchiProgram size 11016 locations, 20418 edges
[2020-11-25 03:30:15,102 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:30:15 BoogieIcfgContainer
[2020-11-25 03:30:15,102 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 03:30:15,102 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 03:30:15,102 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 03:30:15,104 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 03:30:15,104 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:30:15" (1/1) ...
[2020-11-25 03:30:15,282 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_1 := div~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s186, b_s186, 535918673);
[2020-11-25 03:30:15,288 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_1 := div~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s186, b_s186, 535918673);
[2020-11-25 03:30:15,291 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_2 := mod~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s229, b_s229, -515736953);
[2020-11-25 03:30:15,298 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_2 := mod~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s229, b_s229, -515736953);
[2020-11-25 03:30:15,314 INFO  L313           BlockEncoder]: Initial Icfg 11016 locations, 20418 edges
[2020-11-25 03:30:15,314 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 03:30:15,315 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 03:30:15,315 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 03:30:15,315 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 03:30:15,335 INFO  L70    emoveInfeasibleEdges]: Removed 309 edges and 29 locations because of local infeasibility
[2020-11-25 03:30:15,353 INFO  L70        RemoveSinkStates]: Removed 200 edges and 133 locations by removing sink states
[2020-11-25 03:30:15,380 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 03:30:15,387 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 03:30:15,393 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 03:30:15,394 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 03:30:15,400 INFO  L313           BlockEncoder]: Encoded RCFG 10810 locations, 19844 edges
[2020-11-25 03:30:15,400 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:30:15 BasicIcfg
[2020-11-25 03:30:15,400 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 03:30:15,400 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 03:30:15,400 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 03:30:15,402 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 03:30:15,402 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:30:15,402 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:30:09" (1/6) ...
[2020-11-25 03:30:15,404 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2fe9eee3 and model type RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:30:15, skipping insertion in model container
[2020-11-25 03:30:15,404 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:30:15,404 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:30:10" (2/6) ...
[2020-11-25 03:30:15,404 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2fe9eee3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:30:15, skipping insertion in model container
[2020-11-25 03:30:15,404 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:30:15,404 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:30:11" (3/6) ...
[2020-11-25 03:30:15,404 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2fe9eee3 and model type RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:30:15, skipping insertion in model container
[2020-11-25 03:30:15,404 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:30:15,404 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:30:11" (4/6) ...
[2020-11-25 03:30:15,405 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2fe9eee3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:30:15, skipping insertion in model container
[2020-11-25 03:30:15,405 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:30:15,405 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:30:15" (5/6) ...
[2020-11-25 03:30:15,405 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2fe9eee3 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:30:15, skipping insertion in model container
[2020-11-25 03:30:15,405 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:30:15,405 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:30:15" (6/6) ...
[2020-11-25 03:30:15,406 INFO  L404   chiAutomizerObserver]: Analyzing ICFG RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_approve.bpl_BEv2
[2020-11-25 03:30:15,439 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 03:30:15,439 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 03:30:15,439 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 03:30:15,439 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 03:30:15,439 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 03:30:15,439 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 03:30:15,439 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 03:30:15,440 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 03:30:15,440 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 03:30:15,574 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10810 states.
[2020-11-25 03:30:15,641 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:30:15,641 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:30:15,641 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:30:15,648 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:30:15,648 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:30:15,648 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 03:30:15,648 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10810 states.
[2020-11-25 03:30:15,681 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:30:15,682 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:30:15,682 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:30:15,683 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:30:15,683 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11226]              assume null == 0;
[L11227]  CALL        call this := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L11227]  RET         call this := FreshRefGenerator__success();
[L11228]              assume now >= 0;
[L11229]              assume DType[this] == RewardToken;
[L11230]              assume msgvalue_MSG == 0;
[L11231]              gas := gas - 53000;
[L11232]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3169]               havoc __exception;
[L3170]               revert := false;
[L3171]   COND FALSE  !(__exception)
[L3202]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7628]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L7628]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND TRUE   revert
[L3202]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3203]               assume !revert && gas >= 0;
[L11232]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11233]              assume !revert && gas >= 0;

Loop:
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND TRUE   choice == 20
[L11092]              gas := gas - 21000;
[L11093]  COND FALSE  !(gas >= 0)
[L11236]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:30:15,700 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:30:15,700 INFO  L82        PathProgramCache]: Analyzing trace with hash -1235767909, now seen corresponding path program 1 times
[2020-11-25 03:30:15,705 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:30:15,724 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:30:15,767 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 03:30:15,769 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:30:15,769 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:30:16,149 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:30:16,158 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:30:16,158 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:30:16,159 INFO  L87              Difference]: Start difference. First operand 10810 states. Second operand 4 states.
[2020-11-25 03:30:17,107 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:30:17,107 INFO  L93              Difference]: Finished difference Result 5219 states and 6547 transitions.
[2020-11-25 03:30:17,107 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:30:17,109 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5219 states and 6547 transitions.
[2020-11-25 03:30:17,136 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:30:17,169 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5219 states to 5219 states and 6547 transitions.
[2020-11-25 03:30:17,170 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 03:30:17,173 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 990
[2020-11-25 03:30:17,173 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5219 states and 6547 transitions.
[2020-11-25 03:30:17,186 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:30:17,186 INFO  L728         BuchiCegarLoop]: Abstraction has 5219 states and 6547 transitions.
[2020-11-25 03:30:17,204 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5219 states and 6547 transitions.
[2020-11-25 03:30:17,276 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5219 to 5219.
[2020-11-25 03:30:17,277 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5219 states.
[2020-11-25 03:30:17,284 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5219 states to 5219 states and 6547 transitions.
[2020-11-25 03:30:17,285 INFO  L751         BuchiCegarLoop]: Abstraction has 5219 states and 6547 transitions.
[2020-11-25 03:30:17,285 INFO  L631         BuchiCegarLoop]: Abstraction has 5219 states and 6547 transitions.
[2020-11-25 03:30:17,285 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 03:30:17,285 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5219 states and 6547 transitions.
[2020-11-25 03:30:17,295 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:30:17,295 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:30:17,295 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:30:17,298 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:30:17,298 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11226]              assume null == 0;
[L11227]  CALL        call this := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L11227]  RET         call this := FreshRefGenerator__success();
[L11228]              assume now >= 0;
[L11229]              assume DType[this] == RewardToken;
[L11230]              assume msgvalue_MSG == 0;
[L11231]              gas := gas - 53000;
[L11232]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3169]               havoc __exception;
[L3170]               revert := false;
[L3171]   COND FALSE  !(__exception)
[L3202]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7628]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L7628]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND TRUE   revert
[L3202]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3203]               assume !revert && gas >= 0;
[L11232]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11233]              assume !revert && gas >= 0;
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND TRUE   revert
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND TRUE   revert
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:30:17,302 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:30:17,302 INFO  L82        PathProgramCache]: Analyzing trace with hash -125695918, now seen corresponding path program 1 times
[2020-11-25 03:30:17,304 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:30:17,313 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:30:17,336 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 03:30:17,337 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:30:17,337 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:30:17,338 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:30:17,338 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:30:17,338 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:30:17,338 INFO  L87              Difference]: Start difference. First operand 5219 states and 6547 transitions. cyclomatic complexity: 1330 Second operand 3 states.
[2020-11-25 03:30:17,526 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:30:17,526 INFO  L93              Difference]: Finished difference Result 6615 states and 8068 transitions.
[2020-11-25 03:30:17,526 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:30:17,527 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6615 states and 8068 transitions.
[2020-11-25 03:30:17,546 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:30:17,580 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6615 states to 6615 states and 8068 transitions.
[2020-11-25 03:30:17,580 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1376
[2020-11-25 03:30:17,581 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1376
[2020-11-25 03:30:17,582 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6615 states and 8068 transitions.
[2020-11-25 03:30:17,596 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:30:17,596 INFO  L728         BuchiCegarLoop]: Abstraction has 6615 states and 8068 transitions.
[2020-11-25 03:30:17,604 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6615 states and 8068 transitions.
[2020-11-25 03:30:17,669 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6615 to 5921.
[2020-11-25 03:30:17,669 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5921 states.
[2020-11-25 03:30:17,677 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5921 states to 5921 states and 7224 transitions.
[2020-11-25 03:30:17,677 INFO  L751         BuchiCegarLoop]: Abstraction has 5921 states and 7224 transitions.
[2020-11-25 03:30:17,677 INFO  L631         BuchiCegarLoop]: Abstraction has 5921 states and 7224 transitions.
[2020-11-25 03:30:17,677 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 03:30:17,677 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5921 states and 7224 transitions.
[2020-11-25 03:30:17,685 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:30:17,685 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:30:17,685 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:30:17,688 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:30:17,688 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11226]              assume null == 0;
[L11227]  CALL        call this := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L11227]  RET         call this := FreshRefGenerator__success();
[L11228]              assume now >= 0;
[L11229]              assume DType[this] == RewardToken;
[L11230]              assume msgvalue_MSG == 0;
[L11231]              gas := gas - 53000;
[L11232]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3169]               havoc __exception;
[L3170]               revert := false;
[L3171]   COND FALSE  !(__exception)
[L3202]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7628]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L7628]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7632]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L7632]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7633]   COND FALSE  !(revert)
[L7636]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L7636]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7637]   COND FALSE  !(revert)
[L7640]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6996]               assume msgsender_MSG != null;
[L6997]               Balance[this] := 0;
[L6998]               _name_ERC20Detailed[this] := 724207837;
[L6999]               _symbol_ERC20Detailed[this] := 724207837;
[L7000]               _decimals_ERC20Detailed[this] := 0;
[L7002]               _name_ERC20Detailed[this] := name_s952;
[L7003]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7004]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7025]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7026]   COND FALSE  !(revert)
[L7640]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7641]   COND FALSE  !(revert)
[L7644]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND TRUE   !(account_s734 != null)
[L6302]               revert := true;
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND TRUE   revert
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND TRUE   revert
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND TRUE   revert
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND TRUE   revert
[L7644]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7645]   COND TRUE   revert
[L3202]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3203]               assume !revert && gas >= 0;
[L11232]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11233]              assume !revert && gas >= 0;
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND TRUE   !(owner_s625 != null)
[L5977]               revert := true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND TRUE   revert
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND TRUE   !(owner_s625 != null)
[L5977]               revert := true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND TRUE   revert
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:30:17,692 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:30:17,693 INFO  L82        PathProgramCache]: Analyzing trace with hash -1254816105, now seen corresponding path program 1 times
[2020-11-25 03:30:17,694 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:30:17,705 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:30:17,779 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 52 trivial. 0 not checked.
[2020-11-25 03:30:17,779 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:30:17,779 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 03:30:17,780 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:30:17,780 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 03:30:17,780 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 03:30:17,780 INFO  L87              Difference]: Start difference. First operand 5921 states and 7224 transitions. cyclomatic complexity: 1305 Second operand 12 states.
[2020-11-25 03:30:18,192 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:30:18,192 INFO  L93              Difference]: Finished difference Result 5981 states and 7317 transitions.
[2020-11-25 03:30:18,192 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 03:30:18,192 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5981 states and 7317 transitions.
[2020-11-25 03:30:18,210 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:30:18,236 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5981 states to 5981 states and 7317 transitions.
[2020-11-25 03:30:18,236 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1210
[2020-11-25 03:30:18,237 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1210
[2020-11-25 03:30:18,238 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5981 states and 7317 transitions.
[2020-11-25 03:30:18,247 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:30:18,247 INFO  L728         BuchiCegarLoop]: Abstraction has 5981 states and 7317 transitions.
[2020-11-25 03:30:18,254 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5981 states and 7317 transitions.
[2020-11-25 03:30:18,316 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5981 to 5965.
[2020-11-25 03:30:18,316 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5965 states.
[2020-11-25 03:30:18,325 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5965 states to 5965 states and 7293 transitions.
[2020-11-25 03:30:18,325 INFO  L751         BuchiCegarLoop]: Abstraction has 5965 states and 7293 transitions.
[2020-11-25 03:30:18,326 INFO  L631         BuchiCegarLoop]: Abstraction has 5965 states and 7293 transitions.
[2020-11-25 03:30:18,326 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 03:30:18,326 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5965 states and 7293 transitions.
[2020-11-25 03:30:18,336 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:30:18,336 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:30:18,336 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:30:18,339 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:30:18,339 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11226]              assume null == 0;
[L11227]  CALL        call this := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L11227]  RET         call this := FreshRefGenerator__success();
[L11228]              assume now >= 0;
[L11229]              assume DType[this] == RewardToken;
[L11230]              assume msgvalue_MSG == 0;
[L11231]              gas := gas - 53000;
[L11232]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3169]               havoc __exception;
[L3170]               revert := false;
[L3171]   COND FALSE  !(__exception)
[L3202]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7628]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L7628]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7632]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L7632]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7633]   COND FALSE  !(revert)
[L7636]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L7636]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7637]   COND FALSE  !(revert)
[L7640]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6996]               assume msgsender_MSG != null;
[L6997]               Balance[this] := 0;
[L6998]               _name_ERC20Detailed[this] := 724207837;
[L6999]               _symbol_ERC20Detailed[this] := 724207837;
[L7000]               _decimals_ERC20Detailed[this] := 0;
[L7002]               _name_ERC20Detailed[this] := name_s952;
[L7003]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7004]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7025]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7026]   COND FALSE  !(revert)
[L7640]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7641]   COND FALSE  !(revert)
[L7644]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND FALSE  !(DType[this] == RewardToken)
[L6413]   COND TRUE   DType[this] == ERC20Capped
[L6414]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND TRUE   !!__var_29
[L6251]               revert := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND TRUE   revert
[L6414]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6415]   COND TRUE   revert
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND TRUE   revert
[L7644]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7645]   COND TRUE   revert
[L3202]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3203]               assume !revert && gas >= 0;
[L11232]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11233]              assume !revert && gas >= 0;
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND TRUE   !(owner_s625 != null)
[L5977]               revert := true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND TRUE   revert
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND TRUE   !(owner_s625 != null)
[L5977]               revert := true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND TRUE   revert
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:30:18,343 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:30:18,343 INFO  L82        PathProgramCache]: Analyzing trace with hash -293842541, now seen corresponding path program 1 times
[2020-11-25 03:30:18,345 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:30:18,355 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:30:18,456 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 03:30:18,456 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:30:18,457 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:30:18,457 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:30:18,457 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:30:18,457 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:30:18,458 INFO  L87              Difference]: Start difference. First operand 5965 states and 7293 transitions. cyclomatic complexity: 1330 Second operand 3 states.
[2020-11-25 03:30:18,550 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:30:18,550 INFO  L93              Difference]: Finished difference Result 5974 states and 7302 transitions.
[2020-11-25 03:30:18,550 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:30:18,550 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5974 states and 7302 transitions.
[2020-11-25 03:30:18,566 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:30:18,586 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5974 states to 5974 states and 7302 transitions.
[2020-11-25 03:30:18,586 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1194
[2020-11-25 03:30:18,587 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1194
[2020-11-25 03:30:18,588 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5974 states and 7302 transitions.
[2020-11-25 03:30:18,594 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:30:18,594 INFO  L728         BuchiCegarLoop]: Abstraction has 5974 states and 7302 transitions.
[2020-11-25 03:30:18,600 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5974 states and 7302 transitions.
[2020-11-25 03:30:18,648 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5974 to 5966.
[2020-11-25 03:30:18,648 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5966 states.
[2020-11-25 03:30:18,657 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5966 states to 5966 states and 7294 transitions.
[2020-11-25 03:30:18,657 INFO  L751         BuchiCegarLoop]: Abstraction has 5966 states and 7294 transitions.
[2020-11-25 03:30:18,657 INFO  L631         BuchiCegarLoop]: Abstraction has 5966 states and 7294 transitions.
[2020-11-25 03:30:18,657 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 03:30:18,657 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5966 states and 7294 transitions.
[2020-11-25 03:30:18,666 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:30:18,666 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:30:18,666 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:30:18,668 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:30:18,668 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11226]              assume null == 0;
[L11227]  CALL        call this := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L11227]  RET         call this := FreshRefGenerator__success();
[L11228]              assume now >= 0;
[L11229]              assume DType[this] == RewardToken;
[L11230]              assume msgvalue_MSG == 0;
[L11231]              gas := gas - 53000;
[L11232]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3169]               havoc __exception;
[L3170]               revert := false;
[L3171]   COND FALSE  !(__exception)
[L3202]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7628]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L7628]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7632]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L7632]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7633]   COND FALSE  !(revert)
[L7636]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L7636]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7637]   COND FALSE  !(revert)
[L7640]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6996]               assume msgsender_MSG != null;
[L6997]               Balance[this] := 0;
[L6998]               _name_ERC20Detailed[this] := 724207837;
[L6999]               _symbol_ERC20Detailed[this] := 724207837;
[L7000]               _decimals_ERC20Detailed[this] := 0;
[L7002]               _name_ERC20Detailed[this] := name_s952;
[L7003]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7004]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7025]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7026]   COND FALSE  !(revert)
[L7640]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7641]   COND FALSE  !(revert)
[L7644]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND TRUE   !!__var_29
[L6251]               revert := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND TRUE   revert
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND TRUE   revert
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND TRUE   revert
[L7644]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7645]   COND TRUE   revert
[L3202]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3203]               assume !revert && gas >= 0;
[L11232]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11233]              assume !revert && gas >= 0;
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND TRUE   !(owner_s625 != null)
[L5977]               revert := true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND TRUE   revert
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND TRUE   !(owner_s625 != null)
[L5977]               revert := true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND TRUE   revert
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:30:18,673 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:30:18,674 INFO  L82        PathProgramCache]: Analyzing trace with hash 38754716, now seen corresponding path program 1 times
[2020-11-25 03:30:18,675 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:30:18,689 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:30:18,724 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 03:30:18,724 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:30:18,724 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:30:18,724 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:30:18,725 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:30:18,725 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:30:18,725 INFO  L87              Difference]: Start difference. First operand 5966 states and 7294 transitions. cyclomatic complexity: 1330 Second operand 3 states.
[2020-11-25 03:30:18,828 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:30:18,829 INFO  L93              Difference]: Finished difference Result 6636 states and 7806 transitions.
[2020-11-25 03:30:18,829 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:30:18,829 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6636 states and 7806 transitions.
[2020-11-25 03:30:18,841 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:30:18,856 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6636 states to 6100 states and 7143 transitions.
[2020-11-25 03:30:18,856 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1229
[2020-11-25 03:30:18,857 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1282
[2020-11-25 03:30:18,857 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6100 states and 7143 transitions.
[2020-11-25 03:30:18,861 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:30:18,861 INFO  L728         BuchiCegarLoop]: Abstraction has 6100 states and 7143 transitions.
[2020-11-25 03:30:18,866 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6100 states and 7143 transitions.
[2020-11-25 03:30:18,899 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6100 to 5492.
[2020-11-25 03:30:18,899 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5492 states.
[2020-11-25 03:30:18,904 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5492 states to 5492 states and 6385 transitions.
[2020-11-25 03:30:18,904 INFO  L751         BuchiCegarLoop]: Abstraction has 5492 states and 6385 transitions.
[2020-11-25 03:30:18,904 INFO  L631         BuchiCegarLoop]: Abstraction has 5492 states and 6385 transitions.
[2020-11-25 03:30:18,904 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 03:30:18,904 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5492 states and 6385 transitions.
[2020-11-25 03:30:18,909 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:30:18,909 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:30:18,909 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:30:18,912 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:30:18,912 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11226]              assume null == 0;
[L11227]  CALL        call this := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L11227]  RET         call this := FreshRefGenerator__success();
[L11228]              assume now >= 0;
[L11229]              assume DType[this] == RewardToken;
[L11230]              assume msgvalue_MSG == 0;
[L11231]              gas := gas - 53000;
[L11232]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3169]               havoc __exception;
[L3170]               revert := false;
[L3171]   COND TRUE   __exception
[L3172]               __tmp__Balance := Balance;
[L3173]               __tmp__DType := DType;
[L3174]               __tmp__Alloc := Alloc;
[L3175]               __tmp__balance_ADDR := balance_ADDR;
[L3176]               __tmp__M_Ref_int := M_Ref_int;
[L3177]               __tmp__sum__balances0 := sum__balances0;
[L3178]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3179]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3180]               __tmp__sum__allowances1 := sum__allowances1;
[L3181]               __tmp__M_Ref_bool := M_Ref_bool;
[L3182]               __tmp__sum := sum;
[L3183]               __tmp__Length := Length;
[L3184]               __tmp__now := now;
[L3185]               __tmp___balances_ERC20 := _balances_ERC20;
[L3186]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3187]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3188]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3189]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3190]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L3191]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3192]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3193]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3194]               __tmp___owner_Ownable := _owner_Ownable;
[L3195]               __tmp__governance_Storage := governance_Storage;
[L3196]               __tmp__controller_Storage := controller_Storage;
[L3197]               __tmp__store_Governable := store_Governable;
[L3198]               __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L3199]   CALL        call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7587]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L7587]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7588]   COND FALSE  !(revert)
[L7591]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L7591]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7592]   COND FALSE  !(revert)
[L7595]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L7595]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7596]   COND FALSE  !(revert)
[L7599]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7009]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L7009]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7010]   COND FALSE  !(revert)
[L7013]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6982]               assume msgsender_MSG != null;
[L6983]               __tmp__Balance[this] := 0;
[L6984]               __tmp___name_ERC20Detailed[this] := 724207837;
[L6985]               __tmp___symbol_ERC20Detailed[this] := 724207837;
[L6986]               __tmp___decimals_ERC20Detailed[this] := 0;
[L6988]               __tmp___name_ERC20Detailed[this] := name_s952;
[L6989]               __tmp___symbol_ERC20Detailed[this] := symbol_s952;
[L6990]               __tmp___decimals_ERC20Detailed[this] := decimals_s952;
[L7013]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7014]   COND FALSE  !(revert)
[L7599]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7600]   COND FALSE  !(revert)
[L7603]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6351]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6356]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6357]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6357]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6358]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L7603]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7604]   COND FALSE  !(revert)
[L7607]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6699]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6703]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L6703]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6704]   COND FALSE  !(revert)
[L6707]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L6707]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6708]   COND FALSE  !(revert)
[L6711]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6351]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6356]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6357]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6357]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6358]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6711]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6712]   COND FALSE  !(revert)
[L6715]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]               assume msgsender_MSG != null;
[L6685]               __tmp__Balance[this] := 0;
[L6715]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6716]   COND FALSE  !(revert)
[L7607]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7608]   COND FALSE  !(revert)
[L7611]   CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L6831]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6831]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6832]   COND FALSE  !(revert)
[L6835]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L6835]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6836]   COND FALSE  !(revert)
[L6839]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L6839]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6840]   COND FALSE  !(revert)
[L6843]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6351]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6356]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6357]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6357]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6358]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6843]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6844]   COND FALSE  !(revert)
[L6847]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6699]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6703]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L6703]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6704]   COND FALSE  !(revert)
[L6707]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L6707]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6708]   COND FALSE  !(revert)
[L6711]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6351]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6356]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6357]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6357]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6358]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6711]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6712]   COND FALSE  !(revert)
[L6715]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]               assume msgsender_MSG != null;
[L6685]               __tmp__Balance[this] := 0;
[L6715]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6716]   COND FALSE  !(revert)
[L6847]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6848]   COND FALSE  !(revert)
[L6851]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6804]               assume msgsender_MSG != null;
[L6805]               __tmp__Balance[this] := 0;
[L6806]               __tmp___cap_ERC20Capped[this] := 0;
[L6808]   COND FALSE  !(!(cap_s886 > 0))
[L6812]               __tmp___cap_ERC20Capped[this] := cap_s886;
[L6851]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6852]   COND FALSE  !(revert)
[L7611]   RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L7612]   COND FALSE  !(revert)
[L7615]   CALL        call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7432]   CALL        call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7397]               assume msgsender_MSG != null;
[L7398]               __tmp__Balance[this] := 0;
[L7400]               __var_48 := null;
[L7401]   COND FALSE  !(!(_store_s1208 != null))
[L7405]               assume __tmp__DType[_store_s1208] == Storage;
[L7406]               __var_49 := _store_s1208;
[L7407]               __tmp__store_Governable[this] := __var_49;
[L7432]   RET         call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7433]   COND FALSE  !(revert)
[L7615]   RET         call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7616]   COND FALSE  !(revert)
[L7619]   CALL        call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7520]               assume msgsender_MSG != null;
[L7521]               __tmp__Balance[this] := 0;
[L7522]               __tmp__HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7524]   COND TRUE   __tmp__DType[this] == RewardToken
[L7525]   CALL        call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6548]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6553]   COND TRUE   __tmp__DType[this] == ERC20Capped
[L6554]   CALL        call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6554]   RET         call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6555]   COND FALSE  !(revert)
[L6571]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6576]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6581]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6582]   CALL        call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6666]   CALL        call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6260]   CALL        call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6260]   RET         call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6261]   COND FALSE  !(revert)
[L6264]   COND FALSE  !(!__var_30)
[L6268]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := false;
[L6666]   RET         call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6667]   COND FALSE  !(revert)
[L6582]   RET         call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6583]   COND FALSE  !(revert)
[L7525]   RET         call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7526]   COND FALSE  !(revert)
[L7532]   COND TRUE   __tmp__DType[this] == RewardToken
[L7533]   CALL        call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7488]               assume __tmp__DType[__tmp__store_Governable[this]] == Storage;
[L7489]               __var_54 := __tmp__governance_Storage[__tmp__store_Governable[this]];
[L7490]               __ret_0_ := __var_54;
[L7533]   RET         call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7534]   COND FALSE  !(revert)
[L7540]   COND TRUE   __tmp__DType[this] == RewardToken
[L7541]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L7541]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7542]   COND FALSE  !(revert)
[L7619]   RET         call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7620]   COND FALSE  !(revert)
[L3199]   RET         call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3200]               assume revert || gas < 0;
[L11232]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11233]              assume !revert && gas >= 0;
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND FALSE  !(!(owner_s625 != null))
[L5980]               __var_25 := null;
[L5981]   COND FALSE  !(!(spender_s625 != null))
[L5985]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5986]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5987]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5988]               assert { :EventEmitted "Approval_ERC20" } true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND FALSE  !(revert)
[L5247]               __ret_0_ := true;
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND FALSE  !(!(owner_s625 != null))
[L5980]               __var_25 := null;
[L5981]   COND FALSE  !(!(spender_s625 != null))
[L5985]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5986]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5987]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5988]               assert { :EventEmitted "Approval_ERC20" } true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND FALSE  !(revert)
[L5247]               __ret_0_ := true;
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:30:18,919 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:30:18,919 INFO  L82        PathProgramCache]: Analyzing trace with hash 5667308, now seen corresponding path program 1 times
[2020-11-25 03:30:18,920 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:30:18,934 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:30:19,146 INFO  L134       CoverageAnalysis]: Checked inductivity of 1651 backedges. 0 proven. 45 refuted. 0 times theorem prover too weak. 1606 trivial. 0 not checked.
[2020-11-25 03:30:19,146 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:30:19,146 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [3] total 3
[2020-11-25 03:30:19,147 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:30:19,147 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:30:19,147 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:30:19,147 INFO  L87              Difference]: Start difference. First operand 5492 states and 6385 transitions. cyclomatic complexity: 895 Second operand 3 states.
[2020-11-25 03:30:19,198 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:30:19,198 INFO  L93              Difference]: Finished difference Result 5495 states and 6388 transitions.
[2020-11-25 03:30:19,198 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:30:19,198 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5495 states and 6388 transitions.
[2020-11-25 03:30:19,207 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:30:19,219 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5495 states to 5495 states and 6388 transitions.
[2020-11-25 03:30:19,219 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1138
[2020-11-25 03:30:19,219 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1138
[2020-11-25 03:30:19,219 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5495 states and 6388 transitions.
[2020-11-25 03:30:19,223 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:30:19,223 INFO  L728         BuchiCegarLoop]: Abstraction has 5495 states and 6388 transitions.
[2020-11-25 03:30:19,228 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5495 states and 6388 transitions.
[2020-11-25 03:30:19,252 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5495 to 5493.
[2020-11-25 03:30:19,252 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5493 states.
[2020-11-25 03:30:19,257 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5493 states to 5493 states and 6386 transitions.
[2020-11-25 03:30:19,258 INFO  L751         BuchiCegarLoop]: Abstraction has 5493 states and 6386 transitions.
[2020-11-25 03:30:19,258 INFO  L631         BuchiCegarLoop]: Abstraction has 5493 states and 6386 transitions.
[2020-11-25 03:30:19,258 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 03:30:19,258 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5493 states and 6386 transitions.
[2020-11-25 03:30:19,263 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:30:19,263 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:30:19,263 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:30:19,265 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:30:19,265 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11226]              assume null == 0;
[L11227]  CALL        call this := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L11227]  RET         call this := FreshRefGenerator__success();
[L11228]              assume now >= 0;
[L11229]              assume DType[this] == RewardToken;
[L11230]              assume msgvalue_MSG == 0;
[L11231]              gas := gas - 53000;
[L11232]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3169]               havoc __exception;
[L3170]               revert := false;
[L3171]   COND TRUE   __exception
[L3172]               __tmp__Balance := Balance;
[L3173]               __tmp__DType := DType;
[L3174]               __tmp__Alloc := Alloc;
[L3175]               __tmp__balance_ADDR := balance_ADDR;
[L3176]               __tmp__M_Ref_int := M_Ref_int;
[L3177]               __tmp__sum__balances0 := sum__balances0;
[L3178]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3179]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3180]               __tmp__sum__allowances1 := sum__allowances1;
[L3181]               __tmp__M_Ref_bool := M_Ref_bool;
[L3182]               __tmp__sum := sum;
[L3183]               __tmp__Length := Length;
[L3184]               __tmp__now := now;
[L3185]               __tmp___balances_ERC20 := _balances_ERC20;
[L3186]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3187]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3188]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3189]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3190]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L3191]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3192]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3193]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3194]               __tmp___owner_Ownable := _owner_Ownable;
[L3195]               __tmp__governance_Storage := governance_Storage;
[L3196]               __tmp__controller_Storage := controller_Storage;
[L3197]               __tmp__store_Governable := store_Governable;
[L3198]               __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L3199]   CALL        call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7587]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L7587]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7588]   COND FALSE  !(revert)
[L7591]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L7591]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7592]   COND FALSE  !(revert)
[L7595]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L7595]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7596]   COND FALSE  !(revert)
[L7599]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7009]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L7009]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7010]   COND FALSE  !(revert)
[L7013]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6982]               assume msgsender_MSG != null;
[L6983]               __tmp__Balance[this] := 0;
[L6984]               __tmp___name_ERC20Detailed[this] := 724207837;
[L6985]               __tmp___symbol_ERC20Detailed[this] := 724207837;
[L6986]               __tmp___decimals_ERC20Detailed[this] := 0;
[L6988]               __tmp___name_ERC20Detailed[this] := name_s952;
[L6989]               __tmp___symbol_ERC20Detailed[this] := symbol_s952;
[L6990]               __tmp___decimals_ERC20Detailed[this] := decimals_s952;
[L7013]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7014]   COND FALSE  !(revert)
[L7599]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7600]   COND FALSE  !(revert)
[L7603]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND TRUE   __tmp__DType[this] == RewardToken
[L6347]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6347]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6348]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L7603]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7604]   COND FALSE  !(revert)
[L7607]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6699]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6703]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L6703]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6704]   COND FALSE  !(revert)
[L6707]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L6707]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6708]   COND FALSE  !(revert)
[L6711]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND TRUE   __tmp__DType[this] == RewardToken
[L6347]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6347]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6348]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6711]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6712]   COND FALSE  !(revert)
[L6715]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]               assume msgsender_MSG != null;
[L6685]               __tmp__Balance[this] := 0;
[L6715]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6716]   COND FALSE  !(revert)
[L7607]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7608]   COND FALSE  !(revert)
[L7611]   CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L6831]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6831]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6832]   COND FALSE  !(revert)
[L6835]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L6835]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6836]   COND FALSE  !(revert)
[L6839]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L6839]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6840]   COND FALSE  !(revert)
[L6843]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND TRUE   __tmp__DType[this] == RewardToken
[L6347]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6347]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6348]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6843]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6844]   COND FALSE  !(revert)
[L6847]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6699]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6703]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L6703]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6704]   COND FALSE  !(revert)
[L6707]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L6707]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6708]   COND FALSE  !(revert)
[L6711]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND TRUE   __tmp__DType[this] == RewardToken
[L6347]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6347]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6348]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6711]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6712]   COND FALSE  !(revert)
[L6715]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]               assume msgsender_MSG != null;
[L6685]               __tmp__Balance[this] := 0;
[L6715]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6716]   COND FALSE  !(revert)
[L6847]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6848]   COND FALSE  !(revert)
[L6851]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6804]               assume msgsender_MSG != null;
[L6805]               __tmp__Balance[this] := 0;
[L6806]               __tmp___cap_ERC20Capped[this] := 0;
[L6808]   COND FALSE  !(!(cap_s886 > 0))
[L6812]               __tmp___cap_ERC20Capped[this] := cap_s886;
[L6851]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6852]   COND FALSE  !(revert)
[L7611]   RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L7612]   COND FALSE  !(revert)
[L7615]   CALL        call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7432]   CALL        call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7397]               assume msgsender_MSG != null;
[L7398]               __tmp__Balance[this] := 0;
[L7400]               __var_48 := null;
[L7401]   COND FALSE  !(!(_store_s1208 != null))
[L7405]               assume __tmp__DType[_store_s1208] == Storage;
[L7406]               __var_49 := _store_s1208;
[L7407]               __tmp__store_Governable[this] := __var_49;
[L7432]   RET         call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7433]   COND FALSE  !(revert)
[L7615]   RET         call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7616]   COND FALSE  !(revert)
[L7619]   CALL        call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7520]               assume msgsender_MSG != null;
[L7521]               __tmp__Balance[this] := 0;
[L7522]               __tmp__HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7524]   COND TRUE   __tmp__DType[this] == RewardToken
[L7525]   CALL        call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6548]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6553]   COND TRUE   __tmp__DType[this] == ERC20Capped
[L6554]   CALL        call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6554]   RET         call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6555]   COND FALSE  !(revert)
[L6571]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6576]   COND TRUE   __tmp__DType[this] == ERC20Capped
[L6577]   CALL        call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6666]   CALL        call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6260]   CALL        call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6260]   RET         call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6261]   COND FALSE  !(revert)
[L6264]   COND FALSE  !(!__var_30)
[L6268]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := false;
[L6666]   RET         call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6667]   COND FALSE  !(revert)
[L6577]   RET         call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6578]   COND FALSE  !(revert)
[L7525]   RET         call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7526]   COND FALSE  !(revert)
[L7532]   COND TRUE   __tmp__DType[this] == RewardToken
[L7533]   CALL        call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7488]               assume __tmp__DType[__tmp__store_Governable[this]] == Storage;
[L7489]               __var_54 := __tmp__governance_Storage[__tmp__store_Governable[this]];
[L7490]               __ret_0_ := __var_54;
[L7533]   RET         call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7534]   COND FALSE  !(revert)
[L7540]   COND TRUE   __tmp__DType[this] == RewardToken
[L7541]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L7541]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7542]   COND FALSE  !(revert)
[L7619]   RET         call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7620]   COND FALSE  !(revert)
[L3199]   RET         call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3200]               assume revert || gas < 0;
[L11232]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11233]              assume !revert && gas >= 0;
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND FALSE  !(!(owner_s625 != null))
[L5980]               __var_25 := null;
[L5981]   COND FALSE  !(!(spender_s625 != null))
[L5985]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5986]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5987]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5988]               assert { :EventEmitted "Approval_ERC20" } true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND FALSE  !(revert)
[L5247]               __ret_0_ := true;
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND FALSE  !(!(owner_s625 != null))
[L5980]               __var_25 := null;
[L5981]   COND FALSE  !(!(spender_s625 != null))
[L5985]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5986]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5987]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5988]               assert { :EventEmitted "Approval_ERC20" } true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND FALSE  !(revert)
[L5247]               __ret_0_ := true;
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:30:19,271 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:30:19,271 INFO  L82        PathProgramCache]: Analyzing trace with hash -107085346, now seen corresponding path program 1 times
[2020-11-25 03:30:19,272 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:30:19,291 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:30:19,583 INFO  L134       CoverageAnalysis]: Checked inductivity of 1639 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1639 trivial. 0 not checked.
[2020-11-25 03:30:19,584 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:30:19,584 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 03:30:19,584 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:30:19,584 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 03:30:19,584 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 03:30:19,585 INFO  L87              Difference]: Start difference. First operand 5493 states and 6386 transitions. cyclomatic complexity: 895 Second operand 8 states.
[2020-11-25 03:30:21,092 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:30:21,093 INFO  L93              Difference]: Finished difference Result 7674 states and 9031 transitions.
[2020-11-25 03:30:21,093 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:30:21,093 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7674 states and 9031 transitions.
[2020-11-25 03:30:21,109 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:30:21,125 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7674 states to 7671 states and 9028 transitions.
[2020-11-25 03:30:21,125 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1603
[2020-11-25 03:30:21,126 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1603
[2020-11-25 03:30:21,126 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7671 states and 9028 transitions.
[2020-11-25 03:30:21,131 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:30:21,131 INFO  L728         BuchiCegarLoop]: Abstraction has 7671 states and 9028 transitions.
[2020-11-25 03:30:21,136 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7671 states and 9028 transitions.
[2020-11-25 03:30:21,176 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7671 to 7585.
[2020-11-25 03:30:21,176 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7585 states.
[2020-11-25 03:30:21,185 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7585 states to 7585 states and 8942 transitions.
[2020-11-25 03:30:21,185 INFO  L751         BuchiCegarLoop]: Abstraction has 7585 states and 8942 transitions.
[2020-11-25 03:30:21,185 INFO  L631         BuchiCegarLoop]: Abstraction has 7585 states and 8942 transitions.
[2020-11-25 03:30:21,185 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 03:30:21,185 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7585 states and 8942 transitions.
[2020-11-25 03:30:21,195 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:30:21,196 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:30:21,196 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:30:21,199 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:30:21,199 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11226]              assume null == 0;
[L11227]  CALL        call this := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L11227]  RET         call this := FreshRefGenerator__success();
[L11228]              assume now >= 0;
[L11229]              assume DType[this] == RewardToken;
[L11230]              assume msgvalue_MSG == 0;
[L11231]              gas := gas - 53000;
[L11232]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3169]               havoc __exception;
[L3170]               revert := false;
[L3171]   COND TRUE   __exception
[L3172]               __tmp__Balance := Balance;
[L3173]               __tmp__DType := DType;
[L3174]               __tmp__Alloc := Alloc;
[L3175]               __tmp__balance_ADDR := balance_ADDR;
[L3176]               __tmp__M_Ref_int := M_Ref_int;
[L3177]               __tmp__sum__balances0 := sum__balances0;
[L3178]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3179]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3180]               __tmp__sum__allowances1 := sum__allowances1;
[L3181]               __tmp__M_Ref_bool := M_Ref_bool;
[L3182]               __tmp__sum := sum;
[L3183]               __tmp__Length := Length;
[L3184]               __tmp__now := now;
[L3185]               __tmp___balances_ERC20 := _balances_ERC20;
[L3186]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3187]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3188]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3189]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3190]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L3191]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3192]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3193]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3194]               __tmp___owner_Ownable := _owner_Ownable;
[L3195]               __tmp__governance_Storage := governance_Storage;
[L3196]               __tmp__controller_Storage := controller_Storage;
[L3197]               __tmp__store_Governable := store_Governable;
[L3198]               __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L3199]   CALL        call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7587]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L7587]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7588]   COND FALSE  !(revert)
[L7591]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L7591]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7592]   COND FALSE  !(revert)
[L7595]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L7595]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7596]   COND FALSE  !(revert)
[L7599]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7009]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L7009]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7010]   COND FALSE  !(revert)
[L7013]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6982]               assume msgsender_MSG != null;
[L6983]               __tmp__Balance[this] := 0;
[L6984]               __tmp___name_ERC20Detailed[this] := 724207837;
[L6985]               __tmp___symbol_ERC20Detailed[this] := 724207837;
[L6986]               __tmp___decimals_ERC20Detailed[this] := 0;
[L6988]               __tmp___name_ERC20Detailed[this] := name_s952;
[L6989]               __tmp___symbol_ERC20Detailed[this] := symbol_s952;
[L6990]               __tmp___decimals_ERC20Detailed[this] := decimals_s952;
[L7013]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7014]   COND FALSE  !(revert)
[L7599]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7600]   COND FALSE  !(revert)
[L7603]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND TRUE   __tmp__DType[this] == RewardToken
[L6347]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6347]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6348]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L7603]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7604]   COND FALSE  !(revert)
[L7607]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6699]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6703]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L6703]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6704]   COND FALSE  !(revert)
[L6707]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L6707]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6708]   COND FALSE  !(revert)
[L6711]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND TRUE   __tmp__DType[this] == RewardToken
[L6347]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6347]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6348]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6711]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6712]   COND FALSE  !(revert)
[L6715]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]               assume msgsender_MSG != null;
[L6685]               __tmp__Balance[this] := 0;
[L6715]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6716]   COND FALSE  !(revert)
[L7607]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7608]   COND FALSE  !(revert)
[L7611]   CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L6831]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6831]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6832]   COND FALSE  !(revert)
[L6835]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L6835]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6836]   COND FALSE  !(revert)
[L6839]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L6839]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6840]   COND FALSE  !(revert)
[L6843]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND TRUE   __tmp__DType[this] == RewardToken
[L6347]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6347]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6348]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6843]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6844]   COND FALSE  !(revert)
[L6847]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6699]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6703]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L6703]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6704]   COND FALSE  !(revert)
[L6707]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L6707]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6708]   COND FALSE  !(revert)
[L6711]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND TRUE   __tmp__DType[this] == RewardToken
[L6347]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6347]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6348]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6711]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6712]   COND FALSE  !(revert)
[L6715]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]               assume msgsender_MSG != null;
[L6685]               __tmp__Balance[this] := 0;
[L6715]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6716]   COND FALSE  !(revert)
[L6847]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6848]   COND FALSE  !(revert)
[L6851]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6804]               assume msgsender_MSG != null;
[L6805]               __tmp__Balance[this] := 0;
[L6806]               __tmp___cap_ERC20Capped[this] := 0;
[L6808]   COND FALSE  !(!(cap_s886 > 0))
[L6812]               __tmp___cap_ERC20Capped[this] := cap_s886;
[L6851]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6852]   COND FALSE  !(revert)
[L7611]   RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L7612]   COND FALSE  !(revert)
[L7615]   CALL        call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7432]   CALL        call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7397]               assume msgsender_MSG != null;
[L7398]               __tmp__Balance[this] := 0;
[L7400]               __var_48 := null;
[L7401]   COND FALSE  !(!(_store_s1208 != null))
[L7405]               assume __tmp__DType[_store_s1208] == Storage;
[L7406]               __var_49 := _store_s1208;
[L7407]               __tmp__store_Governable[this] := __var_49;
[L7432]   RET         call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7433]   COND FALSE  !(revert)
[L7615]   RET         call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7616]   COND FALSE  !(revert)
[L7619]   CALL        call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7520]               assume msgsender_MSG != null;
[L7521]               __tmp__Balance[this] := 0;
[L7522]               __tmp__HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7524]   COND TRUE   __tmp__DType[this] == RewardToken
[L7525]   CALL        call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6548]   COND TRUE   __tmp__DType[this] == RewardToken
[L6549]   CALL        call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6549]   RET         call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6550]   COND FALSE  !(revert)
[L6571]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6576]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6581]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6586]   COND TRUE   __tmp__DType[this] == MinterRole
[L6587]   CALL        call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6666]   CALL        call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6260]   CALL        call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6260]   RET         call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6261]   COND FALSE  !(revert)
[L6264]   COND FALSE  !(!__var_30)
[L6268]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := false;
[L6666]   RET         call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6667]   COND FALSE  !(revert)
[L6587]   RET         call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6588]   COND FALSE  !(revert)
[L7525]   RET         call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7526]   COND FALSE  !(revert)
[L7532]   COND TRUE   __tmp__DType[this] == RewardToken
[L7533]   CALL        call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7488]               assume __tmp__DType[__tmp__store_Governable[this]] == Storage;
[L7489]               __var_54 := __tmp__governance_Storage[__tmp__store_Governable[this]];
[L7490]               __ret_0_ := __var_54;
[L7533]   RET         call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7534]   COND FALSE  !(revert)
[L7540]   COND TRUE   __tmp__DType[this] == RewardToken
[L7541]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L7541]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7542]   COND FALSE  !(revert)
[L7619]   RET         call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7620]   COND FALSE  !(revert)
[L3199]   RET         call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3200]               assume revert || gas < 0;
[L11232]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11233]              assume !revert && gas >= 0;
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND FALSE  !(!(owner_s625 != null))
[L5980]               __var_25 := null;
[L5981]   COND FALSE  !(!(spender_s625 != null))
[L5985]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5986]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5987]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5988]               assert { :EventEmitted "Approval_ERC20" } true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND FALSE  !(revert)
[L5247]               __ret_0_ := true;
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND FALSE  !(!(owner_s625 != null))
[L5980]               __var_25 := null;
[L5981]   COND FALSE  !(!(spender_s625 != null))
[L5985]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5986]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5987]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5988]               assert { :EventEmitted "Approval_ERC20" } true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND FALSE  !(revert)
[L5247]               __ret_0_ := true;
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:30:21,206 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:30:21,206 INFO  L82        PathProgramCache]: Analyzing trace with hash -819972469, now seen corresponding path program 1 times
[2020-11-25 03:30:21,207 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:30:21,226 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:30:21,455 INFO  L134       CoverageAnalysis]: Checked inductivity of 1639 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1639 trivial. 0 not checked.
[2020-11-25 03:30:21,455 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:30:21,455 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:30:21,456 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:30:21,456 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:30:21,456 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:30:21,456 INFO  L87              Difference]: Start difference. First operand 7585 states and 8942 transitions. cyclomatic complexity: 1361 Second operand 3 states.
[2020-11-25 03:30:21,520 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:30:21,520 INFO  L93              Difference]: Finished difference Result 7593 states and 8951 transitions.
[2020-11-25 03:30:21,520 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:30:21,520 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7593 states and 8951 transitions.
[2020-11-25 03:30:21,533 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:30:21,549 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7593 states to 7593 states and 8951 transitions.
[2020-11-25 03:30:21,549 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1585
[2020-11-25 03:30:21,549 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1585
[2020-11-25 03:30:21,549 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7593 states and 8951 transitions.
[2020-11-25 03:30:21,554 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:30:21,554 INFO  L728         BuchiCegarLoop]: Abstraction has 7593 states and 8951 transitions.
[2020-11-25 03:30:21,558 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7593 states and 8951 transitions.
[2020-11-25 03:30:21,598 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7593 to 7587.
[2020-11-25 03:30:21,598 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7587 states.
[2020-11-25 03:30:21,606 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7587 states to 7587 states and 8944 transitions.
[2020-11-25 03:30:21,606 INFO  L751         BuchiCegarLoop]: Abstraction has 7587 states and 8944 transitions.
[2020-11-25 03:30:21,606 INFO  L631         BuchiCegarLoop]: Abstraction has 7587 states and 8944 transitions.
[2020-11-25 03:30:21,606 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 03:30:21,606 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7587 states and 8944 transitions.
[2020-11-25 03:30:21,614 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:30:21,614 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:30:21,614 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:30:21,616 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:30:21,616 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11226]              assume null == 0;
[L11227]  CALL        call this := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L11227]  RET         call this := FreshRefGenerator__success();
[L11228]              assume now >= 0;
[L11229]              assume DType[this] == RewardToken;
[L11230]              assume msgvalue_MSG == 0;
[L11231]              gas := gas - 53000;
[L11232]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3169]               havoc __exception;
[L3170]               revert := false;
[L3171]   COND TRUE   __exception
[L3172]               __tmp__Balance := Balance;
[L3173]               __tmp__DType := DType;
[L3174]               __tmp__Alloc := Alloc;
[L3175]               __tmp__balance_ADDR := balance_ADDR;
[L3176]               __tmp__M_Ref_int := M_Ref_int;
[L3177]               __tmp__sum__balances0 := sum__balances0;
[L3178]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3179]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3180]               __tmp__sum__allowances1 := sum__allowances1;
[L3181]               __tmp__M_Ref_bool := M_Ref_bool;
[L3182]               __tmp__sum := sum;
[L3183]               __tmp__Length := Length;
[L3184]               __tmp__now := now;
[L3185]               __tmp___balances_ERC20 := _balances_ERC20;
[L3186]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3187]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3188]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3189]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3190]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L3191]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3192]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3193]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3194]               __tmp___owner_Ownable := _owner_Ownable;
[L3195]               __tmp__governance_Storage := governance_Storage;
[L3196]               __tmp__controller_Storage := controller_Storage;
[L3197]               __tmp__store_Governable := store_Governable;
[L3198]               __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L3199]   CALL        call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7587]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L7587]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7588]   COND FALSE  !(revert)
[L7591]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L7591]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7592]   COND FALSE  !(revert)
[L7595]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L7595]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7596]   COND FALSE  !(revert)
[L7599]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7009]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L7009]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7010]   COND FALSE  !(revert)
[L7013]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6982]               assume msgsender_MSG != null;
[L6983]               __tmp__Balance[this] := 0;
[L6984]               __tmp___name_ERC20Detailed[this] := 724207837;
[L6985]               __tmp___symbol_ERC20Detailed[this] := 724207837;
[L6986]               __tmp___decimals_ERC20Detailed[this] := 0;
[L6988]               __tmp___name_ERC20Detailed[this] := name_s952;
[L6989]               __tmp___symbol_ERC20Detailed[this] := symbol_s952;
[L6990]               __tmp___decimals_ERC20Detailed[this] := decimals_s952;
[L7013]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7014]   COND FALSE  !(revert)
[L7599]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7600]   COND FALSE  !(revert)
[L7603]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND TRUE   __tmp__DType[this] == RewardToken
[L6347]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6347]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6348]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L7603]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7604]   COND FALSE  !(revert)
[L7607]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6699]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6703]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L6703]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6704]   COND FALSE  !(revert)
[L6707]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L6707]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6708]   COND FALSE  !(revert)
[L6711]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND TRUE   __tmp__DType[this] == RewardToken
[L6347]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6347]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6348]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6711]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6712]   COND FALSE  !(revert)
[L6715]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]               assume msgsender_MSG != null;
[L6685]               __tmp__Balance[this] := 0;
[L6715]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6716]   COND FALSE  !(revert)
[L7607]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7608]   COND FALSE  !(revert)
[L7611]   CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L6831]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6831]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6832]   COND FALSE  !(revert)
[L6835]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L6835]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6836]   COND FALSE  !(revert)
[L6839]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L6839]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6840]   COND FALSE  !(revert)
[L6843]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND TRUE   __tmp__DType[this] == RewardToken
[L6347]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6347]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6348]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6843]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6844]   COND FALSE  !(revert)
[L6847]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6699]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6703]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L6703]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6704]   COND FALSE  !(revert)
[L6707]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L6707]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6708]   COND FALSE  !(revert)
[L6711]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND TRUE   __tmp__DType[this] == RewardToken
[L6347]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6347]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6348]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6711]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6712]   COND FALSE  !(revert)
[L6715]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]               assume msgsender_MSG != null;
[L6685]               __tmp__Balance[this] := 0;
[L6715]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6716]   COND FALSE  !(revert)
[L6847]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6848]   COND FALSE  !(revert)
[L6851]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6804]               assume msgsender_MSG != null;
[L6805]               __tmp__Balance[this] := 0;
[L6806]               __tmp___cap_ERC20Capped[this] := 0;
[L6808]   COND FALSE  !(!(cap_s886 > 0))
[L6812]               __tmp___cap_ERC20Capped[this] := cap_s886;
[L6851]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6852]   COND FALSE  !(revert)
[L7611]   RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L7612]   COND FALSE  !(revert)
[L7615]   CALL        call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7432]   CALL        call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7397]               assume msgsender_MSG != null;
[L7398]               __tmp__Balance[this] := 0;
[L7400]               __var_48 := null;
[L7401]   COND FALSE  !(!(_store_s1208 != null))
[L7405]               assume __tmp__DType[_store_s1208] == Storage;
[L7406]               __var_49 := _store_s1208;
[L7407]               __tmp__store_Governable[this] := __var_49;
[L7432]   RET         call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7433]   COND FALSE  !(revert)
[L7615]   RET         call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7616]   COND FALSE  !(revert)
[L7619]   CALL        call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7520]               assume msgsender_MSG != null;
[L7521]               __tmp__Balance[this] := 0;
[L7522]               __tmp__HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7524]   COND TRUE   __tmp__DType[this] == RewardToken
[L7525]   CALL        call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6548]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6553]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6558]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6559]   CALL        call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6559]   RET         call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6560]   COND FALSE  !(revert)
[L6571]   COND TRUE   __tmp__DType[this] == RewardToken
[L6572]   CALL        call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6666]   CALL        call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6260]   CALL        call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6260]   RET         call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6261]   COND FALSE  !(revert)
[L6264]   COND FALSE  !(!__var_30)
[L6268]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := false;
[L6666]   RET         call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6667]   COND FALSE  !(revert)
[L6572]   RET         call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6573]   COND FALSE  !(revert)
[L7525]   RET         call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7526]   COND FALSE  !(revert)
[L7532]   COND TRUE   __tmp__DType[this] == RewardToken
[L7533]   CALL        call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7488]               assume __tmp__DType[__tmp__store_Governable[this]] == Storage;
[L7489]               __var_54 := __tmp__governance_Storage[__tmp__store_Governable[this]];
[L7490]               __ret_0_ := __var_54;
[L7533]   RET         call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7534]   COND FALSE  !(revert)
[L7540]   COND TRUE   __tmp__DType[this] == RewardToken
[L7541]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L7541]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7542]   COND FALSE  !(revert)
[L7619]   RET         call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7620]   COND FALSE  !(revert)
[L3199]   RET         call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3200]               assume revert || gas < 0;
[L11232]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11233]              assume !revert && gas >= 0;
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND FALSE  !(!(owner_s625 != null))
[L5980]               __var_25 := null;
[L5981]   COND FALSE  !(!(spender_s625 != null))
[L5985]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5986]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5987]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5988]               assert { :EventEmitted "Approval_ERC20" } true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND FALSE  !(revert)
[L5247]               __ret_0_ := true;
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND FALSE  !(!(owner_s625 != null))
[L5980]               __var_25 := null;
[L5981]   COND FALSE  !(!(spender_s625 != null))
[L5985]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5986]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5987]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5988]               assert { :EventEmitted "Approval_ERC20" } true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND FALSE  !(revert)
[L5247]               __ret_0_ := true;
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:30:21,622 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:30:21,622 INFO  L82        PathProgramCache]: Analyzing trace with hash -909811897, now seen corresponding path program 1 times
[2020-11-25 03:30:21,623 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:30:21,641 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:30:21,910 INFO  L134       CoverageAnalysis]: Checked inductivity of 1639 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1639 trivial. 0 not checked.
[2020-11-25 03:30:21,910 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:30:21,910 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:30:21,910 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:30:21,910 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:30:21,911 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:30:21,911 INFO  L87              Difference]: Start difference. First operand 7587 states and 8944 transitions. cyclomatic complexity: 1361 Second operand 3 states.
[2020-11-25 03:30:21,969 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:30:21,969 INFO  L93              Difference]: Finished difference Result 7593 states and 8949 transitions.
[2020-11-25 03:30:21,969 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:30:21,969 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7593 states and 8949 transitions.
[2020-11-25 03:30:21,982 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:30:21,998 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7593 states to 7593 states and 8949 transitions.
[2020-11-25 03:30:21,998 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1585
[2020-11-25 03:30:21,999 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1585
[2020-11-25 03:30:21,999 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7593 states and 8949 transitions.
[2020-11-25 03:30:22,003 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:30:22,003 INFO  L728         BuchiCegarLoop]: Abstraction has 7593 states and 8949 transitions.
[2020-11-25 03:30:22,007 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7593 states and 8949 transitions.
[2020-11-25 03:30:22,045 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7593 to 7587.
[2020-11-25 03:30:22,045 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7587 states.
[2020-11-25 03:30:22,053 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7587 states to 7587 states and 8942 transitions.
[2020-11-25 03:30:22,053 INFO  L751         BuchiCegarLoop]: Abstraction has 7587 states and 8942 transitions.
[2020-11-25 03:30:22,053 INFO  L631         BuchiCegarLoop]: Abstraction has 7587 states and 8942 transitions.
[2020-11-25 03:30:22,053 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 03:30:22,053 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7587 states and 8942 transitions.
[2020-11-25 03:30:22,060 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:30:22,061 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:30:22,061 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:30:22,063 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:30:22,063 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11226]              assume null == 0;
[L11227]  CALL        call this := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L11227]  RET         call this := FreshRefGenerator__success();
[L11228]              assume now >= 0;
[L11229]              assume DType[this] == RewardToken;
[L11230]              assume msgvalue_MSG == 0;
[L11231]              gas := gas - 53000;
[L11232]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3169]               havoc __exception;
[L3170]               revert := false;
[L3171]   COND TRUE   __exception
[L3172]               __tmp__Balance := Balance;
[L3173]               __tmp__DType := DType;
[L3174]               __tmp__Alloc := Alloc;
[L3175]               __tmp__balance_ADDR := balance_ADDR;
[L3176]               __tmp__M_Ref_int := M_Ref_int;
[L3177]               __tmp__sum__balances0 := sum__balances0;
[L3178]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3179]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3180]               __tmp__sum__allowances1 := sum__allowances1;
[L3181]               __tmp__M_Ref_bool := M_Ref_bool;
[L3182]               __tmp__sum := sum;
[L3183]               __tmp__Length := Length;
[L3184]               __tmp__now := now;
[L3185]               __tmp___balances_ERC20 := _balances_ERC20;
[L3186]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3187]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3188]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3189]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3190]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L3191]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3192]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3193]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3194]               __tmp___owner_Ownable := _owner_Ownable;
[L3195]               __tmp__governance_Storage := governance_Storage;
[L3196]               __tmp__controller_Storage := controller_Storage;
[L3197]               __tmp__store_Governable := store_Governable;
[L3198]               __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L3199]   CALL        call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7587]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L7587]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7588]   COND FALSE  !(revert)
[L7591]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L7591]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7592]   COND FALSE  !(revert)
[L7595]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L7595]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7596]   COND FALSE  !(revert)
[L7599]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7009]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L7009]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7010]   COND FALSE  !(revert)
[L7013]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6982]               assume msgsender_MSG != null;
[L6983]               __tmp__Balance[this] := 0;
[L6984]               __tmp___name_ERC20Detailed[this] := 724207837;
[L6985]               __tmp___symbol_ERC20Detailed[this] := 724207837;
[L6986]               __tmp___decimals_ERC20Detailed[this] := 0;
[L6988]               __tmp___name_ERC20Detailed[this] := name_s952;
[L6989]               __tmp___symbol_ERC20Detailed[this] := symbol_s952;
[L6990]               __tmp___decimals_ERC20Detailed[this] := decimals_s952;
[L7013]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7014]   COND FALSE  !(revert)
[L7599]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7600]   COND FALSE  !(revert)
[L7603]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND TRUE   __tmp__DType[this] == RewardToken
[L6347]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6347]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6348]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L7603]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7604]   COND FALSE  !(revert)
[L7607]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6699]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6703]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L6703]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6704]   COND FALSE  !(revert)
[L6707]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L6707]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6708]   COND FALSE  !(revert)
[L6711]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND TRUE   __tmp__DType[this] == RewardToken
[L6347]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6347]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6348]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6711]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6712]   COND FALSE  !(revert)
[L6715]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]               assume msgsender_MSG != null;
[L6685]               __tmp__Balance[this] := 0;
[L6715]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6716]   COND FALSE  !(revert)
[L7607]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7608]   COND FALSE  !(revert)
[L7611]   CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L6831]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6831]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6832]   COND FALSE  !(revert)
[L6835]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L6835]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6836]   COND FALSE  !(revert)
[L6839]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L6839]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6840]   COND FALSE  !(revert)
[L6843]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND TRUE   __tmp__DType[this] == RewardToken
[L6347]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6347]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6348]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6843]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6844]   COND FALSE  !(revert)
[L6847]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6699]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6703]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L6703]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6704]   COND FALSE  !(revert)
[L6707]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L6707]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6708]   COND FALSE  !(revert)
[L6711]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND TRUE   __tmp__DType[this] == RewardToken
[L6347]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6347]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6348]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6711]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6712]   COND FALSE  !(revert)
[L6715]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]               assume msgsender_MSG != null;
[L6685]               __tmp__Balance[this] := 0;
[L6715]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6716]   COND FALSE  !(revert)
[L6847]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6848]   COND FALSE  !(revert)
[L6851]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6804]               assume msgsender_MSG != null;
[L6805]               __tmp__Balance[this] := 0;
[L6806]               __tmp___cap_ERC20Capped[this] := 0;
[L6808]   COND FALSE  !(!(cap_s886 > 0))
[L6812]               __tmp___cap_ERC20Capped[this] := cap_s886;
[L6851]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6852]   COND FALSE  !(revert)
[L7611]   RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L7612]   COND FALSE  !(revert)
[L7615]   CALL        call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7432]   CALL        call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7397]               assume msgsender_MSG != null;
[L7398]               __tmp__Balance[this] := 0;
[L7400]               __var_48 := null;
[L7401]   COND FALSE  !(!(_store_s1208 != null))
[L7405]               assume __tmp__DType[_store_s1208] == Storage;
[L7406]               __var_49 := _store_s1208;
[L7407]               __tmp__store_Governable[this] := __var_49;
[L7432]   RET         call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7433]   COND FALSE  !(revert)
[L7615]   RET         call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7616]   COND FALSE  !(revert)
[L7619]   CALL        call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7520]               assume msgsender_MSG != null;
[L7521]               __tmp__Balance[this] := 0;
[L7522]               __tmp__HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7524]   COND TRUE   __tmp__DType[this] == RewardToken
[L7525]   CALL        call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6548]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6553]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6558]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6559]   CALL        call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6559]   RET         call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6560]   COND FALSE  !(revert)
[L6571]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6576]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6581]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6586]   COND TRUE   __tmp__DType[this] == MinterRole
[L6587]   CALL        call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6666]   CALL        call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6260]   CALL        call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6260]   RET         call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6261]   COND FALSE  !(revert)
[L6264]   COND FALSE  !(!__var_30)
[L6268]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := false;
[L6666]   RET         call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6667]   COND FALSE  !(revert)
[L6587]   RET         call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6588]   COND FALSE  !(revert)
[L7525]   RET         call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7526]   COND FALSE  !(revert)
[L7532]   COND TRUE   __tmp__DType[this] == RewardToken
[L7533]   CALL        call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7488]               assume __tmp__DType[__tmp__store_Governable[this]] == Storage;
[L7489]               __var_54 := __tmp__governance_Storage[__tmp__store_Governable[this]];
[L7490]               __ret_0_ := __var_54;
[L7533]   RET         call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7534]   COND FALSE  !(revert)
[L7540]   COND TRUE   __tmp__DType[this] == RewardToken
[L7541]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L7541]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7542]   COND FALSE  !(revert)
[L7619]   RET         call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7620]   COND FALSE  !(revert)
[L3199]   RET         call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3200]               assume revert || gas < 0;
[L11232]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11233]              assume !revert && gas >= 0;
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND FALSE  !(!(owner_s625 != null))
[L5980]               __var_25 := null;
[L5981]   COND FALSE  !(!(spender_s625 != null))
[L5985]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5986]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5987]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5988]               assert { :EventEmitted "Approval_ERC20" } true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND FALSE  !(revert)
[L5247]               __ret_0_ := true;
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND FALSE  !(!(owner_s625 != null))
[L5980]               __var_25 := null;
[L5981]   COND FALSE  !(!(spender_s625 != null))
[L5985]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5986]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5987]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5988]               assert { :EventEmitted "Approval_ERC20" } true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND FALSE  !(revert)
[L5247]               __ret_0_ := true;
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:30:22,068 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:30:22,069 INFO  L82        PathProgramCache]: Analyzing trace with hash -1328483415, now seen corresponding path program 1 times
[2020-11-25 03:30:22,069 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:30:22,087 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:30:22,285 INFO  L134       CoverageAnalysis]: Checked inductivity of 1639 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1639 trivial. 0 not checked.
[2020-11-25 03:30:22,285 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:30:22,285 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:30:22,285 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:30:22,285 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:30:22,285 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:30:22,286 INFO  L87              Difference]: Start difference. First operand 7587 states and 8942 transitions. cyclomatic complexity: 1359 Second operand 3 states.
[2020-11-25 03:30:22,339 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:30:22,339 INFO  L93              Difference]: Finished difference Result 7599 states and 8955 transitions.
[2020-11-25 03:30:22,339 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:30:22,339 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7599 states and 8955 transitions.
[2020-11-25 03:30:22,371 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:30:22,386 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7599 states to 7599 states and 8955 transitions.
[2020-11-25 03:30:22,386 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1585
[2020-11-25 03:30:22,387 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1585
[2020-11-25 03:30:22,387 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7599 states and 8955 transitions.
[2020-11-25 03:30:22,391 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:30:22,391 INFO  L728         BuchiCegarLoop]: Abstraction has 7599 states and 8955 transitions.
[2020-11-25 03:30:22,395 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7599 states and 8955 transitions.
[2020-11-25 03:30:22,434 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7599 to 7593.
[2020-11-25 03:30:22,434 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7593 states.
[2020-11-25 03:30:22,443 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7593 states to 7593 states and 8948 transitions.
[2020-11-25 03:30:22,443 INFO  L751         BuchiCegarLoop]: Abstraction has 7593 states and 8948 transitions.
[2020-11-25 03:30:22,443 INFO  L631         BuchiCegarLoop]: Abstraction has 7593 states and 8948 transitions.
[2020-11-25 03:30:22,443 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 03:30:22,443 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7593 states and 8948 transitions.
[2020-11-25 03:30:22,451 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 03:30:22,451 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:30:22,451 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:30:22,453 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:30:22,453 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11226]              assume null == 0;
[L11227]  CALL        call this := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L11227]  RET         call this := FreshRefGenerator__success();
[L11228]              assume now >= 0;
[L11229]              assume DType[this] == RewardToken;
[L11230]              assume msgvalue_MSG == 0;
[L11231]              gas := gas - 53000;
[L11232]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3169]               havoc __exception;
[L3170]               revert := false;
[L3171]   COND TRUE   __exception
[L3172]               __tmp__Balance := Balance;
[L3173]               __tmp__DType := DType;
[L3174]               __tmp__Alloc := Alloc;
[L3175]               __tmp__balance_ADDR := balance_ADDR;
[L3176]               __tmp__M_Ref_int := M_Ref_int;
[L3177]               __tmp__sum__balances0 := sum__balances0;
[L3178]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3179]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3180]               __tmp__sum__allowances1 := sum__allowances1;
[L3181]               __tmp__M_Ref_bool := M_Ref_bool;
[L3182]               __tmp__sum := sum;
[L3183]               __tmp__Length := Length;
[L3184]               __tmp__now := now;
[L3185]               __tmp___balances_ERC20 := _balances_ERC20;
[L3186]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3187]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3188]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3189]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3190]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L3191]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3192]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3193]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3194]               __tmp___owner_Ownable := _owner_Ownable;
[L3195]               __tmp__governance_Storage := governance_Storage;
[L3196]               __tmp__controller_Storage := controller_Storage;
[L3197]               __tmp__store_Governable := store_Governable;
[L3198]               __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L3199]   CALL        call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7587]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L7587]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7588]   COND FALSE  !(revert)
[L7591]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L7591]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7592]   COND FALSE  !(revert)
[L7595]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L7595]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7596]   COND FALSE  !(revert)
[L7599]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7009]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L7009]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7010]   COND FALSE  !(revert)
[L7013]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6982]               assume msgsender_MSG != null;
[L6983]               __tmp__Balance[this] := 0;
[L6984]               __tmp___name_ERC20Detailed[this] := 724207837;
[L6985]               __tmp___symbol_ERC20Detailed[this] := 724207837;
[L6986]               __tmp___decimals_ERC20Detailed[this] := 0;
[L6988]               __tmp___name_ERC20Detailed[this] := name_s952;
[L6989]               __tmp___symbol_ERC20Detailed[this] := symbol_s952;
[L6990]               __tmp___decimals_ERC20Detailed[this] := decimals_s952;
[L7013]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7014]   COND FALSE  !(revert)
[L7599]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7600]   COND FALSE  !(revert)
[L7603]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND TRUE   __tmp__DType[this] == RewardToken
[L6347]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6347]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6348]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L7603]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7604]   COND FALSE  !(revert)
[L7607]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6699]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6703]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L6703]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6704]   COND FALSE  !(revert)
[L6707]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L6707]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6708]   COND FALSE  !(revert)
[L6711]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND TRUE   __tmp__DType[this] == RewardToken
[L6347]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6347]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6348]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6711]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6712]   COND FALSE  !(revert)
[L6715]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]               assume msgsender_MSG != null;
[L6685]               __tmp__Balance[this] := 0;
[L6715]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6716]   COND FALSE  !(revert)
[L7607]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7608]   COND FALSE  !(revert)
[L7611]   CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L6831]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6831]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6832]   COND FALSE  !(revert)
[L6835]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L6835]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6836]   COND FALSE  !(revert)
[L6839]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L6839]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6840]   COND FALSE  !(revert)
[L6843]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND TRUE   __tmp__DType[this] == RewardToken
[L6347]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6347]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6348]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6843]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6844]   COND FALSE  !(revert)
[L6847]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6699]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6700]   COND FALSE  !(revert)
[L6703]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L6703]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6704]   COND FALSE  !(revert)
[L6707]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L4973]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4974]   COND FALSE  !(revert)
[L4977]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]               assume msgsender_MSG != null;
[L4673]               __tmp__Balance[this] := 0;
[L4687]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4688]   COND FALSE  !(revert)
[L4977]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4978]   COND FALSE  !(revert)
[L4981]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]               assume msgsender_MSG != null;
[L4949]               __tmp__Balance[this] := 0;
[L4950]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4951]               __tmp__sum__balances0[this] := 0;
[L4952]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4953]               __tmp__sum__allowances1[this] := 0;
[L4954]               __tmp___totalSupply_ERC20[this] := 0;
[L4981]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4982]   COND FALSE  !(revert)
[L6707]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6708]   COND FALSE  !(revert)
[L6711]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4704]               assume msgsender_MSG != null;
[L4705]               __tmp__Balance[this] := 0;
[L4719]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4720]   COND FALSE  !(revert)
[L6437]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               __tmp__Balance[this] := 0;
[L6317]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4645]               havoc newRef;
[L4646]               assume __tmp__Alloc[newRef] == false;
[L4647]               __tmp__Alloc[newRef] := true;
[L4648]               assume newRef != null;
[L6317]   RET         call __var_33 := FreshRefGenerator__fail();
[L6318]   COND FALSE  !(revert)
[L6321]               __tmp___minters_MinterRole[this] := __var_33;
[L6323]   COND TRUE   __tmp__DType[this] == RewardToken
[L6324]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6324]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6325]   COND FALSE  !(revert)
[L6346]   COND TRUE   __tmp__DType[this] == RewardToken
[L6347]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L6347]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6348]   COND FALSE  !(revert)
[L6441]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6711]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6712]   COND FALSE  !(revert)
[L6715]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6684]               assume msgsender_MSG != null;
[L6685]               __tmp__Balance[this] := 0;
[L6715]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6716]   COND FALSE  !(revert)
[L6847]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6848]   COND FALSE  !(revert)
[L6851]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6804]               assume msgsender_MSG != null;
[L6805]               __tmp__Balance[this] := 0;
[L6806]               __tmp___cap_ERC20Capped[this] := 0;
[L6808]   COND FALSE  !(!(cap_s886 > 0))
[L6812]               __tmp___cap_ERC20Capped[this] := cap_s886;
[L6851]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6852]   COND FALSE  !(revert)
[L7611]   RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L7612]   COND FALSE  !(revert)
[L7615]   CALL        call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7432]   CALL        call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7397]               assume msgsender_MSG != null;
[L7398]               __tmp__Balance[this] := 0;
[L7400]               __var_48 := null;
[L7401]   COND FALSE  !(!(_store_s1208 != null))
[L7405]               assume __tmp__DType[_store_s1208] == Storage;
[L7406]               __var_49 := _store_s1208;
[L7407]               __tmp__store_Governable[this] := __var_49;
[L7432]   RET         call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7433]   COND FALSE  !(revert)
[L7615]   RET         call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7616]   COND FALSE  !(revert)
[L7619]   CALL        call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7520]               assume msgsender_MSG != null;
[L7521]               __tmp__Balance[this] := 0;
[L7522]               __tmp__HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7524]   COND TRUE   __tmp__DType[this] == RewardToken
[L7525]   CALL        call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6548]   COND TRUE   __tmp__DType[this] == RewardToken
[L6549]   CALL        call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L6549]   RET         call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6550]   COND FALSE  !(revert)
[L6571]   COND TRUE   __tmp__DType[this] == RewardToken
[L6572]   CALL        call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6666]   CALL        call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6260]   CALL        call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6260]   RET         call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6261]   COND FALSE  !(revert)
[L6264]   COND FALSE  !(!__var_30)
[L6268]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := false;
[L6666]   RET         call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6667]   COND FALSE  !(revert)
[L6572]   RET         call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6573]   COND FALSE  !(revert)
[L7525]   RET         call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7526]   COND FALSE  !(revert)
[L7532]   COND TRUE   __tmp__DType[this] == RewardToken
[L7533]   CALL        call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7488]               assume __tmp__DType[__tmp__store_Governable[this]] == Storage;
[L7489]               __var_54 := __tmp__governance_Storage[__tmp__store_Governable[this]];
[L7490]               __ret_0_ := __var_54;
[L7533]   RET         call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7534]   COND FALSE  !(revert)
[L7540]   COND TRUE   __tmp__DType[this] == RewardToken
[L7541]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6649]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6232]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6288]               __var_31 := null;
[L6289]   COND FALSE  !(!(account_s734 != null))
[L6293]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6232]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6233]   COND FALSE  !(revert)
[L6236]   COND FALSE  !(!!__var_29)
[L6240]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6649]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6650]   COND FALSE  !(revert)
[L7541]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7542]   COND FALSE  !(revert)
[L7619]   RET         call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7620]   COND FALSE  !(revert)
[L3199]   RET         call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3200]               assume revert || gas < 0;
[L11232]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11233]              assume !revert && gas >= 0;
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND FALSE  !(!(owner_s625 != null))
[L5980]               __var_25 := null;
[L5981]   COND FALSE  !(!(spender_s625 != null))
[L5985]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5986]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5987]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5988]               assert { :EventEmitted "Approval_ERC20" } true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND FALSE  !(revert)
[L5247]               __ret_0_ := true;
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND FALSE  !(!(owner_s625 != null))
[L5980]               __var_25 := null;
[L5981]   COND FALSE  !(!(spender_s625 != null))
[L5985]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5986]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5987]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5988]               assert { :EventEmitted "Approval_ERC20" } true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND FALSE  !(revert)
[L5247]               __ret_0_ := true;
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:30:22,458 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:30:22,458 INFO  L82        PathProgramCache]: Analyzing trace with hash -919742555, now seen corresponding path program 1 times
[2020-11-25 03:30:22,459 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:30:22,479 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:30:22,677 INFO  L134       CoverageAnalysis]: Checked inductivity of 1639 backedges. 32 proven. 0 refuted. 0 times theorem prover too weak. 1607 trivial. 0 not checked.
[2020-11-25 03:30:22,677 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:30:22,678 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:30:22,678 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:30:22,678 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:30:22,678 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:30:22,678 INFO  L87              Difference]: Start difference. First operand 7593 states and 8948 transitions. cyclomatic complexity: 1359 Second operand 4 states.
[2020-11-25 03:30:23,383 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:30:23,383 INFO  L93              Difference]: Finished difference Result 8999 states and 10782 transitions.
[2020-11-25 03:30:23,383 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:30:23,383 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8999 states and 10782 transitions.
[2020-11-25 03:30:23,403 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 12
[2020-11-25 03:30:23,427 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8999 states to 8703 states and 10456 transitions.
[2020-11-25 03:30:23,427 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1868
[2020-11-25 03:30:23,428 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1868
[2020-11-25 03:30:23,428 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8703 states and 10456 transitions.
[2020-11-25 03:30:23,433 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:30:23,433 INFO  L728         BuchiCegarLoop]: Abstraction has 8703 states and 10456 transitions.
[2020-11-25 03:30:23,438 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8703 states and 10456 transitions.
[2020-11-25 03:30:23,485 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8703 to 7944.
[2020-11-25 03:30:23,485 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7944 states.
[2020-11-25 03:30:23,494 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7944 states to 7944 states and 9426 transitions.
[2020-11-25 03:30:23,494 INFO  L751         BuchiCegarLoop]: Abstraction has 7944 states and 9426 transitions.
[2020-11-25 03:30:23,494 INFO  L631         BuchiCegarLoop]: Abstraction has 7944 states and 9426 transitions.
[2020-11-25 03:30:23,494 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 03:30:23,494 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7944 states and 9426 transitions.
[2020-11-25 03:30:23,503 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 03:30:23,503 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:30:23,503 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:30:23,505 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:30:23,505 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11226]              assume null == 0;
[L11227]  CALL        call this := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L11227]  RET         call this := FreshRefGenerator__success();
[L11228]              assume now >= 0;
[L11229]              assume DType[this] == RewardToken;
[L11230]              assume msgvalue_MSG == 0;
[L11231]              gas := gas - 53000;
[L11232]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3169]               havoc __exception;
[L3170]               revert := false;
[L3171]   COND FALSE  !(__exception)
[L3202]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7628]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L7628]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7632]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L7632]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7633]   COND FALSE  !(revert)
[L7636]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L7636]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7637]   COND FALSE  !(revert)
[L7640]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6996]               assume msgsender_MSG != null;
[L6997]               Balance[this] := 0;
[L6998]               _name_ERC20Detailed[this] := 724207837;
[L6999]               _symbol_ERC20Detailed[this] := 724207837;
[L7000]               _decimals_ERC20Detailed[this] := 0;
[L7002]               _name_ERC20Detailed[this] := name_s952;
[L7003]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7004]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7025]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7026]   COND FALSE  !(revert)
[L7640]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7641]   COND FALSE  !(revert)
[L7644]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L7644]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7645]   COND FALSE  !(revert)
[L7648]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6723]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6724]   COND FALSE  !(revert)
[L6727]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6727]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6728]   COND FALSE  !(revert)
[L6731]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6731]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6732]   COND FALSE  !(revert)
[L6735]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6735]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6736]   COND FALSE  !(revert)
[L6739]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6692]               assume msgsender_MSG != null;
[L6693]               Balance[this] := 0;
[L6739]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6740]   COND FALSE  !(revert)
[L7648]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7649]   COND FALSE  !(revert)
[L7652]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6859]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6859]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L6863]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6863]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6864]   COND FALSE  !(revert)
[L6867]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6867]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6871]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L6875]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6723]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6724]   COND FALSE  !(revert)
[L6727]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6727]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6728]   COND FALSE  !(revert)
[L6731]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6731]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6732]   COND FALSE  !(revert)
[L6735]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6735]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6736]   COND FALSE  !(revert)
[L6739]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6692]               assume msgsender_MSG != null;
[L6693]               Balance[this] := 0;
[L6739]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6740]   COND FALSE  !(revert)
[L6875]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6818]               assume msgsender_MSG != null;
[L6819]               Balance[this] := 0;
[L6820]               _cap_ERC20Capped[this] := 0;
[L6822]   COND FALSE  !(!(cap_s886 > 0))
[L6826]               _cap_ERC20Capped[this] := cap_s886;
[L6879]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6880]   COND FALSE  !(revert)
[L7652]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7653]   COND FALSE  !(revert)
[L7656]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7442]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7415]               assume msgsender_MSG != null;
[L7416]               Balance[this] := 0;
[L7418]               __var_48 := null;
[L7419]   COND FALSE  !(!(_store_s1208 != null))
[L7423]               assume DType[_store_s1208] == Storage;
[L7424]               __var_49 := _store_s1208;
[L7425]               store_Governable[this] := __var_49;
[L7442]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7443]   COND FALSE  !(revert)
[L7656]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7657]   COND FALSE  !(revert)
[L7660]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7554]               assume msgsender_MSG != null;
[L7555]               Balance[this] := 0;
[L7556]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7558]   COND TRUE   DType[this] == RewardToken
[L7559]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6599]   COND FALSE  !(DType[this] == RewardToken)
[L6604]   COND FALSE  !(DType[this] == ERC20Capped)
[L6609]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6614]   COND TRUE   DType[this] == MinterRole
[L6615]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6615]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6616]   COND FALSE  !(revert)
[L6622]   COND FALSE  !(DType[this] == RewardToken)
[L6627]   COND FALSE  !(DType[this] == ERC20Capped)
[L6632]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6637]   COND TRUE   DType[this] == MinterRole
[L6638]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6674]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6274]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6274]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6275]   COND FALSE  !(revert)
[L6278]   COND FALSE  !(!__var_30)
[L6282]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6674]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6675]   COND FALSE  !(revert)
[L6678]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6638]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6639]   COND FALSE  !(revert)
[L7559]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7560]   COND FALSE  !(revert)
[L7566]   COND TRUE   DType[this] == RewardToken
[L7567]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]               assume DType[store_Governable[this]] == Storage;
[L7499]               __var_54 := governance_Storage[store_Governable[this]];
[L7500]               __ret_0_ := __var_54;
[L7567]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7568]   COND FALSE  !(revert)
[L7574]   COND TRUE   DType[this] == RewardToken
[L7575]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7575]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7576]   COND FALSE  !(revert)
[L7660]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7661]   COND FALSE  !(revert)
[L3202]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3203]               assume !revert && gas >= 0;
[L11232]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11233]              assume !revert && gas >= 0;
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND FALSE  !(!(owner_s625 != null))
[L5980]               __var_25 := null;
[L5981]   COND FALSE  !(!(spender_s625 != null))
[L5985]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5986]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5987]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5988]               assert { :EventEmitted "Approval_ERC20" } true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND FALSE  !(revert)
[L5247]               __ret_0_ := true;
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND FALSE  !(!(owner_s625 != null))
[L5980]               __var_25 := null;
[L5981]   COND FALSE  !(!(spender_s625 != null))
[L5985]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5986]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5987]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5988]               assert { :EventEmitted "Approval_ERC20" } true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND FALSE  !(revert)
[L5247]               __ret_0_ := true;
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:30:23,510 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:30:23,510 INFO  L82        PathProgramCache]: Analyzing trace with hash 371667523, now seen corresponding path program 1 times
[2020-11-25 03:30:23,511 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:30:23,529 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:30:23,825 INFO  L134       CoverageAnalysis]: Checked inductivity of 1673 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1673 trivial. 0 not checked.
[2020-11-25 03:30:23,825 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:30:23,825 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:30:23,826 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:30:23,826 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:30:23,826 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:30:23,827 INFO  L87              Difference]: Start difference. First operand 7944 states and 9426 transitions. cyclomatic complexity: 1486 Second operand 7 states.
[2020-11-25 03:30:23,988 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:30:23,988 INFO  L93              Difference]: Finished difference Result 7971 states and 9453 transitions.
[2020-11-25 03:30:23,988 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 03:30:23,989 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7971 states and 9453 transitions.
[2020-11-25 03:30:24,002 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 03:30:24,017 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7971 states to 7968 states and 9450 transitions.
[2020-11-25 03:30:24,017 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1766
[2020-11-25 03:30:24,018 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1766
[2020-11-25 03:30:24,018 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7968 states and 9450 transitions.
[2020-11-25 03:30:24,022 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:30:24,022 INFO  L728         BuchiCegarLoop]: Abstraction has 7968 states and 9450 transitions.
[2020-11-25 03:30:24,026 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7968 states and 9450 transitions.
[2020-11-25 03:30:24,061 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7968 to 7958.
[2020-11-25 03:30:24,061 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7958 states.
[2020-11-25 03:30:24,069 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7958 states to 7958 states and 9440 transitions.
[2020-11-25 03:30:24,069 INFO  L751         BuchiCegarLoop]: Abstraction has 7958 states and 9440 transitions.
[2020-11-25 03:30:24,069 INFO  L631         BuchiCegarLoop]: Abstraction has 7958 states and 9440 transitions.
[2020-11-25 03:30:24,069 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 03:30:24,069 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7958 states and 9440 transitions.
[2020-11-25 03:30:24,076 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 03:30:24,076 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:30:24,076 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:30:24,078 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:30:24,078 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11226]              assume null == 0;
[L11227]  CALL        call this := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L11227]  RET         call this := FreshRefGenerator__success();
[L11228]              assume now >= 0;
[L11229]              assume DType[this] == RewardToken;
[L11230]              assume msgvalue_MSG == 0;
[L11231]              gas := gas - 53000;
[L11232]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3169]               havoc __exception;
[L3170]               revert := false;
[L3171]   COND FALSE  !(__exception)
[L3202]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7628]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L7628]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7632]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L7632]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7633]   COND FALSE  !(revert)
[L7636]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L7636]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7637]   COND FALSE  !(revert)
[L7640]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6996]               assume msgsender_MSG != null;
[L6997]               Balance[this] := 0;
[L6998]               _name_ERC20Detailed[this] := 724207837;
[L6999]               _symbol_ERC20Detailed[this] := 724207837;
[L7000]               _decimals_ERC20Detailed[this] := 0;
[L7002]               _name_ERC20Detailed[this] := name_s952;
[L7003]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7004]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7025]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7026]   COND FALSE  !(revert)
[L7640]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7641]   COND FALSE  !(revert)
[L7644]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L7644]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7645]   COND FALSE  !(revert)
[L7648]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6723]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6724]   COND FALSE  !(revert)
[L6727]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6727]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6728]   COND FALSE  !(revert)
[L6731]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6731]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6732]   COND FALSE  !(revert)
[L6735]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6735]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6736]   COND FALSE  !(revert)
[L6739]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6692]               assume msgsender_MSG != null;
[L6693]               Balance[this] := 0;
[L6739]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6740]   COND FALSE  !(revert)
[L7648]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7649]   COND FALSE  !(revert)
[L7652]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6859]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6859]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L6863]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6863]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6864]   COND FALSE  !(revert)
[L6867]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6867]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6871]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L6875]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6723]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6724]   COND FALSE  !(revert)
[L6727]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6727]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6728]   COND FALSE  !(revert)
[L6731]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6731]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6732]   COND FALSE  !(revert)
[L6735]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6735]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6736]   COND FALSE  !(revert)
[L6739]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6692]               assume msgsender_MSG != null;
[L6693]               Balance[this] := 0;
[L6739]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6740]   COND FALSE  !(revert)
[L6875]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6818]               assume msgsender_MSG != null;
[L6819]               Balance[this] := 0;
[L6820]               _cap_ERC20Capped[this] := 0;
[L6822]   COND FALSE  !(!(cap_s886 > 0))
[L6826]               _cap_ERC20Capped[this] := cap_s886;
[L6879]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6880]   COND FALSE  !(revert)
[L7652]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7653]   COND FALSE  !(revert)
[L7656]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7442]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7415]               assume msgsender_MSG != null;
[L7416]               Balance[this] := 0;
[L7418]               __var_48 := null;
[L7419]   COND FALSE  !(!(_store_s1208 != null))
[L7423]               assume DType[_store_s1208] == Storage;
[L7424]               __var_49 := _store_s1208;
[L7425]               store_Governable[this] := __var_49;
[L7442]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7443]   COND FALSE  !(revert)
[L7656]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7657]   COND FALSE  !(revert)
[L7660]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7554]               assume msgsender_MSG != null;
[L7555]               Balance[this] := 0;
[L7556]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7558]   COND TRUE   DType[this] == RewardToken
[L7559]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6599]   COND FALSE  !(DType[this] == RewardToken)
[L6604]   COND TRUE   DType[this] == ERC20Capped
[L6605]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6605]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6606]   COND FALSE  !(revert)
[L6622]   COND FALSE  !(DType[this] == RewardToken)
[L6627]   COND FALSE  !(DType[this] == ERC20Capped)
[L6632]   COND TRUE   DType[this] == ERC20Mintable
[L6633]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6674]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6274]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6274]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6275]   COND FALSE  !(revert)
[L6278]   COND FALSE  !(!__var_30)
[L6282]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6674]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6675]   COND FALSE  !(revert)
[L6678]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6633]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6634]   COND FALSE  !(revert)
[L7559]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7560]   COND FALSE  !(revert)
[L7566]   COND TRUE   DType[this] == RewardToken
[L7567]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]               assume DType[store_Governable[this]] == Storage;
[L7499]               __var_54 := governance_Storage[store_Governable[this]];
[L7500]               __ret_0_ := __var_54;
[L7567]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7568]   COND FALSE  !(revert)
[L7574]   COND TRUE   DType[this] == RewardToken
[L7575]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7575]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7576]   COND FALSE  !(revert)
[L7660]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7661]   COND FALSE  !(revert)
[L3202]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3203]               assume !revert && gas >= 0;
[L11232]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11233]              assume !revert && gas >= 0;
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND FALSE  !(!(owner_s625 != null))
[L5980]               __var_25 := null;
[L5981]   COND FALSE  !(!(spender_s625 != null))
[L5985]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5986]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5987]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5988]               assert { :EventEmitted "Approval_ERC20" } true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND FALSE  !(revert)
[L5247]               __ret_0_ := true;
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND FALSE  !(!(owner_s625 != null))
[L5980]               __var_25 := null;
[L5981]   COND FALSE  !(!(spender_s625 != null))
[L5985]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5986]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5987]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5988]               assert { :EventEmitted "Approval_ERC20" } true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND FALSE  !(revert)
[L5247]               __ret_0_ := true;
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:30:24,083 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:30:24,083 INFO  L82        PathProgramCache]: Analyzing trace with hash -1019738927, now seen corresponding path program 1 times
[2020-11-25 03:30:24,084 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:30:24,100 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:30:24,276 INFO  L134       CoverageAnalysis]: Checked inductivity of 1673 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1673 trivial. 0 not checked.
[2020-11-25 03:30:24,276 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:30:24,276 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:30:24,277 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:30:24,277 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:30:24,277 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:30:24,277 INFO  L87              Difference]: Start difference. First operand 7958 states and 9440 transitions. cyclomatic complexity: 1486 Second operand 3 states.
[2020-11-25 03:30:24,348 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:30:24,348 INFO  L93              Difference]: Finished difference Result 7974 states and 9457 transitions.
[2020-11-25 03:30:24,348 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:30:24,348 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7974 states and 9457 transitions.
[2020-11-25 03:30:24,360 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 03:30:24,373 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7974 states to 7974 states and 9457 transitions.
[2020-11-25 03:30:24,373 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1766
[2020-11-25 03:30:24,374 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1766
[2020-11-25 03:30:24,374 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7974 states and 9457 transitions.
[2020-11-25 03:30:24,378 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:30:24,378 INFO  L728         BuchiCegarLoop]: Abstraction has 7974 states and 9457 transitions.
[2020-11-25 03:30:24,382 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7974 states and 9457 transitions.
[2020-11-25 03:30:24,415 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7974 to 7966.
[2020-11-25 03:30:24,415 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7966 states.
[2020-11-25 03:30:24,423 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7966 states to 7966 states and 9448 transitions.
[2020-11-25 03:30:24,423 INFO  L751         BuchiCegarLoop]: Abstraction has 7966 states and 9448 transitions.
[2020-11-25 03:30:24,423 INFO  L631         BuchiCegarLoop]: Abstraction has 7966 states and 9448 transitions.
[2020-11-25 03:30:24,423 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 03:30:24,423 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7966 states and 9448 transitions.
[2020-11-25 03:30:24,430 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 03:30:24,430 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:30:24,430 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:30:24,432 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:30:24,432 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11226]              assume null == 0;
[L11227]  CALL        call this := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L11227]  RET         call this := FreshRefGenerator__success();
[L11228]              assume now >= 0;
[L11229]              assume DType[this] == RewardToken;
[L11230]              assume msgvalue_MSG == 0;
[L11231]              gas := gas - 53000;
[L11232]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3169]               havoc __exception;
[L3170]               revert := false;
[L3171]   COND FALSE  !(__exception)
[L3202]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7628]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L7628]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7632]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L7632]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7633]   COND FALSE  !(revert)
[L7636]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L7636]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7637]   COND FALSE  !(revert)
[L7640]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6996]               assume msgsender_MSG != null;
[L6997]               Balance[this] := 0;
[L6998]               _name_ERC20Detailed[this] := 724207837;
[L6999]               _symbol_ERC20Detailed[this] := 724207837;
[L7000]               _decimals_ERC20Detailed[this] := 0;
[L7002]               _name_ERC20Detailed[this] := name_s952;
[L7003]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7004]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7025]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7026]   COND FALSE  !(revert)
[L7640]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7641]   COND FALSE  !(revert)
[L7644]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L7644]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7645]   COND FALSE  !(revert)
[L7648]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6723]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6724]   COND FALSE  !(revert)
[L6727]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6727]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6728]   COND FALSE  !(revert)
[L6731]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6731]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6732]   COND FALSE  !(revert)
[L6735]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6735]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6736]   COND FALSE  !(revert)
[L6739]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6692]               assume msgsender_MSG != null;
[L6693]               Balance[this] := 0;
[L6739]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6740]   COND FALSE  !(revert)
[L7648]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7649]   COND FALSE  !(revert)
[L7652]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6859]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6859]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L6863]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6863]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6864]   COND FALSE  !(revert)
[L6867]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6867]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6871]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L6875]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6723]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6724]   COND FALSE  !(revert)
[L6727]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6727]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6728]   COND FALSE  !(revert)
[L6731]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6731]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6732]   COND FALSE  !(revert)
[L6735]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6735]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6736]   COND FALSE  !(revert)
[L6739]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6692]               assume msgsender_MSG != null;
[L6693]               Balance[this] := 0;
[L6739]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6740]   COND FALSE  !(revert)
[L6875]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6818]               assume msgsender_MSG != null;
[L6819]               Balance[this] := 0;
[L6820]               _cap_ERC20Capped[this] := 0;
[L6822]   COND FALSE  !(!(cap_s886 > 0))
[L6826]               _cap_ERC20Capped[this] := cap_s886;
[L6879]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6880]   COND FALSE  !(revert)
[L7652]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7653]   COND FALSE  !(revert)
[L7656]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7442]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7415]               assume msgsender_MSG != null;
[L7416]               Balance[this] := 0;
[L7418]               __var_48 := null;
[L7419]   COND FALSE  !(!(_store_s1208 != null))
[L7423]               assume DType[_store_s1208] == Storage;
[L7424]               __var_49 := _store_s1208;
[L7425]               store_Governable[this] := __var_49;
[L7442]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7443]   COND FALSE  !(revert)
[L7656]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7657]   COND FALSE  !(revert)
[L7660]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7554]               assume msgsender_MSG != null;
[L7555]               Balance[this] := 0;
[L7556]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7558]   COND TRUE   DType[this] == RewardToken
[L7559]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6599]   COND FALSE  !(DType[this] == RewardToken)
[L6604]   COND FALSE  !(DType[this] == ERC20Capped)
[L6609]   COND TRUE   DType[this] == ERC20Mintable
[L6610]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6610]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6611]   COND FALSE  !(revert)
[L6622]   COND TRUE   DType[this] == RewardToken
[L6623]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6674]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6274]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6274]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6275]   COND FALSE  !(revert)
[L6278]   COND FALSE  !(!__var_30)
[L6282]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6674]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6675]   COND FALSE  !(revert)
[L6678]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6623]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6624]   COND FALSE  !(revert)
[L7559]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7560]   COND FALSE  !(revert)
[L7566]   COND TRUE   DType[this] == RewardToken
[L7567]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]               assume DType[store_Governable[this]] == Storage;
[L7499]               __var_54 := governance_Storage[store_Governable[this]];
[L7500]               __ret_0_ := __var_54;
[L7567]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7568]   COND FALSE  !(revert)
[L7574]   COND TRUE   DType[this] == RewardToken
[L7575]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7575]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7576]   COND FALSE  !(revert)
[L7660]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7661]   COND FALSE  !(revert)
[L3202]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3203]               assume !revert && gas >= 0;
[L11232]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11233]              assume !revert && gas >= 0;
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND FALSE  !(!(owner_s625 != null))
[L5980]               __var_25 := null;
[L5981]   COND FALSE  !(!(spender_s625 != null))
[L5985]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5986]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5987]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5988]               assert { :EventEmitted "Approval_ERC20" } true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND FALSE  !(revert)
[L5247]               __ret_0_ := true;
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND FALSE  !(!(owner_s625 != null))
[L5980]               __var_25 := null;
[L5981]   COND FALSE  !(!(spender_s625 != null))
[L5985]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5986]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5987]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5988]               assert { :EventEmitted "Approval_ERC20" } true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND FALSE  !(revert)
[L5247]               __ret_0_ := true;
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:30:24,437 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:30:24,437 INFO  L82        PathProgramCache]: Analyzing trace with hash 1335490087, now seen corresponding path program 1 times
[2020-11-25 03:30:24,438 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:30:24,456 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:30:24,637 INFO  L134       CoverageAnalysis]: Checked inductivity of 1673 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1673 trivial. 0 not checked.
[2020-11-25 03:30:24,637 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:30:24,637 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:30:24,638 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:30:24,638 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:30:24,638 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:30:24,638 INFO  L87              Difference]: Start difference. First operand 7966 states and 9448 transitions. cyclomatic complexity: 1486 Second operand 3 states.
[2020-11-25 03:30:24,691 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:30:24,691 INFO  L93              Difference]: Finished difference Result 7978 states and 9461 transitions.
[2020-11-25 03:30:24,691 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:30:24,691 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7978 states and 9461 transitions.
[2020-11-25 03:30:24,703 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 03:30:24,717 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7978 states to 7978 states and 9461 transitions.
[2020-11-25 03:30:24,717 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1766
[2020-11-25 03:30:24,718 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1766
[2020-11-25 03:30:24,718 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7978 states and 9461 transitions.
[2020-11-25 03:30:24,722 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:30:24,722 INFO  L728         BuchiCegarLoop]: Abstraction has 7978 states and 9461 transitions.
[2020-11-25 03:30:24,726 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7978 states and 9461 transitions.
[2020-11-25 03:30:24,761 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7978 to 7970.
[2020-11-25 03:30:24,761 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7970 states.
[2020-11-25 03:30:24,769 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7970 states to 7970 states and 9452 transitions.
[2020-11-25 03:30:24,769 INFO  L751         BuchiCegarLoop]: Abstraction has 7970 states and 9452 transitions.
[2020-11-25 03:30:24,769 INFO  L631         BuchiCegarLoop]: Abstraction has 7970 states and 9452 transitions.
[2020-11-25 03:30:24,769 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 03:30:24,769 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7970 states and 9452 transitions.
[2020-11-25 03:30:24,777 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 03:30:24,777 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:30:24,777 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:30:24,778 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:30:24,778 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11226]              assume null == 0;
[L11227]  CALL        call this := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L11227]  RET         call this := FreshRefGenerator__success();
[L11228]              assume now >= 0;
[L11229]              assume DType[this] == RewardToken;
[L11230]              assume msgvalue_MSG == 0;
[L11231]              gas := gas - 53000;
[L11232]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3169]               havoc __exception;
[L3170]               revert := false;
[L3171]   COND FALSE  !(__exception)
[L3202]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7628]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L7628]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7632]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L7632]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7633]   COND FALSE  !(revert)
[L7636]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L7636]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7637]   COND FALSE  !(revert)
[L7640]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6996]               assume msgsender_MSG != null;
[L6997]               Balance[this] := 0;
[L6998]               _name_ERC20Detailed[this] := 724207837;
[L6999]               _symbol_ERC20Detailed[this] := 724207837;
[L7000]               _decimals_ERC20Detailed[this] := 0;
[L7002]               _name_ERC20Detailed[this] := name_s952;
[L7003]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7004]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7025]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7026]   COND FALSE  !(revert)
[L7640]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7641]   COND FALSE  !(revert)
[L7644]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L7644]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7645]   COND FALSE  !(revert)
[L7648]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6723]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6724]   COND FALSE  !(revert)
[L6727]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6727]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6728]   COND FALSE  !(revert)
[L6731]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6731]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6732]   COND FALSE  !(revert)
[L6735]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6735]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6736]   COND FALSE  !(revert)
[L6739]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6692]               assume msgsender_MSG != null;
[L6693]               Balance[this] := 0;
[L6739]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6740]   COND FALSE  !(revert)
[L7648]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7649]   COND FALSE  !(revert)
[L7652]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6859]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6859]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L6863]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6863]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6864]   COND FALSE  !(revert)
[L6867]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6867]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6871]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L6875]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6723]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6724]   COND FALSE  !(revert)
[L6727]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6727]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6728]   COND FALSE  !(revert)
[L6731]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6731]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6732]   COND FALSE  !(revert)
[L6735]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6735]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6736]   COND FALSE  !(revert)
[L6739]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6692]               assume msgsender_MSG != null;
[L6693]               Balance[this] := 0;
[L6739]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6740]   COND FALSE  !(revert)
[L6875]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6818]               assume msgsender_MSG != null;
[L6819]               Balance[this] := 0;
[L6820]               _cap_ERC20Capped[this] := 0;
[L6822]   COND FALSE  !(!(cap_s886 > 0))
[L6826]               _cap_ERC20Capped[this] := cap_s886;
[L6879]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6880]   COND FALSE  !(revert)
[L7652]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7653]   COND FALSE  !(revert)
[L7656]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7442]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7415]               assume msgsender_MSG != null;
[L7416]               Balance[this] := 0;
[L7418]               __var_48 := null;
[L7419]   COND FALSE  !(!(_store_s1208 != null))
[L7423]               assume DType[_store_s1208] == Storage;
[L7424]               __var_49 := _store_s1208;
[L7425]               store_Governable[this] := __var_49;
[L7442]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7443]   COND FALSE  !(revert)
[L7656]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7657]   COND FALSE  !(revert)
[L7660]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7554]               assume msgsender_MSG != null;
[L7555]               Balance[this] := 0;
[L7556]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7558]   COND TRUE   DType[this] == RewardToken
[L7559]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6599]   COND TRUE   DType[this] == RewardToken
[L6600]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6600]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6601]   COND FALSE  !(revert)
[L6622]   COND FALSE  !(DType[this] == RewardToken)
[L6627]   COND FALSE  !(DType[this] == ERC20Capped)
[L6632]   COND TRUE   DType[this] == ERC20Mintable
[L6633]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6674]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6274]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6274]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6275]   COND FALSE  !(revert)
[L6278]   COND FALSE  !(!__var_30)
[L6282]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6674]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6675]   COND FALSE  !(revert)
[L6678]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6633]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6634]   COND FALSE  !(revert)
[L7559]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7560]   COND FALSE  !(revert)
[L7566]   COND TRUE   DType[this] == RewardToken
[L7567]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]               assume DType[store_Governable[this]] == Storage;
[L7499]               __var_54 := governance_Storage[store_Governable[this]];
[L7500]               __ret_0_ := __var_54;
[L7567]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7568]   COND FALSE  !(revert)
[L7574]   COND TRUE   DType[this] == RewardToken
[L7575]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7575]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7576]   COND FALSE  !(revert)
[L7660]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7661]   COND FALSE  !(revert)
[L3202]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3203]               assume !revert && gas >= 0;
[L11232]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11233]              assume !revert && gas >= 0;
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND FALSE  !(!(owner_s625 != null))
[L5980]               __var_25 := null;
[L5981]   COND FALSE  !(!(spender_s625 != null))
[L5985]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5986]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5987]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5988]               assert { :EventEmitted "Approval_ERC20" } true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND FALSE  !(revert)
[L5247]               __ret_0_ := true;
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND FALSE  !(!(owner_s625 != null))
[L5980]               __var_25 := null;
[L5981]   COND FALSE  !(!(spender_s625 != null))
[L5985]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5986]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5987]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5988]               assert { :EventEmitted "Approval_ERC20" } true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND FALSE  !(revert)
[L5247]               __ret_0_ := true;
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:30:24,783 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:30:24,783 INFO  L82        PathProgramCache]: Analyzing trace with hash -104865565, now seen corresponding path program 1 times
[2020-11-25 03:30:24,784 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:30:24,804 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:30:25,056 INFO  L134       CoverageAnalysis]: Checked inductivity of 1673 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1673 trivial. 0 not checked.
[2020-11-25 03:30:25,057 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:30:25,057 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:30:25,057 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:30:25,057 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:30:25,057 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:30:25,057 INFO  L87              Difference]: Start difference. First operand 7970 states and 9452 transitions. cyclomatic complexity: 1486 Second operand 3 states.
[2020-11-25 03:30:25,107 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:30:25,108 INFO  L93              Difference]: Finished difference Result 7978 states and 9457 transitions.
[2020-11-25 03:30:25,108 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:30:25,108 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7978 states and 9457 transitions.
[2020-11-25 03:30:25,119 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 03:30:25,132 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7978 states to 7978 states and 9457 transitions.
[2020-11-25 03:30:25,132 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1766
[2020-11-25 03:30:25,133 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1766
[2020-11-25 03:30:25,133 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7978 states and 9457 transitions.
[2020-11-25 03:30:25,137 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:30:25,137 INFO  L728         BuchiCegarLoop]: Abstraction has 7978 states and 9457 transitions.
[2020-11-25 03:30:25,141 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7978 states and 9457 transitions.
[2020-11-25 03:30:25,174 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7978 to 7970.
[2020-11-25 03:30:25,174 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7970 states.
[2020-11-25 03:30:25,182 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7970 states to 7970 states and 9448 transitions.
[2020-11-25 03:30:25,182 INFO  L751         BuchiCegarLoop]: Abstraction has 7970 states and 9448 transitions.
[2020-11-25 03:30:25,182 INFO  L631         BuchiCegarLoop]: Abstraction has 7970 states and 9448 transitions.
[2020-11-25 03:30:25,182 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 03:30:25,182 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7970 states and 9448 transitions.
[2020-11-25 03:30:25,190 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 03:30:25,190 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:30:25,190 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:30:25,191 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:30:25,191 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11226]              assume null == 0;
[L11227]  CALL        call this := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L11227]  RET         call this := FreshRefGenerator__success();
[L11228]              assume now >= 0;
[L11229]              assume DType[this] == RewardToken;
[L11230]              assume msgvalue_MSG == 0;
[L11231]              gas := gas - 53000;
[L11232]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3169]               havoc __exception;
[L3170]               revert := false;
[L3171]   COND FALSE  !(__exception)
[L3202]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7628]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L7628]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7632]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L7632]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7633]   COND FALSE  !(revert)
[L7636]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L7636]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7637]   COND FALSE  !(revert)
[L7640]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6996]               assume msgsender_MSG != null;
[L6997]               Balance[this] := 0;
[L6998]               _name_ERC20Detailed[this] := 724207837;
[L6999]               _symbol_ERC20Detailed[this] := 724207837;
[L7000]               _decimals_ERC20Detailed[this] := 0;
[L7002]               _name_ERC20Detailed[this] := name_s952;
[L7003]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7004]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7025]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7026]   COND FALSE  !(revert)
[L7640]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7641]   COND FALSE  !(revert)
[L7644]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L7644]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7645]   COND FALSE  !(revert)
[L7648]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6723]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6724]   COND FALSE  !(revert)
[L6727]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6727]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6728]   COND FALSE  !(revert)
[L6731]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6731]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6732]   COND FALSE  !(revert)
[L6735]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6735]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6736]   COND FALSE  !(revert)
[L6739]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6692]               assume msgsender_MSG != null;
[L6693]               Balance[this] := 0;
[L6739]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6740]   COND FALSE  !(revert)
[L7648]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7649]   COND FALSE  !(revert)
[L7652]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6859]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6859]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L6863]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6863]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6864]   COND FALSE  !(revert)
[L6867]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6867]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6871]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L6875]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6723]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6724]   COND FALSE  !(revert)
[L6727]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6727]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6728]   COND FALSE  !(revert)
[L6731]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6731]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6732]   COND FALSE  !(revert)
[L6735]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6735]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6736]   COND FALSE  !(revert)
[L6739]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6692]               assume msgsender_MSG != null;
[L6693]               Balance[this] := 0;
[L6739]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6740]   COND FALSE  !(revert)
[L6875]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6818]               assume msgsender_MSG != null;
[L6819]               Balance[this] := 0;
[L6820]               _cap_ERC20Capped[this] := 0;
[L6822]   COND FALSE  !(!(cap_s886 > 0))
[L6826]               _cap_ERC20Capped[this] := cap_s886;
[L6879]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6880]   COND FALSE  !(revert)
[L7652]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7653]   COND FALSE  !(revert)
[L7656]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7442]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7415]               assume msgsender_MSG != null;
[L7416]               Balance[this] := 0;
[L7418]               __var_48 := null;
[L7419]   COND FALSE  !(!(_store_s1208 != null))
[L7423]               assume DType[_store_s1208] == Storage;
[L7424]               __var_49 := _store_s1208;
[L7425]               store_Governable[this] := __var_49;
[L7442]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7443]   COND FALSE  !(revert)
[L7656]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7657]   COND FALSE  !(revert)
[L7660]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7554]               assume msgsender_MSG != null;
[L7555]               Balance[this] := 0;
[L7556]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7558]   COND TRUE   DType[this] == RewardToken
[L7559]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6599]   COND TRUE   DType[this] == RewardToken
[L6600]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6600]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6601]   COND FALSE  !(revert)
[L6622]   COND TRUE   DType[this] == RewardToken
[L6623]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6674]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6274]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6274]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6275]   COND FALSE  !(revert)
[L6278]   COND FALSE  !(!__var_30)
[L6282]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6674]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6675]   COND FALSE  !(revert)
[L6678]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6623]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6624]   COND FALSE  !(revert)
[L7559]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7560]   COND FALSE  !(revert)
[L7566]   COND TRUE   DType[this] == RewardToken
[L7567]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]               assume DType[store_Governable[this]] == Storage;
[L7499]               __var_54 := governance_Storage[store_Governable[this]];
[L7500]               __ret_0_ := __var_54;
[L7567]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7568]   COND FALSE  !(revert)
[L7574]   COND TRUE   DType[this] == RewardToken
[L7575]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7575]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7576]   COND FALSE  !(revert)
[L7660]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7661]   COND FALSE  !(revert)
[L3202]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3203]               assume !revert && gas >= 0;
[L11232]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11233]              assume !revert && gas >= 0;
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND FALSE  !(!(owner_s625 != null))
[L5980]               __var_25 := null;
[L5981]   COND FALSE  !(!(spender_s625 != null))
[L5985]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5986]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5987]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5988]               assert { :EventEmitted "Approval_ERC20" } true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND FALSE  !(revert)
[L5247]               __ret_0_ := true;
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND FALSE  !(__exception)
[L731]    CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5201]   COND TRUE   DType[this] == RewardToken
[L5202]   CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L5202]   RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5203]   COND FALSE  !(revert)
[L5224]   COND TRUE   DType[this] == RewardToken
[L5225]   CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5975]               __var_24 := null;
[L5976]   COND FALSE  !(!(owner_s625 != null))
[L5980]               __var_25 := null;
[L5981]   COND FALSE  !(!(spender_s625 != null))
[L5985]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] - _allowances_ERC20[this][owner_s625][spender_s625];
[L5986]               _allowances_ERC20[this][owner_s625][spender_s625] := amount_s625;
[L5987]               sum__allowances1[owner_s625] := sum__allowances1[owner_s625] + _allowances_ERC20[this][owner_s625][spender_s625];
[L5988]               assert { :EventEmitted "Approval_ERC20" } true;
[L5225]   RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5226]   COND FALSE  !(revert)
[L5247]               __ret_0_ := true;
[L731]    RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L732]                assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s347] == amount_s347) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:30:25,196 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:30:25,196 INFO  L82        PathProgramCache]: Analyzing trace with hash -441948031, now seen corresponding path program 1 times
[2020-11-25 03:30:25,197 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:30:25,243 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:30:25,692 INFO  L134       CoverageAnalysis]: Checked inductivity of 1673 backedges. 34 proven. 0 refuted. 0 times theorem prover too weak. 1639 trivial. 0 not checked.
[2020-11-25 03:30:25,692 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:30:25,692 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 03:30:25,693 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:30:25,693 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 03:30:25,693 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=38, Invalid=304, Unknown=0, NotChecked=0, Total=342
[2020-11-25 03:30:25,693 INFO  L87              Difference]: Start difference. First operand 7970 states and 9448 transitions. cyclomatic complexity: 1482 Second operand 19 states.
[2020-11-25 03:30:31,991 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:30:31,992 INFO  L93              Difference]: Finished difference Result 8163 states and 9701 transitions.
[2020-11-25 03:30:31,992 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 03:30:31,992 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8163 states and 9701 transitions.
[2020-11-25 03:30:32,007 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 03:30:32,024 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8163 states to 8163 states and 9701 transitions.
[2020-11-25 03:30:32,024 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1809
[2020-11-25 03:30:32,025 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1809
[2020-11-25 03:30:32,025 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8163 states and 9701 transitions.
[2020-11-25 03:30:32,029 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:30:32,029 INFO  L728         BuchiCegarLoop]: Abstraction has 8163 states and 9701 transitions.
[2020-11-25 03:30:32,033 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8163 states and 9701 transitions.
[2020-11-25 03:30:32,083 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8163 to 7984.
[2020-11-25 03:30:32,084 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7984 states.
[2020-11-25 03:30:32,093 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7984 states to 7984 states and 9472 transitions.
[2020-11-25 03:30:32,093 INFO  L751         BuchiCegarLoop]: Abstraction has 7984 states and 9472 transitions.
[2020-11-25 03:30:32,093 INFO  L631         BuchiCegarLoop]: Abstraction has 7984 states and 9472 transitions.
[2020-11-25 03:30:32,093 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 03:30:32,093 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7984 states and 9472 transitions.
[2020-11-25 03:30:32,101 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 10
[2020-11-25 03:30:32,101 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:30:32,101 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:30:32,105 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:30:32,105 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11226]              assume null == 0;
[L11227]  CALL        call this := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L11227]  RET         call this := FreshRefGenerator__success();
[L11228]              assume now >= 0;
[L11229]              assume DType[this] == RewardToken;
[L11230]              assume msgvalue_MSG == 0;
[L11231]              gas := gas - 53000;
[L11232]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3169]               havoc __exception;
[L3170]               revert := false;
[L3171]   COND FALSE  !(__exception)
[L3202]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7628]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L7628]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7632]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L7632]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7633]   COND FALSE  !(revert)
[L7636]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L7636]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7637]   COND FALSE  !(revert)
[L7640]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6996]               assume msgsender_MSG != null;
[L6997]               Balance[this] := 0;
[L6998]               _name_ERC20Detailed[this] := 724207837;
[L6999]               _symbol_ERC20Detailed[this] := 724207837;
[L7000]               _decimals_ERC20Detailed[this] := 0;
[L7002]               _name_ERC20Detailed[this] := name_s952;
[L7003]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7004]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7025]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7026]   COND FALSE  !(revert)
[L7640]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7641]   COND FALSE  !(revert)
[L7644]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L7644]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7645]   COND FALSE  !(revert)
[L7648]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6723]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6724]   COND FALSE  !(revert)
[L6727]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6727]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6728]   COND FALSE  !(revert)
[L6731]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6731]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6732]   COND FALSE  !(revert)
[L6735]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6735]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6736]   COND FALSE  !(revert)
[L6739]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6692]               assume msgsender_MSG != null;
[L6693]               Balance[this] := 0;
[L6739]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6740]   COND FALSE  !(revert)
[L7648]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7649]   COND FALSE  !(revert)
[L7652]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6859]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6859]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L6863]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6863]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6864]   COND FALSE  !(revert)
[L6867]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6867]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6871]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L6875]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6723]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6724]   COND FALSE  !(revert)
[L6727]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6727]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6728]   COND FALSE  !(revert)
[L6731]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6731]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6732]   COND FALSE  !(revert)
[L6735]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6735]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6736]   COND FALSE  !(revert)
[L6739]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6692]               assume msgsender_MSG != null;
[L6693]               Balance[this] := 0;
[L6739]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6740]   COND FALSE  !(revert)
[L6875]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6818]               assume msgsender_MSG != null;
[L6819]               Balance[this] := 0;
[L6820]               _cap_ERC20Capped[this] := 0;
[L6822]   COND FALSE  !(!(cap_s886 > 0))
[L6826]               _cap_ERC20Capped[this] := cap_s886;
[L6879]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6880]   COND FALSE  !(revert)
[L7652]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7653]   COND FALSE  !(revert)
[L7656]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7442]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7415]               assume msgsender_MSG != null;
[L7416]               Balance[this] := 0;
[L7418]               __var_48 := null;
[L7419]   COND FALSE  !(!(_store_s1208 != null))
[L7423]               assume DType[_store_s1208] == Storage;
[L7424]               __var_49 := _store_s1208;
[L7425]               store_Governable[this] := __var_49;
[L7442]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7443]   COND FALSE  !(revert)
[L7656]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7657]   COND FALSE  !(revert)
[L7660]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7554]               assume msgsender_MSG != null;
[L7555]               Balance[this] := 0;
[L7556]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7558]   COND TRUE   DType[this] == RewardToken
[L7559]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6599]   COND TRUE   DType[this] == RewardToken
[L6600]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6600]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6601]   COND FALSE  !(revert)
[L6622]   COND TRUE   DType[this] == RewardToken
[L6623]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6674]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6274]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6274]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6275]   COND FALSE  !(revert)
[L6278]   COND FALSE  !(!__var_30)
[L6282]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6674]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6675]   COND FALSE  !(revert)
[L6678]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6623]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6624]   COND FALSE  !(revert)
[L7559]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7560]   COND FALSE  !(revert)
[L7566]   COND TRUE   DType[this] == RewardToken
[L7567]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]               assume DType[store_Governable[this]] == Storage;
[L7499]               __var_54 := governance_Storage[store_Governable[this]];
[L7500]               __ret_0_ := __var_54;
[L7567]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7568]   COND FALSE  !(revert)
[L7574]   COND TRUE   DType[this] == RewardToken
[L7575]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7575]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7576]   COND FALSE  !(revert)
[L7660]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7661]   COND FALSE  !(revert)
[L3202]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3203]               assume !revert && gas >= 0;
[L11232]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11233]              assume !revert && gas >= 0;
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND TRUE   __exception
[L701]                __tmp__Balance := Balance;
[L702]                __tmp__DType := DType;
[L703]                __tmp__Alloc := Alloc;
[L704]                __tmp__balance_ADDR := balance_ADDR;
[L705]                __tmp__M_Ref_int := M_Ref_int;
[L706]                __tmp__sum__balances0 := sum__balances0;
[L707]                __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L708]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L709]                __tmp__sum__allowances1 := sum__allowances1;
[L710]                __tmp__M_Ref_bool := M_Ref_bool;
[L711]                __tmp__sum := sum;
[L712]                __tmp__Length := Length;
[L713]                __tmp__now := now;
[L714]                __tmp___balances_ERC20 := _balances_ERC20;
[L715]                __tmp___allowances_ERC20 := _allowances_ERC20;
[L716]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L717]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L718]                __tmp___minters_MinterRole := _minters_MinterRole;
[L719]                __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L720]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L721]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L722]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L723]                __tmp___owner_Ownable := _owner_Ownable;
[L724]                __tmp__governance_Storage := governance_Storage;
[L725]                __tmp__controller_Storage := controller_Storage;
[L726]                __tmp__store_Governable := store_Governable;
[L727]                __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L728]    CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5148]   COND TRUE   __tmp__DType[this] == RewardToken
[L5149]   CALL        call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L5149]   RET         call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5150]   COND FALSE  !(revert)
[L5171]   COND TRUE   __tmp__DType[this] == RewardToken
[L5172]   CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5956]               __var_24 := null;
[L5957]   COND TRUE   !(owner_s625 != null)
[L5958]               revert := true;
[L5172]   RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5173]   COND TRUE   revert
[L728]    RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L729]                assume revert || gas < 0;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND TRUE   __exception
[L701]                __tmp__Balance := Balance;
[L702]                __tmp__DType := DType;
[L703]                __tmp__Alloc := Alloc;
[L704]                __tmp__balance_ADDR := balance_ADDR;
[L705]                __tmp__M_Ref_int := M_Ref_int;
[L706]                __tmp__sum__balances0 := sum__balances0;
[L707]                __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L708]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L709]                __tmp__sum__allowances1 := sum__allowances1;
[L710]                __tmp__M_Ref_bool := M_Ref_bool;
[L711]                __tmp__sum := sum;
[L712]                __tmp__Length := Length;
[L713]                __tmp__now := now;
[L714]                __tmp___balances_ERC20 := _balances_ERC20;
[L715]                __tmp___allowances_ERC20 := _allowances_ERC20;
[L716]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L717]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L718]                __tmp___minters_MinterRole := _minters_MinterRole;
[L719]                __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L720]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L721]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L722]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L723]                __tmp___owner_Ownable := _owner_Ownable;
[L724]                __tmp__governance_Storage := governance_Storage;
[L725]                __tmp__controller_Storage := controller_Storage;
[L726]                __tmp__store_Governable := store_Governable;
[L727]                __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L728]    CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5148]   COND TRUE   __tmp__DType[this] == RewardToken
[L5149]   CALL        call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L5149]   RET         call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5150]   COND FALSE  !(revert)
[L5171]   COND TRUE   __tmp__DType[this] == RewardToken
[L5172]   CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5956]               __var_24 := null;
[L5957]   COND TRUE   !(owner_s625 != null)
[L5958]               revert := true;
[L5172]   RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5173]   COND TRUE   revert
[L728]    RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L729]                assume revert || gas < 0;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:30:32,110 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:30:32,110 INFO  L82        PathProgramCache]: Analyzing trace with hash 898849679, now seen corresponding path program 1 times
[2020-11-25 03:30:32,111 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:30:32,133 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:30:32,332 INFO  L134       CoverageAnalysis]: Checked inductivity of 1673 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1673 trivial. 0 not checked.
[2020-11-25 03:30:32,332 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:30:32,333 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 03:30:32,333 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:30:32,333 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 03:30:32,333 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 03:30:32,333 INFO  L87              Difference]: Start difference. First operand 7984 states and 9472 transitions. cyclomatic complexity: 1495 Second operand 8 states.
[2020-11-25 03:30:32,515 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:30:32,515 INFO  L93              Difference]: Finished difference Result 8020 states and 9536 transitions.
[2020-11-25 03:30:32,516 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 03:30:32,516 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8020 states and 9536 transitions.
[2020-11-25 03:30:32,529 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 10
[2020-11-25 03:30:32,545 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8020 states to 7988 states and 9498 transitions.
[2020-11-25 03:30:32,545 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1780
[2020-11-25 03:30:32,546 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1780
[2020-11-25 03:30:32,546 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7988 states and 9498 transitions.
[2020-11-25 03:30:32,550 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:30:32,550 INFO  L728         BuchiCegarLoop]: Abstraction has 7988 states and 9498 transitions.
[2020-11-25 03:30:32,554 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7988 states and 9498 transitions.
[2020-11-25 03:30:32,596 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7988 to 7988.
[2020-11-25 03:30:32,596 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7988 states.
[2020-11-25 03:30:32,605 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7988 states to 7988 states and 9498 transitions.
[2020-11-25 03:30:32,605 INFO  L751         BuchiCegarLoop]: Abstraction has 7988 states and 9498 transitions.
[2020-11-25 03:30:32,606 INFO  L631         BuchiCegarLoop]: Abstraction has 7988 states and 9498 transitions.
[2020-11-25 03:30:32,606 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 03:30:32,606 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7988 states and 9498 transitions.
[2020-11-25 03:30:32,614 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 10
[2020-11-25 03:30:32,614 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:30:32,614 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:30:32,616 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:30:32,616 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11226]              assume null == 0;
[L11227]  CALL        call this := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L11227]  RET         call this := FreshRefGenerator__success();
[L11228]              assume now >= 0;
[L11229]              assume DType[this] == RewardToken;
[L11230]              assume msgvalue_MSG == 0;
[L11231]              gas := gas - 53000;
[L11232]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3169]               havoc __exception;
[L3170]               revert := false;
[L3171]   COND FALSE  !(__exception)
[L3202]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7628]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L7628]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7632]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L7632]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7633]   COND FALSE  !(revert)
[L7636]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L7636]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7637]   COND FALSE  !(revert)
[L7640]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6996]               assume msgsender_MSG != null;
[L6997]               Balance[this] := 0;
[L6998]               _name_ERC20Detailed[this] := 724207837;
[L6999]               _symbol_ERC20Detailed[this] := 724207837;
[L7000]               _decimals_ERC20Detailed[this] := 0;
[L7002]               _name_ERC20Detailed[this] := name_s952;
[L7003]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7004]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7025]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7026]   COND FALSE  !(revert)
[L7640]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7641]   COND FALSE  !(revert)
[L7644]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L7644]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7645]   COND FALSE  !(revert)
[L7648]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6723]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6724]   COND FALSE  !(revert)
[L6727]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6727]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6728]   COND FALSE  !(revert)
[L6731]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6731]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6732]   COND FALSE  !(revert)
[L6735]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6735]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6736]   COND FALSE  !(revert)
[L6739]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6692]               assume msgsender_MSG != null;
[L6693]               Balance[this] := 0;
[L6739]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6740]   COND FALSE  !(revert)
[L7648]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7649]   COND FALSE  !(revert)
[L7652]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6859]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6859]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L6863]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6863]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6864]   COND FALSE  !(revert)
[L6867]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6867]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6871]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L6875]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6723]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6724]   COND FALSE  !(revert)
[L6727]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6727]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6728]   COND FALSE  !(revert)
[L6731]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6731]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6732]   COND FALSE  !(revert)
[L6735]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6735]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6736]   COND FALSE  !(revert)
[L6739]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6692]               assume msgsender_MSG != null;
[L6693]               Balance[this] := 0;
[L6739]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6740]   COND FALSE  !(revert)
[L6875]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6818]               assume msgsender_MSG != null;
[L6819]               Balance[this] := 0;
[L6820]               _cap_ERC20Capped[this] := 0;
[L6822]   COND FALSE  !(!(cap_s886 > 0))
[L6826]               _cap_ERC20Capped[this] := cap_s886;
[L6879]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6880]   COND FALSE  !(revert)
[L7652]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7653]   COND FALSE  !(revert)
[L7656]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7442]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7415]               assume msgsender_MSG != null;
[L7416]               Balance[this] := 0;
[L7418]               __var_48 := null;
[L7419]   COND FALSE  !(!(_store_s1208 != null))
[L7423]               assume DType[_store_s1208] == Storage;
[L7424]               __var_49 := _store_s1208;
[L7425]               store_Governable[this] := __var_49;
[L7442]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7443]   COND FALSE  !(revert)
[L7656]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7657]   COND FALSE  !(revert)
[L7660]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7554]               assume msgsender_MSG != null;
[L7555]               Balance[this] := 0;
[L7556]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7558]   COND TRUE   DType[this] == RewardToken
[L7559]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6599]   COND TRUE   DType[this] == RewardToken
[L6600]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6600]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6601]   COND FALSE  !(revert)
[L6622]   COND TRUE   DType[this] == RewardToken
[L6623]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6674]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6274]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6274]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6275]   COND FALSE  !(revert)
[L6278]   COND FALSE  !(!__var_30)
[L6282]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6674]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6675]   COND FALSE  !(revert)
[L6678]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6623]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6624]   COND FALSE  !(revert)
[L7559]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7560]   COND FALSE  !(revert)
[L7566]   COND TRUE   DType[this] == RewardToken
[L7567]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]               assume DType[store_Governable[this]] == Storage;
[L7499]               __var_54 := governance_Storage[store_Governable[this]];
[L7500]               __ret_0_ := __var_54;
[L7567]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7568]   COND FALSE  !(revert)
[L7574]   COND TRUE   DType[this] == RewardToken
[L7575]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7575]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7576]   COND FALSE  !(revert)
[L7660]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7661]   COND FALSE  !(revert)
[L3202]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3203]               assume !revert && gas >= 0;
[L11232]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11233]              assume !revert && gas >= 0;
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND TRUE   __exception
[L701]                __tmp__Balance := Balance;
[L702]                __tmp__DType := DType;
[L703]                __tmp__Alloc := Alloc;
[L704]                __tmp__balance_ADDR := balance_ADDR;
[L705]                __tmp__M_Ref_int := M_Ref_int;
[L706]                __tmp__sum__balances0 := sum__balances0;
[L707]                __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L708]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L709]                __tmp__sum__allowances1 := sum__allowances1;
[L710]                __tmp__M_Ref_bool := M_Ref_bool;
[L711]                __tmp__sum := sum;
[L712]                __tmp__Length := Length;
[L713]                __tmp__now := now;
[L714]                __tmp___balances_ERC20 := _balances_ERC20;
[L715]                __tmp___allowances_ERC20 := _allowances_ERC20;
[L716]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L717]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L718]                __tmp___minters_MinterRole := _minters_MinterRole;
[L719]                __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L720]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L721]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L722]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L723]                __tmp___owner_Ownable := _owner_Ownable;
[L724]                __tmp__governance_Storage := governance_Storage;
[L725]                __tmp__controller_Storage := controller_Storage;
[L726]                __tmp__store_Governable := store_Governable;
[L727]                __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L728]    CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5148]   COND TRUE   __tmp__DType[this] == RewardToken
[L5149]   CALL        call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L5149]   RET         call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5150]   COND FALSE  !(revert)
[L5171]   COND TRUE   __tmp__DType[this] == RewardToken
[L5172]   CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5956]               __var_24 := null;
[L5957]   COND FALSE  !(!(owner_s625 != null))
[L5961]               __var_25 := null;
[L5962]   COND TRUE   !(spender_s625 != null)
[L5963]               revert := true;
[L5172]   RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5173]   COND TRUE   revert
[L728]    RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L729]                assume revert || gas < 0;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11236]  CALL        call CorralChoice_RewardToken(this);
[L11025]              havoc msgsender_MSG;
[L11026]              havoc msgvalue_MSG;
[L11027]              havoc choice;
[L11028]              havoc __ret_0_totalSupply;
[L11029]              havoc account_s293;
[L11030]              havoc __ret_0_balanceOf;
[L11031]              havoc recipient_s312;
[L11032]              havoc amount_s312;
[L11033]              havoc __ret_0_transfer;
[L11034]              havoc owner_s328;
[L11035]              havoc spender_s328;
[L11036]              havoc __ret_0_allowance;
[L11037]              havoc spender_s347;
[L11038]              havoc amount_s347;
[L11039]              havoc __ret_0_approve;
[L11040]              havoc sender_s383;
[L11041]              havoc recipient_s383;
[L11042]              havoc amount_s383;
[L11043]              havoc __ret_0_transferFrom;
[L11044]              havoc spender_s410;
[L11045]              havoc addedValue_s410;
[L11046]              havoc __ret_0_increaseAllowance;
[L11047]              havoc spender_s438;
[L11048]              havoc subtractedValue_s438;
[L11049]              havoc __ret_0_decreaseAllowance;
[L11050]              havoc account_s785;
[L11051]              havoc __ret_0_isMinter;
[L11052]              havoc _minter_s1315;
[L11053]              havoc account_s863;
[L11054]              havoc amount_s863;
[L11055]              havoc __ret_0_mint;
[L11056]              havoc cap_s886;
[L11057]              havoc __ret_0_cap;
[L11058]              havoc name_s952;
[L11059]              havoc symbol_s952;
[L11060]              havoc decimals_s952;
[L11061]              havoc __ret_0_name;
[L11062]              havoc __ret_0_symbol;
[L11063]              havoc __ret_0_decimals;
[L11064]              havoc __ret_0_governance;
[L11065]              havoc __ret_0_store;
[L11066]              havoc _store_s1208;
[L11067]              havoc _store_s1244;
[L11068]              havoc __ret_0_HARD_CAP;
[L11069]              havoc _storage_s1301;
[L11070]              havoc tmpNow;
[L11071]              havoc gas;
[L11072]              assume gas > 4000000 && gas <= 8000000;
[L11073]              tmpNow := now;
[L11074]              havoc now;
[L11075]              assume now > tmpNow;
[L11076]              assume msgsender_MSG != null;
[L11077]              assume DType[msgsender_MSG] != IERC20;
[L11078]              assume DType[msgsender_MSG] != Context;
[L11079]              assume DType[msgsender_MSG] != SafeMath;
[L11080]              assume DType[msgsender_MSG] != ERC20;
[L11081]              assume DType[msgsender_MSG] != Roles;
[L11082]              assume DType[msgsender_MSG] != MinterRole;
[L11083]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11084]              assume DType[msgsender_MSG] != ERC20Capped;
[L11085]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11086]              assume DType[msgsender_MSG] != Ownable;
[L11087]              assume DType[msgsender_MSG] != Storage;
[L11088]              assume DType[msgsender_MSG] != Governable;
[L11089]              assume DType[msgsender_MSG] != RewardToken;
[L11090]              Alloc[msgsender_MSG] := true;
[L11091]  COND FALSE  !(choice == 20)
[L11097]  COND FALSE  !(choice == 19)
[L11103]  COND FALSE  !(choice == 18)
[L11110]  COND FALSE  !(choice == 17)
[L11116]  COND TRUE   choice == 16
[L11117]              gas := gas - 21000;
[L11118]  COND TRUE   gas >= 0
[L11119]              assume amount_s347 >= 0 && amount_s347 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11120]              assume msgvalue_MSG == 0;
[L11121]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND TRUE   __exception
[L701]                __tmp__Balance := Balance;
[L702]                __tmp__DType := DType;
[L703]                __tmp__Alloc := Alloc;
[L704]                __tmp__balance_ADDR := balance_ADDR;
[L705]                __tmp__M_Ref_int := M_Ref_int;
[L706]                __tmp__sum__balances0 := sum__balances0;
[L707]                __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L708]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L709]                __tmp__sum__allowances1 := sum__allowances1;
[L710]                __tmp__M_Ref_bool := M_Ref_bool;
[L711]                __tmp__sum := sum;
[L712]                __tmp__Length := Length;
[L713]                __tmp__now := now;
[L714]                __tmp___balances_ERC20 := _balances_ERC20;
[L715]                __tmp___allowances_ERC20 := _allowances_ERC20;
[L716]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L717]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L718]                __tmp___minters_MinterRole := _minters_MinterRole;
[L719]                __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L720]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L721]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L722]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L723]                __tmp___owner_Ownable := _owner_Ownable;
[L724]                __tmp__governance_Storage := governance_Storage;
[L725]                __tmp__controller_Storage := controller_Storage;
[L726]                __tmp__store_Governable := store_Governable;
[L727]                __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L728]    CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5148]   COND TRUE   __tmp__DType[this] == RewardToken
[L5149]   CALL        call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L5149]   RET         call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5150]   COND FALSE  !(revert)
[L5171]   COND TRUE   __tmp__DType[this] == RewardToken
[L5172]   CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5956]               __var_24 := null;
[L5957]   COND FALSE  !(!(owner_s625 != null))
[L5961]               __var_25 := null;
[L5962]   COND TRUE   !(spender_s625 != null)
[L5963]               revert := true;
[L5172]   RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5173]   COND TRUE   revert
[L728]    RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L729]                assume revert || gas < 0;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L11236]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:30:32,620 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:30:32,621 INFO  L82        PathProgramCache]: Analyzing trace with hash -186152582, now seen corresponding path program 1 times
[2020-11-25 03:30:32,621 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:30:32,641 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:30:32,663 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:30:32,848 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:30:32,848 INFO  L82        PathProgramCache]: Analyzing trace with hash -2011910025, now seen corresponding path program 1 times
[2020-11-25 03:30:32,849 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:30:32,853 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:30:32,858 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:30:32,869 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:30:32,869 INFO  L82        PathProgramCache]: Analyzing trace with hash -1329632674, now seen corresponding path program 1 times
[2020-11-25 03:30:32,870 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:30:32,896 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:30:32,926 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #7: 2647 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2647 to 5281
Garbage collection #8: 5281 nodes / 0 free / 0.002s / 0.003s total
Resizing node table from 5281 to 10559
[2020-11-25 03:30:33,318 WARN  L188               SmtUtils]: Spent 110.00 ms on a formula simplification. DAG size of input: 118 DAG size of output: 112
[2020-11-25 03:30:33,448 WARN  L188               SmtUtils]: Spent 128.00 ms on a formula simplification that was a NOOP. DAG size: 293
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 7027 to 14051
[2020-11-25 03:30:34,157 WARN  L188               SmtUtils]: Spent 689.00 ms on a formula simplification. DAG size of input: 233 DAG size of output: 233
[2020-11-25 03:30:35,094 WARN  L188               SmtUtils]: Spent 933.00 ms on a formula simplification. DAG size of input: 314 DAG size of output: 298
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #8: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 03:30:35,320 WARN  L188               SmtUtils]: Spent 200.00 ms on a formula simplification. DAG size of input: 185 DAG size of output: 179
[2020-11-25 03:30:35,514 WARN  L188               SmtUtils]: Spent 191.00 ms on a formula simplification that was a NOOP. DAG size: 376
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #8: 18353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 18353 to 36697
[2020-11-25 03:30:36,034 WARN  L188               SmtUtils]: Spent 509.00 ms on a formula simplification. DAG size of input: 303 DAG size of output: 303
[2020-11-25 03:30:36,290 WARN  L188               SmtUtils]: Spent 254.00 ms on a formula simplification that was a NOOP. DAG size: 303
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
Garbage collection #8: 14051 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 14051 to 28099
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
[2020-11-25 03:30:36,533 WARN  L188               SmtUtils]: Spent 229.00 ms on a formula simplification. DAG size of input: 175 DAG size of output: 175
[2020-11-25 03:30:36,548 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
[2020-11-25 03:30:37,608 WARN  L188               SmtUtils]: Spent 144.00 ms on a formula simplification. DAG size of input: 232 DAG size of output: 217
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 03:30:38,348 WARN  L188               SmtUtils]: Spent 554.00 ms on a formula simplification. DAG size of input: 423 DAG size of output: 393
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9181 to 18353
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 03:30:38,704 WARN  L188               SmtUtils]: Spent 121.00 ms on a formula simplification that was a NOOP. DAG size: 360
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 03:30:38,817 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification that was a NOOP. DAG size: 328
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1327 to 2647
Garbage collection #7: 2647 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2647 to 5281
Garbage collection #8: 5281 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5281 to 10559
[2020-11-25 03:30:39,103 WARN  L188               SmtUtils]: Spent 131.00 ms on a formula simplification that was a NOOP. DAG size: 293
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 7027 to 14051
[2020-11-25 03:30:39,598 WARN  L188               SmtUtils]: Spent 480.00 ms on a formula simplification. DAG size of input: 233 DAG size of output: 233
[2020-11-25 03:30:40,344 WARN  L188               SmtUtils]: Spent 743.00 ms on a formula simplification. DAG size of input: 313 DAG size of output: 298
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #8: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
[2020-11-25 03:30:40,562 WARN  L188               SmtUtils]: Spent 200.00 ms on a formula simplification. DAG size of input: 191 DAG size of output: 179
[2020-11-25 03:30:40,751 WARN  L188               SmtUtils]: Spent 187.00 ms on a formula simplification that was a NOOP. DAG size: 376
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-25 03:30:41,238 WARN  L188               SmtUtils]: Spent 478.00 ms on a formula simplification. DAG size of input: 303 DAG size of output: 303
[2020-11-25 03:30:42,520 WARN  L188               SmtUtils]: Spent 1.28 s on a formula simplification. DAG size of input: 598 DAG size of output: 591
Garbage collection #1: 229 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 229 to 457
Garbage collection #2: 457 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 457 to 911
Garbage collection #3: 911 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 911 to 1811
Garbage collection #4: 1811 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1811 to 3617
Garbage collection #5: 3617 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3617 to 7229
Garbage collection #6: 7229 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7229 to 14449
Garbage collection #7: 14449 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 14449 to 28879
Garbage collection #8: 28879 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 28879 to 57751
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
[2020-11-25 03:30:43,534 WARN  L188               SmtUtils]: Spent 979.00 ms on a formula simplification. DAG size of input: 332 DAG size of output: 316
[2020-11-25 03:30:43,861 WARN  L188               SmtUtils]: Spent 300.00 ms on a formula simplification that was a NOOP. DAG size: 449
Garbage collection #1: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #2: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #3: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #4: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #5: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #6: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #7: 9973 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9973 to 19937
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #9: 26597 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 26597 to 53189
Garbage collection #10: 53189 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 53189 to 103183
[2020-11-25 03:30:44,730 WARN  L188               SmtUtils]: Spent 789.00 ms on a formula simplification. DAG size of input: 333 DAG size of output: 316
[2020-11-25 03:30:45,610 WARN  L188               SmtUtils]: Spent 878.00 ms on a formula simplification. DAG size of input: 451 DAG size of output: 450
Garbage collection #1: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #2: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #3: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #4: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #5: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #6: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #7: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
Garbage collection #8: 19763 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19763 to 39521
Garbage collection #9: 39521 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 39521 to 79039
Garbage collection #10: 79039 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 79039 to 129037
Garbage collection #11: 129037 nodes / 0 free / 0.002s / 0.003s total
Resizing node table from 129037 to 179033
[2020-11-25 03:30:46,687 WARN  L188               SmtUtils]: Spent 1.03 s on a formula simplification. DAG size of input: 463 DAG size of output: 445
[2020-11-25 03:30:46,710 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:30:46,737 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:30:46,750 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:30:46 BasicIcfg
[2020-11-25 03:30:46,750 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 03:30:46,750 INFO  L168              Benchmark]: Toolchain (without parser) took 36870.57 ms. Allocated memory was 1.0 GB in the beginning and 4.1 GB in the end (delta: 3.1 GB). Free memory was 924.5 MB in the beginning and 1.9 GB in the end (delta: -1.0 GB). Peak memory consumption was 3.1 GB. Max. memory is 15.3 GB.
[2020-11-25 03:30:46,751 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 03:30:46,751 INFO  L168              Benchmark]: Boogie Preprocessor took 157.21 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 897.6 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 03:30:46,752 INFO  L168              Benchmark]: UtopiaSpecLang took 93.20 ms. Allocated memory is still 1.0 GB. Free memory was 897.6 MB in the beginning and 886.9 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 03:30:46,752 INFO  L168              Benchmark]: Boogie Printer took 28.55 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 881.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 03:30:46,752 INFO  L168              Benchmark]: RCFGBuilder took 1547.00 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 67.6 MB). Free memory was 881.5 MB in the beginning and 768.4 MB in the end (delta: 113.1 MB). Peak memory consumption was 180.7 MB. Max. memory is 15.3 GB.
[2020-11-25 03:30:46,753 INFO  L168              Benchmark]: UtopiaLTL2Aut took 31.91 ms. Allocated memory is still 1.1 GB. Free memory was 768.4 MB in the beginning and 755.3 MB in the end (delta: 13.1 MB). Peak memory consumption was 13.1 MB. Max. memory is 15.3 GB.
[2020-11-25 03:30:46,753 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3361.51 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 425.7 MB). Free memory was 755.3 MB in the beginning and 789.0 MB in the end (delta: -33.7 MB). Peak memory consumption was 392.0 MB. Max. memory is 15.3 GB.
[2020-11-25 03:30:46,754 INFO  L168              Benchmark]: BlockEncodingV2 took 298.10 ms. Allocated memory is still 1.5 GB. Free memory was 789.0 MB in the beginning and 646.4 MB in the end (delta: 142.6 MB). Peak memory consumption was 142.6 MB. Max. memory is 15.3 GB.
[2020-11-25 03:30:46,754 INFO  L168              Benchmark]: BuchiAutomizer took 31349.65 ms. Allocated memory was 1.5 GB in the beginning and 4.1 GB in the end (delta: 2.6 GB). Free memory was 646.4 MB in the beginning and 1.9 GB in the end (delta: -1.3 GB). Peak memory consumption was 2.3 GB. Max. memory is 15.3 GB.
[2020-11-25 03:30:46,757 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    11016 locations, 20418 edges
  - StatisticsResult: Encoded RCFG
    10810 locations, 19844 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 157.21 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 897.6 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 93.20 ms. Allocated memory is still 1.0 GB. Free memory was 897.6 MB in the beginning and 886.9 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 28.55 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 881.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1547.00 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 67.6 MB). Free memory was 881.5 MB in the beginning and 768.4 MB in the end (delta: 113.1 MB). Peak memory consumption was 180.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 31.91 ms. Allocated memory is still 1.1 GB. Free memory was 768.4 MB in the beginning and 755.3 MB in the end (delta: 13.1 MB). Peak memory consumption was 13.1 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3361.51 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 425.7 MB). Free memory was 755.3 MB in the beginning and 789.0 MB in the end (delta: -33.7 MB). Peak memory consumption was 392.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 298.10 ms. Allocated memory is still 1.5 GB. Free memory was 789.0 MB in the beginning and 646.4 MB in the end (delta: 142.6 MB). Peak memory consumption was 142.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 31349.65 ms. Allocated memory was 1.5 GB in the beginning and 4.1 GB in the end (delta: 2.6 GB). Free memory was 646.4 MB in the beginning and 1.9 GB in the end (delta: -1.3 GB). Peak memory consumption was 2.3 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4293 locations, 6254 edges
  - StatisticsResult: BuchiProgram size
    11016 locations, 20418 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 17 terminating modules (17 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.17 modules have a trivial ranking function, the largest among these consists of 19 locations. The remainder module has 7988 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 31.2s and 18 iterations.  TraceHistogramMax:12. Analysis of lassos took 18.1s. Construction of modules took 8.0s. BÃ¼chi inclusion checks took 3.0s. Highest rank in rank-based complementation 0. Minimization of det autom 17. Minimization of nondet autom 0. Automata minimization 0.9s AutomataMinimizationTime, 17 MinimizatonAttempts, 2404 StatesRemovedByMinimization, 15 NontrivialMinimizations. Non-live state removal took 0.5s Buchi closure took 0.0s. Biggest automaton had 7988 states and ocurred in iteration 17.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 103687 SDtfs, 31101 SDslu, 230662 SDs, 0 SdLazy, 92235 SolverSat, 4753 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 8.0s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU17 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1000000000000000035) = (new RewardToken)({from : 1000000000000000009, _storage : 1000000000000000027});
[L3169]               havoc __exception;
[L3170]               revert := false;
[L3171]   COND FALSE  !(__exception)
[L3202]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7628]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L7628]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7632]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L7632]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7633]   COND FALSE  !(revert)
[L7636]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L7636]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7637]   COND FALSE  !(revert)
[L7640]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6996]               assume msgsender_MSG != null;
[L6997]               Balance[this] := 0;
[L6998]               _name_ERC20Detailed[this] := 724207837;
[L6999]               _symbol_ERC20Detailed[this] := 724207837;
[L7000]               _decimals_ERC20Detailed[this] := 0;
[L7002]               _name_ERC20Detailed[this] := name_s952;
[L7003]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7004]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7025]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7026]   COND FALSE  !(revert)
[L7640]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7641]   COND FALSE  !(revert)
[L7644]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L7644]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7645]   COND FALSE  !(revert)
[L7648]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6723]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6724]   COND FALSE  !(revert)
[L6727]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6727]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6728]   COND FALSE  !(revert)
[L6731]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6731]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6732]   COND FALSE  !(revert)
[L6735]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6735]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6736]   COND FALSE  !(revert)
[L6739]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6692]               assume msgsender_MSG != null;
[L6693]               Balance[this] := 0;
[L6739]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6740]   COND FALSE  !(revert)
[L7648]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7649]   COND FALSE  !(revert)
[L7652]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6859]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6859]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6860]   COND FALSE  !(revert)
[L6863]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6863]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6864]   COND FALSE  !(revert)
[L6867]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6867]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]   COND FALSE  !(revert)
[L6871]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6871]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6872]   COND FALSE  !(revert)
[L6875]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6723]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6724]   COND FALSE  !(revert)
[L6727]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L6727]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6728]   COND FALSE  !(revert)
[L6731]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L4989]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4990]   COND FALSE  !(revert)
[L4993]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4680]               assume msgsender_MSG != null;
[L4681]               Balance[this] := 0;
[L4695]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4696]   COND FALSE  !(revert)
[L4993]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4994]   COND FALSE  !(revert)
[L4997]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]               assume msgsender_MSG != null;
[L4962]               Balance[this] := 0;
[L4963]               _balances_ERC20[this] := zeroRefintArr();
[L4964]               sum__balances0[this] := 0;
[L4965]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4966]               sum__allowances1[this] := 0;
[L4967]               _totalSupply_ERC20[this] := 0;
[L4997]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4998]   COND FALSE  !(revert)
[L6731]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6732]   COND FALSE  !(revert)
[L6735]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4712]               assume msgsender_MSG != null;
[L4713]               Balance[this] := 0;
[L4727]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4728]   COND FALSE  !(revert)
[L6451]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6452]   COND FALSE  !(revert)
[L6455]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6376]               assume msgsender_MSG != null;
[L6377]               Balance[this] := 0;
[L6379]   CALL        call __var_33 := FreshRefGenerator__success();
[L4653]               havoc newRef;
[L4654]               assume Alloc[newRef] == false;
[L4655]               Alloc[newRef] := true;
[L4656]               assume newRef != null;
[L6379]   RET         call __var_33 := FreshRefGenerator__success();
[L6380]   COND FALSE  !(revert)
[L6383]               _minters_MinterRole[this] := __var_33;
[L6385]   COND TRUE   DType[this] == RewardToken
[L6386]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6386]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6387]   COND FALSE  !(revert)
[L6408]   COND TRUE   DType[this] == RewardToken
[L6409]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6409]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6410]   COND FALSE  !(revert)
[L6455]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6456]   COND FALSE  !(revert)
[L6735]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6736]   COND FALSE  !(revert)
[L6739]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6692]               assume msgsender_MSG != null;
[L6693]               Balance[this] := 0;
[L6739]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6740]   COND FALSE  !(revert)
[L6875]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6818]               assume msgsender_MSG != null;
[L6819]               Balance[this] := 0;
[L6820]               _cap_ERC20Capped[this] := 0;
[L6822]   COND FALSE  !(!(cap_s886 > 0))
[L6826]               _cap_ERC20Capped[this] := cap_s886;
[L6879]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6880]   COND FALSE  !(revert)
[L7652]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7653]   COND FALSE  !(revert)
[L7656]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7442]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7415]               assume msgsender_MSG != null;
[L7416]               Balance[this] := 0;
[L7418]               __var_48 := null;
[L7419]   COND FALSE  !(!(_store_s1208 != null))
[L7423]               assume DType[_store_s1208] == Storage;
[L7424]               __var_49 := _store_s1208;
[L7425]               store_Governable[this] := __var_49;
[L7442]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7443]   COND FALSE  !(revert)
[L7656]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7657]   COND FALSE  !(revert)
[L7660]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7554]               assume msgsender_MSG != null;
[L7555]               Balance[this] := 0;
[L7556]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7558]   COND TRUE   DType[this] == RewardToken
[L7559]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6599]   COND TRUE   DType[this] == RewardToken
[L6600]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]               __ret_0_ := msgsender_MSG;
[L6600]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6601]   COND FALSE  !(revert)
[L6622]   COND TRUE   DType[this] == RewardToken
[L6623]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6674]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6274]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6274]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6275]   COND FALSE  !(revert)
[L6278]   COND FALSE  !(!__var_30)
[L6282]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6674]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6675]   COND FALSE  !(revert)
[L6678]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6623]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6624]   COND FALSE  !(revert)
[L7559]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7560]   COND FALSE  !(revert)
[L7566]   COND TRUE   DType[this] == RewardToken
[L7567]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]               assume DType[store_Governable[this]] == Storage;
[L7499]               __var_54 := governance_Storage[store_Governable[this]];
[L7500]               __ret_0_ := __var_54;
[L7567]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7568]   COND FALSE  !(revert)
[L7574]   COND TRUE   DType[this] == RewardToken
[L7575]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6657]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6246]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6300]               __var_31 := null;
[L6301]   COND FALSE  !(!(account_s734 != null))
[L6305]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6246]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6247]   COND FALSE  !(revert)
[L6250]   COND FALSE  !(!!__var_29)
[L6254]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6657]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6658]   COND FALSE  !(revert)
[L6661]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7575]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7576]   COND FALSE  !(revert)
[L7660]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7661]   COND FALSE  !(revert)
[L3202]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3203]               assume !revert && gas >= 0;
[L11232]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
ERC20(1000000000000000035).approve~address~uint256.gas(3979002)({from : 1000000000000000030, spender : 0, amount : 0});
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND TRUE   __exception
[L701]                __tmp__Balance := Balance;
[L702]                __tmp__DType := DType;
[L703]                __tmp__Alloc := Alloc;
[L704]                __tmp__balance_ADDR := balance_ADDR;
[L705]                __tmp__M_Ref_int := M_Ref_int;
[L706]                __tmp__sum__balances0 := sum__balances0;
[L707]                __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L708]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L709]                __tmp__sum__allowances1 := sum__allowances1;
[L710]                __tmp__M_Ref_bool := M_Ref_bool;
[L711]                __tmp__sum := sum;
[L712]                __tmp__Length := Length;
[L713]                __tmp__now := now;
[L714]                __tmp___balances_ERC20 := _balances_ERC20;
[L715]                __tmp___allowances_ERC20 := _allowances_ERC20;
[L716]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L717]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L718]                __tmp___minters_MinterRole := _minters_MinterRole;
[L719]                __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L720]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L721]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L722]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L723]                __tmp___owner_Ownable := _owner_Ownable;
[L724]                __tmp__governance_Storage := governance_Storage;
[L725]                __tmp__controller_Storage := controller_Storage;
[L726]                __tmp__store_Governable := store_Governable;
[L727]                __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L728]    CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5148]   COND TRUE   __tmp__DType[this] == RewardToken
[L5149]   CALL        call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L5149]   RET         call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5150]   COND FALSE  !(revert)
[L5171]   COND TRUE   __tmp__DType[this] == RewardToken
[L5172]   CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5956]               __var_24 := null;
[L5957]   COND FALSE  !(!(owner_s625 != null))
[L5961]               __var_25 := null;
[L5962]   COND TRUE   !(spender_s625 != null)
[L5963]               revert := true;
[L5172]   RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5173]   COND TRUE   revert
[L728]    RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L729]                assume revert || gas < 0;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);

Loop:
ERC20(1000000000000000035).approve~address~uint256.gas(3979001)({from : 1000000000000000016, spender : 0, amount : 0});
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s347;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L698]                havoc __exception;
[L699]                revert := false;
[L700]    COND TRUE   __exception
[L701]                __tmp__Balance := Balance;
[L702]                __tmp__DType := DType;
[L703]                __tmp__Alloc := Alloc;
[L704]                __tmp__balance_ADDR := balance_ADDR;
[L705]                __tmp__M_Ref_int := M_Ref_int;
[L706]                __tmp__sum__balances0 := sum__balances0;
[L707]                __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L708]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L709]                __tmp__sum__allowances1 := sum__allowances1;
[L710]                __tmp__M_Ref_bool := M_Ref_bool;
[L711]                __tmp__sum := sum;
[L712]                __tmp__Length := Length;
[L713]                __tmp__now := now;
[L714]                __tmp___balances_ERC20 := _balances_ERC20;
[L715]                __tmp___allowances_ERC20 := _allowances_ERC20;
[L716]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L717]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L718]                __tmp___minters_MinterRole := _minters_MinterRole;
[L719]                __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L720]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L721]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L722]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L723]                __tmp___owner_Ownable := _owner_Ownable;
[L724]                __tmp__governance_Storage := governance_Storage;
[L725]                __tmp__controller_Storage := controller_Storage;
[L726]                __tmp__store_Governable := store_Governable;
[L727]                __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L728]    CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L5148]   COND TRUE   __tmp__DType[this] == RewardToken
[L5149]   CALL        call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4735]               __ret_0_ := msgsender_MSG;
[L5149]   RET         call __var_4 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5150]   COND FALSE  !(revert)
[L5171]   COND TRUE   __tmp__DType[this] == RewardToken
[L5172]   CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5956]               __var_24 := null;
[L5957]   COND FALSE  !(!(owner_s625 != null))
[L5961]               __var_25 := null;
[L5962]   COND TRUE   !(spender_s625 != null)
[L5963]               revert := true;
[L5172]   RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_4, spender_s347, amount_s347);
[L5173]   COND TRUE   revert
[L728]    RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);
[L729]                assume revert || gas < 0;
[L11121]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s347, amount_s347);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
