This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 20:47:05,431 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 20:47:05,433 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 20:47:05,443 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 20:47:05,444 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 20:47:05,445 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 20:47:05,446 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 20:47:05,448 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 20:47:05,450 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 20:47:05,450 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 20:47:05,451 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 20:47:05,451 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 20:47:05,452 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 20:47:05,453 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 20:47:05,454 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 20:47:05,454 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 20:47:05,455 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 20:47:05,456 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 20:47:05,458 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 20:47:05,459 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 20:47:05,460 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 20:47:05,461 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 20:47:05,463 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 20:47:05,463 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 20:47:05,463 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 20:47:05,464 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 20:47:05,465 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 20:47:05,466 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 20:47:05,466 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 20:47:05,466 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 20:47:05,467 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 20:47:05,468 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 20:47:05,469 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 20:47:05,470 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 20:47:05,471 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 20:47:05,471 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 20:47:05,472 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 20:47:05,472 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 20:47:05,472 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 20:47:05,473 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 20:47:05,474 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 20:47:05,474 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 20:47:05,482 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 20:47:05,483 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 20:47:05,483 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 20:47:05,484 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 20:47:05,484 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 20:47:05,484 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 20:47:05,484 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 20:47:05,484 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 20:47:05,484 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 20:47:05,484 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 20:47:05,484 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 20:47:05,484 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 20:47:05,485 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 20:47:05,485 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 20:47:05,485 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 20:47:05,485 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 20:47:05,485 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 20:47:05,485 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 20:47:05,485 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 20:47:05,485 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 20:47:05,485 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 20:47:05,485 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 20:47:05,486 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 20:47:05,486 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 20:47:05,486 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 20:47:05,486 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 20:47:05,511 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 20:47:05,523 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 20:47:05,526 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 20:47:05,527 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 20:47:05,527 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 20:47:05,528 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_transfer-self.bpl
[2020-11-24 20:47:05,528 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_transfer-self.bpl'
[2020-11-24 20:47:05,676 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 20:47:05,677 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 20:47:05,678 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 20:47:05,678 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 20:47:05,678 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 20:47:05,694 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:47:05" (1/1) ...
[2020-11-24 20:47:05,696 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:47:05" (1/1) ...
[2020-11-24 20:47:05,755 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:47:05" (1/1) ...
[2020-11-24 20:47:05,756 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:47:05" (1/1) ...
[2020-11-24 20:47:05,800 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:47:05" (1/1) ...
[2020-11-24 20:47:05,828 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:47:05" (1/1) ...
[2020-11-24 20:47:05,850 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:47:05" (1/1) ...
[2020-11-24 20:47:05,885 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 20:47:05,885 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 20:47:05,886 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 20:47:05,888 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 20:47:05,892 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:47:05" (1/1) ...
[2020-11-24 20:47:05,922 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(MainToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 20:47:05,928 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(MainToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 20:47:05,936 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(MainToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 20:47:05,947 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==_to_s1572 && _value_s1572<=balances_BasicToken[this][msg.sender] ) && _value_s1572>=0 ) && _value_s1572<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s1572]>=0 ) && balances_BasicToken[this][_to_s1572]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][msg.sender]>=0 ) && balances_BasicToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 20:47:05,951 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( _success_s1572==true && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this]==( old(allowed_StandardToken[this]) ) ) && initialized_MainToken[this]==( old(initialized_MainToken[this]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && chains_FreezableToken[this]==( old(chains_FreezableToken[this]) ) ) && freezings_FreezableToken[this]==( old(freezings_FreezableToken[this]) ) ) && freezingBalance_FreezableToken[this]==( old(freezingBalance_FreezableToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[_success_s1572,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_MainToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]]
[2020-11-24 20:47:05,958 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(MainToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 20:47:05,958 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_MainToken0) ==> ( <>AP(success_transfer_MainToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 20:47:05,988 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:47:05 PropertyContainer
[2020-11-24 20:47:05,988 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 20:47:05,989 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 20:47:05,989 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 20:47:05,989 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 20:47:05,990 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:47:05" (1/2) ...
[2020-11-24 20:47:05,990 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 20:47:05,990 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 20:47:06,023 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:47:05" (2/2) ...
[2020-11-24 20:47:06,024 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 20:47:06,024 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 20:47:06,024 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 20:47:06,024 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 20:47:06,025 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:47:05" (1/2) ...
[2020-11-24 20:47:06,081 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 20:47:06,081 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 20:47:06,081 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 20:47:06,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 20:47:06,081 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 20:47:06,082 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 20:47:06,082 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 20:47:06,082 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:47:06,082 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 20:47:06,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 20:47:06,082 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:47:06,082 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:47:06,082 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:47:06,083 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:47:06,083 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 20:47:06,083 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 20:47:06,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 20:47:06,084 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-24 20:47:06,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-24 20:47:06,084 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 20:47:06,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 20:47:06,084 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 20:47:06,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 20:47:06,084 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:47:06,084 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 20:47:06,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 20:47:06,085 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 20:47:06,085 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 20:47:06,085 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 20:47:06,085 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 20:47:06,085 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 20:47:06,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 20:47:06,085 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 20:47:06,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 20:47:06,085 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 20:47:06,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 20:47:06,086 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 20:47:06,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 20:47:06,086 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 20:47:06,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 20:47:06,086 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 20:47:06,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 20:47:06,086 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:47:06,086 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 20:47:06,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 20:47:06,087 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 20:47:06,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 20:47:06,087 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 20:47:06,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 20:47:06,087 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 20:47:06,087 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 20:47:06,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 20:47:06,087 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 20:47:06,087 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-24 20:47:06,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-24 20:47:06,088 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-24 20:47:06,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-24 20:47:06,088 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-24 20:47:06,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-24 20:47:06,088 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-24 20:47:06,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-24 20:47:06,088 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 20:47:06,088 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken
[2020-11-24 20:47:06,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken
[2020-11-24 20:47:06,088 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken
[2020-11-24 20:47:06,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken
[2020-11-24 20:47:06,089 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 20:47:06,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 20:47:06,089 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 20:47:06,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 20:47:06,089 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken
[2020-11-24 20:47:06,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken
[2020-11-24 20:47:06,089 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 20:47:06,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 20:47:06,089 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 20:47:06,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 20:47:06,090 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken
[2020-11-24 20:47:06,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken
[2020-11-24 20:47:06,090 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken
[2020-11-24 20:47:06,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken
[2020-11-24 20:47:06,090 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 20:47:06,090 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 20:47:06,090 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 20:47:06,090 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 20:47:06,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 20:47:06,090 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 20:47:06,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 20:47:06,091 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 20:47:06,091 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 20:47:06,091 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 20:47:06,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 20:47:06,091 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 20:47:06,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 20:47:06,091 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 20:47:06,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 20:47:06,091 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 20:47:06,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 20:47:06,092 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 20:47:06,092 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 20:47:06,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 20:47:06,092 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 20:47:06,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 20:47:06,092 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 20:47:06,092 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts
[2020-11-24 20:47:06,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts
[2020-11-24 20:47:06,092 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts
[2020-11-24 20:47:06,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts
[2020-11-24 20:47:06,093 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 20:47:06,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 20:47:06,093 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 20:47:06,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 20:47:06,093 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts
[2020-11-24 20:47:06,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts
[2020-11-24 20:47:06,093 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts
[2020-11-24 20:47:06,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts
[2020-11-24 20:47:06,093 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts
[2020-11-24 20:47:06,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts
[2020-11-24 20:47:06,094 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts
[2020-11-24 20:47:06,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts
[2020-11-24 20:47:06,094 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts
[2020-11-24 20:47:06,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts
[2020-11-24 20:47:06,094 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 20:47:06,094 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken
[2020-11-24 20:47:06,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken
[2020-11-24 20:47:06,094 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken
[2020-11-24 20:47:06,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken
[2020-11-24 20:47:06,095 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken
[2020-11-24 20:47:06,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken
[2020-11-24 20:47:06,095 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken
[2020-11-24 20:47:06,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken
[2020-11-24 20:47:06,095 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 20:47:06,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 20:47:06,095 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken
[2020-11-24 20:47:06,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken
[2020-11-24 20:47:06,096 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__success
[2020-11-24 20:47:06,096 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken
[2020-11-24 20:47:06,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken
[2020-11-24 20:47:06,096 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 20:47:06,096 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 20:47:06,096 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 20:47:06,096 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 20:47:06,096 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-24 20:47:06,096 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-24 20:47:06,096 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 20:47:06,097 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 20:47:06,097 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 20:47:06,097 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 20:47:06,097 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 20:47:06,097 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 20:47:06,097 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 20:47:06,097 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 20:47:06,097 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 20:47:06,097 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 20:47:06,098 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 20:47:06,098 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 20:47:06,098 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 20:47:06,098 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 20:47:06,098 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-24 20:47:06,098 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-24 20:47:06,098 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableToken
[2020-11-24 20:47:06,098 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableToken
[2020-11-24 20:47:06,098 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 20:47:06,098 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 20:47:06,099 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 20:47:06,099 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 20:47:06,099 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableMintableToken
[2020-11-24 20:47:06,099 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableMintableToken
[2020-11-24 20:47:06,099 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Consts
[2020-11-24 20:47:06,099 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Consts
[2020-11-24 20:47:06,099 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MainToken
[2020-11-24 20:47:06,099 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 20:47:06,099 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 20:47:06,099 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 20:47:06,100 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 20:47:06,100 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 20:47:06,100 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:47:06,100 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 20:47:06,100 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 20:47:06,100 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:47:06,100 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:47:06,100 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:47:06,100 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:47:06,100 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 20:47:06,100 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 20:47:06,100 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 20:47:06,101 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-24 20:47:06,101 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-24 20:47:06,101 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 20:47:06,101 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 20:47:06,101 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 20:47:06,101 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 20:47:06,101 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:47:06,101 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 20:47:06,101 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 20:47:06,101 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 20:47:06,101 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 20:47:06,102 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 20:47:06,102 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 20:47:06,102 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 20:47:06,102 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 20:47:06,102 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 20:47:06,102 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 20:47:06,102 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 20:47:06,102 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 20:47:06,102 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 20:47:06,102 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 20:47:06,102 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 20:47:06,102 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:47:06,103 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 20:47:06,103 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 20:47:06,103 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 20:47:06,103 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 20:47:06,103 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:47:06,103 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:47:06,103 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 20:47:06,103 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 20:47:06,103 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 20:47:06,103 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 20:47:06,103 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-24 20:47:06,104 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-24 20:47:06,104 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-24 20:47:06,104 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 20:47:06,104 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-24 20:47:06,104 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-24 20:47:06,104 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-24 20:47:06,104 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-24 20:47:06,104 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 20:47:06,104 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__success
[2020-11-24 20:47:06,104 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__fail
[2020-11-24 20:47:06,104 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__success
[2020-11-24 20:47:06,104 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 20:47:06,105 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 20:47:06,105 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 20:47:06,105 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 20:47:06,105 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 20:47:06,105 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__success
[2020-11-24 20:47:06,105 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 20:47:06,105 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 20:47:06,105 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 20:47:06,105 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 20:47:06,105 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 20:47:06,105 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__success
[2020-11-24 20:47:06,105 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__fail
[2020-11-24 20:47:06,106 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__success
[2020-11-24 20:47:06,106 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__fail
[2020-11-24 20:47:06,106 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 20:47:06,106 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 20:47:06,106 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 20:47:06,106 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 20:47:06,106 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 20:47:06,106 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 20:47:06,106 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 20:47:06,106 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 20:47:06,106 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 20:47:06,106 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 20:47:06,107 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 20:47:06,107 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 20:47:06,107 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 20:47:06,107 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 20:47:06,107 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 20:47:06,107 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 20:47:06,107 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 20:47:06,107 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 20:47:06,107 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 20:47:06,107 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 20:47:06,107 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 20:47:06,107 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 20:47:06,108 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 20:47:06,108 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__success
[2020-11-24 20:47:06,108 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__fail
[2020-11-24 20:47:06,108 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 20:47:06,108 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 20:47:06,108 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 20:47:06,108 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 20:47:06,108 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 20:47:06,108 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 20:47:06,108 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__success
[2020-11-24 20:47:06,108 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__fail
[2020-11-24 20:47:06,109 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 20:47:06,109 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 20:47:06,109 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__success
[2020-11-24 20:47:06,109 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__fail
[2020-11-24 20:47:06,109 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__success
[2020-11-24 20:47:06,109 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__fail
[2020-11-24 20:47:06,109 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 20:47:06,109 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 20:47:06,109 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 20:47:06,109 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__success
[2020-11-24 20:47:06,109 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__fail
[2020-11-24 20:47:06,110 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__success
[2020-11-24 20:47:06,110 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__fail
[2020-11-24 20:47:06,110 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__success
[2020-11-24 20:47:06,110 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__fail
[2020-11-24 20:47:06,110 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__success
[2020-11-24 20:47:06,110 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__fail
[2020-11-24 20:47:06,110 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 20:47:06,110 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 20:47:06,110 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__success
[2020-11-24 20:47:06,110 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 20:47:06,110 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__fail
[2020-11-24 20:47:06,111 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__success
[2020-11-24 20:47:06,111 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__fail
[2020-11-24 20:47:06,111 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 20:47:06,111 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 20:47:06,111 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 20:47:06,111 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 20:47:06,111 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-24 20:47:06,111 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-24 20:47:06,111 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 20:47:06,111 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 20:47:06,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 20:47:06,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 20:47:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 20:47:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 20:47:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 20:47:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 20:47:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:47:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:47:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 20:47:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 20:47:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:47:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:47:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:47:06,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:47:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:47:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:47:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:47:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:47:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 20:47:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 20:47:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 20:47:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 20:47:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-24 20:47:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-24 20:47:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 20:47:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 20:47:06,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 20:47:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 20:47:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:47:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:47:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 20:47:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 20:47:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 20:47:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 20:47:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 20:47:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 20:47:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 20:47:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 20:47:06,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 20:47:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 20:47:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 20:47:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 20:47:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 20:47:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 20:47:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 20:47:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 20:47:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:47:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:47:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 20:47:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 20:47:06,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 20:47:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 20:47:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:47:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:47:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 20:47:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 20:47:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 20:47:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 20:47:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 20:47:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 20:47:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-24 20:47:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-24 20:47:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 20:47:06,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-24 20:47:06,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-24 20:47:06,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-24 20:47:06,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-24 20:47:06,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-24 20:47:06,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 20:47:06,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 20:47:06,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__fail
[2020-11-24 20:47:06,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__success
[2020-11-24 20:47:06,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 20:47:06,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__success
[2020-11-24 20:47:06,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 20:47:06,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 20:47:06,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 20:47:06,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 20:47:06,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 20:47:06,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__success
[2020-11-24 20:47:06,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 20:47:06,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 20:47:06,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 20:47:06,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 20:47:06,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__fail
[2020-11-24 20:47:06,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__success
[2020-11-24 20:47:06,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__fail
[2020-11-24 20:47:06,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__success
[2020-11-24 20:47:06,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 20:47:06,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 20:47:06,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 20:47:06,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 20:47:06,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 20:47:06,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 20:47:06,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 20:47:06,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 20:47:06,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 20:47:06,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 20:47:06,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 20:47:06,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 20:47:06,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 20:47:06,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 20:47:06,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 20:47:06,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 20:47:06,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 20:47:06,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 20:47:06,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 20:47:06,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 20:47:06,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 20:47:06,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 20:47:06,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 20:47:06,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 20:47:06,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 20:47:06,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 20:47:06,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 20:47:06,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 20:47:06,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 20:47:06,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 20:47:06,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__fail
[2020-11-24 20:47:06,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__success
[2020-11-24 20:47:06,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 20:47:06,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 20:47:06,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 20:47:06,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 20:47:06,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 20:47:06,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 20:47:06,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__fail
[2020-11-24 20:47:06,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__success
[2020-11-24 20:47:06,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 20:47:06,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 20:47:06,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__fail
[2020-11-24 20:47:06,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__success
[2020-11-24 20:47:06,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__fail
[2020-11-24 20:47:06,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__success
[2020-11-24 20:47:06,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 20:47:06,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 20:47:06,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 20:47:06,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 20:47:06,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__fail
[2020-11-24 20:47:06,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__success
[2020-11-24 20:47:06,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__fail
[2020-11-24 20:47:06,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__success
[2020-11-24 20:47:06,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__fail
[2020-11-24 20:47:06,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__success
[2020-11-24 20:47:06,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__fail
[2020-11-24 20:47:06,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__success
[2020-11-24 20:47:06,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 20:47:06,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 20:47:06,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 20:47:06,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__success
[2020-11-24 20:47:06,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__fail
[2020-11-24 20:47:06,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__success
[2020-11-24 20:47:06,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__fail
[2020-11-24 20:47:06,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__success
[2020-11-24 20:47:06,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 20:47:06,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 20:47:06,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 20:47:06,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 20:47:06,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 20:47:06,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 20:47:06,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 20:47:06,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 20:47:06,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-24 20:47:06,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-24 20:47:06,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-24 20:47:06,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-24 20:47:06,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 20:47:06,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 20:47:06,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 20:47:06,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 20:47:06,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 20:47:06,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 20:47:06,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 20:47:06,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 20:47:06,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 20:47:06,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 20:47:06,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 20:47:06,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 20:47:06,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 20:47:06,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 20:47:06,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 20:47:06,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 20:47:06,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-24 20:47:06,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-24 20:47:06,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableToken
[2020-11-24 20:47:06,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableToken
[2020-11-24 20:47:06,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 20:47:06,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 20:47:06,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 20:47:06,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 20:47:06,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableMintableToken
[2020-11-24 20:47:06,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableMintableToken
[2020-11-24 20:47:06,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Consts
[2020-11-24 20:47:06,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Consts
[2020-11-24 20:47:06,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MainToken
[2020-11-24 20:47:06,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 20:47:06,127 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 20:47:06,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 20:47:07,472 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:47:07,472 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:47:07,472 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:47:07,740 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 20:47:07,740 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-24 20:47:07,743 INFO  L202        PluginConnector]: Adding new model MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:47:07 BoogieIcfgContainer
[2020-11-24 20:47:07,743 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:47:05" (2/2) ...
[2020-11-24 20:47:07,743 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 20:47:07,744 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@5e337d6 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:47:07, skipping insertion in model container
[2020-11-24 20:47:07,744 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 20:47:07,744 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 20:47:07,744 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 20:47:07,745 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 20:47:07,745 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:47:05" (1/3) ...
[2020-11-24 20:47:07,745 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@ce847ef and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:47:07, skipping insertion in model container
[2020-11-24 20:47:07,745 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:47:05" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 20:47:07,778 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:47:07 NWAContainer
[2020-11-24 20:47:07,778 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 20:47:07,778 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 20:47:07,779 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 20:47:07,779 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 20:47:07,780 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:47:07" (3/4) ...
[2020-11-24 20:47:07,781 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@2a6612ee and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:47:07, skipping insertion in model container
[2020-11-24 20:47:07,781 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:47:07" (4/4) ...
[2020-11-24 20:47:07,783 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 20:47:07,789 INFO  L110   BuchiProductObserver]: Initial RCFG 5478 locations, 7654 edges
[2020-11-24 20:47:07,790 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 20:47:07,802 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 20:47:11,958 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 20:47:11,973 INFO  L110   BuchiProductObserver]: BuchiProgram size 13636 locations, 24999 edges
[2020-11-24 20:47:11,973 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:47:11 BoogieIcfgContainer
[2020-11-24 20:47:11,973 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 20:47:11,973 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 20:47:11,973 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 20:47:11,975 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 20:47:11,975 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:47:11" (1/1) ...
[2020-11-24 20:47:12,208 INFO  L313           BlockEncoder]: Initial Icfg 13636 locations, 24999 edges
[2020-11-24 20:47:12,208 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 20:47:12,209 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 20:47:12,209 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 20:47:12,209 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 20:47:12,234 INFO  L70    emoveInfeasibleEdges]: Removed 315 edges and 29 locations because of local infeasibility
[2020-11-24 20:47:12,257 INFO  L70        RemoveSinkStates]: Removed 170 edges and 113 locations by removing sink states
[2020-11-24 20:47:12,281 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 20:47:12,289 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 20:47:12,297 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 20:47:12,298 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 20:47:12,342 INFO  L313           BlockEncoder]: Encoded RCFG 13426 locations, 24413 edges
[2020-11-24 20:47:12,343 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:47:12 BasicIcfg
[2020-11-24 20:47:12,343 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 20:47:12,344 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 20:47:12,344 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 20:47:12,347 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 20:47:12,347 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:47:12,347 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:47:05" (1/6) ...
[2020-11-24 20:47:12,349 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2d4f4ffd and model type MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:47:12, skipping insertion in model container
[2020-11-24 20:47:12,349 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:47:12,349 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:47:05" (2/6) ...
[2020-11-24 20:47:12,350 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2d4f4ffd and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:47:12, skipping insertion in model container
[2020-11-24 20:47:12,350 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:47:12,350 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:47:07" (3/6) ...
[2020-11-24 20:47:12,350 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2d4f4ffd and model type MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:47:12, skipping insertion in model container
[2020-11-24 20:47:12,350 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:47:12,350 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:47:07" (4/6) ...
[2020-11-24 20:47:12,351 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2d4f4ffd and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:47:12, skipping insertion in model container
[2020-11-24 20:47:12,351 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:47:12,351 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:47:11" (5/6) ...
[2020-11-24 20:47:12,351 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2d4f4ffd and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 08:47:12, skipping insertion in model container
[2020-11-24 20:47:12,351 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:47:12,351 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:47:12" (6/6) ...
[2020-11-24 20:47:12,353 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_transfer-self.bpl_BEv2
[2020-11-24 20:47:12,388 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 20:47:12,388 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 20:47:12,388 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 20:47:12,388 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 20:47:12,388 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 20:47:12,388 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 20:47:12,388 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 20:47:12,388 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 20:47:12,388 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 20:47:12,471 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13426 states.
[2020-11-24 20:47:12,565 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:47:12,565 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:47:12,565 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:47:12,573 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:47:12,573 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:47:12,573 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 20:47:12,573 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13426 states.
[2020-11-24 20:47:12,623 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:47:12,623 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:47:12,623 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:47:12,625 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:47:12,625 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND TRUE   revert
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE   choice == 38
[L14662]              gas := gas - 21000;
[L14663]  COND FALSE  !(gas >= 0)
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:47:12,641 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:47:12,642 INFO  L82        PathProgramCache]: Analyzing trace with hash 1625743658, now seen corresponding path program 1 times
[2020-11-24 20:47:12,648 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:47:12,674 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:47:12,717 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:47:12,719 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:47:12,719 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:47:13,192 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:47:13,201 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:47:13,201 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:47:13,202 INFO  L87              Difference]: Start difference. First operand 13426 states. Second operand 4 states.
[2020-11-24 20:47:14,566 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:47:14,566 INFO  L93              Difference]: Finished difference Result 8370 states and 9785 transitions.
[2020-11-24 20:47:14,566 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:47:14,567 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8370 states and 9785 transitions.
[2020-11-24 20:47:14,607 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:47:14,648 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8370 states to 8366 states and 9777 transitions.
[2020-11-24 20:47:14,649 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 20:47:14,652 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1863
[2020-11-24 20:47:14,653 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8366 states and 9777 transitions.
[2020-11-24 20:47:14,671 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:47:14,671 INFO  L728         BuchiCegarLoop]: Abstraction has 8366 states and 9777 transitions.
[2020-11-24 20:47:14,695 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8366 states and 9777 transitions.
[2020-11-24 20:47:14,802 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8366 to 8366.
[2020-11-24 20:47:14,803 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8366 states.
[2020-11-24 20:47:14,817 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8366 states to 8366 states and 9777 transitions.
[2020-11-24 20:47:14,817 INFO  L751         BuchiCegarLoop]: Abstraction has 8366 states and 9777 transitions.
[2020-11-24 20:47:14,817 INFO  L631         BuchiCegarLoop]: Abstraction has 8366 states and 9777 transitions.
[2020-11-24 20:47:14,818 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 20:47:14,818 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8366 states and 9777 transitions.
[2020-11-24 20:47:14,831 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:47:14,831 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:47:14,831 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:47:14,833 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:47:14,833 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND TRUE   revert
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND FALSE  !(__exception)
[L4868]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9680]   COND TRUE   !!paused_Pausable[this]
[L9681]               revert := true;
[L4868]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4869]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND FALSE  !(__exception)
[L4868]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9680]   COND TRUE   !!paused_Pausable[this]
[L9681]               revert := true;
[L4868]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4869]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:47:14,837 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:47:14,837 INFO  L82        PathProgramCache]: Analyzing trace with hash 415207539, now seen corresponding path program 1 times
[2020-11-24 20:47:14,839 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:47:14,852 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:47:14,881 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:47:14,881 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:47:14,881 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:47:14,882 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:47:14,882 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:47:14,882 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:47:14,882 INFO  L87              Difference]: Start difference. First operand 8366 states and 9777 transitions. cyclomatic complexity: 1431 Second operand 3 states.
[2020-11-24 20:47:15,079 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:47:15,079 INFO  L93              Difference]: Finished difference Result 9824 states and 11229 transitions.
[2020-11-24 20:47:15,079 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:47:15,079 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9824 states and 11229 transitions.
[2020-11-24 20:47:15,108 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:47:15,154 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9824 states to 9824 states and 11229 transitions.
[2020-11-24 20:47:15,154 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2286
[2020-11-24 20:47:15,156 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2286
[2020-11-24 20:47:15,156 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9824 states and 11229 transitions.
[2020-11-24 20:47:15,166 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:47:15,166 INFO  L728         BuchiCegarLoop]: Abstraction has 9824 states and 11229 transitions.
[2020-11-24 20:47:15,176 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9824 states and 11229 transitions.
[2020-11-24 20:47:15,261 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9824 to 8742.
[2020-11-24 20:47:15,261 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8742 states.
[2020-11-24 20:47:15,272 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8742 states to 8742 states and 9883 transitions.
[2020-11-24 20:47:15,272 INFO  L751         BuchiCegarLoop]: Abstraction has 8742 states and 9883 transitions.
[2020-11-24 20:47:15,272 INFO  L631         BuchiCegarLoop]: Abstraction has 8742 states and 9883 transitions.
[2020-11-24 20:47:15,272 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 20:47:15,272 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8742 states and 9883 transitions.
[2020-11-24 20:47:15,284 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:47:15,285 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:47:15,285 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:47:15,291 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:47:15,291 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND TRUE   !!initialized_MainToken[this]
[L9850]               revert := true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND TRUE   revert
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND FALSE  !(__exception)
[L4868]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9680]   COND TRUE   !!paused_Pausable[this]
[L9681]               revert := true;
[L4868]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4869]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND FALSE  !(__exception)
[L4868]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9680]   COND TRUE   !!paused_Pausable[this]
[L9681]               revert := true;
[L4868]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4869]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:47:15,302 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:47:15,302 INFO  L82        PathProgramCache]: Analyzing trace with hash -1501424415, now seen corresponding path program 1 times
[2020-11-24 20:47:15,303 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:47:15,342 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:47:15,901 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 20:47:15,901 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:47:15,902 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:47:15,903 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:47:15,903 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:47:15,903 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:47:15,903 INFO  L87              Difference]: Start difference. First operand 8742 states and 9883 transitions. cyclomatic complexity: 1161 Second operand 3 states.
[2020-11-24 20:47:16,027 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:47:16,027 INFO  L93              Difference]: Finished difference Result 9824 states and 11071 transitions.
[2020-11-24 20:47:16,027 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:47:16,027 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9824 states and 11071 transitions.
[2020-11-24 20:47:16,047 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:47:16,073 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9824 states to 9476 states and 10663 transitions.
[2020-11-24 20:47:16,073 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2166
[2020-11-24 20:47:16,074 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2195
[2020-11-24 20:47:16,075 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9476 states and 10663 transitions.
[2020-11-24 20:47:16,083 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:47:16,084 INFO  L728         BuchiCegarLoop]: Abstraction has 9476 states and 10663 transitions.
[2020-11-24 20:47:16,092 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9476 states and 10663 transitions.
[2020-11-24 20:47:16,151 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9476 to 8496.
[2020-11-24 20:47:16,151 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8496 states.
[2020-11-24 20:47:16,161 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8496 states to 8496 states and 9419 transitions.
[2020-11-24 20:47:16,161 INFO  L751         BuchiCegarLoop]: Abstraction has 8496 states and 9419 transitions.
[2020-11-24 20:47:16,161 INFO  L631         BuchiCegarLoop]: Abstraction has 8496 states and 9419 transitions.
[2020-11-24 20:47:16,161 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 20:47:16,161 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8496 states and 9419 transitions.
[2020-11-24 20:47:16,170 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:47:16,170 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:47:16,170 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:47:16,174 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:47:16,174 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND TRUE   __exception
[L4830]               __tmp__Balance := Balance;
[L4831]               __tmp__DType := DType;
[L4832]               __tmp__Alloc := Alloc;
[L4833]               __tmp__balance_ADDR := balance_ADDR;
[L4834]               __tmp__M_Ref_int := M_Ref_int;
[L4835]               __tmp__sum_balances0 := sum_balances0;
[L4836]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4837]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4838]               __tmp__sum_allowed1 := sum_allowed1;
[L4839]               __tmp__M_int_int := M_int_int;
[L4840]               __tmp__sum_chains2 := sum_chains2;
[L4841]               __tmp__sum_freezings3 := sum_freezings3;
[L4842]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4843]               __tmp__M_int_Ref := M_int_Ref;
[L4844]               __tmp__sum := sum;
[L4845]               __tmp__Length := Length;
[L4846]               __tmp__now := now;
[L4847]               __tmp__balances_BasicToken := balances_BasicToken;
[L4848]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4849]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4850]               __tmp__owner_Ownable := owner_Ownable;
[L4851]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4852]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4853]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4854]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4855]               __tmp__paused_Pausable := paused_Pausable;
[L4856]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4857]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4858]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4859]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4860]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4861]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4862]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4863]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4864]               __tmp__initialized_MainToken := initialized_MainToken;
[L4865]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9660]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9661]               revert := true;
[L4865]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4866]               assume revert || gas < 0;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND TRUE   __exception
[L4830]               __tmp__Balance := Balance;
[L4831]               __tmp__DType := DType;
[L4832]               __tmp__Alloc := Alloc;
[L4833]               __tmp__balance_ADDR := balance_ADDR;
[L4834]               __tmp__M_Ref_int := M_Ref_int;
[L4835]               __tmp__sum_balances0 := sum_balances0;
[L4836]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4837]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4838]               __tmp__sum_allowed1 := sum_allowed1;
[L4839]               __tmp__M_int_int := M_int_int;
[L4840]               __tmp__sum_chains2 := sum_chains2;
[L4841]               __tmp__sum_freezings3 := sum_freezings3;
[L4842]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4843]               __tmp__M_int_Ref := M_int_Ref;
[L4844]               __tmp__sum := sum;
[L4845]               __tmp__Length := Length;
[L4846]               __tmp__now := now;
[L4847]               __tmp__balances_BasicToken := balances_BasicToken;
[L4848]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4849]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4850]               __tmp__owner_Ownable := owner_Ownable;
[L4851]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4852]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4853]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4854]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4855]               __tmp__paused_Pausable := paused_Pausable;
[L4856]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4857]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4858]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4859]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4860]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4861]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4862]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4863]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4864]               __tmp__initialized_MainToken := initialized_MainToken;
[L4865]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9660]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9661]               revert := true;
[L4865]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4866]               assume revert || gas < 0;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:47:16,184 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:47:16,184 INFO  L82        PathProgramCache]: Analyzing trace with hash 1467086290, now seen corresponding path program 1 times
[2020-11-24 20:47:16,185 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:47:16,221 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:47:16,849 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 20:47:16,849 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:47:16,849 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:47:16,850 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:47:16,850 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:47:16,850 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:47:16,850 INFO  L87              Difference]: Start difference. First operand 8496 states and 9419 transitions. cyclomatic complexity: 943 Second operand 7 states.
[2020-11-24 20:47:17,019 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:47:17,019 INFO  L93              Difference]: Finished difference Result 8507 states and 9430 transitions.
[2020-11-24 20:47:17,019 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:47:17,020 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8507 states and 9430 transitions.
[2020-11-24 20:47:17,039 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:47:17,064 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8507 states to 8496 states and 9418 transitions.
[2020-11-24 20:47:17,064 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1934
[2020-11-24 20:47:17,065 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1934
[2020-11-24 20:47:17,065 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8496 states and 9418 transitions.
[2020-11-24 20:47:17,071 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:47:17,071 INFO  L728         BuchiCegarLoop]: Abstraction has 8496 states and 9418 transitions.
[2020-11-24 20:47:17,081 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8496 states and 9418 transitions.
[2020-11-24 20:47:17,126 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8496 to 8496.
[2020-11-24 20:47:17,127 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8496 states.
[2020-11-24 20:47:17,135 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8496 states to 8496 states and 9418 transitions.
[2020-11-24 20:47:17,135 INFO  L751         BuchiCegarLoop]: Abstraction has 8496 states and 9418 transitions.
[2020-11-24 20:47:17,135 INFO  L631         BuchiCegarLoop]: Abstraction has 8496 states and 9418 transitions.
[2020-11-24 20:47:17,135 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 20:47:17,135 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8496 states and 9418 transitions.
[2020-11-24 20:47:17,144 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:47:17,144 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:47:17,144 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:47:17,147 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:47:17,147 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND TRUE   __exception
[L4394]               __tmp__Balance := Balance;
[L4395]               __tmp__DType := DType;
[L4396]               __tmp__Alloc := Alloc;
[L4397]               __tmp__balance_ADDR := balance_ADDR;
[L4398]               __tmp__M_Ref_int := M_Ref_int;
[L4399]               __tmp__sum_balances0 := sum_balances0;
[L4400]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4401]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4402]               __tmp__sum_allowed1 := sum_allowed1;
[L4403]               __tmp__M_int_int := M_int_int;
[L4404]               __tmp__sum_chains2 := sum_chains2;
[L4405]               __tmp__sum_freezings3 := sum_freezings3;
[L4406]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4407]               __tmp__M_int_Ref := M_int_Ref;
[L4408]               __tmp__sum := sum;
[L4409]               __tmp__Length := Length;
[L4410]               __tmp__now := now;
[L4411]               __tmp__balances_BasicToken := balances_BasicToken;
[L4412]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4413]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4414]               __tmp__owner_Ownable := owner_Ownable;
[L4415]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4416]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4417]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4418]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4419]               __tmp__paused_Pausable := paused_Pausable;
[L4420]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4421]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4422]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4423]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4424]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4425]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4426]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4427]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4428]               __tmp__initialized_MainToken := initialized_MainToken;
[L4429]   CALL        call MainToken_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9478]   CALL        call Consts_Consts__fail(this, msgsender_MSG, msgvalue_MSG);
[L9324]   CALL        call Consts_Consts_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9290]               assume msgsender_MSG != null;
[L9291]               __tmp__Balance[this] := 0;
[L9292]               __tmp__TOKEN_DECIMALS_Consts[this] := 18;
[L9293]               __tmp__TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9294]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, __tmp__TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9295]               __tmp__TOKEN_NAME_Consts[this] := -1350554499;
[L9296]               __tmp__TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9297]               __tmp__PAUSED_Consts[this] := false;
[L9298]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9299]               __tmp__TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9300]               __tmp__CONTINUE_MINTING_Consts[this] := false;
[L9324]   RET         call Consts_Consts_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND FALSE  !(revert)
[L9478]   RET         call Consts_Consts__fail(this, msgsender_MSG, msgvalue_MSG);
[L9479]   COND FALSE  !(revert)
[L9482]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L9482]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L9483]   COND FALSE  !(revert)
[L9486]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L9486]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L9487]   COND FALSE  !(revert)
[L9490]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L9490]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9491]   COND FALSE  !(revert)
[L9494]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7051]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7055]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7059]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7063]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]               assume msgsender_MSG != null;
[L7033]               __tmp__Balance[this] := 0;
[L7034]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7035]               __tmp__sum_allowed1[this] := 0;
[L7063]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7064]   COND FALSE  !(revert)
[L9494]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9495]   COND FALSE  !(revert)
[L9498]   CALL        call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7051]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7055]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7059]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7063]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]               assume msgsender_MSG != null;
[L7033]               __tmp__Balance[this] := 0;
[L7034]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7035]               __tmp__sum_allowed1[this] := 0;
[L7063]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7064]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7627]               assume msgsender_MSG != null;
[L7628]               __tmp__Balance[this] := 0;
[L7629]               __tmp__chains_FreezableToken[this] := zerointintArr();
[L7630]               __tmp__sum_chains2[this] := 0;
[L7631]               __tmp__freezings_FreezableToken[this] := zerointintArr();
[L7632]               __tmp__sum_freezings3[this] := 0;
[L7633]               __tmp__freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7634]               __tmp__sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9498]   RET         call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9499]   COND FALSE  !(revert)
[L9502]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7305]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7286]               assume msgsender_MSG != null;
[L7287]               __tmp__Balance[this] := 0;
[L7288]               __tmp__owner_Ownable[this] := null;
[L7290]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7305]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   COND FALSE  !(revert)
[L9502]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(revert)
[L9506]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7469]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7469]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7470]   COND FALSE  !(revert)
[L7473]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7473]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7477]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7051]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7055]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7059]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7063]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]               assume msgsender_MSG != null;
[L7033]               __tmp__Balance[this] := 0;
[L7034]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7035]               __tmp__sum_allowed1[this] := 0;
[L7063]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7064]   COND FALSE  !(revert)
[L7481]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7305]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7286]               assume msgsender_MSG != null;
[L7287]               __tmp__Balance[this] := 0;
[L7288]               __tmp__owner_Ownable[this] := null;
[L7290]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7305]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   COND FALSE  !(revert)
[L7485]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7452]               assume msgsender_MSG != null;
[L7453]               __tmp__Balance[this] := 0;
[L7454]               __tmp__mintingFinished_MintableToken[this] := false;
[L7489]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L9506]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call FreezableMintableToken_FreezableMintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9081]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L9081]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L9082]   COND FALSE  !(revert)
[L9085]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L9085]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L9086]   COND FALSE  !(revert)
[L9089]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L9089]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9090]   COND FALSE  !(revert)
[L9093]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7051]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7055]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7059]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7063]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]               assume msgsender_MSG != null;
[L7033]               __tmp__Balance[this] := 0;
[L7034]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7035]               __tmp__sum_allowed1[this] := 0;
[L7063]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7064]   COND FALSE  !(revert)
[L9093]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7051]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7055]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7059]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7063]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]               assume msgsender_MSG != null;
[L7033]               __tmp__Balance[this] := 0;
[L7034]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7035]               __tmp__sum_allowed1[this] := 0;
[L7063]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7064]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7627]               assume msgsender_MSG != null;
[L7628]               __tmp__Balance[this] := 0;
[L7629]               __tmp__chains_FreezableToken[this] := zerointintArr();
[L7630]               __tmp__sum_chains2[this] := 0;
[L7631]               __tmp__freezings_FreezableToken[this] := zerointintArr();
[L7632]               __tmp__sum_freezings3[this] := 0;
[L7633]               __tmp__freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7634]               __tmp__sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9097]   RET         call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7305]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7286]               assume msgsender_MSG != null;
[L7287]               __tmp__Balance[this] := 0;
[L7288]               __tmp__owner_Ownable[this] := null;
[L7290]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7305]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   COND FALSE  !(revert)
[L9101]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7469]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7469]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7470]   COND FALSE  !(revert)
[L7473]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7473]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7477]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7051]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7007]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L7007]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7008]   COND FALSE  !(revert)
[L7011]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]               assume msgsender_MSG != null;
[L6993]               __tmp__Balance[this] := 0;
[L7011]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7012]   COND FALSE  !(revert)
[L7055]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L7059]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7063]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7032]               assume msgsender_MSG != null;
[L7033]               __tmp__Balance[this] := 0;
[L7034]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L7035]               __tmp__sum_allowed1[this] := 0;
[L7063]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7064]   COND FALSE  !(revert)
[L7481]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7305]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7286]               assume msgsender_MSG != null;
[L7287]               __tmp__Balance[this] := 0;
[L7288]               __tmp__owner_Ownable[this] := null;
[L7290]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7305]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   COND FALSE  !(revert)
[L7485]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7452]               assume msgsender_MSG != null;
[L7453]               __tmp__Balance[this] := 0;
[L7454]               __tmp__mintingFinished_MintableToken[this] := false;
[L7489]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L9105]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9066]               assume msgsender_MSG != null;
[L9067]               __tmp__Balance[this] := 0;
[L9109]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9510]   RET         call FreezableMintableToken_FreezableMintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8845]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L8845]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L8849]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6745]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6730]               assume msgsender_MSG != null;
[L6731]               __tmp__Balance[this] := 0;
[L6745]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6746]   COND FALSE  !(revert)
[L6878]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6879]   COND FALSE  !(revert)
[L6882]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]               assume msgsender_MSG != null;
[L6858]               __tmp__Balance[this] := 0;
[L6859]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6860]               __tmp__sum_balances0[this] := 0;
[L6861]               __tmp__totalSupply__BasicToken[this] := 0;
[L6882]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6883]   COND FALSE  !(revert)
[L8849]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8850]   COND FALSE  !(revert)
[L8853]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8830]               assume msgsender_MSG != null;
[L8831]               __tmp__Balance[this] := 0;
[L8853]   RET         call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8854]   COND FALSE  !(revert)
[L9514]   RET         call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8975]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7305]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7286]               assume msgsender_MSG != null;
[L7287]               __tmp__Balance[this] := 0;
[L7288]               __tmp__owner_Ownable[this] := null;
[L7290]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L7305]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   COND FALSE  !(revert)
[L8975]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8976]   COND FALSE  !(revert)
[L8979]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8958]               assume msgsender_MSG != null;
[L8959]               __tmp__Balance[this] := 0;
[L8960]               __tmp__paused_Pausable[this] := false;
[L8979]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8980]   COND FALSE  !(revert)
[L9518]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call MainToken_MainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9437]               assume msgsender_MSG != null;
[L9438]               __tmp__Balance[this] := 0;
[L9439]               __tmp__initialized_MainToken[this] := false;
[L9441]   CALL        call init_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9720]   COND FALSE  !(!!__tmp__initialized_MainToken[this])
[L9724]               __tmp__initialized_MainToken[this] := true;
[L9725]   COND FALSE  !(__tmp__PAUSED_Consts[this])
[L9735]               havoc addresses_s1781;
[L9736]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9737]               __tmp__M_int_Ref[addresses_s1781][0] := __var_57;
[L9738]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9739]               __tmp__M_int_Ref[addresses_s1781][1] := __var_58;
[L9740]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9741]               __tmp__M_int_Ref[addresses_s1781][2] := __var_59;
[L9742]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9743]               __tmp__M_int_Ref[addresses_s1781][3] := __var_60;
[L9744]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9745]               __tmp__M_int_Ref[addresses_s1781][4] := __var_61;
[L9746]               havoc amounts_s1781;
[L9747]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9748]               __tmp__sum[amounts_s1781] := __tmp__sum[amounts_s1781] - __tmp__M_int_int[amounts_s1781][0];
[L9749]               __tmp__M_int_int[amounts_s1781][0] := __var_62;
[L9750]               __tmp__sum[amounts_s1781] := __tmp__sum[amounts_s1781] + __tmp__M_int_int[amounts_s1781][0];
[L9751]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9752]               __tmp__sum[amounts_s1781] := __tmp__sum[amounts_s1781] - __tmp__M_int_int[amounts_s1781][1];
[L9753]               __tmp__M_int_int[amounts_s1781][1] := __var_63;
[L9754]               __tmp__sum[amounts_s1781] := __tmp__sum[amounts_s1781] + __tmp__M_int_int[amounts_s1781][1];
[L9755]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9756]               __tmp__sum[amounts_s1781] := __tmp__sum[amounts_s1781] - __tmp__M_int_int[amounts_s1781][2];
[L9757]               __tmp__M_int_int[amounts_s1781][2] := __var_64;
[L9758]               __tmp__sum[amounts_s1781] := __tmp__sum[amounts_s1781] + __tmp__M_int_int[amounts_s1781][2];
[L9759]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9760]               __tmp__sum[amounts_s1781] := __tmp__sum[amounts_s1781] - __tmp__M_int_int[amounts_s1781][3];
[L9761]               __tmp__M_int_int[amounts_s1781][3] := __var_65;
[L9762]               __tmp__sum[amounts_s1781] := __tmp__sum[amounts_s1781] + __tmp__M_int_int[amounts_s1781][3];
[L9763]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9764]               __tmp__sum[amounts_s1781] := __tmp__sum[amounts_s1781] - __tmp__M_int_int[amounts_s1781][4];
[L9765]               __tmp__M_int_int[amounts_s1781][4] := __var_66;
[L9766]               __tmp__sum[amounts_s1781] := __tmp__sum[amounts_s1781] + __tmp__M_int_int[amounts_s1781][4];
[L9767]               havoc freezes_s1781;
[L9768]               __var_67 := 1631905201 % 18446744073709551616;
[L9769]               __tmp__sum[freezes_s1781] := __tmp__sum[freezes_s1781] - __tmp__M_int_int[freezes_s1781][0];
[L9770]               __tmp__M_int_int[freezes_s1781][0] := __var_67;
[L9771]               __tmp__sum[freezes_s1781] := __tmp__sum[freezes_s1781] + __tmp__M_int_int[freezes_s1781][0];
[L9772]               __var_68 := 0 % 18446744073709551616;
[L9773]               __tmp__sum[freezes_s1781] := __tmp__sum[freezes_s1781] - __tmp__M_int_int[freezes_s1781][1];
[L9774]               __tmp__M_int_int[freezes_s1781][1] := __var_68;
[L9775]               __tmp__sum[freezes_s1781] := __tmp__sum[freezes_s1781] + __tmp__M_int_int[freezes_s1781][1];
[L9776]               __var_69 := 1758135601 % 18446744073709551616;
[L9777]               __tmp__sum[freezes_s1781] := __tmp__sum[freezes_s1781] - __tmp__M_int_int[freezes_s1781][2];
[L9778]               __tmp__M_int_int[freezes_s1781][2] := __var_69;
[L9779]               __tmp__sum[freezes_s1781] := __tmp__sum[freezes_s1781] + __tmp__M_int_int[freezes_s1781][2];
[L9780]               __var_70 := 0 % 18446744073709551616;
[L9781]               __tmp__sum[freezes_s1781] := __tmp__sum[freezes_s1781] - __tmp__M_int_int[freezes_s1781][3];
[L9782]               __tmp__M_int_int[freezes_s1781][3] := __var_70;
[L9783]               __tmp__sum[freezes_s1781] := __tmp__sum[freezes_s1781] + __tmp__M_int_int[freezes_s1781][3];
[L9784]               __var_71 := 0 % 18446744073709551616;
[L9785]               __tmp__sum[freezes_s1781] := __tmp__sum[freezes_s1781] - __tmp__M_int_int[freezes_s1781][4];
[L9786]               __tmp__M_int_int[freezes_s1781][4] := __var_71;
[L9787]               __tmp__sum[freezes_s1781] := __tmp__sum[freezes_s1781] + __tmp__M_int_int[freezes_s1781][4];
[L9788]               i_s1781 := 0;
[L9789]   COND FALSE  !(i_s1781 < __tmp__Length[addresses_s1781])
[L9813]   COND FALSE  !(!__tmp__CONTINUE_MINTING_Consts[this])
[L9441]   RET         call init_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9442]   COND FALSE  !(revert)
[L9445]   COND TRUE   __tmp__DType[this] == MainToken
[L9446]   CALL        call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TARGET_USER_Consts[this]);
[L7344]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L12855]  COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L7344]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   COND TRUE   __tmp__DType[this] == MainToken
[L7349]   CALL        call _transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7417]               __var_11 := null;
[L7418]   COND FALSE  !(!(_newOwner_s581 != null))
[L7422]               __tmp__owner_Ownable[this] := _newOwner_s581;
[L7349]   RET         call _transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7350]   COND FALSE  !(revert)
[L9446]   RET         call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TARGET_USER_Consts[this]);
[L9447]   COND FALSE  !(revert)
[L9522]   RET         call MainToken_MainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L4429]   RET         call MainToken_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4430]               assume revert || gas < 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND TRUE   __exception
[L4830]               __tmp__Balance := Balance;
[L4831]               __tmp__DType := DType;
[L4832]               __tmp__Alloc := Alloc;
[L4833]               __tmp__balance_ADDR := balance_ADDR;
[L4834]               __tmp__M_Ref_int := M_Ref_int;
[L4835]               __tmp__sum_balances0 := sum_balances0;
[L4836]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4837]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4838]               __tmp__sum_allowed1 := sum_allowed1;
[L4839]               __tmp__M_int_int := M_int_int;
[L4840]               __tmp__sum_chains2 := sum_chains2;
[L4841]               __tmp__sum_freezings3 := sum_freezings3;
[L4842]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4843]               __tmp__M_int_Ref := M_int_Ref;
[L4844]               __tmp__sum := sum;
[L4845]               __tmp__Length := Length;
[L4846]               __tmp__now := now;
[L4847]               __tmp__balances_BasicToken := balances_BasicToken;
[L4848]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4849]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4850]               __tmp__owner_Ownable := owner_Ownable;
[L4851]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4852]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4853]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4854]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4855]               __tmp__paused_Pausable := paused_Pausable;
[L4856]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4857]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4858]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4859]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4860]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4861]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4862]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4863]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4864]               __tmp__initialized_MainToken := initialized_MainToken;
[L4865]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9660]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9661]               revert := true;
[L4865]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4866]               assume revert || gas < 0;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND TRUE   __exception
[L4830]               __tmp__Balance := Balance;
[L4831]               __tmp__DType := DType;
[L4832]               __tmp__Alloc := Alloc;
[L4833]               __tmp__balance_ADDR := balance_ADDR;
[L4834]               __tmp__M_Ref_int := M_Ref_int;
[L4835]               __tmp__sum_balances0 := sum_balances0;
[L4836]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4837]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4838]               __tmp__sum_allowed1 := sum_allowed1;
[L4839]               __tmp__M_int_int := M_int_int;
[L4840]               __tmp__sum_chains2 := sum_chains2;
[L4841]               __tmp__sum_freezings3 := sum_freezings3;
[L4842]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4843]               __tmp__M_int_Ref := M_int_Ref;
[L4844]               __tmp__sum := sum;
[L4845]               __tmp__Length := Length;
[L4846]               __tmp__now := now;
[L4847]               __tmp__balances_BasicToken := balances_BasicToken;
[L4848]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4849]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4850]               __tmp__owner_Ownable := owner_Ownable;
[L4851]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4852]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4853]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4854]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4855]               __tmp__paused_Pausable := paused_Pausable;
[L4856]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4857]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4858]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4859]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4860]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4861]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4862]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4863]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4864]               __tmp__initialized_MainToken := initialized_MainToken;
[L4865]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9660]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9661]               revert := true;
[L4865]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4866]               assume revert || gas < 0;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:47:17,155 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:47:17,156 INFO  L82        PathProgramCache]: Analyzing trace with hash -1511932355, now seen corresponding path program 1 times
[2020-11-24 20:47:17,157 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:47:17,193 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:47:17,720 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 20:47:17,721 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:47:17,721 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:47:17,721 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:47:17,722 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:47:17,722 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:47:17,722 INFO  L87              Difference]: Start difference. First operand 8496 states and 9418 transitions. cyclomatic complexity: 942 Second operand 4 states.
[2020-11-24 20:47:18,244 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:47:18,244 INFO  L93              Difference]: Finished difference Result 10969 states and 12442 transitions.
[2020-11-24 20:47:18,244 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-24 20:47:18,244 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10969 states and 12442 transitions.
[2020-11-24 20:47:18,268 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-24 20:47:18,293 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10969 states to 9995 states and 11329 transitions.
[2020-11-24 20:47:18,293 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2362
[2020-11-24 20:47:18,294 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2371
[2020-11-24 20:47:18,294 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9995 states and 11329 transitions.
[2020-11-24 20:47:18,301 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:47:18,301 INFO  L728         BuchiCegarLoop]: Abstraction has 9995 states and 11329 transitions.
[2020-11-24 20:47:18,307 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9995 states and 11329 transitions.
[2020-11-24 20:47:18,360 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9995 to 8832.
[2020-11-24 20:47:18,360 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8832 states.
[2020-11-24 20:47:18,369 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8832 states to 8832 states and 9876 transitions.
[2020-11-24 20:47:18,369 INFO  L751         BuchiCegarLoop]: Abstraction has 8832 states and 9876 transitions.
[2020-11-24 20:47:18,370 INFO  L631         BuchiCegarLoop]: Abstraction has 8832 states and 9876 transitions.
[2020-11-24 20:47:18,370 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 20:47:18,370 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8832 states and 9876 transitions.
[2020-11-24 20:47:18,380 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:47:18,380 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:47:18,380 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:47:18,383 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:47:18,383 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND TRUE   __exception
[L4830]               __tmp__Balance := Balance;
[L4831]               __tmp__DType := DType;
[L4832]               __tmp__Alloc := Alloc;
[L4833]               __tmp__balance_ADDR := balance_ADDR;
[L4834]               __tmp__M_Ref_int := M_Ref_int;
[L4835]               __tmp__sum_balances0 := sum_balances0;
[L4836]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4837]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4838]               __tmp__sum_allowed1 := sum_allowed1;
[L4839]               __tmp__M_int_int := M_int_int;
[L4840]               __tmp__sum_chains2 := sum_chains2;
[L4841]               __tmp__sum_freezings3 := sum_freezings3;
[L4842]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4843]               __tmp__M_int_Ref := M_int_Ref;
[L4844]               __tmp__sum := sum;
[L4845]               __tmp__Length := Length;
[L4846]               __tmp__now := now;
[L4847]               __tmp__balances_BasicToken := balances_BasicToken;
[L4848]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4849]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4850]               __tmp__owner_Ownable := owner_Ownable;
[L4851]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4852]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4853]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4854]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4855]               __tmp__paused_Pausable := paused_Pausable;
[L4856]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4857]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4858]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4859]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4860]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4861]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4862]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4863]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4864]               __tmp__initialized_MainToken := initialized_MainToken;
[L4865]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9660]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9661]               revert := true;
[L4865]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4866]               assume revert || gas < 0;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE   choice == 38
[L14662]              gas := gas - 21000;
[L14663]  COND FALSE  !(gas >= 0)
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:47:18,391 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:47:18,392 INFO  L82        PathProgramCache]: Analyzing trace with hash -118881823, now seen corresponding path program 1 times
[2020-11-24 20:47:18,392 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:47:18,427 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:47:19,122 INFO  L134       CoverageAnalysis]: Checked inductivity of 9826 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9826 trivial. 0 not checked.
[2020-11-24 20:47:19,122 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:47:19,122 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-24 20:47:19,123 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:47:19,123 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-24 20:47:19,123 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-24 20:47:19,124 INFO  L87              Difference]: Start difference. First operand 8832 states and 9876 transitions. cyclomatic complexity: 1063 Second operand 12 states.
[2020-11-24 20:47:27,253 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:47:27,254 INFO  L93              Difference]: Finished difference Result 14122 states and 15915 transitions.
[2020-11-24 20:47:27,254 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-24 20:47:27,254 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14122 states and 15915 transitions.
[2020-11-24 20:47:27,283 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-24 20:47:27,313 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14122 states to 14122 states and 15915 transitions.
[2020-11-24 20:47:27,314 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3554
[2020-11-24 20:47:27,315 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3554
[2020-11-24 20:47:27,315 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14122 states and 15915 transitions.
[2020-11-24 20:47:27,324 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:47:27,324 INFO  L728         BuchiCegarLoop]: Abstraction has 14122 states and 15915 transitions.
[2020-11-24 20:47:27,332 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14122 states and 15915 transitions.
[2020-11-24 20:47:27,424 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14122 to 12106.
[2020-11-24 20:47:27,425 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12106 states.
[2020-11-24 20:47:27,440 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12106 states to 12106 states and 13899 transitions.
[2020-11-24 20:47:27,440 INFO  L751         BuchiCegarLoop]: Abstraction has 12106 states and 13899 transitions.
[2020-11-24 20:47:27,440 INFO  L631         BuchiCegarLoop]: Abstraction has 12106 states and 13899 transitions.
[2020-11-24 20:47:27,440 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 20:47:27,440 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12106 states and 13899 transitions.
[2020-11-24 20:47:27,455 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-24 20:47:27,455 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:47:27,455 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:47:27,460 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:47:27,460 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND TRUE   PAUSED_Consts[this]
[L9855]   COND TRUE   DType[this] == MainToken
[L9856]   CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9012]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L9012]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9013]   COND FALSE  !(revert)
[L9016]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12911]  COND FALSE  !(!!paused_Pausable[this])
[L9016]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9017]   COND FALSE  !(revert)
[L9020]               paused_Pausable[this] := true;
[L9021]               assert { :EventEmitted "Pause_Pausable" } true;
[L9856]   RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9857]   COND FALSE  !(revert)
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND TRUE   __exception
[L4830]               __tmp__Balance := Balance;
[L4831]               __tmp__DType := DType;
[L4832]               __tmp__Alloc := Alloc;
[L4833]               __tmp__balance_ADDR := balance_ADDR;
[L4834]               __tmp__M_Ref_int := M_Ref_int;
[L4835]               __tmp__sum_balances0 := sum_balances0;
[L4836]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4837]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4838]               __tmp__sum_allowed1 := sum_allowed1;
[L4839]               __tmp__M_int_int := M_int_int;
[L4840]               __tmp__sum_chains2 := sum_chains2;
[L4841]               __tmp__sum_freezings3 := sum_freezings3;
[L4842]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4843]               __tmp__M_int_Ref := M_int_Ref;
[L4844]               __tmp__sum := sum;
[L4845]               __tmp__Length := Length;
[L4846]               __tmp__now := now;
[L4847]               __tmp__balances_BasicToken := balances_BasicToken;
[L4848]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4849]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4850]               __tmp__owner_Ownable := owner_Ownable;
[L4851]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4852]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4853]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4854]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4855]               __tmp__paused_Pausable := paused_Pausable;
[L4856]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4857]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4858]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4859]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4860]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4861]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4862]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4863]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4864]               __tmp__initialized_MainToken := initialized_MainToken;
[L4865]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9660]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9661]               revert := true;
[L4865]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4866]               assume revert || gas < 0;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND TRUE   __exception
[L4830]               __tmp__Balance := Balance;
[L4831]               __tmp__DType := DType;
[L4832]               __tmp__Alloc := Alloc;
[L4833]               __tmp__balance_ADDR := balance_ADDR;
[L4834]               __tmp__M_Ref_int := M_Ref_int;
[L4835]               __tmp__sum_balances0 := sum_balances0;
[L4836]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4837]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4838]               __tmp__sum_allowed1 := sum_allowed1;
[L4839]               __tmp__M_int_int := M_int_int;
[L4840]               __tmp__sum_chains2 := sum_chains2;
[L4841]               __tmp__sum_freezings3 := sum_freezings3;
[L4842]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4843]               __tmp__M_int_Ref := M_int_Ref;
[L4844]               __tmp__sum := sum;
[L4845]               __tmp__Length := Length;
[L4846]               __tmp__now := now;
[L4847]               __tmp__balances_BasicToken := balances_BasicToken;
[L4848]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4849]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4850]               __tmp__owner_Ownable := owner_Ownable;
[L4851]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4852]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4853]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4854]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4855]               __tmp__paused_Pausable := paused_Pausable;
[L4856]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4857]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4858]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4859]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4860]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4861]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4862]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4863]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4864]               __tmp__initialized_MainToken := initialized_MainToken;
[L4865]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9660]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9661]               revert := true;
[L4865]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4866]               assume revert || gas < 0;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:47:27,468 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:47:27,468 INFO  L82        PathProgramCache]: Analyzing trace with hash -1568073734, now seen corresponding path program 1 times
[2020-11-24 20:47:27,469 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:47:27,500 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:47:28,082 INFO  L134       CoverageAnalysis]: Checked inductivity of 9832 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9832 trivial. 0 not checked.
[2020-11-24 20:47:28,083 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:47:28,083 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:47:28,084 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:47:28,084 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:47:28,084 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:47:28,084 INFO  L87              Difference]: Start difference. First operand 12106 states and 13899 transitions. cyclomatic complexity: 1823 Second operand 7 states.
[2020-11-24 20:47:28,230 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:47:28,231 INFO  L93              Difference]: Finished difference Result 12096 states and 13888 transitions.
[2020-11-24 20:47:28,231 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:47:28,231 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12096 states and 13888 transitions.
[2020-11-24 20:47:28,259 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-24 20:47:28,290 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12096 states to 12009 states and 13794 transitions.
[2020-11-24 20:47:28,290 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2988
[2020-11-24 20:47:28,291 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2988
[2020-11-24 20:47:28,292 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12009 states and 13794 transitions.
[2020-11-24 20:47:28,299 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:47:28,299 INFO  L728         BuchiCegarLoop]: Abstraction has 12009 states and 13794 transitions.
[2020-11-24 20:47:28,307 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12009 states and 13794 transitions.
[2020-11-24 20:47:28,406 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12009 to 12009.
[2020-11-24 20:47:28,407 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12009 states.
[2020-11-24 20:47:28,422 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12009 states to 12009 states and 13794 transitions.
[2020-11-24 20:47:28,422 INFO  L751         BuchiCegarLoop]: Abstraction has 12009 states and 13794 transitions.
[2020-11-24 20:47:28,422 INFO  L631         BuchiCegarLoop]: Abstraction has 12009 states and 13794 transitions.
[2020-11-24 20:47:28,422 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 20:47:28,423 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12009 states and 13794 transitions.
[2020-11-24 20:47:28,435 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-24 20:47:28,435 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:47:28,435 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:47:28,438 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:47:28,438 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND FALSE  !(__exception)
[L4868]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9680]   COND FALSE  !(!!paused_Pausable[this])
[L9684]   COND TRUE   DType[this] == MainToken
[L9685]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6949]               __var_1 := null;
[L6950]   COND FALSE  !(!(_to_s202 != null))
[L6954]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6958]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6958]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6959]   COND FALSE  !(revert)
[L6962]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6963]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6964]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6965]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L6965]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6966]   COND FALSE  !(revert)
[L6969]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6970]               balances_BasicToken[this][_to_s202] := __var_3;
[L6971]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6972]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6973]               __ret_0_ := true;
[L9685]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9686]   COND FALSE  !(revert)
[L9692]               _success_s1572 := __var_55;
[L4868]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4869]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND FALSE  !(__exception)
[L4868]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9680]   COND FALSE  !(!!paused_Pausable[this])
[L9684]   COND TRUE   DType[this] == MainToken
[L9685]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6949]               __var_1 := null;
[L6950]   COND FALSE  !(!(_to_s202 != null))
[L6954]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6958]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6958]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6959]   COND FALSE  !(revert)
[L6962]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6963]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6964]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6965]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L6965]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6966]   COND FALSE  !(revert)
[L6969]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6970]               balances_BasicToken[this][_to_s202] := __var_3;
[L6971]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6972]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6973]               __ret_0_ := true;
[L9685]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9686]   COND FALSE  !(revert)
[L9692]               _success_s1572 := __var_55;
[L4868]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4869]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:47:28,446 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:47:28,446 INFO  L82        PathProgramCache]: Analyzing trace with hash -1636920884, now seen corresponding path program 1 times
[2020-11-24 20:47:28,447 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:47:28,543 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:47:29,800 INFO  L134       CoverageAnalysis]: Checked inductivity of 9826 backedges. 96 proven. 0 refuted. 0 times theorem prover too weak. 9730 trivial. 0 not checked.
[2020-11-24 20:47:29,800 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:47:29,800 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [24] imperfect sequences [] total 24
[2020-11-24 20:47:29,801 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:47:29,801 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-24 20:47:29,801 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=55, Invalid=545, Unknown=0, NotChecked=0, Total=600
[2020-11-24 20:47:29,801 INFO  L87              Difference]: Start difference. First operand 12009 states and 13794 transitions. cyclomatic complexity: 1814 Second operand 25 states.
[2020-11-24 20:47:47,905 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:47:47,905 INFO  L93              Difference]: Finished difference Result 12316 states and 14253 transitions.
[2020-11-24 20:47:47,905 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-24 20:47:47,905 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12316 states and 14253 transitions.
[2020-11-24 20:47:47,932 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-24 20:47:47,962 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12316 states to 12316 states and 14253 transitions.
[2020-11-24 20:47:47,962 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3061
[2020-11-24 20:47:47,963 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3061
[2020-11-24 20:47:47,963 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12316 states and 14253 transitions.
[2020-11-24 20:47:47,971 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:47:47,971 INFO  L728         BuchiCegarLoop]: Abstraction has 12316 states and 14253 transitions.
[2020-11-24 20:47:47,978 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12316 states and 14253 transitions.
[2020-11-24 20:47:48,043 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12316 to 12238.
[2020-11-24 20:47:48,043 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12238 states.
[2020-11-24 20:47:48,059 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12238 states to 12238 states and 14149 transitions.
[2020-11-24 20:47:48,060 INFO  L751         BuchiCegarLoop]: Abstraction has 12238 states and 14149 transitions.
[2020-11-24 20:47:48,060 INFO  L631         BuchiCegarLoop]: Abstraction has 12238 states and 14149 transitions.
[2020-11-24 20:47:48,060 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 20:47:48,060 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12238 states and 14149 transitions.
[2020-11-24 20:47:48,073 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-24 20:47:48,073 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:47:48,073 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:47:48,075 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:47:48,075 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND TRUE   __exception
[L4830]               __tmp__Balance := Balance;
[L4831]               __tmp__DType := DType;
[L4832]               __tmp__Alloc := Alloc;
[L4833]               __tmp__balance_ADDR := balance_ADDR;
[L4834]               __tmp__M_Ref_int := M_Ref_int;
[L4835]               __tmp__sum_balances0 := sum_balances0;
[L4836]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4837]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4838]               __tmp__sum_allowed1 := sum_allowed1;
[L4839]               __tmp__M_int_int := M_int_int;
[L4840]               __tmp__sum_chains2 := sum_chains2;
[L4841]               __tmp__sum_freezings3 := sum_freezings3;
[L4842]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4843]               __tmp__M_int_Ref := M_int_Ref;
[L4844]               __tmp__sum := sum;
[L4845]               __tmp__Length := Length;
[L4846]               __tmp__now := now;
[L4847]               __tmp__balances_BasicToken := balances_BasicToken;
[L4848]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4849]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4850]               __tmp__owner_Ownable := owner_Ownable;
[L4851]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4852]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4853]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4854]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4855]               __tmp__paused_Pausable := paused_Pausable;
[L4856]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4857]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4858]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4859]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4860]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4861]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4862]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4863]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4864]               __tmp__initialized_MainToken := initialized_MainToken;
[L4865]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9660]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9664]   COND TRUE   __tmp__DType[this] == MainToken
[L9665]   CALL        call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6917]               __var_1 := null;
[L6918]   COND TRUE   !(_to_s202 != null)
[L6919]               revert := true;
[L9665]   RET         call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9666]   COND TRUE   revert
[L4865]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4866]               assume revert || gas < 0;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND TRUE   __exception
[L4830]               __tmp__Balance := Balance;
[L4831]               __tmp__DType := DType;
[L4832]               __tmp__Alloc := Alloc;
[L4833]               __tmp__balance_ADDR := balance_ADDR;
[L4834]               __tmp__M_Ref_int := M_Ref_int;
[L4835]               __tmp__sum_balances0 := sum_balances0;
[L4836]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4837]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4838]               __tmp__sum_allowed1 := sum_allowed1;
[L4839]               __tmp__M_int_int := M_int_int;
[L4840]               __tmp__sum_chains2 := sum_chains2;
[L4841]               __tmp__sum_freezings3 := sum_freezings3;
[L4842]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4843]               __tmp__M_int_Ref := M_int_Ref;
[L4844]               __tmp__sum := sum;
[L4845]               __tmp__Length := Length;
[L4846]               __tmp__now := now;
[L4847]               __tmp__balances_BasicToken := balances_BasicToken;
[L4848]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4849]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4850]               __tmp__owner_Ownable := owner_Ownable;
[L4851]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4852]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4853]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4854]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4855]               __tmp__paused_Pausable := paused_Pausable;
[L4856]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4857]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4858]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4859]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4860]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4861]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4862]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4863]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4864]               __tmp__initialized_MainToken := initialized_MainToken;
[L4865]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9660]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9664]   COND TRUE   __tmp__DType[this] == MainToken
[L9665]   CALL        call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6917]               __var_1 := null;
[L6918]   COND TRUE   !(_to_s202 != null)
[L6919]               revert := true;
[L9665]   RET         call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9666]   COND TRUE   revert
[L4865]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4866]               assume revert || gas < 0;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:47:48,082 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:47:48,083 INFO  L82        PathProgramCache]: Analyzing trace with hash -1175815530, now seen corresponding path program 1 times
[2020-11-24 20:47:48,083 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:47:48,113 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:47:48,640 INFO  L134       CoverageAnalysis]: Checked inductivity of 9826 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9826 trivial. 0 not checked.
[2020-11-24 20:47:48,641 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:47:48,641 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:47:48,641 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:47:48,641 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:47:48,642 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:47:48,642 INFO  L87              Difference]: Start difference. First operand 12238 states and 14149 transitions. cyclomatic complexity: 1945 Second operand 7 states.
[2020-11-24 20:47:48,731 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:47:48,731 INFO  L93              Difference]: Finished difference Result 12312 states and 14227 transitions.
[2020-11-24 20:47:48,731 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:47:48,731 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12312 states and 14227 transitions.
[2020-11-24 20:47:48,755 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-24 20:47:48,782 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12312 states to 12304 states and 14219 transitions.
[2020-11-24 20:47:48,782 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3065
[2020-11-24 20:47:48,783 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3065
[2020-11-24 20:47:48,783 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12304 states and 14219 transitions.
[2020-11-24 20:47:48,790 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:47:48,790 INFO  L728         BuchiCegarLoop]: Abstraction has 12304 states and 14219 transitions.
[2020-11-24 20:47:48,797 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12304 states and 14219 transitions.
[2020-11-24 20:47:48,862 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12304 to 12286.
[2020-11-24 20:47:48,863 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12286 states.
[2020-11-24 20:47:48,879 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12286 states to 12286 states and 14199 transitions.
[2020-11-24 20:47:48,879 INFO  L751         BuchiCegarLoop]: Abstraction has 12286 states and 14199 transitions.
[2020-11-24 20:47:48,879 INFO  L631         BuchiCegarLoop]: Abstraction has 12286 states and 14199 transitions.
[2020-11-24 20:47:48,879 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-24 20:47:48,879 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12286 states and 14199 transitions.
[2020-11-24 20:47:48,891 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-24 20:47:48,891 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:47:48,891 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:47:48,893 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:47:48,893 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND TRUE   __exception
[L4830]               __tmp__Balance := Balance;
[L4831]               __tmp__DType := DType;
[L4832]               __tmp__Alloc := Alloc;
[L4833]               __tmp__balance_ADDR := balance_ADDR;
[L4834]               __tmp__M_Ref_int := M_Ref_int;
[L4835]               __tmp__sum_balances0 := sum_balances0;
[L4836]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4837]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4838]               __tmp__sum_allowed1 := sum_allowed1;
[L4839]               __tmp__M_int_int := M_int_int;
[L4840]               __tmp__sum_chains2 := sum_chains2;
[L4841]               __tmp__sum_freezings3 := sum_freezings3;
[L4842]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4843]               __tmp__M_int_Ref := M_int_Ref;
[L4844]               __tmp__sum := sum;
[L4845]               __tmp__Length := Length;
[L4846]               __tmp__now := now;
[L4847]               __tmp__balances_BasicToken := balances_BasicToken;
[L4848]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4849]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4850]               __tmp__owner_Ownable := owner_Ownable;
[L4851]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4852]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4853]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4854]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4855]               __tmp__paused_Pausable := paused_Pausable;
[L4856]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4857]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4858]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4859]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4860]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4861]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4862]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4863]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4864]               __tmp__initialized_MainToken := initialized_MainToken;
[L4865]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9660]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9664]   COND TRUE   __tmp__DType[this] == MainToken
[L9665]   CALL        call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6917]               __var_1 := null;
[L6918]   COND FALSE  !(!(_to_s202 != null))
[L6922]   COND TRUE   !(_value_s202 <= __tmp__balances_BasicToken[this][msgsender_MSG])
[L6923]               revert := true;
[L9665]   RET         call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9666]   COND TRUE   revert
[L4865]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4866]               assume revert || gas < 0;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE   choice == 38
[L14662]              gas := gas - 21000;
[L14663]  COND FALSE  !(gas >= 0)
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:47:48,900 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:47:48,900 INFO  L82        PathProgramCache]: Analyzing trace with hash 1774463844, now seen corresponding path program 1 times
[2020-11-24 20:47:48,901 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:47:48,929 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:47:49,511 INFO  L134       CoverageAnalysis]: Checked inductivity of 9826 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9826 trivial. 0 not checked.
[2020-11-24 20:47:49,511 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:47:49,511 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:47:49,512 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:47:49,512 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:47:49,512 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:47:49,512 INFO  L87              Difference]: Start difference. First operand 12286 states and 14199 transitions. cyclomatic complexity: 1947 Second operand 7 states.
[2020-11-24 20:47:52,089 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:47:52,089 INFO  L93              Difference]: Finished difference Result 12452 states and 14465 transitions.
[2020-11-24 20:47:52,089 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 20:47:52,089 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12452 states and 14465 transitions.
[2020-11-24 20:47:52,119 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 36
[2020-11-24 20:47:52,150 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12452 states to 12452 states and 14465 transitions.
[2020-11-24 20:47:52,150 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3089
[2020-11-24 20:47:52,151 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3089
[2020-11-24 20:47:52,151 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12452 states and 14465 transitions.
[2020-11-24 20:47:52,160 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:47:52,160 INFO  L728         BuchiCegarLoop]: Abstraction has 12452 states and 14465 transitions.
[2020-11-24 20:47:52,166 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12452 states and 14465 transitions.
[2020-11-24 20:47:52,232 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12452 to 12143.
[2020-11-24 20:47:52,232 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12143 states.
[2020-11-24 20:47:52,249 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12143 states to 12143 states and 13928 transitions.
[2020-11-24 20:47:52,249 INFO  L751         BuchiCegarLoop]: Abstraction has 12143 states and 13928 transitions.
[2020-11-24 20:47:52,249 INFO  L631         BuchiCegarLoop]: Abstraction has 12143 states and 13928 transitions.
[2020-11-24 20:47:52,249 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-24 20:47:52,250 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12143 states and 13928 transitions.
[2020-11-24 20:47:52,263 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 20
[2020-11-24 20:47:52,264 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:47:52,264 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:47:52,266 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:47:52,266 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND TRUE   __exception
[L4830]               __tmp__Balance := Balance;
[L4831]               __tmp__DType := DType;
[L4832]               __tmp__Alloc := Alloc;
[L4833]               __tmp__balance_ADDR := balance_ADDR;
[L4834]               __tmp__M_Ref_int := M_Ref_int;
[L4835]               __tmp__sum_balances0 := sum_balances0;
[L4836]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4837]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4838]               __tmp__sum_allowed1 := sum_allowed1;
[L4839]               __tmp__M_int_int := M_int_int;
[L4840]               __tmp__sum_chains2 := sum_chains2;
[L4841]               __tmp__sum_freezings3 := sum_freezings3;
[L4842]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4843]               __tmp__M_int_Ref := M_int_Ref;
[L4844]               __tmp__sum := sum;
[L4845]               __tmp__Length := Length;
[L4846]               __tmp__now := now;
[L4847]               __tmp__balances_BasicToken := balances_BasicToken;
[L4848]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4849]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4850]               __tmp__owner_Ownable := owner_Ownable;
[L4851]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4852]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4853]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4854]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4855]               __tmp__paused_Pausable := paused_Pausable;
[L4856]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4857]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4858]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4859]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4860]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4861]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4862]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4863]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4864]               __tmp__initialized_MainToken := initialized_MainToken;
[L4865]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9660]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9664]   COND TRUE   __tmp__DType[this] == MainToken
[L9665]   CALL        call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6917]               __var_1 := null;
[L6918]   COND FALSE  !(!(_to_s202 != null))
[L6922]   COND FALSE  !(!(_value_s202 <= __tmp__balances_BasicToken[this][msgsender_MSG]))
[L6926]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6828]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6926]   RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6927]   COND FALSE  !(revert)
[L6930]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][msgsender_MSG];
[L6931]               __tmp__balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6932]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][msgsender_MSG];
[L6933]   CALL        call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s202], _value_s202);
[L6841]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6842]               c_s122 := c_s122;
[L6933]   RET         call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s202], _value_s202);
[L6934]   COND FALSE  !(revert)
[L6937]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][_to_s202];
[L6938]               __tmp__balances_BasicToken[this][_to_s202] := __var_3;
[L6939]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][_to_s202];
[L6940]               __ret_0_ := true;
[L9665]   RET         call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9666]   COND FALSE  !(revert)
[L9672]               _success_s1572 := __var_55;
[L4865]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4866]               assume revert || gas < 0;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND TRUE   __exception
[L4830]               __tmp__Balance := Balance;
[L4831]               __tmp__DType := DType;
[L4832]               __tmp__Alloc := Alloc;
[L4833]               __tmp__balance_ADDR := balance_ADDR;
[L4834]               __tmp__M_Ref_int := M_Ref_int;
[L4835]               __tmp__sum_balances0 := sum_balances0;
[L4836]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4837]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4838]               __tmp__sum_allowed1 := sum_allowed1;
[L4839]               __tmp__M_int_int := M_int_int;
[L4840]               __tmp__sum_chains2 := sum_chains2;
[L4841]               __tmp__sum_freezings3 := sum_freezings3;
[L4842]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4843]               __tmp__M_int_Ref := M_int_Ref;
[L4844]               __tmp__sum := sum;
[L4845]               __tmp__Length := Length;
[L4846]               __tmp__now := now;
[L4847]               __tmp__balances_BasicToken := balances_BasicToken;
[L4848]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4849]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4850]               __tmp__owner_Ownable := owner_Ownable;
[L4851]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4852]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4853]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4854]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4855]               __tmp__paused_Pausable := paused_Pausable;
[L4856]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4857]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4858]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4859]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4860]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4861]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4862]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4863]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4864]               __tmp__initialized_MainToken := initialized_MainToken;
[L4865]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9660]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9664]   COND TRUE   __tmp__DType[this] == MainToken
[L9665]   CALL        call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6917]               __var_1 := null;
[L6918]   COND FALSE  !(!(_to_s202 != null))
[L6922]   COND FALSE  !(!(_value_s202 <= __tmp__balances_BasicToken[this][msgsender_MSG]))
[L6926]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6828]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6926]   RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6927]   COND FALSE  !(revert)
[L6930]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][msgsender_MSG];
[L6931]               __tmp__balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6932]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][msgsender_MSG];
[L6933]   CALL        call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s202], _value_s202);
[L6841]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6842]               c_s122 := c_s122;
[L6933]   RET         call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s202], _value_s202);
[L6934]   COND FALSE  !(revert)
[L6937]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][_to_s202];
[L6938]               __tmp__balances_BasicToken[this][_to_s202] := __var_3;
[L6939]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][_to_s202];
[L6940]               __ret_0_ := true;
[L9665]   RET         call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9666]   COND FALSE  !(revert)
[L9672]               _success_s1572 := __var_55;
[L4865]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4866]               assume revert || gas < 0;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:47:52,273 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:47:52,273 INFO  L82        PathProgramCache]: Analyzing trace with hash 177732669, now seen corresponding path program 1 times
[2020-11-24 20:47:52,274 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:47:52,304 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:47:52,836 INFO  L134       CoverageAnalysis]: Checked inductivity of 9826 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9826 trivial. 0 not checked.
[2020-11-24 20:47:52,836 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:47:52,836 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 20:47:52,837 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:47:52,837 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 20:47:52,837 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 20:47:52,837 INFO  L87              Difference]: Start difference. First operand 12143 states and 13928 transitions. cyclomatic complexity: 1819 Second operand 5 states.
[2020-11-24 20:47:54,103 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:47:54,103 INFO  L93              Difference]: Finished difference Result 13953 states and 16255 transitions.
[2020-11-24 20:47:54,103 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:47:54,103 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13953 states and 16255 transitions.
[2020-11-24 20:47:54,140 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 44
[2020-11-24 20:47:54,174 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13953 states to 11153 states and 13274 transitions.
[2020-11-24 20:47:54,174 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2066
[2020-11-24 20:47:54,175 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2261
[2020-11-24 20:47:54,176 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11153 states and 13274 transitions.
[2020-11-24 20:47:54,184 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:47:54,184 INFO  L728         BuchiCegarLoop]: Abstraction has 11153 states and 13274 transitions.
[2020-11-24 20:47:54,189 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11153 states and 13274 transitions.
[2020-11-24 20:47:54,242 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11153 to 9299.
[2020-11-24 20:47:54,242 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9299 states.
[2020-11-24 20:47:54,253 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9299 states to 9299 states and 10771 transitions.
[2020-11-24 20:47:54,253 INFO  L751         BuchiCegarLoop]: Abstraction has 9299 states and 10771 transitions.
[2020-11-24 20:47:54,253 INFO  L631         BuchiCegarLoop]: Abstraction has 9299 states and 10771 transitions.
[2020-11-24 20:47:54,253 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-24 20:47:54,253 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9299 states and 10771 transitions.
[2020-11-24 20:47:54,262 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-24 20:47:54,262 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:47:54,262 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:47:54,265 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:47:54,265 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND FALSE  !(choice == 36)
[L14680]  COND FALSE  !(choice == 35)
[L14686]  COND FALSE  !(choice == 34)
[L14693]  COND FALSE  !(choice == 33)
[L14700]  COND FALSE  !(choice == 32)
[L14707]  COND FALSE  !(choice == 31)
[L14714]  COND FALSE  !(choice == 30)
[L14720]  COND FALSE  !(choice == 29)
[L14726]  COND FALSE  !(choice == 28)
[L14732]  COND FALSE  !(choice == 27)
[L14738]  COND FALSE  !(choice == 26)
[L14745]  COND FALSE  !(choice == 25)
[L14751]  COND FALSE  !(choice == 24)
[L14757]  COND FALSE  !(choice == 23)
[L14763]  COND FALSE  !(choice == 22)
[L14769]  COND FALSE  !(choice == 21)
[L14776]  COND FALSE  !(choice == 20)
[L14784]  COND FALSE  !(choice == 19)
[L14790]  COND FALSE  !(choice == 18)
[L14796]  COND TRUE   choice == 17
[L14797]              gas := gas - 21000;
[L14798]  COND TRUE   gas >= 0
[L14799]              assume _value_s1261 >= 0 && _value_s1261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14800]              assume msgvalue_MSG == 0;
[L14801]  CALL        call burn~uint256_BurnableToken(this, msgsender_MSG, msgvalue_MSG, _value_s1261);
[L2904]               havoc __exception;
[L2905]               revert := false;
[L2906]   COND FALSE  !(__exception)
[L2945]   CALL        call burn~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, _value_s1261);
[L8894]   COND TRUE   DType[this] == MainToken
[L8895]   CALL        call _burn~address~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s1261);
[L8935]   COND FALSE  !(!(_value_s1308 <= balances_BasicToken[this][_who_s1308]))
[L8939]   CALL        call __var_46 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_who_s1308], _value_s1308);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8939]   RET         call __var_46 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_who_s1308], _value_s1308);
[L8940]   COND FALSE  !(revert)
[L8943]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_who_s1308];
[L8944]               balances_BasicToken[this][_who_s1308] := __var_46;
[L8945]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_who_s1308];
[L8946]   CALL        call __var_47 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _value_s1308);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8946]   RET         call __var_47 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _value_s1308);
[L8947]   COND FALSE  !(revert)
[L8950]               totalSupply__BasicToken[this] := __var_47;
[L8951]               assert { :EventEmitted "Burn_BurnableToken" } true;
[L8952]               assert { :EventEmitted "Transfer_BurnableToken" } true;
[L8895]   RET         call _burn~address~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s1261);
[L8896]   COND FALSE  !(revert)
[L2945]   RET         call burn~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, _value_s1261);
[L2946]               assume !revert && gas >= 0;
[L14801]  RET         call burn~uint256_BurnableToken(this, msgsender_MSG, msgvalue_MSG, _value_s1261);
[L14919]  RET         call CorralChoice_MainToken(this);
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND FALSE  !(__exception)
[L4868]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9680]   COND FALSE  !(!!paused_Pausable[this])
[L9684]   COND TRUE   DType[this] == MainToken
[L9685]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6949]               __var_1 := null;
[L6950]   COND FALSE  !(!(_to_s202 != null))
[L6954]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6958]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6958]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6959]   COND FALSE  !(revert)
[L6962]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6963]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6964]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6965]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L6965]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6966]   COND FALSE  !(revert)
[L6969]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6970]               balances_BasicToken[this][_to_s202] := __var_3;
[L6971]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6972]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6973]               __ret_0_ := true;
[L9685]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9686]   COND FALSE  !(revert)
[L9692]               _success_s1572 := __var_55;
[L4868]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4869]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE   choice == 38
[L14662]              gas := gas - 21000;
[L14663]  COND FALSE  !(gas >= 0)
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:47:54,272 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:47:54,272 INFO  L82        PathProgramCache]: Analyzing trace with hash 1017901533, now seen corresponding path program 1 times
[2020-11-24 20:47:54,273 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:47:54,392 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:47:56,248 INFO  L134       CoverageAnalysis]: Checked inductivity of 9920 backedges. 96 proven. 3 refuted. 0 times theorem prover too weak. 9821 trivial. 0 not checked.
[2020-11-24 20:47:56,248 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:47:56,248 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-11-24 20:47:56,249 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:47:56,249 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-11-24 20:47:56,249 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=100, Invalid=1090, Unknown=0, NotChecked=0, Total=1190
[2020-11-24 20:47:56,249 INFO  L87              Difference]: Start difference. First operand 9299 states and 10771 transitions. cyclomatic complexity: 1504 Second operand 35 states.
[2020-11-24 20:48:13,004 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:48:13,004 INFO  L93              Difference]: Finished difference Result 9363 states and 10935 transitions.
[2020-11-24 20:48:13,004 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-11-24 20:48:13,004 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9363 states and 10935 transitions.
[2020-11-24 20:48:13,024 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 20
[2020-11-24 20:48:13,044 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9363 states to 9363 states and 10935 transitions.
[2020-11-24 20:48:13,044 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1953
[2020-11-24 20:48:13,045 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1953
[2020-11-24 20:48:13,045 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9363 states and 10935 transitions.
[2020-11-24 20:48:13,051 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:48:13,051 INFO  L728         BuchiCegarLoop]: Abstraction has 9363 states and 10935 transitions.
[2020-11-24 20:48:13,055 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9363 states and 10935 transitions.
[2020-11-24 20:48:13,094 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9363 to 9299.
[2020-11-24 20:48:13,094 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9299 states.
[2020-11-24 20:48:13,105 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9299 states to 9299 states and 10771 transitions.
[2020-11-24 20:48:13,105 INFO  L751         BuchiCegarLoop]: Abstraction has 9299 states and 10771 transitions.
[2020-11-24 20:48:13,105 INFO  L631         BuchiCegarLoop]: Abstraction has 9299 states and 10771 transitions.
[2020-11-24 20:48:13,105 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-24 20:48:13,105 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9299 states and 10771 transitions.
[2020-11-24 20:48:13,113 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-24 20:48:13,114 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:48:13,114 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:48:13,116 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:48:13,116 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND FALSE  !(__exception)
[L4868]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9680]   COND FALSE  !(!!paused_Pausable[this])
[L9684]   COND TRUE   DType[this] == MainToken
[L9685]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6949]               __var_1 := null;
[L6950]   COND FALSE  !(!(_to_s202 != null))
[L6954]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6958]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6958]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6959]   COND FALSE  !(revert)
[L6962]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6963]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6964]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6965]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L6965]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6966]   COND FALSE  !(revert)
[L6969]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6970]               balances_BasicToken[this][_to_s202] := __var_3;
[L6971]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6972]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6973]               __ret_0_ := true;
[L9685]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9686]   COND FALSE  !(revert)
[L9692]               _success_s1572 := __var_55;
[L4868]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4869]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND FALSE  !(__exception)
[L4868]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9680]   COND FALSE  !(!!paused_Pausable[this])
[L9684]   COND TRUE   DType[this] == MainToken
[L9685]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6949]               __var_1 := null;
[L6950]   COND FALSE  !(!(_to_s202 != null))
[L6954]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6958]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6958]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6959]   COND FALSE  !(revert)
[L6962]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6963]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6964]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6965]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L6965]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6966]   COND FALSE  !(revert)
[L6969]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6970]               balances_BasicToken[this][_to_s202] := __var_3;
[L6971]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6972]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6973]               __ret_0_ := true;
[L9685]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9686]   COND FALSE  !(revert)
[L9692]               _success_s1572 := __var_55;
[L4868]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4869]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE   choice == 38
[L14662]              gas := gas - 21000;
[L14663]  COND FALSE  !(gas >= 0)
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:48:13,123 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:48:13,123 INFO  L82        PathProgramCache]: Analyzing trace with hash 252247059, now seen corresponding path program 1 times
[2020-11-24 20:48:13,124 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:48:13,252 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:48:14,519 INFO  L134       CoverageAnalysis]: Checked inductivity of 9925 backedges. 97 proven. 2 refuted. 0 times theorem prover too weak. 9826 trivial. 0 not checked.
[2020-11-24 20:48:14,520 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:48:14,520 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-24 20:48:14,521 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:48:14,521 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-24 20:48:14,521 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=61, Invalid=589, Unknown=0, NotChecked=0, Total=650
[2020-11-24 20:48:14,521 INFO  L87              Difference]: Start difference. First operand 9299 states and 10771 transitions. cyclomatic complexity: 1504 Second operand 26 states.
[2020-11-24 20:48:22,955 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:48:22,956 INFO  L93              Difference]: Finished difference Result 9371 states and 10952 transitions.
[2020-11-24 20:48:22,956 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-24 20:48:22,956 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9371 states and 10952 transitions.
[2020-11-24 20:48:22,978 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 20
[2020-11-24 20:48:22,998 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9371 states to 9371 states and 10952 transitions.
[2020-11-24 20:48:22,999 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1955
[2020-11-24 20:48:23,000 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1955
[2020-11-24 20:48:23,000 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9371 states and 10952 transitions.
[2020-11-24 20:48:23,006 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:48:23,006 INFO  L728         BuchiCegarLoop]: Abstraction has 9371 states and 10952 transitions.
[2020-11-24 20:48:23,011 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9371 states and 10952 transitions.
[2020-11-24 20:48:23,056 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9371 to 9333.
[2020-11-24 20:48:23,056 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9333 states.
[2020-11-24 20:48:23,068 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9333 states to 9333 states and 10870 transitions.
[2020-11-24 20:48:23,068 INFO  L751         BuchiCegarLoop]: Abstraction has 9333 states and 10870 transitions.
[2020-11-24 20:48:23,068 INFO  L631         BuchiCegarLoop]: Abstraction has 9333 states and 10870 transitions.
[2020-11-24 20:48:23,068 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-24 20:48:23,068 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9333 states and 10870 transitions.
[2020-11-24 20:48:23,077 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 20
[2020-11-24 20:48:23,077 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:48:23,077 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:48:23,080 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:48:23,080 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND FALSE  !(__exception)
[L4868]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9680]   COND FALSE  !(!!paused_Pausable[this])
[L9684]   COND TRUE   DType[this] == MainToken
[L9685]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6949]               __var_1 := null;
[L6950]   COND FALSE  !(!(_to_s202 != null))
[L6954]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6958]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6958]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6959]   COND FALSE  !(revert)
[L6962]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6963]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6964]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6965]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L6965]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6966]   COND FALSE  !(revert)
[L6969]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6970]               balances_BasicToken[this][_to_s202] := __var_3;
[L6971]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6972]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6973]               __ret_0_ := true;
[L9685]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9686]   COND FALSE  !(revert)
[L9692]               _success_s1572 := __var_55;
[L4868]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4869]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume (((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]);
[L2]                  success_transfer_MainToken0 := true;
[L2]                  success_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND FALSE  !(__exception)
[L4868]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9680]   COND FALSE  !(!!paused_Pausable[this])
[L9684]   COND TRUE   DType[this] == MainToken
[L9685]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6949]               __var_1 := null;
[L6950]   COND FALSE  !(!(_to_s202 != null))
[L6954]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6958]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6958]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6959]   COND FALSE  !(revert)
[L6962]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6963]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6964]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6965]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L6965]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6966]   COND FALSE  !(revert)
[L6969]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6970]               balances_BasicToken[this][_to_s202] := __var_3;
[L6971]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6972]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6973]               __ret_0_ := true;
[L9685]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9686]   COND FALSE  !(revert)
[L9692]               _success_s1572 := __var_55;
[L4868]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4869]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND FALSE  !(__exception)
[L4868]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9680]   COND FALSE  !(!!paused_Pausable[this])
[L9684]   COND TRUE   DType[this] == MainToken
[L9685]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6949]               __var_1 := null;
[L6950]   COND FALSE  !(!(_to_s202 != null))
[L6954]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6958]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6958]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6959]   COND FALSE  !(revert)
[L6962]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6963]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6964]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6965]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L6965]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6966]   COND FALSE  !(revert)
[L6969]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6970]               balances_BasicToken[this][_to_s202] := __var_3;
[L6971]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6972]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6973]               __ret_0_ := true;
[L9685]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9686]   COND FALSE  !(revert)
[L9692]               _success_s1572 := __var_55;
[L4868]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4869]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:48:23,087 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:48:23,087 INFO  L82        PathProgramCache]: Analyzing trace with hash 1795430042, now seen corresponding path program 1 times
[2020-11-24 20:48:23,088 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:48:23,196 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:48:24,265 INFO  L134       CoverageAnalysis]: Checked inductivity of 9925 backedges. 100 proven. 0 refuted. 0 times theorem prover too weak. 9825 trivial. 0 not checked.
[2020-11-24 20:48:24,265 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:48:24,265 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [23] imperfect sequences [] total 23
[2020-11-24 20:48:24,266 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:48:24,267 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-24 20:48:24,267 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=57, Invalid=495, Unknown=0, NotChecked=0, Total=552
[2020-11-24 20:48:24,267 INFO  L87              Difference]: Start difference. First operand 9333 states and 10870 transitions. cyclomatic complexity: 1573 Second operand 24 states.
[2020-11-24 20:48:33,922 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:48:33,922 INFO  L93              Difference]: Finished difference Result 9381 states and 11012 transitions.
[2020-11-24 20:48:33,922 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-24 20:48:33,922 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9381 states and 11012 transitions.
[2020-11-24 20:48:33,943 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 24
[2020-11-24 20:48:33,965 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9381 states to 9381 states and 11012 transitions.
[2020-11-24 20:48:33,965 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1957
[2020-11-24 20:48:33,966 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1957
[2020-11-24 20:48:33,966 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9381 states and 11012 transitions.
[2020-11-24 20:48:33,972 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:48:33,972 INFO  L728         BuchiCegarLoop]: Abstraction has 9381 states and 11012 transitions.
[2020-11-24 20:48:33,977 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9381 states and 11012 transitions.
[2020-11-24 20:48:34,018 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9381 to 9351.
[2020-11-24 20:48:34,018 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9351 states.
[2020-11-24 20:48:34,030 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9351 states to 9351 states and 10960 transitions.
[2020-11-24 20:48:34,030 INFO  L751         BuchiCegarLoop]: Abstraction has 9351 states and 10960 transitions.
[2020-11-24 20:48:34,030 INFO  L631         BuchiCegarLoop]: Abstraction has 9351 states and 10960 transitions.
[2020-11-24 20:48:34,030 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-24 20:48:34,030 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9351 states and 10960 transitions.
[2020-11-24 20:48:34,039 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 24
[2020-11-24 20:48:34,039 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:48:34,039 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:48:34,041 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:48:34,041 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND FALSE  !(choice == 36)
[L14680]  COND FALSE  !(choice == 35)
[L14686]  COND FALSE  !(choice == 34)
[L14693]  COND FALSE  !(choice == 33)
[L14700]  COND FALSE  !(choice == 32)
[L14707]  COND FALSE  !(choice == 31)
[L14714]  COND FALSE  !(choice == 30)
[L14720]  COND FALSE  !(choice == 29)
[L14726]  COND FALSE  !(choice == 28)
[L14732]  COND FALSE  !(choice == 27)
[L14738]  COND FALSE  !(choice == 26)
[L14745]  COND FALSE  !(choice == 25)
[L14751]  COND FALSE  !(choice == 24)
[L14757]  COND FALSE  !(choice == 23)
[L14763]  COND FALSE  !(choice == 22)
[L14769]  COND FALSE  !(choice == 21)
[L14776]  COND FALSE  !(choice == 20)
[L14784]  COND FALSE  !(choice == 19)
[L14790]  COND FALSE  !(choice == 18)
[L14796]  COND FALSE  !(choice == 17)
[L14803]  COND FALSE  !(choice == 16)
[L14809]  COND TRUE   choice == 15
[L14810]              gas := gas - 21000;
[L14811]  COND TRUE   gas >= 0
[L14812]              assume msgvalue_MSG == 0;
[L14813]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L3089]               havoc __exception;
[L3090]               revert := false;
[L3091]   COND FALSE  !(__exception)
[L3130]   CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9012]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L9012]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9013]   COND FALSE  !(revert)
[L9016]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12911]  COND FALSE  !(!!paused_Pausable[this])
[L9016]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9017]   COND FALSE  !(revert)
[L9020]               paused_Pausable[this] := true;
[L9021]               assert { :EventEmitted "Pause_Pausable" } true;
[L3130]   RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]               assume !revert && gas >= 0;
[L14813]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L14919]  RET         call CorralChoice_MainToken(this);
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND TRUE   choice == 36
[L14674]              gas := gas - 21000;
[L14675]  COND TRUE   gas >= 0
[L14676]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14677]              assume msgvalue_MSG == 0;
[L14678]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4827]               havoc __exception;
[L4828]               revert := false;
[L4829]   COND TRUE   __exception
[L4830]               __tmp__Balance := Balance;
[L4831]               __tmp__DType := DType;
[L4832]               __tmp__Alloc := Alloc;
[L4833]               __tmp__balance_ADDR := balance_ADDR;
[L4834]               __tmp__M_Ref_int := M_Ref_int;
[L4835]               __tmp__sum_balances0 := sum_balances0;
[L4836]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4837]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4838]               __tmp__sum_allowed1 := sum_allowed1;
[L4839]               __tmp__M_int_int := M_int_int;
[L4840]               __tmp__sum_chains2 := sum_chains2;
[L4841]               __tmp__sum_freezings3 := sum_freezings3;
[L4842]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4843]               __tmp__M_int_Ref := M_int_Ref;
[L4844]               __tmp__sum := sum;
[L4845]               __tmp__Length := Length;
[L4846]               __tmp__now := now;
[L4847]               __tmp__balances_BasicToken := balances_BasicToken;
[L4848]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4849]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4850]               __tmp__owner_Ownable := owner_Ownable;
[L4851]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4852]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4853]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4854]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4855]               __tmp__paused_Pausable := paused_Pausable;
[L4856]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4857]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4858]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4859]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4860]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4861]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4862]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4863]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4864]               __tmp__initialized_MainToken := initialized_MainToken;
[L4865]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9660]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9661]               revert := true;
[L4865]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4866]               assume revert || gas < 0;
[L14678]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND FALSE  !(choice == 38)
[L14667]  COND FALSE  !(choice == 37)
[L14673]  COND FALSE  !(choice == 36)
[L14680]  COND FALSE  !(choice == 35)
[L14686]  COND TRUE   choice == 34
[L14687]              gas := gas - 21000;
[L14688]  COND TRUE   gas >= 0
[L14689]              assume _value_s1551 >= 0 && _value_s1551 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14690]              assume msgvalue_MSG == 0;
[L14691]  CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4739]               havoc __exception;
[L4740]               revert := false;
[L4741]   COND TRUE   __exception
[L4742]               __tmp__Balance := Balance;
[L4743]               __tmp__DType := DType;
[L4744]               __tmp__Alloc := Alloc;
[L4745]               __tmp__balance_ADDR := balance_ADDR;
[L4746]               __tmp__M_Ref_int := M_Ref_int;
[L4747]               __tmp__sum_balances0 := sum_balances0;
[L4748]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4749]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4750]               __tmp__sum_allowed1 := sum_allowed1;
[L4751]               __tmp__M_int_int := M_int_int;
[L4752]               __tmp__sum_chains2 := sum_chains2;
[L4753]               __tmp__sum_freezings3 := sum_freezings3;
[L4754]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4755]               __tmp__M_int_Ref := M_int_Ref;
[L4756]               __tmp__sum := sum;
[L4757]               __tmp__Length := Length;
[L4758]               __tmp__now := now;
[L4759]               __tmp__balances_BasicToken := balances_BasicToken;
[L4760]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4761]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4762]               __tmp__owner_Ownable := owner_Ownable;
[L4763]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4764]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4765]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4766]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4767]               __tmp__paused_Pausable := paused_Pausable;
[L4768]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4769]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4770]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4771]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4772]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4773]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4774]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4775]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4776]               __tmp__initialized_MainToken := initialized_MainToken;
[L4777]   CALL        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9620]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9621]               revert := true;
[L4777]   RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4778]               assume revert || gas < 0;
[L14691]  RET         call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:48:34,048 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:48:34,049 INFO  L82        PathProgramCache]: Analyzing trace with hash -1972110514, now seen corresponding path program 1 times
[2020-11-24 20:48:34,049 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:48:34,093 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:48:34,139 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:48:34,526 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:48:34,526 INFO  L82        PathProgramCache]: Analyzing trace with hash 2077079293, now seen corresponding path program 1 times
[2020-11-24 20:48:34,527 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:48:34,531 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:48:34,535 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:48:34,545 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:48:34,546 INFO  L82        PathProgramCache]: Analyzing trace with hash 539540106, now seen corresponding path program 1 times
[2020-11-24 20:48:34,546 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:48:34,590 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:48:34,639 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1759 to 3517
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
[2020-11-24 20:48:35,253 WARN  L188               SmtUtils]: Spent 239.00 ms on a formula simplification that was a NOOP. DAG size: 332
Garbage collection #1: 131 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.002s / 0.005s total
Resizing node table from 8053 to 16103
[2020-11-24 20:48:35,614 WARN  L188               SmtUtils]: Spent 255.00 ms on a formula simplification. DAG size of input: 341 DAG size of output: 328
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 7933 to 15859
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2179 to 4357
[2020-11-24 20:48:35,829 WARN  L188               SmtUtils]: Spent 134.00 ms on a formula simplification that was a NOOP. DAG size: 451
Garbage collection #1: 181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 181 to 359
Garbage collection #2: 359 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 359 to 709
Garbage collection #3: 709 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 709 to 1409
Garbage collection #4: 1409 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1409 to 2803
Garbage collection #5: 2803 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2803 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 11177 to 22349
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 8543 to 17077
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-24 20:48:36,042 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-24 20:48:37,413 WARN  L188               SmtUtils]: Spent 213.00 ms on a formula simplification. DAG size of input: 264 DAG size of output: 250
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
[2020-11-24 20:48:37,795 WARN  L188               SmtUtils]: Spent 259.00 ms on a formula simplification that was a NOOP. DAG size: 313
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
[2020-11-24 20:48:38,269 WARN  L188               SmtUtils]: Spent 233.00 ms on a formula simplification. DAG size of input: 258 DAG size of output: 249
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-24 20:48:45,255 WARN  L188               SmtUtils]: Spent 6.80 s on a formula simplification. DAG size of input: 629 DAG size of output: 598
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-24 20:48:45,534 WARN  L188               SmtUtils]: Spent 200.00 ms on a formula simplification that was a NOOP. DAG size: 328
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-24 20:48:45,663 WARN  L188               SmtUtils]: Spent 125.00 ms on a formula simplification that was a NOOP. DAG size: 272
[2020-11-24 20:48:45,939 WARN  L188               SmtUtils]: Spent 275.00 ms on a formula simplification. DAG size of input: 277 DAG size of output: 276
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-24 20:48:46,425 WARN  L188               SmtUtils]: Spent 416.00 ms on a formula simplification that was a NOOP. DAG size: 506
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10513 to 21023
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
[2020-11-24 20:48:46,764 WARN  L188               SmtUtils]: Spent 333.00 ms on a formula simplification that was a NOOP. DAG size: 450
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-24 20:48:46,950 WARN  L188               SmtUtils]: Spent 109.00 ms on a formula simplification. DAG size of input: 341 DAG size of output: 271
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-24 20:48:47,097 WARN  L188               SmtUtils]: Spent 123.00 ms on a formula simplification that was a NOOP. DAG size: 427
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
[2020-11-24 20:48:47,641 WARN  L188               SmtUtils]: Spent 225.00 ms on a formula simplification that was a NOOP. DAG size: 274
[2020-11-24 20:48:48,153 WARN  L188               SmtUtils]: Spent 509.00 ms on a formula simplification. DAG size of input: 348 DAG size of output: 339
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 15859 to 31699
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #7: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
[2020-11-24 20:48:48,287 WARN  L188               SmtUtils]: Spent 123.00 ms on a formula simplification. DAG size of input: 201 DAG size of output: 197
[2020-11-24 20:48:48,519 WARN  L188               SmtUtils]: Spent 230.00 ms on a formula simplification that was a NOOP. DAG size: 462
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 12073 to 24137
[2020-11-24 20:48:48,738 WARN  L188               SmtUtils]: Spent 212.00 ms on a formula simplification that was a NOOP. DAG size: 373
[2020-11-24 20:48:52,636 WARN  L188               SmtUtils]: Spent 3.89 s on a formula simplification. DAG size of input: 1041 DAG size of output: 1028
Garbage collection #1: 419 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 419 to 829
Garbage collection #2: 829 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 829 to 1657
Garbage collection #3: 1657 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1657 to 3313
Garbage collection #4: 3313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3313 to 6619
Garbage collection #5: 6619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6619 to 13229
Garbage collection #6: 13229 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13229 to 26449
Garbage collection #7: 26449 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 26449 to 52889
Garbage collection #8: 52889 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 52889 to 102881
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-24 20:48:53,226 WARN  L188               SmtUtils]: Spent 550.00 ms on a formula simplification. DAG size of input: 385 DAG size of output: 382
[2020-11-24 20:48:53,842 WARN  L188               SmtUtils]: Spent 574.00 ms on a formula simplification that was a NOOP. DAG size: 558
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 11177 to 22349
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-24 20:48:54,159 WARN  L188               SmtUtils]: Spent 308.00 ms on a formula simplification that was a NOOP. DAG size: 382
[2020-11-24 20:48:55,336 WARN  L188               SmtUtils]: Spent 1.18 s on a formula simplification. DAG size of input: 560 DAG size of output: 559
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
[2020-11-24 20:48:55,886 WARN  L188               SmtUtils]: Spent 544.00 ms on a formula simplification that was a NOOP. DAG size: 555
[2020-11-24 20:48:55,929 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:48:55,984 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:48:56,006 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:48:56 BasicIcfg
[2020-11-24 20:48:56,006 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 20:48:56,006 INFO  L168              Benchmark]: Toolchain (without parser) took 110329.97 ms. Allocated memory was 1.0 GB in the beginning and 6.1 GB in the end (delta: 5.0 GB). Free memory was 913.7 MB in the beginning and 3.5 GB in the end (delta: -2.5 GB). Peak memory consumption was 5.0 GB. Max. memory is 15.3 GB.
[2020-11-24 20:48:56,007 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:48:56,007 INFO  L168              Benchmark]: Boogie Preprocessor took 207.50 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 881.4 MB in the end (delta: 32.3 MB). Peak memory consumption was 32.3 MB. Max. memory is 15.3 GB.
[2020-11-24 20:48:56,008 INFO  L168              Benchmark]: UtopiaSpecLang took 103.11 ms. Allocated memory is still 1.0 GB. Free memory was 881.4 MB in the beginning and 870.6 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:48:56,008 INFO  L168              Benchmark]: Boogie Printer took 35.11 ms. Allocated memory is still 1.0 GB. Free memory was 870.6 MB in the beginning and 859.9 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:48:56,009 INFO  L168              Benchmark]: RCFGBuilder took 1719.57 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 207.1 MB). Free memory was 859.9 MB in the beginning and 1.1 GB in the end (delta: -243.8 MB). Peak memory consumption was 260.3 MB. Max. memory is 15.3 GB.
[2020-11-24 20:48:56,009 INFO  L168              Benchmark]: UtopiaLTL2Aut took 34.45 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 16.4 MB). Peak memory consumption was 16.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:48:56,010 INFO  L168              Benchmark]: BÃ¼chi Program Product took 4194.66 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 336.1 MB). Free memory was 1.1 GB in the beginning and 797.4 MB in the end (delta: 290.0 MB). Peak memory consumption was 804.0 MB. Max. memory is 15.3 GB.
[2020-11-24 20:48:56,010 INFO  L168              Benchmark]: BlockEncodingV2 took 369.97 ms. Allocated memory was 1.6 GB in the beginning and 2.0 GB in the end (delta: 404.2 MB). Free memory was 797.4 MB in the beginning and 1.7 GB in the end (delta: -902.5 MB). Peak memory consumption was 243.5 MB. Max. memory is 15.3 GB.
[2020-11-24 20:48:56,010 INFO  L168              Benchmark]: BuchiAutomizer took 103662.19 ms. Allocated memory was 2.0 GB in the beginning and 6.1 GB in the end (delta: 4.1 GB). Free memory was 1.7 GB in the beginning and 3.5 GB in the end (delta: -1.8 GB). Peak memory consumption was 4.9 GB. Max. memory is 15.3 GB.
[2020-11-24 20:48:56,013 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    13636 locations, 24999 edges
  - StatisticsResult: Encoded RCFG
    13426 locations, 24413 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 207.50 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 881.4 MB in the end (delta: 32.3 MB). Peak memory consumption was 32.3 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 103.11 ms. Allocated memory is still 1.0 GB. Free memory was 881.4 MB in the beginning and 870.6 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 35.11 ms. Allocated memory is still 1.0 GB. Free memory was 870.6 MB in the beginning and 859.9 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1719.57 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 207.1 MB). Free memory was 859.9 MB in the beginning and 1.1 GB in the end (delta: -243.8 MB). Peak memory consumption was 260.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 34.45 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 16.4 MB). Peak memory consumption was 16.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 4194.66 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 336.1 MB). Free memory was 1.1 GB in the beginning and 797.4 MB in the end (delta: 290.0 MB). Peak memory consumption was 804.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 369.97 ms. Allocated memory was 1.6 GB in the beginning and 2.0 GB in the end (delta: 404.2 MB). Free memory was 797.4 MB in the beginning and 1.7 GB in the end (delta: -902.5 MB). Peak memory consumption was 243.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 103662.19 ms. Allocated memory was 2.0 GB in the beginning and 6.1 GB in the end (delta: 4.1 GB). Free memory was 1.7 GB in the beginning and 3.5 GB in the end (delta: -1.8 GB). Peak memory consumption was 4.9 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    5478 locations, 7654 edges
  - StatisticsResult: BuchiProgram size
    13636 locations, 24999 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 14 terminating modules (14 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.14 modules have a trivial ranking function, the largest among these consists of 35 locations. The remainder module has 9351 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 103.5s and 15 iterations.  TraceHistogramMax:38. Analysis of lassos took 33.4s. Construction of modules took 54.4s. BÃ¼chi inclusion checks took 13.0s. Highest rank in rank-based complementation 0. Minimization of det autom 14. Minimization of nondet autom 0. Automata minimization 1.1s AutomataMinimizationTime, 14 MinimizatonAttempts, 7632 StatesRemovedByMinimization, 11 NontrivialMinimizations. Non-live state removal took 0.7s Buchi closure took 0.0s. Biggest automaton had 12286 states and ocurred in iteration 9.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 119936 SDtfs, 91342 SDslu, 389793 SDs, 0 SdLazy, 484504 SolverSat, 15346 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 54.4s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU14 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(697186226852612065377415878656999996930001387170) = (new MainToken)({from : 697186226852612065377415878656999996930001387159});
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND TRUE   !CONTINUE_MINTING_Consts[this]
[L9943]   COND TRUE   DType[this] == MainToken
[L9944]   CALL        call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7598]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7598]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12879]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7602]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]               mintingFinished_MintableToken[this] := true;
[L7607]               assert { :EventEmitted "MintFinished_MintableToken" } true;
[L7608]               __ret_0_ := true;
[L9944]   RET         call __var_74 := finishMinting_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9945]   COND FALSE  !(revert)
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
Pausable(697186226852612065377415878656999996930001387170).pause.gas(3979002)({from : (- 539724433074790209717737725607633009395537384718)});
[L3089]               havoc __exception;
[L3090]               revert := false;
[L3091]   COND FALSE  !(__exception)
[L3130]   CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9012]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L9012]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9013]   COND FALSE  !(revert)
[L9016]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12911]  COND FALSE  !(!!paused_Pausable[this])
[L9016]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9017]   COND FALSE  !(revert)
[L9020]               paused_Pausable[this] := true;
[L9021]               assert { :EventEmitted "Pause_Pausable" } true;
[L3130]   RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]               assume !revert && gas >= 0;
[L14813]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
MainToken(697186226852612065377415878656999996930001387170).transfer~address~uint256.gas(3979003)({from : 697186226852612065377415878656999996930001387167, _to : 697186226852612065377415878656999996930001387167, _value : 0});
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MainToken0 := true;
[L2]                 call_transfer_MainToken0 := false;
[L2]                 revert := revert_hold;
[L4827]              havoc __exception;
[L4828]              revert := false;
[L4829]   COND TRUE  __exception
[L4830]              __tmp__Balance := Balance;
[L4831]              __tmp__DType := DType;
[L4832]              __tmp__Alloc := Alloc;
[L4833]              __tmp__balance_ADDR := balance_ADDR;
[L4834]              __tmp__M_Ref_int := M_Ref_int;
[L4835]              __tmp__sum_balances0 := sum_balances0;
[L4836]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4837]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L4838]              __tmp__sum_allowed1 := sum_allowed1;
[L4839]              __tmp__M_int_int := M_int_int;
[L4840]              __tmp__sum_chains2 := sum_chains2;
[L4841]              __tmp__sum_freezings3 := sum_freezings3;
[L4842]              __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4843]              __tmp__M_int_Ref := M_int_Ref;
[L4844]              __tmp__sum := sum;
[L4845]              __tmp__Length := Length;
[L4846]              __tmp__now := now;
[L4847]              __tmp__balances_BasicToken := balances_BasicToken;
[L4848]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4849]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L4850]              __tmp__owner_Ownable := owner_Ownable;
[L4851]              __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4852]              __tmp__chains_FreezableToken := chains_FreezableToken;
[L4853]              __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4854]              __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4855]              __tmp__paused_Pausable := paused_Pausable;
[L4856]              __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4857]              __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4858]              __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4859]              __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4860]              __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4861]              __tmp__PAUSED_Consts := PAUSED_Consts;
[L4862]              __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4863]              __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4864]              __tmp__initialized_MainToken := initialized_MainToken;
[L4865]   CALL       call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9660]   COND TRUE  !!__tmp__paused_Pausable[this]
[L9661]              revert := true;
[L4865]   RET        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4866]              assume revert || gas < 0;
[L14678]  RET        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);

Loop:
MainToken(697186226852612065377415878656999996930001387170).transferFrom~address~address~uint256.gas(3979001)({from : 697186226852612065377415878656999996930001387154, _from : 697186226852612065377415878656999996930001387163, _to : 697186226852612065377415878656999996930001387174, _value : 0});
[L4739]              havoc __exception;
[L4740]              revert := false;
[L4741]   COND TRUE  __exception
[L4742]              __tmp__Balance := Balance;
[L4743]              __tmp__DType := DType;
[L4744]              __tmp__Alloc := Alloc;
[L4745]              __tmp__balance_ADDR := balance_ADDR;
[L4746]              __tmp__M_Ref_int := M_Ref_int;
[L4747]              __tmp__sum_balances0 := sum_balances0;
[L4748]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4749]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L4750]              __tmp__sum_allowed1 := sum_allowed1;
[L4751]              __tmp__M_int_int := M_int_int;
[L4752]              __tmp__sum_chains2 := sum_chains2;
[L4753]              __tmp__sum_freezings3 := sum_freezings3;
[L4754]              __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4755]              __tmp__M_int_Ref := M_int_Ref;
[L4756]              __tmp__sum := sum;
[L4757]              __tmp__Length := Length;
[L4758]              __tmp__now := now;
[L4759]              __tmp__balances_BasicToken := balances_BasicToken;
[L4760]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4761]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L4762]              __tmp__owner_Ownable := owner_Ownable;
[L4763]              __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4764]              __tmp__chains_FreezableToken := chains_FreezableToken;
[L4765]              __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4766]              __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4767]              __tmp__paused_Pausable := paused_Pausable;
[L4768]              __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4769]              __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4770]              __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4771]              __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4772]              __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4773]              __tmp__PAUSED_Consts := PAUSED_Consts;
[L4774]              __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4775]              __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4776]              __tmp__initialized_MainToken := initialized_MainToken;
[L4777]   CALL       call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L9620]   COND TRUE  !!__tmp__paused_Pausable[this]
[L9621]              revert := true;
[L4777]   RET        call _success_s1551 := transferFrom~address~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);
[L4778]              assume revert || gas < 0;
[L14691]  RET        call _success_s1551 := transferFrom~address~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _from_s1551, _to_s1551, _value_s1551);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
