This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 09:25:27,005 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 09:25:27,006 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 09:25:27,013 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 09:25:27,013 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 09:25:27,013 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 09:25:27,014 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 09:25:27,015 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 09:25:27,016 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 09:25:27,017 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 09:25:27,017 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 09:25:27,017 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 09:25:27,018 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 09:25:27,018 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 09:25:27,019 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 09:25:27,020 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 09:25:27,020 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 09:25:27,021 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 09:25:27,022 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 09:25:27,023 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 09:25:27,023 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 09:25:27,024 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 09:25:27,026 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 09:25:27,026 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 09:25:27,026 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 09:25:27,026 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 09:25:27,027 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 09:25:27,027 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 09:25:27,027 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 09:25:27,027 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 09:25:27,028 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 09:25:27,028 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 09:25:27,028 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 09:25:27,029 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 09:25:27,029 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 09:25:27,029 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 09:25:27,030 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 09:25:27,030 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 09:25:27,030 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 09:25:27,031 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 09:25:27,031 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 09:25:27,031 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 09:25:27,036 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 09:25:27,037 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 09:25:27,037 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 09:25:27,037 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 09:25:27,037 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 09:25:27,037 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 09:25:27,037 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 09:25:27,038 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 09:25:27,038 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 09:25:27,038 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 09:25:27,038 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 09:25:27,038 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 09:25:27,038 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 09:25:27,038 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 09:25:27,038 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 09:25:27,038 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 09:25:27,038 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 09:25:27,038 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 09:25:27,038 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 09:25:27,038 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 09:25:27,038 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 09:25:27,039 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 09:25:27,039 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 09:25:27,039 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 09:25:27,039 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 09:25:27,039 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 09:25:27,056 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 09:25:27,068 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 09:25:27,071 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 09:25:27,072 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 09:25:27,072 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 09:25:27,073 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transfer-self.bpl
[2020-11-25 09:25:27,073 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transfer-self.bpl'
[2020-11-25 09:25:27,150 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 09:25:27,151 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 09:25:27,152 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 09:25:27,152 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 09:25:27,152 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 09:25:27,163 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:25:27" (1/1) ...
[2020-11-25 09:25:27,164 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:25:27" (1/1) ...
[2020-11-25 09:25:27,192 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:25:27" (1/1) ...
[2020-11-25 09:25:27,193 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:25:27" (1/1) ...
[2020-11-25 09:25:27,216 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:25:27" (1/1) ...
[2020-11-25 09:25:27,227 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:25:27" (1/1) ...
[2020-11-25 09:25:27,234 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:25:27" (1/1) ...
[2020-11-25 09:25:27,244 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 09:25:27,244 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 09:25:27,244 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 09:25:27,246 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 09:25:27,250 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:25:27" (1/1) ...
[2020-11-25 09:25:27,264 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(BasicToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && name_XNC[this] == old(name_XNC[this]) && symbol_XNC[this] == old(symbol_XNC[this]) && decimals_XNC[this] == old(decimals_XNC[this]) && cap_CappedToken[this] == old(cap_CappedToken[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 09:25:27,270 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(BasicToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && name_XNC[this] == old(name_XNC[this]) && symbol_XNC[this] == old(symbol_XNC[this]) && decimals_XNC[this] == old(decimals_XNC[this]) && cap_CappedToken[this] == old(cap_CappedToken[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 09:25:27,277 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(BasicToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && name_XNC[this] == old(name_XNC[this]) && symbol_XNC[this] == old(symbol_XNC[this]) && decimals_XNC[this] == old(decimals_XNC[this]) && cap_CappedToken[this] == old(cap_CappedToken[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 09:25:27,284 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==_to_s326 && _value_s326<=balances_BasicToken[this][msg.sender] ) && _value_s326>=0 ) && _value_s326<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s326]>=0 ) && balances_BasicToken[this][_to_s326]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][msg.sender]>=0 ) && balances_BasicToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],IdentifierExpression[_to_s326,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s326,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s326,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s326,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[_to_s326,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[_to_s326,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 09:25:27,287 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( __ret_0_==true && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this]==( old(allowed_StandardToken[this]) ) ) && name_XNC[this]==( old(name_XNC[this]) ) ) && symbol_XNC[this]==( old(symbol_XNC[this]) ) ) && decimals_XNC[this]==( old(decimals_XNC[this]) ) ) && cap_CappedToken[this]==( old(cap_CappedToken[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_BasicToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_XNC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_XNC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_XNC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_XNC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_XNC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_XNC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[cap_CappedToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[cap_CappedToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]]]
[2020-11-25 09:25:27,292 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(BasicToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && name_XNC[this] == old(name_XNC[this]) && symbol_XNC[this] == old(symbol_XNC[this]) && decimals_XNC[this] == old(decimals_XNC[this]) && cap_CappedToken[this] == old(cap_CappedToken[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 09:25:27,292 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_BasicToken0) ==> ( <>AP(success_transfer_BasicToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 09:25:27,301 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:25:27 PropertyContainer
[2020-11-25 09:25:27,301 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 09:25:27,301 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 09:25:27,301 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 09:25:27,301 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 09:25:27,302 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:25:27" (1/2) ...
[2020-11-25 09:25:27,302 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 09:25:27,303 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 09:25:27,318 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:25:27" (2/2) ...
[2020-11-25 09:25:27,318 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 09:25:27,319 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 09:25:27,319 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 09:25:27,319 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 09:25:27,319 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:25:27" (1/2) ...
[2020-11-25 09:25:27,355 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 09:25:27,355 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:25:27,355 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 09:25:27,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 09:25:27,355 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 09:25:27,355 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 09:25:27,355 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 09:25:27,355 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 09:25:27,355 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 09:25:27,355 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 09:25:27,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 09:25:27,356 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-25 09:25:27,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-25 09:25:27,356 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 09:25:27,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 09:25:27,356 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 09:25:27,356 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 09:25:27,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 09:25:27,356 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 09:25:27,356 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 09:25:27,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 09:25:27,356 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 09:25:27,356 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 09:25:27,357 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 09:25:27,357 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 09:25:27,357 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 09:25:27,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 09:25:27,357 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 09:25:27,357 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 09:25:27,357 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 09:25:27,357 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 09:25:27,357 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 09:25:27,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 09:25:27,357 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-25 09:25:27,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-25 09:25:27,357 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 09:25:27,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 09:25:27,358 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 09:25:27,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 09:25:27,358 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 09:25:27,358 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 09:25:27,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 09:25:27,358 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 09:25:27,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 09:25:27,358 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 09:25:27,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 09:25:27,358 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 09:25:27,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 09:25:27,358 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 09:25:27,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 09:25:27,358 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 09:25:27,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 09:25:27,359 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 09:25:27,359 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-25 09:25:27,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-25 09:25:27,359 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-25 09:25:27,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-25 09:25:27,359 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-25 09:25:27,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-25 09:25:27,359 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-25 09:25:27,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-25 09:25:27,359 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken_NoBaseCtor__success
[2020-11-25 09:25:27,359 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken
[2020-11-25 09:25:27,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken
[2020-11-25 09:25:27,359 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_CappedToken
[2020-11-25 09:25:27,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_CappedToken
[2020-11-25 09:25:27,359 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_CappedToken
[2020-11-25 09:25:27,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_CappedToken
[2020-11-25 09:25:27,360 INFO  L130     BoogieDeclarations]: Found specification of procedure XNC_XNC_NoBaseCtor__success
[2020-11-25 09:25:27,360 INFO  L130     BoogieDeclarations]: Found specification of procedure XNC_XNC
[2020-11-25 09:25:27,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure XNC_XNC
[2020-11-25 09:25:27,360 INFO  L130     BoogieDeclarations]: Found specification of procedure name_XNC
[2020-11-25 09:25:27,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_XNC
[2020-11-25 09:25:27,360 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_XNC
[2020-11-25 09:25:27,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_XNC
[2020-11-25 09:25:27,360 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_XNC
[2020-11-25 09:25:27,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_XNC
[2020-11-25 09:25:27,360 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 09:25:27,360 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 09:25:27,360 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 09:25:27,361 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 09:25:27,361 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-25 09:25:27,361 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-25 09:25:27,361 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 09:25:27,361 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 09:25:27,361 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 09:25:27,361 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 09:25:27,361 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 09:25:27,361 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 09:25:27,361 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 09:25:27,361 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 09:25:27,361 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 09:25:27,361 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 09:25:27,361 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 09:25:27,362 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 09:25:27,362 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-25 09:25:27,362 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-25 09:25:27,362 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CappedToken
[2020-11-25 09:25:27,362 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_CappedToken
[2020-11-25 09:25:27,362 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_XNC
[2020-11-25 09:25:27,362 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 09:25:27,362 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 09:25:27,362 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:25:27,362 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 09:25:27,362 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 09:25:27,362 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 09:25:27,362 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 09:25:27,362 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 09:25:27,362 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 09:25:27,363 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 09:25:27,363 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 09:25:27,363 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 09:25:27,363 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-25 09:25:27,363 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-25 09:25:27,363 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 09:25:27,363 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 09:25:27,363 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 09:25:27,363 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 09:25:27,363 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 09:25:27,363 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 09:25:27,363 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 09:25:27,363 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 09:25:27,363 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 09:25:27,363 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 09:25:27,364 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 09:25:27,364 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 09:25:27,364 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 09:25:27,364 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 09:25:27,364 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-25 09:25:27,364 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-25 09:25:27,364 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 09:25:27,364 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 09:25:27,364 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 09:25:27,364 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 09:25:27,364 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 09:25:27,364 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 09:25:27,364 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 09:25:27,364 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 09:25:27,364 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 09:25:27,364 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 09:25:27,364 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 09:25:27,364 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 09:25:27,365 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 09:25:27,365 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 09:25:27,365 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 09:25:27,365 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 09:25:27,365 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 09:25:27,365 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 09:25:27,365 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-25 09:25:27,365 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-25 09:25:27,365 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-25 09:25:27,365 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 09:25:27,365 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-25 09:25:27,365 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-25 09:25:27,365 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-25 09:25:27,365 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-25 09:25:27,365 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken_NoBaseCtor__fail
[2020-11-25 09:25:27,365 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken__success
[2020-11-25 09:25:27,365 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken__fail
[2020-11-25 09:25:27,365 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_CappedToken__success
[2020-11-25 09:25:27,365 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_CappedToken__fail
[2020-11-25 09:25:27,366 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_CappedToken__success
[2020-11-25 09:25:27,366 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_CappedToken__fail
[2020-11-25 09:25:27,366 INFO  L130     BoogieDeclarations]: Found specification of procedure XNC_XNC_NoBaseCtor__fail
[2020-11-25 09:25:27,366 INFO  L130     BoogieDeclarations]: Found specification of procedure XNC_XNC__success
[2020-11-25 09:25:27,366 INFO  L130     BoogieDeclarations]: Found specification of procedure XNC_XNC__fail
[2020-11-25 09:25:27,366 INFO  L130     BoogieDeclarations]: Found specification of procedure name_XNC__success
[2020-11-25 09:25:27,366 INFO  L130     BoogieDeclarations]: Found specification of procedure name_XNC__fail
[2020-11-25 09:25:27,366 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_XNC__success
[2020-11-25 09:25:27,366 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_XNC__fail
[2020-11-25 09:25:27,366 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_XNC__success
[2020-11-25 09:25:27,366 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_XNC__fail
[2020-11-25 09:25:27,366 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 09:25:27,366 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 09:25:27,366 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 09:25:27,366 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 09:25:27,366 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-25 09:25:27,366 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-25 09:25:27,366 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 09:25:27,366 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 09:25:27,366 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:25:27,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:25:27,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 09:25:27,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 09:25:27,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 09:25:27,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 09:25:27,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 09:25:27,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 09:25:27,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 09:25:27,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 09:25:27,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 09:25:27,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 09:25:27,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 09:25:27,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 09:25:27,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 09:25:27,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 09:25:27,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-25 09:25:27,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-25 09:25:27,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 09:25:27,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 09:25:27,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 09:25:27,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 09:25:27,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 09:25:27,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 09:25:27,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 09:25:27,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 09:25:27,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 09:25:27,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 09:25:27,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 09:25:27,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 09:25:27,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 09:25:27,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 09:25:27,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 09:25:27,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 09:25:27,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 09:25:27,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 09:25:27,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-25 09:25:27,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-25 09:25:27,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 09:25:27,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 09:25:27,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 09:25:27,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 09:25:27,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 09:25:27,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 09:25:27,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 09:25:27,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 09:25:27,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 09:25:27,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 09:25:27,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 09:25:27,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 09:25:27,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 09:25:27,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 09:25:27,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 09:25:27,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 09:25:27,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 09:25:27,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 09:25:27,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 09:25:27,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 09:25:27,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-25 09:25:27,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-25 09:25:27,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 09:25:27,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-25 09:25:27,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-25 09:25:27,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-25 09:25:27,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-25 09:25:27,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-25 09:25:27,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken_NoBaseCtor__fail
[2020-11-25 09:25:27,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken_NoBaseCtor__success
[2020-11-25 09:25:27,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken__fail
[2020-11-25 09:25:27,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken__success
[2020-11-25 09:25:27,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_CappedToken__fail
[2020-11-25 09:25:27,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_CappedToken__success
[2020-11-25 09:25:27,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_CappedToken__fail
[2020-11-25 09:25:27,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_CappedToken__success
[2020-11-25 09:25:27,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure XNC_XNC_NoBaseCtor__fail
[2020-11-25 09:25:27,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure XNC_XNC_NoBaseCtor__success
[2020-11-25 09:25:27,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure XNC_XNC__fail
[2020-11-25 09:25:27,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure XNC_XNC__success
[2020-11-25 09:25:27,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_XNC__fail
[2020-11-25 09:25:27,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_XNC__success
[2020-11-25 09:25:27,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_XNC__fail
[2020-11-25 09:25:27,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_XNC__success
[2020-11-25 09:25:27,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_XNC__fail
[2020-11-25 09:25:27,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_XNC__success
[2020-11-25 09:25:27,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 09:25:27,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 09:25:27,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 09:25:27,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 09:25:27,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 09:25:27,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 09:25:27,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 09:25:27,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 09:25:27,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-25 09:25:27,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-25 09:25:27,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-25 09:25:27,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-25 09:25:27,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 09:25:27,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 09:25:27,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 09:25:27,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 09:25:27,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 09:25:27,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 09:25:27,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 09:25:27,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 09:25:27,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 09:25:27,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 09:25:27,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 09:25:27,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 09:25:27,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-25 09:25:27,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-25 09:25:27,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CappedToken
[2020-11-25 09:25:27,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_CappedToken
[2020-11-25 09:25:27,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_XNC
[2020-11-25 09:25:27,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 09:25:27,374 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 09:25:27,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 09:25:27,857 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:25:27,857 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:25:27,857 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:25:28,262 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 09:25:28,262 INFO  L286             CfgBuilder]: Removed 9 assue(true) statements.
[2020-11-25 09:25:28,264 INFO  L202        PluginConnector]: Adding new model XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:25:28 BoogieIcfgContainer
[2020-11-25 09:25:28,265 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:25:27" (2/2) ...
[2020-11-25 09:25:28,265 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 09:25:28,265 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@3eea1659 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:25:28, skipping insertion in model container
[2020-11-25 09:25:28,265 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 09:25:28,265 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 09:25:28,265 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 09:25:28,266 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 09:25:28,267 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:25:27" (1/3) ...
[2020-11-25 09:25:28,267 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@30eb614e and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:25:28, skipping insertion in model container
[2020-11-25 09:25:28,267 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:25:27" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 09:25:28,301 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:25:28 NWAContainer
[2020-11-25 09:25:28,302 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 09:25:28,302 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 09:25:28,302 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 09:25:28,302 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 09:25:28,303 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:25:28" (3/4) ...
[2020-11-25 09:25:28,304 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3a12b035 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:25:28, skipping insertion in model container
[2020-11-25 09:25:28,304 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:25:28" (4/4) ...
[2020-11-25 09:25:28,307 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 09:25:28,312 INFO  L110   BuchiProductObserver]: Initial RCFG 2302 locations, 3215 edges
[2020-11-25 09:25:28,312 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 09:25:28,323 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 09:25:30,324 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 09:25:30,331 INFO  L110   BuchiProductObserver]: BuchiProgram size 5816 locations, 10620 edges
[2020-11-25 09:25:30,332 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:25:30 BoogieIcfgContainer
[2020-11-25 09:25:30,332 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 09:25:30,332 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 09:25:30,332 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 09:25:30,333 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 09:25:30,334 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:25:30" (1/1) ...
[2020-11-25 09:25:30,446 INFO  L313           BlockEncoder]: Initial Icfg 5816 locations, 10620 edges
[2020-11-25 09:25:30,446 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 09:25:30,447 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 09:25:30,447 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 09:25:30,447 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 09:25:30,462 INFO  L70    emoveInfeasibleEdges]: Removed 102 edges and 21 locations because of local infeasibility
[2020-11-25 09:25:30,474 INFO  L70        RemoveSinkStates]: Removed 14 edges and 9 locations by removing sink states
[2020-11-25 09:25:30,486 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 09:25:30,490 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 09:25:30,494 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 09:25:30,494 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 09:25:30,497 INFO  L313           BlockEncoder]: Encoded RCFG 5748 locations, 10448 edges
[2020-11-25 09:25:30,497 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:25:30 BasicIcfg
[2020-11-25 09:25:30,497 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 09:25:30,498 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 09:25:30,498 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 09:25:30,499 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 09:25:30,499 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:25:30,499 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:25:27" (1/6) ...
[2020-11-25 09:25:30,501 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@462cdb0e and model type XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:25:30, skipping insertion in model container
[2020-11-25 09:25:30,501 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:25:30,502 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:25:27" (2/6) ...
[2020-11-25 09:25:30,502 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@462cdb0e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:25:30, skipping insertion in model container
[2020-11-25 09:25:30,502 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:25:30,502 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:25:28" (3/6) ...
[2020-11-25 09:25:30,503 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@462cdb0e and model type XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:25:30, skipping insertion in model container
[2020-11-25 09:25:30,503 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:25:30,503 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:25:28" (4/6) ...
[2020-11-25 09:25:30,503 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@462cdb0e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:25:30, skipping insertion in model container
[2020-11-25 09:25:30,503 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:25:30,503 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:25:30" (5/6) ...
[2020-11-25 09:25:30,503 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@462cdb0e and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 09:25:30, skipping insertion in model container
[2020-11-25 09:25:30,503 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:25:30,504 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:25:30" (6/6) ...
[2020-11-25 09:25:30,504 INFO  L404   chiAutomizerObserver]: Analyzing ICFG XNC_0x8Bb6F9463524af5c248d085D37c91b96D8AAfF80_transfer-self.bpl_BEv2
[2020-11-25 09:25:30,535 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 09:25:30,535 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 09:25:30,535 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 09:25:30,535 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 09:25:30,535 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 09:25:30,535 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 09:25:30,535 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 09:25:30,535 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 09:25:30,535 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 09:25:30,571 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5748 states.
[2020-11-25 09:25:30,623 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:25:30,623 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:25:30,623 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:25:30,631 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:25:30,631 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:25:30,632 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 09:25:30,632 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5748 states.
[2020-11-25 09:25:30,651 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:25:30,651 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:25:30,651 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:25:30,652 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:25:30,652 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND TRUE   revert
[L1557]  RET         call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND TRUE   choice == 18
[L6389]              gas := gas - 21000;
[L6390]  COND FALSE  !(gas >= 0)
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:25:30,665 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:25:30,665 INFO  L82        PathProgramCache]: Analyzing trace with hash 814920720, now seen corresponding path program 1 times
[2020-11-25 09:25:30,669 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:25:30,691 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:25:30,721 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:25:30,722 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:25:30,722 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:25:31,117 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:25:31,126 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:25:31,126 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:25:31,127 INFO  L87              Difference]: Start difference. First operand 5748 states. Second operand 3 states.
[2020-11-25 09:25:31,396 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:25:31,397 INFO  L93              Difference]: Finished difference Result 2946 states and 3369 transitions.
[2020-11-25 09:25:31,397 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:25:31,398 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2946 states and 3369 transitions.
[2020-11-25 09:25:31,420 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:25:31,445 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2946 states to 2942 states and 3361 transitions.
[2020-11-25 09:25:31,446 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 09:25:31,448 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 743
[2020-11-25 09:25:31,448 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2942 states and 3361 transitions.
[2020-11-25 09:25:31,455 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:25:31,455 INFO  L728         BuchiCegarLoop]: Abstraction has 2942 states and 3361 transitions.
[2020-11-25 09:25:31,469 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2942 states and 3361 transitions.
[2020-11-25 09:25:31,512 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2942 to 2942.
[2020-11-25 09:25:31,512 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2942 states.
[2020-11-25 09:25:31,517 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2942 states to 2942 states and 3361 transitions.
[2020-11-25 09:25:31,517 INFO  L751         BuchiCegarLoop]: Abstraction has 2942 states and 3361 transitions.
[2020-11-25 09:25:31,518 INFO  L631         BuchiCegarLoop]: Abstraction has 2942 states and 3361 transitions.
[2020-11-25 09:25:31,518 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 09:25:31,518 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2942 states and 3361 transitions.
[2020-11-25 09:25:31,524 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:25:31,525 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:25:31,525 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:25:31,526 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:25:31,526 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND TRUE   revert
[L1557]  RET         call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_BasicToken[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s326] >= 0) && balances_BasicToken[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L617]               havoc __exception;
[L618]               revert := false;
[L619]   COND FALSE  !(__exception)
[L643]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2933]  COND TRUE   !(_value_s326 <= balances_BasicToken[this][msgsender_MSG])
[L2934]              revert := true;
[L643]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L644]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_XNC[this] == old(name_XNC[this])) && symbol_XNC[this] == old(symbol_XNC[this])) && decimals_XNC[this] == old(decimals_XNC[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L6521]  RET         call CorralChoice_XNC(this);

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_BasicToken[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s326] >= 0) && balances_BasicToken[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L617]               havoc __exception;
[L618]               revert := false;
[L619]   COND FALSE  !(__exception)
[L643]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2933]  COND TRUE   !(_value_s326 <= balances_BasicToken[this][msgsender_MSG])
[L2934]              revert := true;
[L643]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L644]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_XNC[this] == old(name_XNC[this])) && symbol_XNC[this] == old(symbol_XNC[this])) && decimals_XNC[this] == old(decimals_XNC[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:25:31,530 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:25:31,530 INFO  L82        PathProgramCache]: Analyzing trace with hash -1831308948, now seen corresponding path program 1 times
[2020-11-25 09:25:31,531 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:25:31,549 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:25:31,575 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:25:31,575 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:25:31,575 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:25:31,577 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:25:31,577 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:25:31,577 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:25:31,577 INFO  L87              Difference]: Start difference. First operand 2942 states and 3361 transitions. cyclomatic complexity: 421 Second operand 3 states.
[2020-11-25 09:25:31,676 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:25:31,676 INFO  L93              Difference]: Finished difference Result 3658 states and 4137 transitions.
[2020-11-25 09:25:31,676 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:25:31,676 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3658 states and 4137 transitions.
[2020-11-25 09:25:31,694 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:25:31,712 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3658 states to 3658 states and 4137 transitions.
[2020-11-25 09:25:31,712 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 940
[2020-11-25 09:25:31,714 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 940
[2020-11-25 09:25:31,714 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3658 states and 4137 transitions.
[2020-11-25 09:25:31,721 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:25:31,721 INFO  L728         BuchiCegarLoop]: Abstraction has 3658 states and 4137 transitions.
[2020-11-25 09:25:31,724 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3658 states and 4137 transitions.
[2020-11-25 09:25:31,758 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3658 to 3094.
[2020-11-25 09:25:31,758 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3094 states.
[2020-11-25 09:25:31,763 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3094 states to 3094 states and 3443 transitions.
[2020-11-25 09:25:31,763 INFO  L751         BuchiCegarLoop]: Abstraction has 3094 states and 3443 transitions.
[2020-11-25 09:25:31,763 INFO  L631         BuchiCegarLoop]: Abstraction has 3094 states and 3443 transitions.
[2020-11-25 09:25:31,763 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 09:25:31,763 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3094 states and 3443 transitions.
[2020-11-25 09:25:31,771 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:25:31,771 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:25:31,771 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:25:31,777 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:25:31,777 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND TRUE   !(_cap_s704 > 0)
[L3424]              revert := true;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND TRUE   revert
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND TRUE   revert
[L1557]  RET         call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_BasicToken[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s326] >= 0) && balances_BasicToken[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L617]               havoc __exception;
[L618]               revert := false;
[L619]   COND FALSE  !(__exception)
[L643]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2933]  COND TRUE   !(_value_s326 <= balances_BasicToken[this][msgsender_MSG])
[L2934]              revert := true;
[L643]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L644]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_XNC[this] == old(name_XNC[this])) && symbol_XNC[this] == old(symbol_XNC[this])) && decimals_XNC[this] == old(decimals_XNC[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L6521]  RET         call CorralChoice_XNC(this);

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_BasicToken[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s326] >= 0) && balances_BasicToken[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L617]               havoc __exception;
[L618]               revert := false;
[L619]   COND FALSE  !(__exception)
[L643]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2933]  COND TRUE   !(_value_s326 <= balances_BasicToken[this][msgsender_MSG])
[L2934]              revert := true;
[L643]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L644]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_XNC[this] == old(name_XNC[this])) && symbol_XNC[this] == old(symbol_XNC[this])) && decimals_XNC[this] == old(decimals_XNC[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:25:31,788 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:25:31,788 INFO  L82        PathProgramCache]: Analyzing trace with hash -483712279, now seen corresponding path program 1 times
[2020-11-25 09:25:31,789 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:25:31,821 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:25:32,071 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3875 trivial. 0 not checked.
[2020-11-25 09:25:32,071 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:25:32,072 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:25:32,072 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:25:32,073 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:25:32,073 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:25:32,073 INFO  L87              Difference]: Start difference. First operand 3094 states and 3443 transitions. cyclomatic complexity: 351 Second operand 3 states.
[2020-11-25 09:25:32,136 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:25:32,137 INFO  L93              Difference]: Finished difference Result 3658 states and 4071 transitions.
[2020-11-25 09:25:32,137 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:25:32,137 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3658 states and 4071 transitions.
[2020-11-25 09:25:32,145 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:25:32,155 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3658 states to 3492 states and 3883 transitions.
[2020-11-25 09:25:32,156 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 887
[2020-11-25 09:25:32,156 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 902
[2020-11-25 09:25:32,156 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3492 states and 3883 transitions.
[2020-11-25 09:25:32,159 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:25:32,159 INFO  L728         BuchiCegarLoop]: Abstraction has 3492 states and 3883 transitions.
[2020-11-25 09:25:32,162 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3492 states and 3883 transitions.
[2020-11-25 09:25:32,183 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3492 to 2988.
[2020-11-25 09:25:32,183 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2988 states.
[2020-11-25 09:25:32,186 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2988 states to 2988 states and 3249 transitions.
[2020-11-25 09:25:32,186 INFO  L751         BuchiCegarLoop]: Abstraction has 2988 states and 3249 transitions.
[2020-11-25 09:25:32,186 INFO  L631         BuchiCegarLoop]: Abstraction has 2988 states and 3249 transitions.
[2020-11-25 09:25:32,187 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 09:25:32,187 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2988 states and 3249 transitions.
[2020-11-25 09:25:32,190 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:25:32,190 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:25:32,190 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:25:32,194 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:25:32,194 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_XNC[this] := 410647391;
[L3583]              symbol_XNC[this] := 1087999494;
[L3584]              decimals_XNC[this] := 18;
[L3654]  RET         call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_BasicToken[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s326] >= 0) && balances_BasicToken[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L617]               havoc __exception;
[L618]               revert := false;
[L619]   COND TRUE   __exception
[L620]               __tmp__Balance := Balance;
[L621]               __tmp__DType := DType;
[L622]               __tmp__Alloc := Alloc;
[L623]               __tmp__balance_ADDR := balance_ADDR;
[L624]               __tmp__M_Ref_int := M_Ref_int;
[L625]               __tmp__sum_balances0 := sum_balances0;
[L626]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L627]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L628]               __tmp__sum_allowed1 := sum_allowed1;
[L629]               __tmp__Length := Length;
[L630]               __tmp__now := now;
[L631]               __tmp__owner_Ownable := owner_Ownable;
[L632]               __tmp__balances_BasicToken := balances_BasicToken;
[L633]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L634]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L635]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L636]               __tmp__cap_CappedToken := cap_CappedToken;
[L637]               __tmp__name_XNC := name_XNC;
[L638]               __tmp__symbol_XNC := symbol_XNC;
[L639]               __tmp__decimals_XNC := decimals_XNC;
[L640]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2901]  COND TRUE   !(_value_s326 <= __tmp__balances_BasicToken[this][msgsender_MSG])
[L2902]              revert := true;
[L640]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L641]               assume revert || gas < 0;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L6521]  RET         call CorralChoice_XNC(this);

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_BasicToken[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s326] >= 0) && balances_BasicToken[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L617]               havoc __exception;
[L618]               revert := false;
[L619]   COND TRUE   __exception
[L620]               __tmp__Balance := Balance;
[L621]               __tmp__DType := DType;
[L622]               __tmp__Alloc := Alloc;
[L623]               __tmp__balance_ADDR := balance_ADDR;
[L624]               __tmp__M_Ref_int := M_Ref_int;
[L625]               __tmp__sum_balances0 := sum_balances0;
[L626]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L627]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L628]               __tmp__sum_allowed1 := sum_allowed1;
[L629]               __tmp__Length := Length;
[L630]               __tmp__now := now;
[L631]               __tmp__owner_Ownable := owner_Ownable;
[L632]               __tmp__balances_BasicToken := balances_BasicToken;
[L633]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L634]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L635]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L636]               __tmp__cap_CappedToken := cap_CappedToken;
[L637]               __tmp__name_XNC := name_XNC;
[L638]               __tmp__symbol_XNC := symbol_XNC;
[L639]               __tmp__decimals_XNC := decimals_XNC;
[L640]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2901]  COND TRUE   !(_value_s326 <= __tmp__balances_BasicToken[this][msgsender_MSG])
[L2902]              revert := true;
[L640]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L641]               assume revert || gas < 0;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:25:32,200 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:25:32,200 INFO  L82        PathProgramCache]: Analyzing trace with hash 287271419, now seen corresponding path program 1 times
[2020-11-25 09:25:32,201 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:25:32,225 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:25:32,473 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3875 trivial. 0 not checked.
[2020-11-25 09:25:32,473 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:25:32,473 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 09:25:32,474 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:25:32,474 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 09:25:32,474 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 09:25:32,474 INFO  L87              Difference]: Start difference. First operand 2988 states and 3249 transitions. cyclomatic complexity: 263 Second operand 6 states.
[2020-11-25 09:25:33,195 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:25:33,195 INFO  L93              Difference]: Finished difference Result 3192 states and 3470 transitions.
[2020-11-25 09:25:33,195 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 09:25:33,195 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3192 states and 3470 transitions.
[2020-11-25 09:25:33,205 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:25:33,216 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3192 states to 3192 states and 3470 transitions.
[2020-11-25 09:25:33,216 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 848
[2020-11-25 09:25:33,217 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 848
[2020-11-25 09:25:33,217 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3192 states and 3470 transitions.
[2020-11-25 09:25:33,219 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:25:33,219 INFO  L728         BuchiCegarLoop]: Abstraction has 3192 states and 3470 transitions.
[2020-11-25 09:25:33,223 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3192 states and 3470 transitions.
[2020-11-25 09:25:33,249 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3192 to 3046.
[2020-11-25 09:25:33,249 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3046 states.
[2020-11-25 09:25:33,253 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3046 states to 3046 states and 3311 transitions.
[2020-11-25 09:25:33,253 INFO  L751         BuchiCegarLoop]: Abstraction has 3046 states and 3311 transitions.
[2020-11-25 09:25:33,253 INFO  L631         BuchiCegarLoop]: Abstraction has 3046 states and 3311 transitions.
[2020-11-25 09:25:33,253 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 09:25:33,254 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3046 states and 3311 transitions.
[2020-11-25 09:25:33,259 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:25:33,259 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:25:33,259 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:25:33,262 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:25:33,262 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_XNC[this] := 410647391;
[L3583]              symbol_XNC[this] := 1087999494;
[L3584]              decimals_XNC[this] := 18;
[L3654]  RET         call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_BasicToken[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s326] >= 0) && balances_BasicToken[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L617]               havoc __exception;
[L618]               revert := false;
[L619]   COND TRUE   __exception
[L620]               __tmp__Balance := Balance;
[L621]               __tmp__DType := DType;
[L622]               __tmp__Alloc := Alloc;
[L623]               __tmp__balance_ADDR := balance_ADDR;
[L624]               __tmp__M_Ref_int := M_Ref_int;
[L625]               __tmp__sum_balances0 := sum_balances0;
[L626]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L627]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L628]               __tmp__sum_allowed1 := sum_allowed1;
[L629]               __tmp__Length := Length;
[L630]               __tmp__now := now;
[L631]               __tmp__owner_Ownable := owner_Ownable;
[L632]               __tmp__balances_BasicToken := balances_BasicToken;
[L633]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L634]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L635]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L636]               __tmp__cap_CappedToken := cap_CappedToken;
[L637]               __tmp__name_XNC := name_XNC;
[L638]               __tmp__symbol_XNC := symbol_XNC;
[L639]               __tmp__decimals_XNC := decimals_XNC;
[L640]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2901]  COND FALSE  !(!(_value_s326 <= __tmp__balances_BasicToken[this][msgsender_MSG]))
[L2905]              __var_3 := null;
[L2906]  COND TRUE   !(_to_s326 != null)
[L2907]              revert := true;
[L640]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L641]               assume revert || gas < 0;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L6521]  RET         call CorralChoice_XNC(this);

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_BasicToken[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s326] >= 0) && balances_BasicToken[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L617]               havoc __exception;
[L618]               revert := false;
[L619]   COND TRUE   __exception
[L620]               __tmp__Balance := Balance;
[L621]               __tmp__DType := DType;
[L622]               __tmp__Alloc := Alloc;
[L623]               __tmp__balance_ADDR := balance_ADDR;
[L624]               __tmp__M_Ref_int := M_Ref_int;
[L625]               __tmp__sum_balances0 := sum_balances0;
[L626]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L627]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L628]               __tmp__sum_allowed1 := sum_allowed1;
[L629]               __tmp__Length := Length;
[L630]               __tmp__now := now;
[L631]               __tmp__owner_Ownable := owner_Ownable;
[L632]               __tmp__balances_BasicToken := balances_BasicToken;
[L633]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L634]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L635]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L636]               __tmp__cap_CappedToken := cap_CappedToken;
[L637]               __tmp__name_XNC := name_XNC;
[L638]               __tmp__symbol_XNC := symbol_XNC;
[L639]               __tmp__decimals_XNC := decimals_XNC;
[L640]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2901]  COND FALSE  !(!(_value_s326 <= __tmp__balances_BasicToken[this][msgsender_MSG]))
[L2905]              __var_3 := null;
[L2906]  COND TRUE   !(_to_s326 != null)
[L2907]              revert := true;
[L640]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L641]               assume revert || gas < 0;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:25:33,270 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:25:33,270 INFO  L82        PathProgramCache]: Analyzing trace with hash 1548020737, now seen corresponding path program 1 times
[2020-11-25 09:25:33,271 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:25:33,298 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:25:33,554 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3875 trivial. 0 not checked.
[2020-11-25 09:25:33,555 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:25:33,555 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 09:25:33,555 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:25:33,555 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 09:25:33,555 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 09:25:33,556 INFO  L87              Difference]: Start difference. First operand 3046 states and 3311 transitions. cyclomatic complexity: 267 Second operand 6 states.
[2020-11-25 09:25:33,594 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:25:33,594 INFO  L93              Difference]: Finished difference Result 3080 states and 3348 transitions.
[2020-11-25 09:25:33,594 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 09:25:33,594 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3080 states and 3348 transitions.
[2020-11-25 09:25:33,600 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:25:33,606 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3080 states to 3072 states and 3340 transitions.
[2020-11-25 09:25:33,607 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 790
[2020-11-25 09:25:33,607 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 790
[2020-11-25 09:25:33,607 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3072 states and 3340 transitions.
[2020-11-25 09:25:33,609 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:25:33,609 INFO  L728         BuchiCegarLoop]: Abstraction has 3072 states and 3340 transitions.
[2020-11-25 09:25:33,611 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3072 states and 3340 transitions.
[2020-11-25 09:25:33,629 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3072 to 3053.
[2020-11-25 09:25:33,629 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3053 states.
[2020-11-25 09:25:33,631 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3053 states to 3053 states and 3319 transitions.
[2020-11-25 09:25:33,631 INFO  L751         BuchiCegarLoop]: Abstraction has 3053 states and 3319 transitions.
[2020-11-25 09:25:33,632 INFO  L631         BuchiCegarLoop]: Abstraction has 3053 states and 3319 transitions.
[2020-11-25 09:25:33,632 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 09:25:33,632 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3053 states and 3319 transitions.
[2020-11-25 09:25:33,635 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:25:33,635 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:25:33,635 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:25:33,637 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:25:33,637 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_XNC[this] := 410647391;
[L3583]              symbol_XNC[this] := 1087999494;
[L3584]              decimals_XNC[this] := 18;
[L3654]  RET         call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_BasicToken[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s326] >= 0) && balances_BasicToken[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L617]               havoc __exception;
[L618]               revert := false;
[L619]   COND FALSE  !(__exception)
[L643]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2933]  COND FALSE  !(!(_value_s326 <= balances_BasicToken[this][msgsender_MSG]))
[L2937]              __var_3 := null;
[L2938]  COND FALSE  !(!(_to_s326 != null))
[L2942]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2942]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2943]  COND FALSE  !(revert)
[L2946]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2947]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2948]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2949]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s326], _value_s326);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2949]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s326], _value_s326);
[L2950]  COND FALSE  !(revert)
[L2953]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s326];
[L2954]              balances_BasicToken[this][_to_s326] := __var_5;
[L2955]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s326];
[L2956]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2957]              __ret_0_ := true;
[L643]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L644]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_XNC[this] == old(name_XNC[this])) && symbol_XNC[this] == old(symbol_XNC[this])) && decimals_XNC[this] == old(decimals_XNC[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L6521]  RET         call CorralChoice_XNC(this);

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_BasicToken[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s326] >= 0) && balances_BasicToken[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L617]               havoc __exception;
[L618]               revert := false;
[L619]   COND FALSE  !(__exception)
[L643]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2933]  COND FALSE  !(!(_value_s326 <= balances_BasicToken[this][msgsender_MSG]))
[L2937]              __var_3 := null;
[L2938]  COND FALSE  !(!(_to_s326 != null))
[L2942]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2942]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2943]  COND FALSE  !(revert)
[L2946]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2947]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2948]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2949]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s326], _value_s326);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2949]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s326], _value_s326);
[L2950]  COND FALSE  !(revert)
[L2953]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s326];
[L2954]              balances_BasicToken[this][_to_s326] := __var_5;
[L2955]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s326];
[L2956]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2957]              __ret_0_ := true;
[L643]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L644]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_XNC[this] == old(name_XNC[this])) && symbol_XNC[this] == old(symbol_XNC[this])) && decimals_XNC[this] == old(decimals_XNC[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:25:33,644 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:25:33,644 INFO  L82        PathProgramCache]: Analyzing trace with hash 1576625374, now seen corresponding path program 1 times
[2020-11-25 09:25:33,645 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:25:33,685 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:25:34,579 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 87 proven. 0 refuted. 0 times theorem prover too weak. 3788 trivial. 0 not checked.
[2020-11-25 09:25:34,579 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:25:34,579 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [23] imperfect sequences [] total 23
[2020-11-25 09:25:34,580 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:25:34,580 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-25 09:25:34,581 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=53, Invalid=499, Unknown=0, NotChecked=0, Total=552
[2020-11-25 09:25:34,581 INFO  L87              Difference]: Start difference. First operand 3053 states and 3319 transitions. cyclomatic complexity: 268 Second operand 24 states.
[2020-11-25 09:25:39,203 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:25:39,203 INFO  L93              Difference]: Finished difference Result 3131 states and 3422 transitions.
[2020-11-25 09:25:39,203 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 09:25:39,204 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3131 states and 3422 transitions.
[2020-11-25 09:25:39,209 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:25:39,218 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3131 states to 3131 states and 3422 transitions.
[2020-11-25 09:25:39,218 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 808
[2020-11-25 09:25:39,218 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 808
[2020-11-25 09:25:39,218 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3131 states and 3422 transitions.
[2020-11-25 09:25:39,221 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:25:39,221 INFO  L728         BuchiCegarLoop]: Abstraction has 3131 states and 3422 transitions.
[2020-11-25 09:25:39,223 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3131 states and 3422 transitions.
[2020-11-25 09:25:39,240 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3131 to 3116.
[2020-11-25 09:25:39,240 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3116 states.
[2020-11-25 09:25:39,243 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3116 states to 3116 states and 3391 transitions.
[2020-11-25 09:25:39,243 INFO  L751         BuchiCegarLoop]: Abstraction has 3116 states and 3391 transitions.
[2020-11-25 09:25:39,243 INFO  L631         BuchiCegarLoop]: Abstraction has 3116 states and 3391 transitions.
[2020-11-25 09:25:39,243 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 09:25:39,243 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3116 states and 3391 transitions.
[2020-11-25 09:25:39,246 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:25:39,246 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:25:39,246 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:25:39,248 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:25:39,248 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_XNC[this] := 410647391;
[L3583]              symbol_XNC[this] := 1087999494;
[L3584]              decimals_XNC[this] := 18;
[L3654]  RET         call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_BasicToken[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s326] >= 0) && balances_BasicToken[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L617]               havoc __exception;
[L618]               revert := false;
[L619]   COND TRUE   __exception
[L620]               __tmp__Balance := Balance;
[L621]               __tmp__DType := DType;
[L622]               __tmp__Alloc := Alloc;
[L623]               __tmp__balance_ADDR := balance_ADDR;
[L624]               __tmp__M_Ref_int := M_Ref_int;
[L625]               __tmp__sum_balances0 := sum_balances0;
[L626]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L627]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L628]               __tmp__sum_allowed1 := sum_allowed1;
[L629]               __tmp__Length := Length;
[L630]               __tmp__now := now;
[L631]               __tmp__owner_Ownable := owner_Ownable;
[L632]               __tmp__balances_BasicToken := balances_BasicToken;
[L633]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L634]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L635]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L636]               __tmp__cap_CappedToken := cap_CappedToken;
[L637]               __tmp__name_XNC := name_XNC;
[L638]               __tmp__symbol_XNC := symbol_XNC;
[L639]               __tmp__decimals_XNC := decimals_XNC;
[L640]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2901]  COND FALSE  !(!(_value_s326 <= __tmp__balances_BasicToken[this][msgsender_MSG]))
[L2905]              __var_3 := null;
[L2906]  COND FALSE  !(!(_to_s326 != null))
[L2910]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2584]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2910]  RET         call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2911]  COND FALSE  !(revert)
[L2914]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][msgsender_MSG];
[L2915]              __tmp__balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2916]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][msgsender_MSG];
[L2917]  CALL        call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s326], _value_s326);
[L2597]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2598]              c_s92 := c_s92;
[L2917]  RET         call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s326], _value_s326);
[L2918]  COND FALSE  !(revert)
[L2921]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][_to_s326];
[L2922]              __tmp__balances_BasicToken[this][_to_s326] := __var_5;
[L2923]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][_to_s326];
[L2924]              __ret_0_ := true;
[L640]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L641]               assume revert || gas < 0;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L6521]  RET         call CorralChoice_XNC(this);

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_BasicToken[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s326] >= 0) && balances_BasicToken[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L617]               havoc __exception;
[L618]               revert := false;
[L619]   COND TRUE   __exception
[L620]               __tmp__Balance := Balance;
[L621]               __tmp__DType := DType;
[L622]               __tmp__Alloc := Alloc;
[L623]               __tmp__balance_ADDR := balance_ADDR;
[L624]               __tmp__M_Ref_int := M_Ref_int;
[L625]               __tmp__sum_balances0 := sum_balances0;
[L626]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L627]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L628]               __tmp__sum_allowed1 := sum_allowed1;
[L629]               __tmp__Length := Length;
[L630]               __tmp__now := now;
[L631]               __tmp__owner_Ownable := owner_Ownable;
[L632]               __tmp__balances_BasicToken := balances_BasicToken;
[L633]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L634]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L635]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L636]               __tmp__cap_CappedToken := cap_CappedToken;
[L637]               __tmp__name_XNC := name_XNC;
[L638]               __tmp__symbol_XNC := symbol_XNC;
[L639]               __tmp__decimals_XNC := decimals_XNC;
[L640]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2901]  COND FALSE  !(!(_value_s326 <= __tmp__balances_BasicToken[this][msgsender_MSG]))
[L2905]              __var_3 := null;
[L2906]  COND FALSE  !(!(_to_s326 != null))
[L2910]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2584]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2910]  RET         call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2911]  COND FALSE  !(revert)
[L2914]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][msgsender_MSG];
[L2915]              __tmp__balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2916]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][msgsender_MSG];
[L2917]  CALL        call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s326], _value_s326);
[L2597]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2598]              c_s92 := c_s92;
[L2917]  RET         call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s326], _value_s326);
[L2918]  COND FALSE  !(revert)
[L2921]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][_to_s326];
[L2922]              __tmp__balances_BasicToken[this][_to_s326] := __var_5;
[L2923]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][_to_s326];
[L2924]              __ret_0_ := true;
[L640]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L641]               assume revert || gas < 0;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:25:39,254 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:25:39,254 INFO  L82        PathProgramCache]: Analyzing trace with hash 100109204, now seen corresponding path program 1 times
[2020-11-25 09:25:39,255 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:25:39,273 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:25:39,468 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3875 trivial. 0 not checked.
[2020-11-25 09:25:39,468 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:25:39,468 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 09:25:39,469 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:25:39,469 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 09:25:39,469 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 09:25:39,469 INFO  L87              Difference]: Start difference. First operand 3116 states and 3391 transitions. cyclomatic complexity: 279 Second operand 5 states.
[2020-11-25 09:25:39,810 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:25:39,810 INFO  L93              Difference]: Finished difference Result 3784 states and 4194 transitions.
[2020-11-25 09:25:39,810 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 09:25:39,811 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3784 states and 4194 transitions.
[2020-11-25 09:25:39,818 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 09:25:39,828 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3784 states to 2620 states and 2985 transitions.
[2020-11-25 09:25:39,828 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 562
[2020-11-25 09:25:39,829 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 739
[2020-11-25 09:25:39,829 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2620 states and 2985 transitions.
[2020-11-25 09:25:39,831 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:25:39,831 INFO  L728         BuchiCegarLoop]: Abstraction has 2620 states and 2985 transitions.
[2020-11-25 09:25:39,833 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2620 states and 2985 transitions.
[2020-11-25 09:25:39,844 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2620 to 1981.
[2020-11-25 09:25:39,844 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1981 states.
[2020-11-25 09:25:39,846 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1981 states to 1981 states and 2168 transitions.
[2020-11-25 09:25:39,846 INFO  L751         BuchiCegarLoop]: Abstraction has 1981 states and 2168 transitions.
[2020-11-25 09:25:39,846 INFO  L631         BuchiCegarLoop]: Abstraction has 1981 states and 2168 transitions.
[2020-11-25 09:25:39,846 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 09:25:39,846 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1981 states and 2168 transitions.
[2020-11-25 09:25:39,848 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:25:39,848 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:25:39,848 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:25:39,850 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:25:39,850 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_XNC[this] := 410647391;
[L3583]              symbol_XNC[this] := 1087999494;
[L3584]              decimals_XNC[this] := 18;
[L3654]  RET         call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_BasicToken[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s326] >= 0) && balances_BasicToken[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L617]               havoc __exception;
[L618]               revert := false;
[L619]   COND FALSE  !(__exception)
[L643]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2933]  COND FALSE  !(!(_value_s326 <= balances_BasicToken[this][msgsender_MSG]))
[L2937]              __var_3 := null;
[L2938]  COND FALSE  !(!(_to_s326 != null))
[L2942]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2942]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2943]  COND FALSE  !(revert)
[L2946]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2947]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2948]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2949]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s326], _value_s326);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2949]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s326], _value_s326);
[L2950]  COND FALSE  !(revert)
[L2953]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s326];
[L2954]              balances_BasicToken[this][_to_s326] := __var_5;
[L2955]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s326];
[L2956]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2957]              __ret_0_ := true;
[L643]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L644]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_XNC[this] == old(name_XNC[this])) && symbol_XNC[this] == old(symbol_XNC[this])) && decimals_XNC[this] == old(decimals_XNC[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L6521]  RET         call CorralChoice_XNC(this);
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_BasicToken[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s326] >= 0) && balances_BasicToken[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L617]               havoc __exception;
[L618]               revert := false;
[L619]   COND FALSE  !(__exception)
[L643]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2933]  COND FALSE  !(!(_value_s326 <= balances_BasicToken[this][msgsender_MSG]))
[L2937]              __var_3 := null;
[L2938]  COND FALSE  !(!(_to_s326 != null))
[L2942]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2942]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2943]  COND FALSE  !(revert)
[L2946]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2947]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2948]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2949]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s326], _value_s326);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2949]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s326], _value_s326);
[L2950]  COND FALSE  !(revert)
[L2953]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s326];
[L2954]              balances_BasicToken[this][_to_s326] := __var_5;
[L2955]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s326];
[L2956]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2957]              __ret_0_ := true;
[L643]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L644]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_XNC[this] == old(name_XNC[this])) && symbol_XNC[this] == old(symbol_XNC[this])) && decimals_XNC[this] == old(decimals_XNC[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L6521]  RET         call CorralChoice_XNC(this);

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_BasicToken[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s326] >= 0) && balances_BasicToken[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L617]               havoc __exception;
[L618]               revert := false;
[L619]   COND FALSE  !(__exception)
[L643]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2933]  COND FALSE  !(!(_value_s326 <= balances_BasicToken[this][msgsender_MSG]))
[L2937]              __var_3 := null;
[L2938]  COND FALSE  !(!(_to_s326 != null))
[L2942]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2942]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2943]  COND FALSE  !(revert)
[L2946]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2947]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2948]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2949]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s326], _value_s326);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2949]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s326], _value_s326);
[L2950]  COND FALSE  !(revert)
[L2953]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s326];
[L2954]              balances_BasicToken[this][_to_s326] := __var_5;
[L2955]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s326];
[L2956]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2957]              __ret_0_ := true;
[L643]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L644]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_XNC[this] == old(name_XNC[this])) && symbol_XNC[this] == old(symbol_XNC[this])) && decimals_XNC[this] == old(decimals_XNC[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:25:39,856 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:25:39,856 INFO  L82        PathProgramCache]: Analyzing trace with hash -990851429, now seen corresponding path program 1 times
[2020-11-25 09:25:39,857 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:25:39,909 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:25:40,600 INFO  L134       CoverageAnalysis]: Checked inductivity of 3947 backedges. 88 proven. 71 refuted. 0 times theorem prover too weak. 3788 trivial. 0 not checked.
[2020-11-25 09:25:40,601 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:25:40,601 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 09:25:40,601 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:25:40,601 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 09:25:40,601 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=56, Invalid=544, Unknown=0, NotChecked=0, Total=600
[2020-11-25 09:25:40,602 INFO  L87              Difference]: Start difference. First operand 1981 states and 2168 transitions. cyclomatic complexity: 190 Second operand 25 states.
[2020-11-25 09:25:42,933 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:25:42,933 INFO  L93              Difference]: Finished difference Result 2006 states and 2194 transitions.
[2020-11-25 09:25:42,933 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 09:25:42,934 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2006 states and 2194 transitions.
[2020-11-25 09:25:42,937 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:25:42,940 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2006 states to 2006 states and 2194 transitions.
[2020-11-25 09:25:42,941 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 637
[2020-11-25 09:25:42,941 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 637
[2020-11-25 09:25:42,941 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2006 states and 2194 transitions.
[2020-11-25 09:25:42,942 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:25:42,942 INFO  L728         BuchiCegarLoop]: Abstraction has 2006 states and 2194 transitions.
[2020-11-25 09:25:42,944 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2006 states and 2194 transitions.
[2020-11-25 09:25:42,951 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2006 to 1975.
[2020-11-25 09:25:42,952 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1975 states.
[2020-11-25 09:25:42,953 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1975 states to 1975 states and 2160 transitions.
[2020-11-25 09:25:42,953 INFO  L751         BuchiCegarLoop]: Abstraction has 1975 states and 2160 transitions.
[2020-11-25 09:25:42,953 INFO  L631         BuchiCegarLoop]: Abstraction has 1975 states and 2160 transitions.
[2020-11-25 09:25:42,953 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 09:25:42,953 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1975 states and 2160 transitions.
[2020-11-25 09:25:42,955 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:25:42,955 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:25:42,955 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:25:42,957 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:25:42,957 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_XNC[this] := 410647391;
[L3583]              symbol_XNC[this] := 1087999494;
[L3584]              decimals_XNC[this] := 18;
[L3654]  RET         call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_BasicToken[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s326] >= 0) && balances_BasicToken[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L617]               havoc __exception;
[L618]               revert := false;
[L619]   COND FALSE  !(__exception)
[L643]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2933]  COND FALSE  !(!(_value_s326 <= balances_BasicToken[this][msgsender_MSG]))
[L2937]              __var_3 := null;
[L2938]  COND FALSE  !(!(_to_s326 != null))
[L2942]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2942]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2943]  COND FALSE  !(revert)
[L2946]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2947]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2948]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2949]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s326], _value_s326);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2949]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s326], _value_s326);
[L2950]  COND FALSE  !(revert)
[L2953]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s326];
[L2954]              balances_BasicToken[this][_to_s326] := __var_5;
[L2955]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s326];
[L2956]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2957]              __ret_0_ := true;
[L643]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L644]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_XNC[this] == old(name_XNC[this])) && symbol_XNC[this] == old(symbol_XNC[this])) && decimals_XNC[this] == old(decimals_XNC[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]);
[L2]                 success_transfer_BasicToken0 := true;
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L6521]  RET         call CorralChoice_XNC(this);
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_BasicToken[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s326] >= 0) && balances_BasicToken[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L617]               havoc __exception;
[L618]               revert := false;
[L619]   COND FALSE  !(__exception)
[L643]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2933]  COND FALSE  !(!(_value_s326 <= balances_BasicToken[this][msgsender_MSG]))
[L2937]              __var_3 := null;
[L2938]  COND FALSE  !(!(_to_s326 != null))
[L2942]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2942]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2943]  COND FALSE  !(revert)
[L2946]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2947]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2948]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2949]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s326], _value_s326);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2949]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s326], _value_s326);
[L2950]  COND FALSE  !(revert)
[L2953]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s326];
[L2954]              balances_BasicToken[this][_to_s326] := __var_5;
[L2955]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s326];
[L2956]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2957]              __ret_0_ := true;
[L643]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L644]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_XNC[this] == old(name_XNC[this])) && symbol_XNC[this] == old(symbol_XNC[this])) && decimals_XNC[this] == old(decimals_XNC[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L6521]  RET         call CorralChoice_XNC(this);

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND TRUE   choice == 18
[L6389]              gas := gas - 21000;
[L6390]  COND FALSE  !(gas >= 0)
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:25:42,962 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:25:42,962 INFO  L82        PathProgramCache]: Analyzing trace with hash 357364632, now seen corresponding path program 1 times
[2020-11-25 09:25:42,964 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:25:42,999 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:25:43,654 INFO  L134       CoverageAnalysis]: Checked inductivity of 3947 backedges. 91 proven. 0 refuted. 0 times theorem prover too weak. 3856 trivial. 0 not checked.
[2020-11-25 09:25:43,654 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:25:43,654 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [27] imperfect sequences [] total 27
[2020-11-25 09:25:43,655 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:25:43,655 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 09:25:43,655 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=70, Invalid=686, Unknown=0, NotChecked=0, Total=756
[2020-11-25 09:25:43,656 INFO  L87              Difference]: Start difference. First operand 1975 states and 2160 transitions. cyclomatic complexity: 188 Second operand 28 states.
[2020-11-25 09:25:46,209 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:25:46,209 INFO  L93              Difference]: Finished difference Result 2002 states and 2194 transitions.
[2020-11-25 09:25:46,210 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-25 09:25:46,210 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2002 states and 2194 transitions.
[2020-11-25 09:25:46,213 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:25:46,217 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2002 states to 2002 states and 2194 transitions.
[2020-11-25 09:25:46,217 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 633
[2020-11-25 09:25:46,217 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 633
[2020-11-25 09:25:46,217 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2002 states and 2194 transitions.
[2020-11-25 09:25:46,219 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:25:46,219 INFO  L728         BuchiCegarLoop]: Abstraction has 2002 states and 2194 transitions.
[2020-11-25 09:25:46,220 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2002 states and 2194 transitions.
[2020-11-25 09:25:46,230 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2002 to 1991.
[2020-11-25 09:25:46,230 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1991 states.
[2020-11-25 09:25:46,232 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1991 states to 1991 states and 2183 transitions.
[2020-11-25 09:25:46,232 INFO  L751         BuchiCegarLoop]: Abstraction has 1991 states and 2183 transitions.
[2020-11-25 09:25:46,232 INFO  L631         BuchiCegarLoop]: Abstraction has 1991 states and 2183 transitions.
[2020-11-25 09:25:46,232 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 09:25:46,232 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1991 states and 2183 transitions.
[2020-11-25 09:25:46,234 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:25:46,234 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:25:46,234 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:25:46,236 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:25:46,236 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_XNC[this] := 410647391;
[L3583]              symbol_XNC[this] := 1087999494;
[L3584]              decimals_XNC[this] := 18;
[L3654]  RET         call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND FALSE  !(choice == 13)
[L6425]  COND FALSE  !(choice == 12)
[L6431]  COND TRUE   choice == 11
[L6432]              gas := gas - 21000;
[L6433]  COND TRUE   gas >= 0
[L6434]              assume _value_s435 >= 0 && _value_s435 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6435]              assume msgvalue_MSG == 0;
[L6436]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L800]               havoc __exception;
[L801]               revert := false;
[L802]   COND FALSE  !(__exception)
[L826]   CALL        call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L3083]  COND FALSE  !(!(_value_s435 <= balances_BasicToken[this][_from_s435]))
[L3087]  COND FALSE  !(!(_value_s435 <= allowed_StandardToken[this][_from_s435][msgsender_MSG]))
[L3091]              __var_6 := null;
[L3092]  COND FALSE  !(!(_to_s435 != null))
[L3096]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3096]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s435], _value_s435);
[L3097]  COND FALSE  !(revert)
[L3100]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s435];
[L3101]              balances_BasicToken[this][_from_s435] := __var_7;
[L3102]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s435];
[L3103]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3103]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s435], _value_s435);
[L3104]  COND FALSE  !(revert)
[L3107]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s435];
[L3108]              balances_BasicToken[this][_to_s435] := __var_8;
[L3109]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s435];
[L3110]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3110]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s435][msgsender_MSG], _value_s435);
[L3111]  COND FALSE  !(revert)
[L3114]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] - allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3115]              allowed_StandardToken[this][_from_s435][msgsender_MSG] := __var_9;
[L3116]              sum_allowed1[_from_s435] := sum_allowed1[_from_s435] + allowed_StandardToken[this][_from_s435][msgsender_MSG];
[L3117]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3118]              __ret_0_ := true;
[L826]   RET         call __ret_0_ := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L827]               assume !revert && gas >= 0;
[L6436]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _from_s435, _to_s435, _value_s435);
[L6521]  RET         call CorralChoice_XNC(this);
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_BasicToken[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s326] >= 0) && balances_BasicToken[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L617]               havoc __exception;
[L618]               revert := false;
[L619]   COND FALSE  !(__exception)
[L643]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2933]  COND FALSE  !(!(_value_s326 <= balances_BasicToken[this][msgsender_MSG]))
[L2937]              __var_3 := null;
[L2938]  COND FALSE  !(!(_to_s326 != null))
[L2942]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2942]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2943]  COND FALSE  !(revert)
[L2946]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2947]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2948]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2949]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s326], _value_s326);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2949]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s326], _value_s326);
[L2950]  COND FALSE  !(revert)
[L2953]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s326];
[L2954]              balances_BasicToken[this][_to_s326] := __var_5;
[L2955]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s326];
[L2956]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2957]              __ret_0_ := true;
[L643]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L644]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_XNC[this] == old(name_XNC[this])) && symbol_XNC[this] == old(symbol_XNC[this])) && decimals_XNC[this] == old(decimals_XNC[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L6521]  RET         call CorralChoice_XNC(this);

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND TRUE   choice == 18
[L6389]              gas := gas - 21000;
[L6390]  COND FALSE  !(gas >= 0)
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:25:46,241 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:25:46,241 INFO  L82        PathProgramCache]: Analyzing trace with hash -781209500, now seen corresponding path program 1 times
[2020-11-25 09:25:46,242 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:25:46,306 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:25:48,776 INFO  L134       CoverageAnalysis]: Checked inductivity of 3942 backedges. 96 proven. 66 refuted. 0 times theorem prover too weak. 3780 trivial. 0 not checked.
[2020-11-25 09:25:48,776 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:25:48,776 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [47] total 47
[2020-11-25 09:25:48,777 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:25:48,777 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 48 interpolants.
[2020-11-25 09:25:48,777 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=140, Invalid=2116, Unknown=0, NotChecked=0, Total=2256
[2020-11-25 09:25:48,777 INFO  L87              Difference]: Start difference. First operand 1991 states and 2183 transitions. cyclomatic complexity: 196 Second operand 48 states.
[2020-11-25 09:25:58,934 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:25:58,935 INFO  L93              Difference]: Finished difference Result 2242 states and 2523 transitions.
[2020-11-25 09:25:58,935 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 52 states. 
[2020-11-25 09:25:58,935 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2242 states and 2523 transitions.
[2020-11-25 09:25:58,939 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:25:58,944 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2242 states to 2242 states and 2523 transitions.
[2020-11-25 09:25:58,944 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 721
[2020-11-25 09:25:58,945 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 721
[2020-11-25 09:25:58,945 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2242 states and 2523 transitions.
[2020-11-25 09:25:58,946 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:25:58,946 INFO  L728         BuchiCegarLoop]: Abstraction has 2242 states and 2523 transitions.
[2020-11-25 09:25:58,948 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2242 states and 2523 transitions.
[2020-11-25 09:25:58,959 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2242 to 2221.
[2020-11-25 09:25:58,959 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2221 states.
[2020-11-25 09:25:58,961 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2221 states to 2221 states and 2496 transitions.
[2020-11-25 09:25:58,961 INFO  L751         BuchiCegarLoop]: Abstraction has 2221 states and 2496 transitions.
[2020-11-25 09:25:58,961 INFO  L631         BuchiCegarLoop]: Abstraction has 2221 states and 2496 transitions.
[2020-11-25 09:25:58,961 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 09:25:58,961 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2221 states and 2496 transitions.
[2020-11-25 09:25:58,963 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:25:58,963 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:25:58,963 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:25:58,965 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:25:58,965 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L6511]              assume null == 0;
[L6512]  CALL        call this := FreshRefGenerator__success();
[L2509]              havoc newRef;
[L2510]              assume Alloc[newRef] == false;
[L2511]              Alloc[newRef] := true;
[L2512]              assume newRef != null;
[L6512]  RET         call this := FreshRefGenerator__success();
[L6513]              assume now >= 0;
[L6514]              assume DType[this] == XNC;
[L6515]              assume msgvalue_MSG == 0;
[L6516]              gas := gas - 53000;
[L6517]  CALL        call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1531]              havoc __exception;
[L1532]              revert := false;
[L1533]  COND FALSE  !(__exception)
[L1557]  CALL        call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3626]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3626]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3627]  COND FALSE  !(revert)
[L3630]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3630]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3631]  COND FALSE  !(revert)
[L3634]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3634]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3635]  COND FALSE  !(revert)
[L3638]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3638]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3639]  COND FALSE  !(revert)
[L3642]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3642]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3643]  COND FALSE  !(revert)
[L3646]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3646]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3647]  COND FALSE  !(revert)
[L3650]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3464]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3464]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3465]  COND FALSE  !(revert)
[L3468]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3468]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3469]  COND FALSE  !(revert)
[L3472]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3472]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3473]  COND FALSE  !(revert)
[L3476]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3476]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3477]  COND FALSE  !(revert)
[L3480]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3480]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3481]  COND FALSE  !(revert)
[L3484]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3275]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3275]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  COND FALSE  !(revert)
[L3279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3280]  COND FALSE  !(revert)
[L3283]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3283]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3284]  COND FALSE  !(revert)
[L3287]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3015]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L3015]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  COND FALSE  !(revert)
[L3019]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2828]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2828]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2829]  COND FALSE  !(revert)
[L2832]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2809]              assume msgsender_MSG != null;
[L2810]              Balance[this] := 0;
[L2832]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2833]  COND FALSE  !(revert)
[L3019]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3020]  COND FALSE  !(revert)
[L3023]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2874]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2792]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2792]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  COND FALSE  !(revert)
[L2874]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2875]  COND FALSE  !(revert)
[L2878]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2852]              assume msgsender_MSG != null;
[L2853]              Balance[this] := 0;
[L2854]              balances_BasicToken[this] := zeroRefintArr();
[L2855]              sum_balances0[this] := 0;
[L2856]              totalSupply__BasicToken[this] := 0;
[L2878]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2879]  COND FALSE  !(revert)
[L3023]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3024]  COND FALSE  !(revert)
[L3027]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2986]              assume msgsender_MSG != null;
[L2987]              Balance[this] := 0;
[L2988]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2989]              sum_allowed1[this] := 0;
[L3027]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3287]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3288]  COND FALSE  !(revert)
[L3291]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2640]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2623]              assume msgsender_MSG != null;
[L2624]              Balance[this] := 0;
[L2625]              owner_Ownable[this] := null;
[L2627]              owner_Ownable[this] := msgsender_MSG;
[L2640]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  COND FALSE  !(revert)
[L3291]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3292]  COND FALSE  !(revert)
[L3295]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3239]              assume msgsender_MSG != null;
[L3240]              Balance[this] := 0;
[L3241]              mintingFinished_MintableToken[this] := false;
[L3295]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  COND FALSE  !(revert)
[L3484]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3485]  COND FALSE  !(revert)
[L3488]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3419]              assume msgsender_MSG != null;
[L3420]              Balance[this] := 0;
[L3421]              cap_CappedToken[this] := 0;
[L3423]  COND FALSE  !(!(_cap_s704 > 0))
[L3427]              cap_CappedToken[this] := _cap_s704;
[L3488]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3489]  COND FALSE  !(revert)
[L3650]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3651]  COND FALSE  !(revert)
[L3654]  CALL        call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3580]              assume msgsender_MSG != null;
[L3581]              Balance[this] := 0;
[L3582]              name_XNC[this] := 410647391;
[L3583]              symbol_XNC[this] := 1087999494;
[L3584]              decimals_XNC[this] := 18;
[L3654]  RET         call XNC_XNC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3655]  COND FALSE  !(revert)
[L1557]  RET         call XNC_XNC__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1558]              assume !revert && gas >= 0;
[L6517]  RET         call XNC_XNC(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6518]              assume !revert && gas >= 0;
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND FALSE  !(choice == 13)
[L6425]  COND FALSE  !(choice == 12)
[L6431]  COND FALSE  !(choice == 11)
[L6438]  COND FALSE  !(choice == 10)
[L6445]  COND FALSE  !(choice == 9)
[L6452]  COND FALSE  !(choice == 8)
[L6459]  COND FALSE  !(choice == 7)
[L6465]  COND TRUE   choice == 6
[L6466]              gas := gas - 21000;
[L6467]  COND TRUE   gas >= 0
[L6468]              assume _amount_s729 >= 0 && _amount_s729 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6469]              assume msgvalue_MSG == 0;
[L6470]  CALL        call __ret_0_mint := mint~address~uint256_CappedToken(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L1399]              havoc __exception;
[L1400]              revert := false;
[L1401]  COND FALSE  !(__exception)
[L1425]  CALL        call __ret_0_ := mint~address~uint256_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L3529]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s729);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3529]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s729);
[L3530]  COND FALSE  !(revert)
[L3533]  COND FALSE  !(!(__var_14 <= cap_CappedToken[this]))
[L3537]  COND TRUE   DType[this] == XNC
[L3538]  CALL        call __var_15 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L3333]  CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3333]  RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3334]  COND FALSE  !(revert)
[L3337]  CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5328]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L3337]  RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3338]  COND FALSE  !(revert)
[L3341]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3341]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L3342]  COND FALSE  !(revert)
[L3345]              totalSupply__BasicToken[this] := __var_12;
[L3346]  CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L3346]  RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L3347]  COND FALSE  !(revert)
[L3350]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L3351]              balances_BasicToken[this][_to_s664] := __var_13;
[L3352]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L3353]              assert { :EventEmitted "Mint_MintableToken" } true;
[L3354]              assert { :EventEmitted "Transfer_MintableToken" } true;
[L3355]              __ret_0_ := true;
[L3538]  RET         call __var_15 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L3539]  COND FALSE  !(revert)
[L3550]              __ret_0_ := __var_15;
[L1425]  RET         call __ret_0_ := mint~address~uint256_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L1426]              assume !revert && gas >= 0;
[L6470]  RET         call __ret_0_mint := mint~address~uint256_CappedToken(this, msgsender_MSG, msgvalue_MSG, _to_s729, _amount_s729);
[L6521]  RET         call CorralChoice_XNC(this);
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND FALSE  !(choice == 18)
[L6394]  COND FALSE  !(choice == 17)
[L6400]  COND FALSE  !(choice == 16)
[L6406]  COND FALSE  !(choice == 15)
[L6412]  COND FALSE  !(choice == 14)
[L6418]  COND TRUE   choice == 13
[L6419]              gas := gas - 21000;
[L6420]  COND TRUE   gas >= 0
[L6421]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6422]              assume msgvalue_MSG == 0;
[L6423]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_BasicToken[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s326] >= 0) && balances_BasicToken[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L617]               havoc __exception;
[L618]               revert := false;
[L619]   COND FALSE  !(__exception)
[L643]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2933]  COND FALSE  !(!(_value_s326 <= balances_BasicToken[this][msgsender_MSG]))
[L2937]              __var_3 := null;
[L2938]  COND FALSE  !(!(_to_s326 != null))
[L2942]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2590]              assert _b_s68 <= _a_s68;
[L2591]              __ret_0_ := (_a_s68 - _b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2942]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s326);
[L2943]  COND FALSE  !(revert)
[L2946]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2947]              balances_BasicToken[this][msgsender_MSG] := __var_4;
[L2948]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2949]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s326], _value_s326);
[L2604]              c_s92 := (_a_s92 + _b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2605]              assert c_s92 >= _a_s92;
[L2606]              c_s92 := c_s92;
[L2949]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s326], _value_s326);
[L2950]  COND FALSE  !(revert)
[L2953]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s326];
[L2954]              balances_BasicToken[this][_to_s326] := __var_5;
[L2955]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s326];
[L2956]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2957]              __ret_0_ := true;
[L643]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L644]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && name_XNC[this] == old(name_XNC[this])) && symbol_XNC[this] == old(symbol_XNC[this])) && decimals_XNC[this] == old(decimals_XNC[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L6423]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L6521]  RET         call CorralChoice_XNC(this);

Loop:
[L6521]  CALL        call CorralChoice_XNC(this);
[L6333]              havoc msgsender_MSG;
[L6334]              havoc msgvalue_MSG;
[L6335]              havoc choice;
[L6336]              havoc __ret_0_owner;
[L6337]              havoc _newOwner_s153;
[L6338]              havoc __ret_0_totalSupply;
[L6339]              havoc _owner_s338;
[L6340]              havoc __ret_0_balanceOf;
[L6341]              havoc _to_s326;
[L6342]              havoc _value_s326;
[L6343]              havoc __ret_0_transfer;
[L6344]              havoc _owner_s479;
[L6345]              havoc _spender_s479;
[L6346]              havoc __ret_0_allowance;
[L6347]              havoc _from_s435;
[L6348]              havoc _to_s435;
[L6349]              havoc _value_s435;
[L6350]              havoc __ret_0_transferFrom;
[L6351]              havoc _spender_s463;
[L6352]              havoc _value_s463;
[L6353]              havoc __ret_0_approve;
[L6354]              havoc _spender_s521;
[L6355]              havoc _addedValue_s521;
[L6356]              havoc __ret_0_increaseApproval;
[L6357]              havoc _spender_s581;
[L6358]              havoc _subtractedValue_s581;
[L6359]              havoc __ret_0_decreaseApproval;
[L6360]              havoc __ret_0_mintingFinished;
[L6361]              havoc _to_s729;
[L6362]              havoc _amount_s729;
[L6363]              havoc __ret_0_mint;
[L6364]              havoc __ret_0_finishMinting;
[L6365]              havoc __ret_0_cap;
[L6366]              havoc _cap_s704;
[L6367]              havoc __ret_0_name;
[L6368]              havoc __ret_0_symbol;
[L6369]              havoc __ret_0_decimals;
[L6370]              havoc _cap_s750;
[L6371]              havoc tmpNow;
[L6372]              havoc gas;
[L6373]              assume gas > 4000000 && gas <= 8000000;
[L6374]              tmpNow := now;
[L6375]              havoc now;
[L6376]              assume now > tmpNow;
[L6377]              assume msgsender_MSG != null;
[L6378]              assume DType[msgsender_MSG] != SafeMath;
[L6379]              assume DType[msgsender_MSG] != Ownable;
[L6380]              assume DType[msgsender_MSG] != ERC20Basic;
[L6381]              assume DType[msgsender_MSG] != ERC20;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != StandardToken;
[L6384]              assume DType[msgsender_MSG] != MintableToken;
[L6385]              assume DType[msgsender_MSG] != CappedToken;
[L6386]              assume DType[msgsender_MSG] != XNC;
[L6387]              Alloc[msgsender_MSG] := true;
[L6388]  COND TRUE   choice == 18
[L6389]              gas := gas - 21000;
[L6390]  COND FALSE  !(gas >= 0)
[L6521]  RET         call CorralChoice_XNC(this);

[2020-11-25 09:25:58,970 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:25:58,970 INFO  L82        PathProgramCache]: Analyzing trace with hash -74919353, now seen corresponding path program 1 times
[2020-11-25 09:25:58,970 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:25:59,013 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:25:59,719 INFO  L134       CoverageAnalysis]: Checked inductivity of 3953 backedges. 95 proven. 63 refuted. 0 times theorem prover too weak. 3795 trivial. 0 not checked.
[2020-11-25 09:25:59,720 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:25:59,720 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 09:25:59,720 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:25:59,720 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 09:25:59,721 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=66, Invalid=584, Unknown=0, NotChecked=0, Total=650
[2020-11-25 09:25:59,721 INFO  L87              Difference]: Start difference. First operand 2221 states and 2496 transitions. cyclomatic complexity: 283 Second operand 26 states.
[2020-11-25 09:26:01,874 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:26:01,874 INFO  L93              Difference]: Finished difference Result 1210 states and 1344 transitions.
[2020-11-25 09:26:01,874 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 09:26:01,874 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1210 states and 1344 transitions.
[2020-11-25 09:26:01,877 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:26:01,877 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1210 states to 0 states and 0 transitions.
[2020-11-25 09:26:01,877 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 09:26:01,877 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 09:26:01,877 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 09:26:01,877 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:26:01,877 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:26:01,877 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:26:01,877 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:26:01,877 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 09:26:01,877 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 09:26:01,877 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:26:01,877 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 09:26:01,880 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:26:01 BasicIcfg
[2020-11-25 09:26:01,880 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 09:26:01,880 INFO  L168              Benchmark]: Toolchain (without parser) took 34729.38 ms. Allocated memory was 1.0 GB in the beginning and 2.9 GB in the end (delta: 1.9 GB). Free memory was 935.2 MB in the beginning and 1.4 GB in the end (delta: -433.5 MB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
[2020-11-25 09:26:01,881 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.19 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:26:01,881 INFO  L168              Benchmark]: Boogie Preprocessor took 92.32 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 09:26:01,881 INFO  L168              Benchmark]: UtopiaSpecLang took 56.83 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 09:26:01,882 INFO  L168              Benchmark]: Boogie Printer took 17.34 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.2 MB in the end (delta: 5.6 MB). Peak memory consumption was 5.6 MB. Max. memory is 15.3 GB.
[2020-11-25 09:26:01,882 INFO  L168              Benchmark]: RCFGBuilder took 946.26 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.9 MB). Free memory was 908.2 MB in the beginning and 1.0 GB in the end (delta: -95.2 MB). Peak memory consumption was 195.7 MB. Max. memory is 15.3 GB.
[2020-11-25 09:26:01,882 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.48 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 996.0 MB in the end (delta: 7.4 MB). Peak memory consumption was 7.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:26:01,883 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2029.90 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 161.5 MB). Free memory was 996.0 MB in the beginning and 884.9 MB in the end (delta: 111.0 MB). Peak memory consumption was 502.2 MB. Max. memory is 15.3 GB.
[2020-11-25 09:26:01,883 INFO  L168              Benchmark]: BlockEncodingV2 took 165.59 ms. Allocated memory is still 1.3 GB. Free memory was 884.9 MB in the beginning and 792.6 MB in the end (delta: 92.3 MB). Peak memory consumption was 92.3 MB. Max. memory is 15.3 GB.
[2020-11-25 09:26:01,884 INFO  L168              Benchmark]: BuchiAutomizer took 31382.30 ms. Allocated memory was 1.3 GB in the beginning and 2.9 GB in the end (delta: 1.7 GB). Free memory was 792.6 MB in the beginning and 1.4 GB in the end (delta: -576.1 MB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
[2020-11-25 09:26:01,886 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5816 locations, 10620 edges
  - StatisticsResult: Encoded RCFG
    5748 locations, 10448 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.19 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 92.32 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 56.83 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 17.34 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.2 MB in the end (delta: 5.6 MB). Peak memory consumption was 5.6 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 946.26 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.9 MB). Free memory was 908.2 MB in the beginning and 1.0 GB in the end (delta: -95.2 MB). Peak memory consumption was 195.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.48 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 996.0 MB in the end (delta: 7.4 MB). Peak memory consumption was 7.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2029.90 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 161.5 MB). Free memory was 996.0 MB in the beginning and 884.9 MB in the end (delta: 111.0 MB). Peak memory consumption was 502.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 165.59 ms. Allocated memory is still 1.3 GB. Free memory was 884.9 MB in the beginning and 792.6 MB in the end (delta: 92.3 MB). Peak memory consumption was 92.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 31382.30 ms. Allocated memory was 1.3 GB in the beginning and 2.9 GB in the end (delta: 1.7 GB). Free memory was 792.6 MB in the beginning and 1.4 GB in the end (delta: -576.1 MB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2302 locations, 3215 edges
  - StatisticsResult: BuchiProgram size
    5816 locations, 10620 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 11 terminating modules (11 trivial, 0 deterministic, 0 nondeterministic). 11 modules have a trivial ranking function, the largest among these consists of 48 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 31.3s and 12 iterations.  TraceHistogramMax:24. Analysis of lassos took 7.2s. Construction of modules took 18.3s. BÃ¼chi inclusion checks took 5.0s. Highest rank in rank-based complementation 0. Minimization of det autom 11. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 10 MinimizatonAttempts, 1950 StatesRemovedByMinimization, 9 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3116 states and ocurred in iteration 6.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 29912 SDtfs, 25401 SDslu, 106064 SDs, 0 SdLazy, 163437 SolverSat, 4994 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 18.3s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU11 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_(success_transfer_BasicToken0)asicToken0) ==> ( <>(success_transfer_BasicToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
